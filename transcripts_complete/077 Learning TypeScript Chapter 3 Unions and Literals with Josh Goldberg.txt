We're live! Yeah, hello, hello beautiful humans. Welcome to another episode of Teach Gen Tech. And today, if you haven't been a part of these streams yet, we are learning TypeScript with Josh Goldberg Yay! Yay! And Josh, who are you? What do you do? What are the things and stuff you've been up to? What is my name? What do I know? Do I know things? Let's find out. I'm Josh. Hello
Yay! Yay! And Josh, who are you? What do you do? What are the things and stuff you've been up to? What is my name? What do I know? Do I know things? Let's find out. I'm Josh. Hello I'm Josh. Hello. I'm an Fultime open source maintainer in the TypeScript ecosystem, which means instead of having a real job like you, I work full time on open source tools. Most of my time is spent on TypeScript ESLINTS
I'm Josh. Hello. I'm an Fultime open source maintainer in the TypeScript ecosystem, which means instead of having a real job like you, I work full time on open source tools. Most of my time is spent on TypeScript ESLINTS The tooling lets you run a lot of standard JavaScript tools and TypeScript code, like ESLINTS and prettier, both great tools. And then I also run a few smaller side projects that I'm trying to get bigger in my spare time
The tooling lets you run a lot of standard JavaScript tools and TypeScript code, like ESLINTS and prettier, both great tools. And then I also run a few smaller side projects that I'm trying to get bigger in my spare time I also just became, by the way, a Microsoft MVP, which I still don't know exactly what that entails. It's for people who share with the community, do stuff like this, which makes me happy. So, yay! Nice! I was going to ask what it means, because I wasn't sure
I also just became, by the way, a Microsoft MVP, which I still don't know exactly what that entails. It's for people who share with the community, do stuff like this, which makes me happy. So, yay! Nice! I was going to ask what it means, because I wasn't sure I just was like, this seems prestigious. Yay! I think it is. It's nice. I like a lot of people who are on VPs. They seem great. So I'm happy to be here. We should ask Microsoft, yo, what's it mean? Come hang out with us
I just was like, this seems prestigious. Yay! I think it is. It's nice. I like a lot of people who are on VPs. They seem great. So I'm happy to be here. We should ask Microsoft, yo, what's it mean? Come hang out with us Now, I will say something that I'm excited about is you mentioned earlier about some of the projects you work on. And for those who are wondering about the difference between Lintine and Formatting, we talked about that on our last stream. Like, we spent a solid while on that
Now, I will say something that I'm excited about is you mentioned earlier about some of the projects you work on. And for those who are wondering about the difference between Lintine and Formatting, we talked about that on our last stream. Like, we spent a solid while on that So, go check it out if you are curious. I can link it eventually. I do need to still put these in our, in a playlist for us. I've been neglecting. Something that you asked about right before we went on stream was, how is the new job? Yeah! I got the latest account. I have a few reps. Thank you
So, go check it out if you are curious. I can link it eventually. I do need to still put these in our, in a playlist for us. I've been neglecting. Something that you asked about right before we went on stream was, how is the new job? Yeah! I got the latest account. I have a few reps. Thank you Thank you. Thank you. I currently now work at Ivan, which is a data infrastructure company. And it's interesting because I thought like nobody specifically said this. But I thought I was going to have to quit streaming. For some reason. I just thought I was going to have to quit streaming
Thank you. Thank you. I currently now work at Ivan, which is a data infrastructure company. And it's interesting because I thought like nobody specifically said this. But I thought I was going to have to quit streaming. For some reason. I just thought I was going to have to quit streaming But I was like, I got a job. I got to quit streaming. And they're like, no, Jen, you got to continue to learn life. That's why we hired you. This isn't me paraphrasing, by the way. But I was like, yes, this is great. Thank you, Bikari. Hello, hello. Yes. So, I will be continuing to learn live
But I was like, I got a job. I got to quit streaming. And they're like, no, Jen, you got to continue to learn life. That's why we hired you. This isn't me paraphrasing, by the way. But I was like, yes, this is great. Thank you, Bikari. Hello, hello. Yes. So, I will be continuing to learn live I will still be. Biggest changes is that there's going to be a lot more structure to teach gentech. Other than, you know, missed Mondays, type on Pipe Strips and working with Distribute Aid on Thursdays, the other two days are basically all going to be about data infrastructure
I will still be. Biggest changes is that there's going to be a lot more structure to teach gentech. Other than, you know, missed Mondays, type on Pipe Strips and working with Distribute Aid on Thursdays, the other two days are basically all going to be about data infrastructure And learning how to make, how to create, post-gress, what is data? Like, that's next week's stream. I'm actually really excited. This week we went over Kafka, which is a database type that does some things and stuff
And learning how to make, how to create, post-gress, what is data? Like, that's next week's stream. I'm actually really excited. This week we went over Kafka, which is a database type that does some things and stuff I say it like that because I'm like, I feel like this is how people feel about TypeScript. Because this is how I felt about TypeScript when I first started learning about it. And using this help. So hopefully, it'll get better. And yeah. And there's a kitty
I say it like that because I'm like, I feel like this is how people feel about TypeScript. Because this is how I felt about TypeScript when I first started learning about it. And using this help. So hopefully, it'll get better. And yeah. And there's a kitty I'm not doing this intentionally if I don't do this, he will cause ruckus. Yeah, Kafka is cool. I'm going to be looking to it. Is there like a TLDR you can share of what Kafka actually is for people like me who know nothing? There will be in the future. Because I don't quite understand it yet
I'm not doing this intentionally if I don't do this, he will cause ruckus. Yeah, Kafka is cool. I'm going to be looking to it. Is there like a TLDR you can share of what Kafka actually is for people like me who know nothing? There will be in the future. Because I don't quite understand it yet Because this is something that I've realized I enjoy yet can be difficult when I'm doing the live streams. Is I do something very, very difficult that I don't get at all, but it helps conceptualize moment term. Just kind of makes it a little tricky if you know you are trying to start from scratch
Because this is something that I've realized I enjoy yet can be difficult when I'm doing the live streams. Is I do something very, very difficult that I don't get at all, but it helps conceptualize moment term. Just kind of makes it a little tricky if you know you are trying to start from scratch And your cat reminded me that y'all, my dog know how the UTI at the moment. So she decides to wake up and has to go. I get to take her out really quick. So hopefully we don't have any of those interruptions. I'll have to be making bad jokes and puns the whole time while you're gone
And your cat reminded me that y'all, my dog know how the UTI at the moment. So she decides to wake up and has to go. I get to take her out really quick. So hopefully we don't have any of those interruptions. I'll have to be making bad jokes and puns the whole time while you're gone You don't want to have that for the stream. You'll lose all your followers. No, I won't. That is why I, and actually this is big reason why I like learning this book with you, A, because you answered my questions, but things are punny. And we have cat purrs in the background
You don't want to have that for the stream. You'll lose all your followers. No, I won't. That is why I, and actually this is big reason why I like learning this book with you, A, because you answered my questions, but things are punny. And we have cat purrs in the background Your occasional growl of frustration. Yes. And updates from last time because we were supposed to have one stream between last time and this time, but I started the new job. So it didn't happen. But Josh's eyes are so much better. They're not red. No more giant bloodshot
Your occasional growl of frustration. Yes. And updates from last time because we were supposed to have one stream between last time and this time, but I started the new job. So it didn't happen. But Josh's eyes are so much better. They're not red. No more giant bloodshot I look like I've been in outer space or something. Death looks great. I can see without glasses. I don't need to constantly squirt. I single use preservative free eye lubricant in there, which is surprisingly refreshing. It's good stuff. Tell them to take for the redness to go away
I look like I've been in outer space or something. Death looks great. I can see without glasses. I don't need to constantly squirt. I single use preservative free eye lubricant in there, which is surprisingly refreshing. It's good stuff. Tell them to take for the redness to go away Look at slowly over two, three, four weeks, really by a month it was like almost completely gone. Interesting. I just haven't had contacts in today. So, but normally I have to have my glasses on. But I still, I don't want to give up my glasses. I like my glasses too much
Look at slowly over two, three, four weeks, really by a month it was like almost completely gone. Interesting. I just haven't had contacts in today. So, but normally I have to have my glasses on. But I still, I don't want to give up my glasses. I like my glasses too much I like my glasses within the spectrum of having glasses, but within the spectrum of not having glasses, this is pretty great. I like waking up and being able to see fully. It's pretty great. Air enough. That is fair. That is fair. Well, on to the TypeScripty things
I like my glasses within the spectrum of having glasses, but within the spectrum of not having glasses, this is pretty great. I like waking up and being able to see fully. It's pretty great. Air enough. That is fair. That is fair. Well, on to the TypeScripty things The TypeScripty of things and things. Really quick, y'all, just so that way I can bring this up and want to go here. Okay, let's move us to the screen. Yay. So, this link will be in our chat here shortly. This is where you can learn more about learning TypeScripts. And you can buy the book
The TypeScripty of things and things. Really quick, y'all, just so that way I can bring this up and want to go here. Okay, let's move us to the screen. Yay. So, this link will be in our chat here shortly. This is where you can learn more about learning TypeScripts. And you can buy the book Get this book. You have multiple choices. Fun way to get the book. I also say this because like as somebody that's scared of really big concepts, I'm scared, but like they make me grumpy and especially when I'm like, gotta learn it and then they'll be really dry and boring
Get this book. You have multiple choices. Fun way to get the book. I also say this because like as somebody that's scared of really big concepts, I'm scared, but like they make me grumpy and especially when I'm like, gotta learn it and then they'll be really dry and boring Josh is funny and puts all of that fun humor and everything into his book and into the assignments in the projects. But something that is starters new or has starters always been there. They've always been there
Josh is funny and puts all of that fun humor and everything into his book and into the assignments in the projects. But something that is starters new or has starters always been there. They've always been there I just haven't changed them since the book came out since no one's asked for any new ones. So I don't know how useful they are to the majority, but I like them. I feel like for some reason today's the first day I noticed them, which maybe I was just super concentrated on the projects
I just haven't changed them since the book came out since no one's asked for any new ones. So I don't know how useful they are to the majority, but I like them. I feel like for some reason today's the first day I noticed them, which maybe I was just super concentrated on the projects But this is, you can also scroll down to get some projects, but this is where you can get the book. I have the book, the book, yay. And the PDF. So I will be using the PDF to share with everyone today. So that way you can tag along and yeah
But this is, you can also scroll down to get some projects, but this is where you can get the book. I have the book, the book, yay. And the PDF. So I will be using the PDF to share with everyone today. So that way you can tag along and yeah All right, so you learned this really cool trick last time. The tilled up. So did I until I was like watching last week's just to make sure I went to the right chapter. And I was like, oh yeah, that was a really cool trick. Although I can't use my mouse anywhere else. That's the only annoying part
All right, so you learned this really cool trick last time. The tilled up. So did I until I was like watching last week's just to make sure I went to the right chapter. And I was like, oh yeah, that was a really cool trick. Although I can't use my mouse anywhere else. That's the only annoying part But nothing is constant. Values me change over time. Well, except constants. Yeah. And today we are literally talking about unions. What a pop of smurf. The tilled up. Is that what we decided it was called? The thing next to the one. Now I'm trying to find it. Yeah, that's the tilled up
But nothing is constant. Values me change over time. Well, except constants. Yeah. And today we are literally talking about unions. What a pop of smurf. The tilled up. Is that what we decided it was called? The thing next to the one. Now I'm trying to find it. Yeah, that's the tilled up My weird windows map keyboard can't. It's I did this last time too. I don't I don't know where it is. But I think it's it's the this thing. It's the that thing. And we're on map just with this PDF here and it does this and it's really happy. It makes streaming a lot easier
My weird windows map keyboard can't. It's I did this last time too. I don't I don't know where it is. But I think it's it's the this thing. It's the that thing. And we're on map just with this PDF here and it does this and it's really happy. It makes streaming a lot easier But something that I do want to get into which I don't know if it's possible using an iPad to do this. So that way I can write notes on the side of it and just you are like stream my iPad. But then have notes that I write in the book next to it. I don't know if it's possible
But something that I do want to get into which I don't know if it's possible using an iPad to do this. So that way I can write notes on the side of it and just you are like stream my iPad. But then have notes that I write in the book next to it. I don't know if it's possible When I get an iPad, we'll find out. We will find out. You never owned it. How about a tablet? I have an e-reader and nook glow light for e. Okay. Okay, that kind of counts right? I'm going to go with yes. I'm going to go with yes. Okay. All right
When I get an iPad, we'll find out. We will find out. You never owned it. How about a tablet? I have an e-reader and nook glow light for e. Okay. Okay, that kind of counts right? I'm going to go with yes. I'm going to go with yes. Okay. All right Okay. All right. So we debated a few before how we were going to go through this chapter. But before hand, I think it's going to be smart of. So what are unions and literals and like what made you make this chapter? And could you tell us a bit about it? Sure
Okay. All right. So we debated a few before how we were going to go through this chapter. But before hand, I think it's going to be smart of. So what are unions and literals and like what made you make this chapter? And could you tell us a bit about it? Sure If by debate, did you mean angrily screenbed each other for 47 minutes? It was a horrifying experience. You were really mean. Really person. Tell anybody. Not close to you. Sorry. So this isn't the concepts
If by debate, did you mean angrily screenbed each other for 47 minutes? It was a horrifying experience. You were really mean. Really person. Tell anybody. Not close to you. Sorry. So this isn't the concepts The foundation is part of the book, which means it's not something that's like a specific thing you might use in some specific scenario. It's a core foundational. You end up seeing this in a lot of places. Unions are the concept of something that could be one of multiple possible types
The foundation is part of the book, which means it's not something that's like a specific thing you might use in some specific scenario. It's a core foundational. You end up seeing this in a lot of places. Unions are the concept of something that could be one of multiple possible types Like a variable might be a string or underfight. Or an object could be like this shape of the object or that shape or that shape or that's that stuff. And that's really powerful because in JavaScript, you can do wild and wacky things
Like a variable might be a string or underfight. Or an object could be like this shape of the object or that shape or that shape or that's that stuff. And that's really powerful because in JavaScript, you can do wild and wacky things You can create a variable and then 3,000 lines later than assign some value to it. What was its type before it was a sign? And then you have all sorts of fun. Woo. I tried to make it for you. No, it doesn't work. Sorry. We're just going to remove this so you can talk and explain the chapter
You can create a variable and then 3,000 lines later than assign some value to it. What was its type before it was a sign? And then you have all sorts of fun. Woo. I tried to make it for you. No, it doesn't work. Sorry. We're just going to remove this so you can talk and explain the chapter Me and Jamie. I'm trying to figure out if I can do it. Cool. Yeah. So that's really good and useful. The ability to have stuff that's like one of possible types. And then types could also give you the option to narrow types
Me and Jamie. I'm trying to figure out if I can do it. Cool. Yeah. So that's really good and useful. The ability to have stuff that's like one of possible types. And then types could also give you the option to narrow types Like if you have an if statement, if some variable is defined inside that if statement, you know the variable is not undefined. Otherwise, you would have been inside that if statement
Like if you have an if statement, if some variable is defined inside that if statement, you know the variable is not undefined. Otherwise, you would have been inside that if statement So you have the ability to both widen the types and then also narrow them, which brings up a whole other list of cool things you can do. Like things that are a specific number, like a literal zero instead of any old number in the universe. Oh, that's cool. I didn't realize that. Okay
So you have the ability to both widen the types and then also narrow them, which brings up a whole other list of cool things you can do. Like things that are a specific number, like a literal zero instead of any old number in the universe. Oh, that's cool. I didn't realize that. Okay Okay. Well, the chapter goes over it. Yeah. I mean, it does. I feel like this is something that I would say to everyone learning is the best writers and teachers in the world. Things may not click the first time you see them read them, learn them, girls, your exercises with them
Okay. Well, the chapter goes over it. Yeah. I mean, it does. I feel like this is something that I would say to everyone learning is the best writers and teachers in the world. Things may not click the first time you see them read them, learn them, girls, your exercises with them No matter how many times people tell you about it, it might take a while to click. So I just want to remind everyone of that. And I think I honestly, I am going to skip a little bit because we, it's so stuck in my head. And yes, y'all, I'm scrolling and trying to get to this and really quick
No matter how many times people tell you about it, it might take a while to click. So I just want to remind everyone of that. And I think I honestly, I am going to skip a little bit because we, it's so stuck in my head. And yes, y'all, I'm scrolling and trying to get to this and really quick Do do do do do do do do do do do do do do do summary. Yeah. So the reason we're going to the summary is when I was going through this chapter, I have chatter going on in my head of things other people have told me about typescript, which is not accurate or is accurate. I don't know
Do do do do do do do do do do do do do do do summary. Yeah. So the reason we're going to the summary is when I was going through this chapter, I have chatter going on in my head of things other people have told me about typescript, which is not accurate or is accurate. I don't know I don't know. And it can be very hard for me to move forward with a concept if I don't deach to instruct what I previously knew
I don't know. And it can be very hard for me to move forward with a concept if I don't deach to instruct what I previously knew So what we're going through in this chapter is union and lural types, along with how it types, you can do more specific neuro, where types from how our code is structured, how union types represent values that could be one or more types, explicitly indicating union types with type annotations, how type net narrowing reduces possible types of a value, the differences between cost variable const, I hate dyslexia sometimes because of my cost rate
So what we're going through in this chapter is union and lural types, along with how it types, you can do more specific neuro, where types from how our code is structured, how union types represent values that could be one or more types, explicitly indicating union types with type annotations, how type net narrowing reduces possible types of a value, the differences between cost variable const, I hate dyslexia sometimes because of my cost rate No, that doesn't make sense. Const variables with variables types and let variables with primitive types
No, that doesn't make sense. Const variables with variables types and let variables with primitive types One part I'm looking forward to hearing more about is the billion dollar mistake and how typescript handles strict null checking using explicit undefined to represent values that may not exist, explicit implicit undefined for unassigned variables and using type aliases to save typing long type unions repetitively
One part I'm looking forward to hearing more about is the billion dollar mistake and how typescript handles strict null checking using explicit undefined to represent values that may not exist, explicit implicit undefined for unassigned variables and using type aliases to save typing long type unions repetitively I got a lot of stuff. Yes, all of that to say. So why is type should known to put any and that you can just put any for anything and you could just move forward doing that. Why not do that instead of doing unions and littl. That's a great question
I got a lot of stuff. Yes, all of that to say. So why is type should known to put any and that you can just put any for anything and you could just move forward doing that. Why not do that instead of doing unions and littl. That's a great question And the question will probably come up in later chapters, especially the next one, chapter four objects. Any is to recap, any is the keyword and type script that tells type script to shut up. Let me do whatever I want. Don't type check many and thanks Ryan
And the question will probably come up in later chapters, especially the next one, chapter four objects. Any is to recap, any is the keyword and type script that tells type script to shut up. Let me do whatever I want. Don't type check many and thanks Ryan That is good if you just need to get something done. If like you're working with some wacky old weird code and there's no way in your understanding of the type system in typescripts features to describe to typescript what it is
That is good if you just need to get something done. If like you're working with some wacky old weird code and there's no way in your understanding of the type system in typescripts features to describe to typescript what it is Or if you're just hacking some stuff together and you don't have time or maybe it is theoretically possible in typescript and you just don't have the 20 bajillion hours to learn enough to get there. Those are all valid reasons to just tell type script, stop yelling at me, let me do whatever I want
Or if you're just hacking some stuff together and you don't have time or maybe it is theoretically possible in typescript and you just don't have the 20 bajillion hours to learn enough to get there. Those are all valid reasons to just tell type script, stop yelling at me, let me do whatever I want So of course there are people in those legitimate reasonable circumstances and then people who just prevent over other reasons just sprinkle in any end there to get type script to shut up and never go back to fix it
So of course there are people in those legitimate reasonable circumstances and then people who just prevent over other reasons just sprinkle in any end there to get type script to shut up and never go back to fix it So especially when we get into these more fancy advanced even parts of the type system and I wouldn't within the spectrum of type script, this is not the advanced stuff. This is like the core foundational good to know
So especially when we get into these more fancy advanced even parts of the type system and I wouldn't within the spectrum of type script, this is not the advanced stuff. This is like the core foundational good to know Sometimes it's just easy to use in any and maybe go back to it later once you know how to do stuff. And honestly I think that's a totally valid learning strategy
Sometimes it's just easy to use in any and maybe go back to it later once you know how to do stuff. And honestly I think that's a totally valid learning strategy You both get to get the code to work which is oftentimes the most important thing and you get to experience the pain of not having as good in tell a sense in other development features because you're using an any instead of proper types
You both get to get the code to work which is oftentimes the most important thing and you get to experience the pain of not having as good in tell a sense in other development features because you're using an any instead of proper types Yeah and thank you for that because like going through this when I first started reading this of like union types and then going through and then also looking at narrowing one thing that like came out to me was if you could go into a bit more detail we have and I'll just keep forgetting that I can do the zoom zoom
Yeah and thank you for that because like going through this when I first started reading this of like union types and then going through and then also looking at narrowing one thing that like came out to me was if you could go into a bit more detail we have and I'll just keep forgetting that I can do the zoom zoom Oh yeah thanks right I would like staring at it and I'm like who's cat oh you mean Josh's cat got it. Unions expanding a values allowed type to chew or more possible types and narrowing is reducing it. So that totally makes sense to me
Oh yeah thanks right I would like staring at it and I'm like who's cat oh you mean Josh's cat got it. Unions expanding a values allowed type to chew or more possible types and narrowing is reducing it. So that totally makes sense to me What does it quite make sense if you could go into more detail of helping me put like chew into together of if in this example going back to the tilde oh oh like zoom didn't work. zoom is of the zoom is. Wow it's is it automatically doing that? Yeah. It's like nothing. This is interesting
What does it quite make sense if you could go into more detail of helping me put like chew into together of if in this example going back to the tilde oh oh like zoom didn't work. zoom is of the zoom is. Wow it's is it automatically doing that? Yeah. It's like nothing. This is interesting Okay well we'll take this variable and you go into it that it is a string but if we're telling let mathematician be a math dot random then I guess I'm a little lost on the difference between union types and strings and why you wouldn't just name it a string like it's a
Okay well we'll take this variable and you go into it that it is a string but if we're telling let mathematician be a math dot random then I guess I'm a little lost on the difference between union types and strings and why you wouldn't just name it a string like it's a What do you mean? What he doesn't click? Sure. What you're describing is in fact that thing you expressed interest in the billion dollar mistake because and you should feel good about yourself
What do you mean? What he doesn't click? Sure. What you're describing is in fact that thing you expressed interest in the billion dollar mistake because and you should feel good about yourself The questioning you're giving now is the same questioning the industry has been doing for decades because a lot of languages don't make a difference
The questioning you're giving now is the same questioning the industry has been doing for decades because a lot of languages don't make a difference It is either undefined or stringless just call it string and that's actually how a lot of older languages and even still use today languages like C++ and Java work and C sharp except they added a new set of settings to fix this
It is either undefined or stringless just call it string and that's actually how a lot of older languages and even still use today languages like C++ and Java work and C sharp except they added a new set of settings to fix this So in like traditional Java code it's typical at the beginning of any function that takes in parameters to check if this parameter is null throw new whatever exception. If that parameter is null, throw new exception
So in like traditional Java code it's typical at the beginning of any function that takes in parameters to check if this parameter is null throw new whatever exception. If that parameter is null, throw new exception I don't know if you're variants of Python code that you tend to use do that but I've seen that in like some Python code bases not many but in code bases in languages like Java that explicitly say like this is a string that's annoying because if you know it's only ever going to be a string and not null why do you have to check for it and that's why union types are valuable because we now can explicitly say this is not string or undefined or null this is only ever string and those variables over there those can be string or undefined so you can explicitly say whether you have to check for something being undefined and I see that doesn't click maybe this one extra cherry on top will click if you take something that's allowed to be undefined and try to shove it in a place that's not allowed to be undefined types could be a little yell at you because it knows the the thing that can be undefined might be undefined so it won't work if you try to do things on it that only work on strings calling dot two uppercase yeah I'm just also trying to think of like my own work that I've been doing especially the first site that I built for teach Gentech was included typescripts and all of the types that they were signing were strings so that's where I'm also like struggling because I'm like no no don't sound like something specific like this um and trying to put it into a practical manner which we will do if we have time going into the exercise is so that part you know I am looking forward to you now and I'm going to skip along over here because you know we're not going to go step by step on every one of these but if curiosity it was it do you think it makes more sense putting like the union and then defining the properties because I think declaring union types and union properties also got mixed up for me what do you mean sorry about union properties these ones of declaring union types and then like the properties of it and I was like wait is that just because of saying that it was the um down here with the numbers in the strings I think I was getting kind of confused there I think this is good learner feedback thank you good reader feedback in retrospect I think a better name for that chapter might be properties of unions because it's talking about the properties you're allowed to access on things that are typing in okay okay that's it's weird but that totally is clicking more on which I think is part of the narrowing and the where to go where to go I have to think of it where it might would it be kind of like putting through with type aliases then I know I'm totally skipping like four pages but like it makes my sense if you're putting properties and you know the properties the aliases I don't know just maybe it's the way it's structured which let me show everybody which this is something for those who watch please ask the questions you have because not everybody is going to bounce around like my head does and luckily Josh answers questions even though I bounce around a lot because with the type aliases this made a lot of sense on like raw data could be any number of these things and so if we do let raw data be raw data okay cool raw data equals all of these done and for some reason the way I'm visualizing it is for um union tight or union properties is kind of like showing here like hey these things could be properties and like a visual of it I guess you could say I would encourage you to visualize type aliases like type raw data as like a copy and paste or a cut and paste operation where whenever you the code says one thing raw data it actually means whatever is aliased by that like boolean or number or string like literally if you copy and pasted the boolean or number or string and so on into wherever the code reference to raw data as a type it would behave the exact same like you might have slightly worse error messages but that's literally what happens give or take on the inside and type script does that make sense what's the difference between type aliases and any and a type aliases a way to like copy and paste a description like a cookie cutter template and any is like a a very foul smelling piece of matter in your cookie better uh you can copy and paste any if you want but it's not normally something you want in your in your code it's like a different way of doing things uh it's like a different type that can be used whereas an aliases like how you describe types I don't like what I just said I don't think it's a very good explanation um well let me bring this one up and then we can go back to it um so papa smurf asked uh or said so if you have a string you can call those string properties but if it's undefined it won't have those properties um I'm going to answer in the affirmative to what I'm interpreting that and please let me know if I'm misinterpreting um if you have a variable that's a type string say type string then yeah you can call any property on that variable the type string of those exists on strings like two upper case two string or two lower case if the string is known to be type undefined or as a type uning that includes undefined um then you're not going to be able to call those things because type script knows it might not be a string it might be undefined which doesn't have any of those properties on it so this is in the case of undefined in your type uning this is type two its way of making sure you're not going to get a runtime exception error cannot read blah of undefined because your variable values actually undefined instead of some string is that what you meant by the way i'll also note that this is like relatively new as a concept in mainstream programming like most mainstream programming languages don't do this so as an industry we're still kind of learning how to explain and phrase the stuff around unions and houring it's not just you folks who are going like wtf is all this i've been going wtf to like programming in general and then it's been uh um gosh eight months ago mishko who created angular was on teach shentak talking about his new language quick and he was on uh anthony kimpollows stream um for java script jamb or java jamb jamb oh jamb jamb jamb jamb yeah uh and i was like i actually understand what they're saying a lot has changed in eight months um all your information is worthless no no it's that's good stuff to know um what will happen when i call it and it's undefined um great question typescript is just a development time tool so it can yell at you and say hey this is going to be undefined and you're trying to call dot two uppercase this will crash but it'll still compile the code to java script and let you run it and let you see the crash the maybe see a crash in real time if you want to but all we're talking about is just theoretical like little annotations in the code and then the language typescripts like it's it's corresponding program the type checker looking at your code and saying hey i think this is wrong but again this is all development time your code will still run even if typescript is going to get you about errors i think that's a hard thing to realize that even if typescript is going wtf you can still run it is it feasible for me to present using the playground for like a quick two minutes yeah do it good awesome do it so the typescript playgrounds i'll post it in the twitch chat one of my few not calculated messages uh typescript lang dot org slash play that's where i'm going i'm going to zanc screen typescript playground boop ignore that horrible code i just showed well good news i didn't show it everybody yet so there you go all right you can ignore the use strict on the side that's just some javascript crop that gets made for compatible reasons anyway so let's say you were very well like let's name maybe and you say that it can be stringed or undefined um you're your type aliens here this is on the left type should code it on the right javascript that type aliases is just a development time thing the stuff that actually gets run is on the right just let name be so i get this now when you and i first started and i think it was the first dream you showed me something like this and i was like what what um it took me a long time to understand this and i think one of the easiest ways that if i could go back and tell myself now is it's like um it's a good way of saying it when you go to a coffee shop and you get a mocha oh you get a mocha you just that's what they handle you is a mocha but you don't only see the ingredients like go into it which is you know the espresso hot water and chocolate sauce and milk and when but you can see the mocha is done and i think that's been a really hard way for me to comprehend what type script does because it's still job like it doesn't most of at least that i've seen most languages whatever you put in that you're to type out will run you know like it's always same same where type script is more like you're making coffee behind the scenes yeah just stepping behind that barista counter and learning latte art which i actually i'm doing now fun fact oh yeah then pictures post pictures i'm the fact i can actually do it i will have you done the heart or a leaf those ones are too hard i've managed to do some rather inappropriate symbols which will not be shared on the stream by me voluntarily but eventually i'll do i'll do the leaf yeah what milk are you using so far i just use like two percent okay because for those who want to know because i did barista for a half minute um that non-dairy milks are actually harder to be able to do latte art than regular milk such as even skim milk is easier than non-dairy milks to do latte art there you go okay please explain what we have on the screen sure i quickly typed it up and be as good so let's say we have previously declared that name maybe is allowed to be anything that's either stringer undefined which means we still can't put anything that's not one of those we can't do like name maybe equals on 3 3 7 that's not allowed because that's a number we're like at the typescape complaints but the key thing with the union type is that it can be either of these two types either or so if we just do like a 50 percent chance it's either gen or undefined that's allowed because it can be either a string or undefined but the really key useful thing in typescript land is that it will yell at us if we try to access something that only exists on some of the union types not all because name maybe is possibly undefined which means this code has a 50 percent chance of failing in fact if i run the code half the time it yells and half the yeah look at this alternating okay 50 percent chance it'll it'll throw an error so this is type of telling us hey you might break so really quick can you comment out name maybe math down and then yeah line five that would make more sense could you comment line five down and uncommon line three and run it because you said like just so we can get a visual of it of like hey what happens when you run something and it says sure i'm trying to figure out how to clear it doesn't seem well this one now so maybe i should like at the end just like log maybe oh yeah thank you maybe it's maybe so that's good yelling but it still runs and creates job ascript code i think that is such a huge key to see and how um that's so important this is this is a great example thank you i appreciate you showing us and pop up smurf you were asking some of these questions so if you're still here is this starting to make a bit more sense as i am curious now there we go we got the typescript complaints oh my god what is that she's we got the typescript complaints in the middle the actual jobs could output on the right and uh i can't we can't see the actual job script oh you can't oh no i still have the depth tools now well i guess we can only see one of these at a time you get the logs um but uh poppah smurf said php unions are similar and through exceptions at runtime by the sounds of it but are relatively new only difference is job ascript will try still try to run that's awesome i did not know php out of union types those those people over there the language folks were php they're doing a good job they got a lot of good stuff because yeah php is like a more traditional type system that is a runtime type system you can reference and refer to the runtime types at runtime like in your code you can say like if the type this has been called with is something then do some other thing whereas a typescript vanishes after development time it's just job ascript output i have like a half thought question could be a second something that i struggled with when first trying to comprehend uh typescript would be so would someone use typescript to create something but use the job ascript it created to actually put it into a program yeah typescripts let's you create typegip is a tool for creating good job ascript programs it coincidentally lets you write something that looks a lot like job ascript but is actually a little different like it's got those new types and text but you can think of typescript as like the ingredients that go into the mocha and the ingredients may or may not look like actual mocha they might look like weird chocolate syrup powder and hopefully coffee beans but maybe some sort of like weird pond thing okay okay yeah because i guess i'm curious like if somebody built a program with using um we'll say astro using tailwind CSS and typescript if i deleted my typescript file would it still run then after everything is built will it still run if i don't have my typescript file it should if there's an output job ascript file some dot js or dot cjs or mjs or whatever extension created somewhere yeah you don't need the dot ts file it's like the uh the the photoshop or figma files after you've exported it to like an svg or png or jpeg that's like we're seeing it yay yay okay we're we're moving right along yay okay now i have to like rethink where i was at um for the rest of this so i will just about to ask you the same thing i'm like was there anything else you'd want to show us on this to kind of like get to know the um unions and literals yeah a couple more things one is you can you can see that typescript gives a complaint here if you try to call to uppercase and something i might be undefined because it might throw an error it might not um but narrowing is when inside a statement typescript can deduce it can narrow the type of something to be more specific you can do that inside this if statement if name maybe is truthy it can't be undefined because then the body of the statement line 12 would never be run so inside this if statement name baby is type string which is why this code is not given any typescript red squiggly's line 12 is fine and we can see that it never never throws an error when it's run if i can get that to show there we go does that make sense um let me ask uh read out uh poppits worse and then i will reanalyze um and poppits more please do not apologize on this i'm absolutely new so at least when other people ask questions i can learn along with everyone um so say you have a dto with like four types how would you narrow that so correct me if i'm wrong i'm gonna assume dto is data transfer objects in this context which is a fancy term for um any object that's used to carry data like between two things oftentimes like two programs of processes they're um it's like a standard term in yellow like backhand stuff um so you have a dto with four types um we haven't seen how to represent oh awesome yay i got we haven't seen how to represent object shapes like jobless crypt objects in the type system but once we do you will be able to mix those with unions so you can have a union that's like apple shape or banana shape or cherry shape or dragon fruit shape or maybe like fruit shape or a vegetable shape or carb shape or something and then your dto can be represented as a union of they're like okay it's one of these possible shapes and each of those shapes can be like an object or strength or under find or something and guess what next chapter is object i wasn't going to guess i didn't read ahead though just so everybody knows i did not read ahead we're not gonna go there yet i am like uh i will get it done just in time to learn things i will say teach gen tech and weird university of gen i actually have learned more in the eight months of doing this than i did in multiple years i tried to go to school um so uh but okay cool and i like how you gave the example of narrowing as well and this is this is all making a lot more sense now if you were a compiler you'd be a just in time compiler is this true
I don't know if you're variants of Python code that you tend to use do that but I've seen that in like some Python code bases not many but in code bases in languages like Java that explicitly say like this is a string that's annoying because if you know it's only ever going to be a string and not null why do you have to check for it and that's why union types are valuable because we now can explicitly say this is not string or undefined or null this is only ever string and those variables over there those can be string or undefined so you can explicitly say whether you have to check for something being undefined and I see that doesn't click maybe this one extra cherry on top will click if you take something that's allowed to be undefined and try to shove it in a place that's not allowed to be undefined types could be a little yell at you because it knows the the thing that can be undefined might be undefined so it won't work if you try to do things on it that only work on strings calling dot two uppercase yeah I'm just also trying to think of like my own work that I've been doing especially the first site that I built for teach Gentech was included typescripts and all of the types that they were signing were strings so that's where I'm also like struggling because I'm like no no don't sound like something specific like this um and trying to put it into a practical manner which we will do if we have time going into the exercise is so that part you know I am looking forward to you now and I'm going to skip along over here because you know we're not going to go step by step on every one of these but if curiosity it was it do you think it makes more sense putting like the union and then defining the properties because I think declaring union types and union properties also got mixed up for me what do you mean sorry about union properties these ones of declaring union types and then like the properties of it and I was like wait is that just because of saying that it was the um down here with the numbers in the strings I think I was getting kind of confused there I think this is good learner feedback thank you good reader feedback in retrospect I think a better name for that chapter might be properties of unions because it's talking about the properties you're allowed to access on things that are typing in okay okay that's it's weird but that totally is clicking more on which I think is part of the narrowing and the where to go where to go I have to think of it where it might would it be kind of like putting through with type aliases then I know I'm totally skipping like four pages but like it makes my sense if you're putting properties and you know the properties the aliases I don't know just maybe it's the way it's structured which let me show everybody which this is something for those who watch please ask the questions you have because not everybody is going to bounce around like my head does and luckily Josh answers questions even though I bounce around a lot because with the type aliases this made a lot of sense on like raw data could be any number of these things and so if we do let raw data be raw data okay cool raw data equals all of these done and for some reason the way I'm visualizing it is for um union tight or union properties is kind of like showing here like hey these things could be properties and like a visual of it I guess you could say I would encourage you to visualize type aliases like type raw data as like a copy and paste or a cut and paste operation where whenever you the code says one thing raw data it actually means whatever is aliased by that like boolean or number or string like literally if you copy and pasted the boolean or number or string and so on into wherever the code reference to raw data as a type it would behave the exact same like you might have slightly worse error messages but that's literally what happens give or take on the inside and type script does that make sense what's the difference between type aliases and any and a type aliases a way to like copy and paste a description like a cookie cutter template and any is like a a very foul smelling piece of matter in your cookie better uh you can copy and paste any if you want but it's not normally something you want in your in your code it's like a different way of doing things uh it's like a different type that can be used whereas an aliases like how you describe types I don't like what I just said I don't think it's a very good explanation um well let me bring this one up and then we can go back to it um so papa smurf asked uh or said so if you have a string you can call those string properties but if it's undefined it won't have those properties um I'm going to answer in the affirmative to what I'm interpreting that and please let me know if I'm misinterpreting um if you have a variable that's a type string say type string then yeah you can call any property on that variable the type string of those exists on strings like two upper case two string or two lower case if the string is known to be type undefined or as a type uning that includes undefined um then you're not going to be able to call those things because type script knows it might not be a string it might be undefined which doesn't have any of those properties on it so this is in the case of undefined in your type uning this is type two its way of making sure you're not going to get a runtime exception error cannot read blah of undefined because your variable values actually undefined instead of some string is that what you meant by the way i'll also note that this is like relatively new as a concept in mainstream programming like most mainstream programming languages don't do this so as an industry we're still kind of learning how to explain and phrase the stuff around unions and houring it's not just you folks who are going like wtf is all this i've been going wtf to like programming in general and then it's been uh um gosh eight months ago mishko who created angular was on teach shentak talking about his new language quick and he was on uh anthony kimpollows stream um for java script jamb or java jamb jamb oh jamb jamb jamb jamb yeah uh and i was like i actually understand what they're saying a lot has changed in eight months um all your information is worthless no no it's that's good stuff to know um what will happen when i call it and it's undefined um great question typescript is just a development time tool so it can yell at you and say hey this is going to be undefined and you're trying to call dot two uppercase this will crash but it'll still compile the code to java script and let you run it and let you see the crash the maybe see a crash in real time if you want to but all we're talking about is just theoretical like little annotations in the code and then the language typescripts like it's it's corresponding program the type checker looking at your code and saying hey i think this is wrong but again this is all development time your code will still run even if typescript is going to get you about errors i think that's a hard thing to realize that even if typescript is going wtf you can still run it is it feasible for me to present using the playground for like a quick two minutes yeah do it good awesome do it so the typescript playgrounds i'll post it in the twitch chat one of my few not calculated messages uh typescript lang dot org slash play that's where i'm going i'm going to zanc screen typescript playground boop ignore that horrible code i just showed well good news i didn't show it everybody yet so there you go all right you can ignore the use strict on the side that's just some javascript crop that gets made for compatible reasons anyway so let's say you were very well like let's name maybe and you say that it can be stringed or undefined um you're your type aliens here this is on the left type should code it on the right javascript that type aliases is just a development time thing the stuff that actually gets run is on the right just let name be so i get this now when you and i first started and i think it was the first dream you showed me something like this and i was like what what um it took me a long time to understand this and i think one of the easiest ways that if i could go back and tell myself now is it's like um it's a good way of saying it when you go to a coffee shop and you get a mocha oh you get a mocha you just that's what they handle you is a mocha but you don't only see the ingredients like go into it which is you know the espresso hot water and chocolate sauce and milk and when but you can see the mocha is done and i think that's been a really hard way for me to comprehend what type script does because it's still job like it doesn't most of at least that i've seen most languages whatever you put in that you're to type out will run you know like it's always same same where type script is more like you're making coffee behind the scenes yeah just stepping behind that barista counter and learning latte art which i actually i'm doing now fun fact oh yeah then pictures post pictures i'm the fact i can actually do it i will have you done the heart or a leaf those ones are too hard i've managed to do some rather inappropriate symbols which will not be shared on the stream by me voluntarily but eventually i'll do i'll do the leaf yeah what milk are you using so far i just use like two percent okay because for those who want to know because i did barista for a half minute um that non-dairy milks are actually harder to be able to do latte art than regular milk such as even skim milk is easier than non-dairy milks to do latte art there you go okay please explain what we have on the screen sure i quickly typed it up and be as good so let's say we have previously declared that name maybe is allowed to be anything that's either stringer undefined which means we still can't put anything that's not one of those we can't do like name maybe equals on 3 3 7 that's not allowed because that's a number we're like at the typescape complaints but the key thing with the union type is that it can be either of these two types either or so if we just do like a 50 percent chance it's either gen or undefined that's allowed because it can be either a string or undefined but the really key useful thing in typescript land is that it will yell at us if we try to access something that only exists on some of the union types not all because name maybe is possibly undefined which means this code has a 50 percent chance of failing in fact if i run the code half the time it yells and half the yeah look at this alternating okay 50 percent chance it'll it'll throw an error so this is type of telling us hey you might break so really quick can you comment out name maybe math down and then yeah line five that would make more sense could you comment line five down and uncommon line three and run it because you said like just so we can get a visual of it of like hey what happens when you run something and it says sure i'm trying to figure out how to clear it doesn't seem well this one now so maybe i should like at the end just like log maybe oh yeah thank you maybe it's maybe so that's good yelling but it still runs and creates job ascript code i think that is such a huge key to see and how um that's so important this is this is a great example thank you i appreciate you showing us and pop up smurf you were asking some of these questions so if you're still here is this starting to make a bit more sense as i am curious now there we go we got the typescript complaints oh my god what is that she's we got the typescript complaints in the middle the actual jobs could output on the right and uh i can't we can't see the actual job script oh you can't oh no i still have the depth tools now well i guess we can only see one of these at a time you get the logs um but uh poppah smurf said php unions are similar and through exceptions at runtime by the sounds of it but are relatively new only difference is job ascript will try still try to run that's awesome i did not know php out of union types those those people over there the language folks were php they're doing a good job they got a lot of good stuff because yeah php is like a more traditional type system that is a runtime type system you can reference and refer to the runtime types at runtime like in your code you can say like if the type this has been called with is something then do some other thing whereas a typescript vanishes after development time it's just job ascript output i have like a half thought question could be a second something that i struggled with when first trying to comprehend uh typescript would be so would someone use typescript to create something but use the job ascript it created to actually put it into a program yeah typescripts let's you create typegip is a tool for creating good job ascript programs it coincidentally lets you write something that looks a lot like job ascript but is actually a little different like it's got those new types and text but you can think of typescript as like the ingredients that go into the mocha and the ingredients may or may not look like actual mocha they might look like weird chocolate syrup powder and hopefully coffee beans but maybe some sort of like weird pond thing okay okay yeah because i guess i'm curious like if somebody built a program with using um we'll say astro using tailwind CSS and typescript if i deleted my typescript file would it still run then after everything is built will it still run if i don't have my typescript file it should if there's an output job ascript file some dot js or dot cjs or mjs or whatever extension created somewhere yeah you don't need the dot ts file it's like the uh the the photoshop or figma files after you've exported it to like an svg or png or jpeg that's like we're seeing it yay yay okay we're we're moving right along yay okay now i have to like rethink where i was at um for the rest of this so i will just about to ask you the same thing i'm like was there anything else you'd want to show us on this to kind of like get to know the um unions and literals yeah a couple more things one is you can you can see that typescript gives a complaint here if you try to call to uppercase and something i might be undefined because it might throw an error it might not um but narrowing is when inside a statement typescript can deduce it can narrow the type of something to be more specific you can do that inside this if statement if name maybe is truthy it can't be undefined because then the body of the statement line 12 would never be run so inside this if statement name baby is type string which is why this code is not given any typescript red squiggly's line 12 is fine and we can see that it never never throws an error when it's run if i can get that to show there we go does that make sense um let me ask uh read out uh poppits worse and then i will reanalyze um and poppits more please do not apologize on this i'm absolutely new so at least when other people ask questions i can learn along with everyone um so say you have a dto with like four types how would you narrow that so correct me if i'm wrong i'm gonna assume dto is data transfer objects in this context which is a fancy term for um any object that's used to carry data like between two things oftentimes like two programs of processes they're um it's like a standard term in yellow like backhand stuff um so you have a dto with four types um we haven't seen how to represent oh awesome yay i got we haven't seen how to represent object shapes like jobless crypt objects in the type system but once we do you will be able to mix those with unions so you can have a union that's like apple shape or banana shape or cherry shape or dragon fruit shape or maybe like fruit shape or a vegetable shape or carb shape or something and then your dto can be represented as a union of they're like okay it's one of these possible shapes and each of those shapes can be like an object or strength or under find or something and guess what next chapter is object i wasn't going to guess i didn't read ahead though just so everybody knows i did not read ahead we're not gonna go there yet i am like uh i will get it done just in time to learn things i will say teach gen tech and weird university of gen i actually have learned more in the eight months of doing this than i did in multiple years i tried to go to school um so uh but okay cool and i like how you gave the example of narrowing as well and this is this is all making a lot more sense now if you were a compiler you'd be a just in time compiler is this true mm okay just because i like this part of the chapter and i feel like it'd be fun to have you go over it whether you share your screen or you won't need to share the chapter the billion dollar mistake which is on page 36 let's skip there so i can actually see i don't know i will share my screen so people can at least see what we're talking about entire screen this one okay so still that still the over here there we go we got the billion dollar mistake white okay is it fitting maybe it's kind of weird it's it was the one to set both it doesn't want to set both oh well so it was the invention of the null reference in 1965 uh this is led to enumeral errors vulnerabilities and system crashes which have probably caused a billion dollars of pain and damage in the last 40 years a dial and given that that was just doing the math spoken in roughly 2005 imagine how much worse the damage caused has been given the exponential growth of the software industry now in like almost 20 years later thank you thank you so how does type scripts this is when we got a share popus murph said uh i make the billion dollar mistake every time i write job ascript what in boom um well hey you're learning what how would you explain what the billion dollar mistake is as it relates to type script and how it helps conceptualize it more sure first of all thanks Ryan for the link share second i find that i like sharing these or explaining these with a playground so if you don't mind all yeah i'm loving this thank you cool so this code is always going to crash function greets we haven't gone over functions but it's the same concepts as before you can annotate that a parameter is a particular type let's say string and this one okay and let's say like your name dot to to uppercase so here we say that we're going to greet somebody saying hi and then your name in uppercase and then we pass it null to greets do you think this code will crash yes or no no because is it null like nothing null is nothing which means it will crash because you're not allowed to reproperties off unlike other languages like ruby which allows you to do like fun shenanigans sometime yeah so this is always going to run and yet there is no red squiggly here which is weird because we have already been trained that if type script thinks something is going to crash it should give us a red squiggly and this is like five lines of code so it should know that this is going to crash and they're happy you've had this happen it happens happened which of this just something didn't squiggle and it crashed it and i think it was because of the the the typescript with a but again i say that because it was my first time learning typescript and i didn't put things in proper yeah anyway please continue yeah who knows then um so yeah uh who knows but in this specific case this is the billion dog mistake the idea that you can provide something like null or undefined in jobah to feel like almost the same which is annoyed me in every one for years um to a place that does not expect it that does not explicitly say this can be string or undefined or it doesn't explicitly say string or null um and a lot of programming languages that's just how things are like in C sharp prior to a few years ago in a Java I think still now like that's just how it is which is why in a lot of code you see like at the beginning of time it's like if you're a name it goes no throw new error your name is no that's really common and that's because a lot of old language didn't have the conflict of union types saying that something could be either let's say string or null they just were like it's one type and then it could also be null so the billion dollar mistake is corrected by a particular compiler option that TypeScript has is it strict null checks which says no uh null and undefined or no longer assignable to all the things this is no longer enough you're not allowed to provide null or undefined to something that doesn't explicitly say it can be null or undefined um i'm gonna pause on that and read everybody else's stuff of uh oh we read that one there we go uh Fikai says cannot read properties of undefined is probably the most common error in all of JavaScript if they had to take a guess uh pop a smurfs and uh they were going to mention stuff typing in Ruby but it can be mind blowing yeah fun fact TypeScript is like a halfway or like an intermediary step between duck typing and strict typing duck typing is do whatever you want that runtime here works it works it it quacks like a duck it's a duck strict typing is no we're gonna exhaustively check it before you run it and then it has to be explicitly the thing you said it's gonna be type into structural where you can say what stuff is supposed to be as long as we think it matches up that's fine so it's like duck typing in the development side of things what's an example uh like so Ruby is duck typing are there any other languages that are duck typing i don't know if i've actually ever heard of that term it's a fun term if it looks like a duck and cracks like a duck it's probably a duck uh JavaScript is duck type python Ruby except for the fact that python and Ruby are adding in type annotations in some native ish form and we have typescript for JavaScript so fun facts about duck typing everyone ends up just going to structural typing eventually or something better than duck typing because it's for all the reasons why typescript are good sometimes i just gotta let this sink in for a bit but this this is making sense like what you just said about like being able to can you show us what it what or what it was called again or i should just like look in here for the null to be turned because you had to turn that on right or null not to work uh strict nel checks is a compiler option um by default if you run type script with no settings it's not on for compatibility reasons they didn't have it originally but if you do the like friendly create a type script project for me in like any framework or type script itself like tsc dash dash and net which creates a new type script configuration they'll turn it on for you so the vast majority of projects at least the vast majority of new type script projects use strict nel checks and other strict flags by the way don't you the way that i phrase this in the book is if you've never worked in the more traditional language like c++ this is probably weird and confusing to you like why wouldn't this null not allowed thing be the case like the billion dollar mistakes seems weird and but if you've worked in those languages it may seem weird to you that that's even a mistake in the first place that we have another way like people get very entrenched in the mindsets and i i've seen both cases where like why wouldn't like null is just another type in type script and under find like why would it be that it's like some weird special case is how people think so you're looking at this going like why would why was it not like that all along why is null somehow special case you're right it shouldn't be um i am actually going into vf code and checking if my design good curious but okay this is really making sense and we talked about type aliases and i liked how earlier you were talking about how and i i almost wonder if this is making more sense about the ducks um because type aliases are not JavaScript almost anything that is not duck typing yeah okay uh oh uh i skipped i skipped popus popus murf said you answered the questions they asked yay um and so kai says duck typing is like if an object has a uh dot quack method then it is a duck and a non duck uh typing languages you would have to say beforehand that the object is a duck it's not defined enough it's not enough to just be defined a dot quack method on something for it to be a duck or that's how i think about it at least i'm actually really excited for objects because i i feel really embarrassed saying this but i'm like when you start to learn you're like i know too much i shouldn't not know this yet that's learning like you it's gonna get more confusing probably before it gets better and in python last week we were talking about functions and for some reason it couldn't click what functions were and i'm like what are not what yeah you literally use functions as part of everything and yeah that was i feel like objects are probably the same thing but at the moment they don't fully click so i'm excited to be getting into objects in one of these streams because it's gonna click like functions did and me not realizing how often they use functions cool yeah it's awesome to see the learning process like live and real time over the months oh my gosh it's so frustrating though i'm just like i'm slowly going through my old streams to be able to create chapters and i'm just like oh god gen gen what are you asking and i'm like asking math of cheese okay you have a motionally resonance empathetic conversations with yourself that's why i'm just like okay if i could like help myself back then this is what i would say um and then your combining type aliases that one seemed pretty pretty standard to me it didn't seem too confusing to me at least is there anything i know we skipped around so i do want to ask is there anything in this chapter that you're like dude we didn't cover and we need to cover i think so but i might be wrong about the need to cover parts um we didn't cover the difference oh i was just gonna say your your opinion on it it means we need to cover it maybe we'll see the the the great problem of teaching is that as soon as you know enough to teach you no longer enough beginner mindset it there's this very difficult challenge right um we didn't cover the difference between primitives and literals a primitive type we've already covered in the book string number actually no learned defines begins that no one never uses except for like special cases um so like string and number are like or brooley and are really common primitives but then you can have specific instances of those primitives like um hipecia is a string but that philosopher variable it's not going to be just any old string in the universe we know it's specific yeah symbol another great commonly used yeah yeah uh yeah well one of it it's um see if i i wrote in the book we'll see if i know stop talking ahead all the primitives in JavaScript are string boolean number null undefined big ends um symbol is it seven uh one two three four five six yeah i can go there really quick because i'm i feel like i'm getting smart about using this uh on here because i'm like oh i can know the page number yay that will help all right here are the oh oh look the seven okay we had to do special things to get that list all in one page what if i defaulted my default it would have been confused um yeah so those are primitives but each of those can have specific instances like that if you say const philosopher equals hipecia that's that variable hipecia is not just any old string we know it's more specifically the literal hipecia um which means you can do some clever fancy things like um vs code because of typescript telling it if you hover over variable that's declared const we'll give you the literal type like mark goldberg instead of string if you hover over oh okay i think i want to look at both of these no no oh oh there we i think we got it you got one figure caption yeah um we'll just turn it off for now so hmm so this doesn't seem very useful yet but it will probably be more useful later on uh one example of where it's useful is you could have union types where some of the things are primitives and some of the things are literals like you could say that something is either um a string or the number negative one to indicate failure some programs do this so if you check whether the result is something is the number negative one then you know it's like number negative one and in the else case you know it's going to be a string okay so and this is for everyone watching these are some of the really fun questions that i get to ask Josh because i did not learn job scripts first like i can make things happen if i google enough i can i can make it work do i know what things actually mean no like what is the difference between const and let great question a const variable may not be reassigned to a different value if you say const first name equals high you're never going to have a different first name okay um a let variable can be reassigned to a different value that's the only difference and is that type script only or job scripts in general job script in general yeah okay okay i thought so but i'm like hmm okay so if it's const mathematician equals mark goldberg then mark goldberg will always like if you want to look it up it's going to show up as mark or as the mathematician equals mark goldberg even i'm trying to think of a way to say it back to you uh that's not working very well um when would you go back and look at this like i guess hmm if i go search for mark goldberg i'm going to find a string where uh if i say let mathematician where if i put const mathematician i guess i don't really understand a way of saying this even though i feel like i get it it'll be a lot more useful in the objects chapter i feel like when you have a property that can be one of specific set literals and which literals it is changes what like the type is which is actually tying back to the tto did transfer object suggestion earlier where like sometimes people have an object where like the type property on that object or like variance or something if it's this one string if it's root then it has these properties if it's a sub-string like fetchable it has these properties that's where it comes in handy oftentimes and we'll actually see that in the next chapter how to do that did that just click well i think i did that with my first astro project for the website is i think because i was trying to ask you to compare them with modules and it weren't quite modules i think they were objects okay don't remember what i will go follow up about that hmm and that is like one of the hardest things that i could say to anyone is even if it doesn't make sense keep going it will click probably eventually um and then Ryan said and let is kept within a scope unlike var well thought what does that mean oh yeah so this is some dumb stuff dumb is the wrong word some silly stuff there are three ways to declare variable in javascript var let const let in const are the good ways var is the weird way var is how the language originally did it and let in const are added later but var had these weird rules where um oh i didn't even know how to explain it anymore it's been so long don't worry about var the fact that i can't instantly remember how to explain it means it's like weird and convoluted but the tldr is it's an old way declaring variables that has like weird shared rules we can have like multiple declarations all over the place and declare things out of order and it's confusing and everyone hates it and you should avoid it if possible so would be okay and would it be like var became before let and let like replaced var because you can reassign something with let let replaced var yeah because um well we're there are some specific cases where var actually still is useful unfortunately uh don't think we should go into them now but uh yeah be um generally speaking let has like become what people do instead of var okay so satisfy you yeah yeah uh so a const can reassign a cannot be reassigned a let can be reassigned and they're reassigning whatever being declared which is not necessarily a type so are you lost me in that one okay so like what what what is this i get that it's a string but like it's when you say this oh yeah you can't i i don't like when um when when it doesn't highlight the way i wanted to so i could uh uh show you i know it's so confusing it's like the instincts there right um that's okay so mark goldberg if what is mark goldberg called it would it just be a string so if you const like const mathematician mark goldberg you would just say mark goldberg cannot be reassigned or mathematician cannot be reassigned mathematician is what i was just at a conference where there's a running gag that the theme of the conference was either pandas because someone referenced it in merely talk or the phrase it depends and in this context another key thing from the phrase um was uh what the context here is that it is either a string or the literal mark goldberg depending on like what what you want to be more precise about or like how precise you want to be so both are valid and correct answers in these variables mark goldberg is a string more specifically it is the literal string mark goldberg but mathematician would be the variable yes or like the word mathematician is the variable so a const declares the variable and a const makes the variable not being able to be reassigned a let makes the variable be able to reassigned and barded something to the variable we're not going to talk about that's an excellent description yes that is yay and this is one of the hardest things with the like learning by you're like doing your own stuff is see like it took me forever to figure out how to ask you what a variable was because i didn't know the word well okay i have things from poppins myth on here that i have myths so let's go back thank you for your patience um does anyone remember use strick and i job ascript with bars probably showing their age um remember so you would have a bar and tell it to use strick so it'd be kind of more like a const now um newer developers these days don't know how weird job ascript was like a old Seattle light for cleaner um job ascript is so weird that they added the word use strick like you could say at the beginning of a file use strick and that would make job ascript slightly less weird um there were proposals to add even more like use strickter or like use strick too or something to make it more and more strict but they they never went anywhere so there's some like really wacky things in job ascript that you could do that get disabled if you just put the string use strick at the top of your file or in like a function of black and uh that was like yes six oh this is funny enough poppins myth jaren i think our first chapter is when i got to learn about the versioning of these but i didn't know existed yeah that's what he stands for trivia question oh shit i don't know let me see if i wrote it down i actually don't know if i wrote it down um i do know it's versioning which i didn't know beforehand but i don't know if i wrote down no i don't think i wrote down up wait no i just wrote down es lint compared to prettier when we were talking about it turning time time uh at the beginning of the last street but no i don't remember what es means eckema script do you remember what eckema stands for i don't remember what eckema stands for i'm looking it up now it's like the standards organization that runs um like oh my god yurkin computer manufacturers association okay um it's the standards body that runs a lot of things including the job as script standard but because oracle like a jerk owns the job script trademark and we'll give it up uh we have to technically call the language something else hence eckema script there is shade intentionally there by the way they were hiring a developer advocate for those who are applying for jobs they hit me up i found a job you can go apply there i like my job i don't know why people do this when you get a job they finally like reach out to you and it's like bro always no i like my job please go away um okay so it's called eckema script i will look more into that and then um okay i said uh what they do is always use const and then if i find out later that i need to mutate it i change it to a let's that is good to know because i am rebuilding my site with it is still with astro but it's with like um the theme isn't as designed i guess it's a good way of saying it like it's not as structured so i can customize a lot more so i'm finding myself doing a lot more fresh coding instead of mutating their code so it's good to know these i um oh i'm gonna go share like help us with fence and i just have to click it into a different tab you can do because stream yard doesn't do that right aha oh this is good thank you yay okay ecma international formally european computermexia midfactures association that is like a lot but now we know now we know like reading rainbow for more you know okay okay anything else really quick let me write this down so a can all these define variable this is why i really want to be able to do this on an ipad because people then could actually see all these random notes that i'm doing instead of me just like staring down at my i am curious what's going on over there by the way i'm told from a mutual love ours on twitter alien alien that i should remind you or ask you if you if you like a particular astro theme you know which one i'm using now you're using brutal i think it is yeah it's one that i'm saying that i don't know if more defined is the right way of saying it or i'm just better at breaking this one either way there there really could be a um i just started using it i got the colors to work fine i can show you guys i'm very proud of it it's just it's just started but um because and yes right and i probably should look at notebooks cam but that's why i'm trying to think if um i can get uh the ipad because i also wanted ipad so i'm trying to find a business reason to get an ipad i don't know if it's going to work okay so here is the layout so far and i'm so excited about it it's called brutal um which let me grab the information and so this is my my github and you can see that it came from alien which is the east one and okay so this is something i really appreciated that he did um with so this is the original theme what it originally looks like i'm like dude this is don't i need this in my life but there's more he also put his website and i was like dude that gives me even more ideas and voila this is where we're at now very nice and i'm excited about it i'm like this is so cool but here is where it's not knowing me fix how of it does not scale i'll give you a little head yeah yeah it's like and then look at these learning just i don't know how to fix it it took me long enough to get the colors to work the way i wanted to so yeah it's on pot well i should be working on it but i haven't adjusted to my new sleeve schedule yet and but the way the reason i did all of this instead of my old teach gen tech site is because now that i have a real job it's kind of weird just telling someone to go to one of these and so i've just been like yo i'm gen gen odd i do all of these things you should uh check out one of them so yeah yeah i've been meaning update my site for the longest time but i can't get rid of it just so darn useful just does a landing page oh that's a different one though great i just mean like as a list of links like it's it's good to have and then also yes like it's a demo etc yeah there's one that i think i think it was yours that linked to something that was not your actual website or it was like a page within your website that was like a funny image the ritual yeah oh yeah i'm all my conference slides i'd like to do high dot joshra piglet we've got com uh i think it's on twitter yeah because people can't even spam recruiter yelling at me um so yeah don't go to it unless you want to wrick roll everyone but hi dot joshra piglet dot com is a general ideal and oh my goodness oh my goodness we need to pause hi jiko here take us amazing yay jiko we were learning typescript now we're learning how to construct a rick roll in the area of modern web standards where you can't auto play a video with sound so you have to put an enter button to gain user intent so i wanted to show that to everyone because when i first like then myers was like yo human josh should be friends and how do you should reach out to him and i go to like look at his site to like learn more about him and this happens so good sorry i know but it does make me actually remember it a lot more and it goes to your humor and yes for those so this is first time first time chatter but not first time guest uh uh jiko was my first time of someone trying to explain to me what typescript was and then we got stuck on him trying to explain what headless is which i still don't understand but i haven't i don't even remember why it came up or workers workers um not to headless what were we talking about several well is headless part of serverless classly workers uh so kai says uh josh reminds me uh vichard hendrickson silicon valley i'll take it that's a good show all right i had a previous engineering manager slash director called say that i reminded i'm not an engineer some some head of department somewhere something told me um it was uh it was maybe patrick vapeman ask or like some like ryan gaussing playing the like some psychopath or something who was handsome yeah fine close enough this is better um couple things yay lian thank you for joining and you should just come on our stream and you know help with um my side because you created the theme and i'm working on it and thank you for the follow and jiko yes i am using stream yard and hello Laura um yes yes i am i am going to have my ovs set up oh yeah you were gonna do that are you were interested in it intensively looking at it right oh yes and ping yes i'm going to set it up for the new one uh for working with work to figure out what we're doing on all of that because i got a streamline my my stuff and stuff and yeah thank you for doing all the shout outs ryan um and yes i built i'm building a new astro site and i can show you what it's supposed to do and what i did before i broke it so um this is what yeah not that you can minimize that that is what we were learning alien made and it's pretty and it does things and no it's different it's different i'm building a new site i still have the old site there it's just not like public but like look it works it functions properly and then the cool thing is alien also put their site here which gave me more ideas i was very excited so and then we have my site which is getting there and i even have different colors so excited about it and like colors match my shows and my jobs um and i will show you in a second pop a smith thank you for the call out but what i did not do because if we go back to alien site look look it actually does the things it's supposed to do and still fits like it looks good mine on the other hand i broke i don't know how but it uh it does that me or i did this but that's why i'm like i don't know what i do alien and everyone um jake up will tell you i break a lot of stuff when i'm trying to figure this stuff out because i'm like oh that's an org let me go try something else breaking stuff is one of the best ways to learn stuff though i like this right and agree i get the more you get the more you've broken things the more you've learned yay yeah and then it's like i go to my dnd crew and they're like someone please help me get a stop i don't know what i'm doing but uh yes um i break a lot of stuff and i do learn a lot and this is actually oh you guys i'm really excited about this one i'll show you this one i built another astro site that didn't did not break i'm really proud of it it's just a landing site but i built it without asking anybody for help yay it was very exciting that's really beautiful yeah yeah i don't remember which theme but if you look at the get hub it will show you the theme yeah yeah they they have it but it was i was so excited this one i made without breaking in 30 minutes compared to the ungodly hours i put on these sites but yes astro is amazing poppies map um i will say oh this is something i meant to ask um uh so built astro dot build okay yeah could somebody and uh Josh i felt like you are a good candidate on possibly explaining this please um how okay something like quick couldn't be used with astro and astro can't use because quick also wouldn't be able to set up because astro does its components you know up i was i actually met Gillian at a conference wherein both astro and quick were demonstrated on stage but and i learned them and they were both really cool but i don't think i could explain why one can't be used with the other other than just they're both things like quick as its own framework it's like a way to do very small like super incrementally loaded stuff and astro like manages other UI libraries i don't i don't think that's a good explanation and i don't feel confident giving anything more than that i'm sorry oh it's good i mean this is um and Jacob just said uh not yes most things can work in astro and to popus merfs um points what is the cat's name again jerry i'm trying to get him out he's a knowing name hi jerry um oh okay uh Gillian says they're both trying to solve the same problem but take another approach i think what i'm curious about and is like i like astro because i can find things like this and be like cool let me see what i can take that they made that's really pretty and also made my own thing where like with react and that kind of stuff i'm like that's a lot harder to find and i don't know if that's because of astro but i also know that we have gone on a really far tangent from typescript um i don't even know how we got here uh really i couldn't tell you Gillian said uh in short uh would say that astro is for content driven websites and quick is for them more real web application sites that is fair i am i am c view nation and nux nation and then also like learning about quick and then i just really like astro i'm like i want to learn something that i can build with all of them to compare them all but i don't know or takes time back to learning typescript yay
mm okay just because i like this part of the chapter and i feel like it'd be fun to have you go over it whether you share your screen or you won't need to share the chapter the billion dollar mistake which is on page 36 let's skip there so i can actually see i don't know i will share my screen so people can at least see what we're talking about entire screen this one okay so still that still the over here there we go we got the billion dollar mistake white okay is it fitting maybe it's kind of weird it's it was the one to set both it doesn't want to set both oh well so it was the invention of the null reference in 1965 uh this is led to enumeral errors vulnerabilities and system crashes which have probably caused a billion dollars of pain and damage in the last 40 years a dial and given that that was just doing the math spoken in roughly 2005 imagine how much worse the damage caused has been given the exponential growth of the software industry now in like almost 20 years later thank you thank you so how does type scripts this is when we got a share popus murph said uh i make the billion dollar mistake every time i write job ascript what in boom um well hey you're learning what how would you explain what the billion dollar mistake is as it relates to type script and how it helps conceptualize it more sure first of all thanks Ryan for the link share second i find that i like sharing these or explaining these with a playground so if you don't mind all yeah i'm loving this thank you cool so this code is always going to crash function greets we haven't gone over functions but it's the same concepts as before you can annotate that a parameter is a particular type let's say string and this one okay and let's say like your name dot to to uppercase so here we say that we're going to greet somebody saying hi and then your name in uppercase and then we pass it null to greets do you think this code will crash yes or no no because is it null like nothing null is nothing which means it will crash because you're not allowed to reproperties off unlike other languages like ruby which allows you to do like fun shenanigans sometime yeah so this is always going to run and yet there is no red squiggly here which is weird because we have already been trained that if type script thinks something is going to crash it should give us a red squiggly and this is like five lines of code so it should know that this is going to crash and they're happy you've had this happen it happens happened which of this just something didn't squiggle and it crashed it and i think it was because of the the the typescript with a but again i say that because it was my first time learning typescript and i didn't put things in proper yeah anyway please continue yeah who knows then um so yeah uh who knows but in this specific case this is the billion dog mistake the idea that you can provide something like null or undefined in jobah to feel like almost the same which is annoyed me in every one for years um to a place that does not expect it that does not explicitly say this can be string or undefined or it doesn't explicitly say string or null um and a lot of programming languages that's just how things are like in C sharp prior to a few years ago in a Java I think still now like that's just how it is which is why in a lot of code you see like at the beginning of time it's like if you're a name it goes no throw new error your name is no that's really common and that's because a lot of old language didn't have the conflict of union types saying that something could be either let's say string or null they just were like it's one type and then it could also be null so the billion dollar mistake is corrected by a particular compiler option that TypeScript has is it strict null checks which says no uh null and undefined or no longer assignable to all the things this is no longer enough you're not allowed to provide null or undefined to something that doesn't explicitly say it can be null or undefined um i'm gonna pause on that and read everybody else's stuff of uh oh we read that one there we go uh Fikai says cannot read properties of undefined is probably the most common error in all of JavaScript if they had to take a guess uh pop a smurfs and uh they were going to mention stuff typing in Ruby but it can be mind blowing yeah fun fact TypeScript is like a halfway or like an intermediary step between duck typing and strict typing duck typing is do whatever you want that runtime here works it works it it quacks like a duck it's a duck strict typing is no we're gonna exhaustively check it before you run it and then it has to be explicitly the thing you said it's gonna be type into structural where you can say what stuff is supposed to be as long as we think it matches up that's fine so it's like duck typing in the development side of things what's an example uh like so Ruby is duck typing are there any other languages that are duck typing i don't know if i've actually ever heard of that term it's a fun term if it looks like a duck and cracks like a duck it's probably a duck uh JavaScript is duck type python Ruby except for the fact that python and Ruby are adding in type annotations in some native ish form and we have typescript for JavaScript so fun facts about duck typing everyone ends up just going to structural typing eventually or something better than duck typing because it's for all the reasons why typescript are good sometimes i just gotta let this sink in for a bit but this this is making sense like what you just said about like being able to can you show us what it what or what it was called again or i should just like look in here for the null to be turned because you had to turn that on right or null not to work uh strict nel checks is a compiler option um by default if you run type script with no settings it's not on for compatibility reasons they didn't have it originally but if you do the like friendly create a type script project for me in like any framework or type script itself like tsc dash dash and net which creates a new type script configuration they'll turn it on for you so the vast majority of projects at least the vast majority of new type script projects use strict nel checks and other strict flags by the way don't you the way that i phrase this in the book is if you've never worked in the more traditional language like c++ this is probably weird and confusing to you like why wouldn't this null not allowed thing be the case like the billion dollar mistakes seems weird and but if you've worked in those languages it may seem weird to you that that's even a mistake in the first place that we have another way like people get very entrenched in the mindsets and i i've seen both cases where like why wouldn't like null is just another type in type script and under find like why would it be that it's like some weird special case is how people think so you're looking at this going like why would why was it not like that all along why is null somehow special case you're right it shouldn't be um i am actually going into vf code and checking if my design good curious but okay this is really making sense and we talked about type aliases and i liked how earlier you were talking about how and i i almost wonder if this is making more sense about the ducks um because type aliases are not JavaScript almost anything that is not duck typing yeah okay uh oh uh i skipped i skipped popus popus murf said you answered the questions they asked yay um and so kai says duck typing is like if an object has a uh dot quack method then it is a duck and a non duck uh typing languages you would have to say beforehand that the object is a duck it's not defined enough it's not enough to just be defined a dot quack method on something for it to be a duck or that's how i think about it at least i'm actually really excited for objects because i i feel really embarrassed saying this but i'm like when you start to learn you're like i know too much i shouldn't not know this yet that's learning like you it's gonna get more confusing probably before it gets better and in python last week we were talking about functions and for some reason it couldn't click what functions were and i'm like what are not what yeah you literally use functions as part of everything and yeah that was i feel like objects are probably the same thing but at the moment they don't fully click so i'm excited to be getting into objects in one of these streams because it's gonna click like functions did and me not realizing how often they use functions cool yeah it's awesome to see the learning process like live and real time over the months oh my gosh it's so frustrating though i'm just like i'm slowly going through my old streams to be able to create chapters and i'm just like oh god gen gen what are you asking and i'm like asking math of cheese okay you have a motionally resonance empathetic conversations with yourself that's why i'm just like okay if i could like help myself back then this is what i would say um and then your combining type aliases that one seemed pretty pretty standard to me it didn't seem too confusing to me at least is there anything i know we skipped around so i do want to ask is there anything in this chapter that you're like dude we didn't cover and we need to cover i think so but i might be wrong about the need to cover parts um we didn't cover the difference oh i was just gonna say your your opinion on it it means we need to cover it maybe we'll see the the the great problem of teaching is that as soon as you know enough to teach you no longer enough beginner mindset it there's this very difficult challenge right um we didn't cover the difference between primitives and literals a primitive type we've already covered in the book string number actually no learned defines begins that no one never uses except for like special cases um so like string and number are like or brooley and are really common primitives but then you can have specific instances of those primitives like um hipecia is a string but that philosopher variable it's not going to be just any old string in the universe we know it's specific yeah symbol another great commonly used yeah yeah uh yeah well one of it it's um see if i i wrote in the book we'll see if i know stop talking ahead all the primitives in JavaScript are string boolean number null undefined big ends um symbol is it seven uh one two three four five six yeah i can go there really quick because i'm i feel like i'm getting smart about using this uh on here because i'm like oh i can know the page number yay that will help all right here are the oh oh look the seven okay we had to do special things to get that list all in one page what if i defaulted my default it would have been confused um yeah so those are primitives but each of those can have specific instances like that if you say const philosopher equals hipecia that's that variable hipecia is not just any old string we know it's more specifically the literal hipecia um which means you can do some clever fancy things like um vs code because of typescript telling it if you hover over variable that's declared const we'll give you the literal type like mark goldberg instead of string if you hover over oh okay i think i want to look at both of these no no oh oh there we i think we got it you got one figure caption yeah um we'll just turn it off for now so hmm so this doesn't seem very useful yet but it will probably be more useful later on uh one example of where it's useful is you could have union types where some of the things are primitives and some of the things are literals like you could say that something is either um a string or the number negative one to indicate failure some programs do this so if you check whether the result is something is the number negative one then you know it's like number negative one and in the else case you know it's going to be a string okay so and this is for everyone watching these are some of the really fun questions that i get to ask Josh because i did not learn job scripts first like i can make things happen if i google enough i can i can make it work do i know what things actually mean no like what is the difference between const and let great question a const variable may not be reassigned to a different value if you say const first name equals high you're never going to have a different first name okay um a let variable can be reassigned to a different value that's the only difference and is that type script only or job scripts in general job script in general yeah okay okay i thought so but i'm like hmm okay so if it's const mathematician equals mark goldberg then mark goldberg will always like if you want to look it up it's going to show up as mark or as the mathematician equals mark goldberg even i'm trying to think of a way to say it back to you uh that's not working very well um when would you go back and look at this like i guess hmm if i go search for mark goldberg i'm going to find a string where uh if i say let mathematician where if i put const mathematician i guess i don't really understand a way of saying this even though i feel like i get it it'll be a lot more useful in the objects chapter i feel like when you have a property that can be one of specific set literals and which literals it is changes what like the type is which is actually tying back to the tto did transfer object suggestion earlier where like sometimes people have an object where like the type property on that object or like variance or something if it's this one string if it's root then it has these properties if it's a sub-string like fetchable it has these properties that's where it comes in handy oftentimes and we'll actually see that in the next chapter how to do that did that just click well i think i did that with my first astro project for the website is i think because i was trying to ask you to compare them with modules and it weren't quite modules i think they were objects okay don't remember what i will go follow up about that hmm and that is like one of the hardest things that i could say to anyone is even if it doesn't make sense keep going it will click probably eventually um and then Ryan said and let is kept within a scope unlike var well thought what does that mean oh yeah so this is some dumb stuff dumb is the wrong word some silly stuff there are three ways to declare variable in javascript var let const let in const are the good ways var is the weird way var is how the language originally did it and let in const are added later but var had these weird rules where um oh i didn't even know how to explain it anymore it's been so long don't worry about var the fact that i can't instantly remember how to explain it means it's like weird and convoluted but the tldr is it's an old way declaring variables that has like weird shared rules we can have like multiple declarations all over the place and declare things out of order and it's confusing and everyone hates it and you should avoid it if possible so would be okay and would it be like var became before let and let like replaced var because you can reassign something with let let replaced var yeah because um well we're there are some specific cases where var actually still is useful unfortunately uh don't think we should go into them now but uh yeah be um generally speaking let has like become what people do instead of var okay so satisfy you yeah yeah uh so a const can reassign a cannot be reassigned a let can be reassigned and they're reassigning whatever being declared which is not necessarily a type so are you lost me in that one okay so like what what what is this i get that it's a string but like it's when you say this oh yeah you can't i i don't like when um when when it doesn't highlight the way i wanted to so i could uh uh show you i know it's so confusing it's like the instincts there right um that's okay so mark goldberg if what is mark goldberg called it would it just be a string so if you const like const mathematician mark goldberg you would just say mark goldberg cannot be reassigned or mathematician cannot be reassigned mathematician is what i was just at a conference where there's a running gag that the theme of the conference was either pandas because someone referenced it in merely talk or the phrase it depends and in this context another key thing from the phrase um was uh what the context here is that it is either a string or the literal mark goldberg depending on like what what you want to be more precise about or like how precise you want to be so both are valid and correct answers in these variables mark goldberg is a string more specifically it is the literal string mark goldberg but mathematician would be the variable yes or like the word mathematician is the variable so a const declares the variable and a const makes the variable not being able to be reassigned a let makes the variable be able to reassigned and barded something to the variable we're not going to talk about that's an excellent description yes that is yay and this is one of the hardest things with the like learning by you're like doing your own stuff is see like it took me forever to figure out how to ask you what a variable was because i didn't know the word well okay i have things from poppins myth on here that i have myths so let's go back thank you for your patience um does anyone remember use strick and i job ascript with bars probably showing their age um remember so you would have a bar and tell it to use strick so it'd be kind of more like a const now um newer developers these days don't know how weird job ascript was like a old Seattle light for cleaner um job ascript is so weird that they added the word use strick like you could say at the beginning of a file use strick and that would make job ascript slightly less weird um there were proposals to add even more like use strickter or like use strick too or something to make it more and more strict but they they never went anywhere so there's some like really wacky things in job ascript that you could do that get disabled if you just put the string use strick at the top of your file or in like a function of black and uh that was like yes six oh this is funny enough poppins myth jaren i think our first chapter is when i got to learn about the versioning of these but i didn't know existed yeah that's what he stands for trivia question oh shit i don't know let me see if i wrote it down i actually don't know if i wrote it down um i do know it's versioning which i didn't know beforehand but i don't know if i wrote down no i don't think i wrote down up wait no i just wrote down es lint compared to prettier when we were talking about it turning time time uh at the beginning of the last street but no i don't remember what es means eckema script do you remember what eckema stands for i don't remember what eckema stands for i'm looking it up now it's like the standards organization that runs um like oh my god yurkin computer manufacturers association okay um it's the standards body that runs a lot of things including the job as script standard but because oracle like a jerk owns the job script trademark and we'll give it up uh we have to technically call the language something else hence eckema script there is shade intentionally there by the way they were hiring a developer advocate for those who are applying for jobs they hit me up i found a job you can go apply there i like my job i don't know why people do this when you get a job they finally like reach out to you and it's like bro always no i like my job please go away um okay so it's called eckema script i will look more into that and then um okay i said uh what they do is always use const and then if i find out later that i need to mutate it i change it to a let's that is good to know because i am rebuilding my site with it is still with astro but it's with like um the theme isn't as designed i guess it's a good way of saying it like it's not as structured so i can customize a lot more so i'm finding myself doing a lot more fresh coding instead of mutating their code so it's good to know these i um oh i'm gonna go share like help us with fence and i just have to click it into a different tab you can do because stream yard doesn't do that right aha oh this is good thank you yay okay ecma international formally european computermexia midfactures association that is like a lot but now we know now we know like reading rainbow for more you know okay okay anything else really quick let me write this down so a can all these define variable this is why i really want to be able to do this on an ipad because people then could actually see all these random notes that i'm doing instead of me just like staring down at my i am curious what's going on over there by the way i'm told from a mutual love ours on twitter alien alien that i should remind you or ask you if you if you like a particular astro theme you know which one i'm using now you're using brutal i think it is yeah it's one that i'm saying that i don't know if more defined is the right way of saying it or i'm just better at breaking this one either way there there really could be a um i just started using it i got the colors to work fine i can show you guys i'm very proud of it it's just it's just started but um because and yes right and i probably should look at notebooks cam but that's why i'm trying to think if um i can get uh the ipad because i also wanted ipad so i'm trying to find a business reason to get an ipad i don't know if it's going to work okay so here is the layout so far and i'm so excited about it it's called brutal um which let me grab the information and so this is my my github and you can see that it came from alien which is the east one and okay so this is something i really appreciated that he did um with so this is the original theme what it originally looks like i'm like dude this is don't i need this in my life but there's more he also put his website and i was like dude that gives me even more ideas and voila this is where we're at now very nice and i'm excited about it i'm like this is so cool but here is where it's not knowing me fix how of it does not scale i'll give you a little head yeah yeah it's like and then look at these learning just i don't know how to fix it it took me long enough to get the colors to work the way i wanted to so yeah it's on pot well i should be working on it but i haven't adjusted to my new sleeve schedule yet and but the way the reason i did all of this instead of my old teach gen tech site is because now that i have a real job it's kind of weird just telling someone to go to one of these and so i've just been like yo i'm gen gen odd i do all of these things you should uh check out one of them so yeah yeah i've been meaning update my site for the longest time but i can't get rid of it just so darn useful just does a landing page oh that's a different one though great i just mean like as a list of links like it's it's good to have and then also yes like it's a demo etc yeah there's one that i think i think it was yours that linked to something that was not your actual website or it was like a page within your website that was like a funny image the ritual yeah oh yeah i'm all my conference slides i'd like to do high dot joshra piglet we've got com uh i think it's on twitter yeah because people can't even spam recruiter yelling at me um so yeah don't go to it unless you want to wrick roll everyone but hi dot joshra piglet dot com is a general ideal and oh my goodness oh my goodness we need to pause hi jiko here take us amazing yay jiko we were learning typescript now we're learning how to construct a rick roll in the area of modern web standards where you can't auto play a video with sound so you have to put an enter button to gain user intent so i wanted to show that to everyone because when i first like then myers was like yo human josh should be friends and how do you should reach out to him and i go to like look at his site to like learn more about him and this happens so good sorry i know but it does make me actually remember it a lot more and it goes to your humor and yes for those so this is first time first time chatter but not first time guest uh uh jiko was my first time of someone trying to explain to me what typescript was and then we got stuck on him trying to explain what headless is which i still don't understand but i haven't i don't even remember why it came up or workers workers um not to headless what were we talking about several well is headless part of serverless classly workers uh so kai says uh josh reminds me uh vichard hendrickson silicon valley i'll take it that's a good show all right i had a previous engineering manager slash director called say that i reminded i'm not an engineer some some head of department somewhere something told me um it was uh it was maybe patrick vapeman ask or like some like ryan gaussing playing the like some psychopath or something who was handsome yeah fine close enough this is better um couple things yay lian thank you for joining and you should just come on our stream and you know help with um my side because you created the theme and i'm working on it and thank you for the follow and jiko yes i am using stream yard and hello Laura um yes yes i am i am going to have my ovs set up oh yeah you were gonna do that are you were interested in it intensively looking at it right oh yes and ping yes i'm going to set it up for the new one uh for working with work to figure out what we're doing on all of that because i got a streamline my my stuff and stuff and yeah thank you for doing all the shout outs ryan um and yes i built i'm building a new astro site and i can show you what it's supposed to do and what i did before i broke it so um this is what yeah not that you can minimize that that is what we were learning alien made and it's pretty and it does things and no it's different it's different i'm building a new site i still have the old site there it's just not like public but like look it works it functions properly and then the cool thing is alien also put their site here which gave me more ideas i was very excited so and then we have my site which is getting there and i even have different colors so excited about it and like colors match my shows and my jobs um and i will show you in a second pop a smith thank you for the call out but what i did not do because if we go back to alien site look look it actually does the things it's supposed to do and still fits like it looks good mine on the other hand i broke i don't know how but it uh it does that me or i did this but that's why i'm like i don't know what i do alien and everyone um jake up will tell you i break a lot of stuff when i'm trying to figure this stuff out because i'm like oh that's an org let me go try something else breaking stuff is one of the best ways to learn stuff though i like this right and agree i get the more you get the more you've broken things the more you've learned yay yeah and then it's like i go to my dnd crew and they're like someone please help me get a stop i don't know what i'm doing but uh yes um i break a lot of stuff and i do learn a lot and this is actually oh you guys i'm really excited about this one i'll show you this one i built another astro site that didn't did not break i'm really proud of it it's just a landing site but i built it without asking anybody for help yay it was very exciting that's really beautiful yeah yeah i don't remember which theme but if you look at the get hub it will show you the theme yeah yeah they they have it but it was i was so excited this one i made without breaking in 30 minutes compared to the ungodly hours i put on these sites but yes astro is amazing poppies map um i will say oh this is something i meant to ask um uh so built astro dot build okay yeah could somebody and uh Josh i felt like you are a good candidate on possibly explaining this please um how okay something like quick couldn't be used with astro and astro can't use because quick also wouldn't be able to set up because astro does its components you know up i was i actually met Gillian at a conference wherein both astro and quick were demonstrated on stage but and i learned them and they were both really cool but i don't think i could explain why one can't be used with the other other than just they're both things like quick as its own framework it's like a way to do very small like super incrementally loaded stuff and astro like manages other UI libraries i don't i don't think that's a good explanation and i don't feel confident giving anything more than that i'm sorry oh it's good i mean this is um and Jacob just said uh not yes most things can work in astro and to popus merfs um points what is the cat's name again jerry i'm trying to get him out he's a knowing name hi jerry um oh okay uh Gillian says they're both trying to solve the same problem but take another approach i think what i'm curious about and is like i like astro because i can find things like this and be like cool let me see what i can take that they made that's really pretty and also made my own thing where like with react and that kind of stuff i'm like that's a lot harder to find and i don't know if that's because of astro but i also know that we have gone on a really far tangent from typescript um i don't even know how we got here uh really i couldn't tell you Gillian said uh in short uh would say that astro is for content driven websites and quick is for them more real web application sites that is fair i am i am c view nation and nux nation and then also like learning about quick and then i just really like astro i'm like i want to learn something that i can build with all of them to compare them all but i don't know or takes time back to learning typescript yay there anything else that you would suggest we go over from typescript um no i think we're good uh before all these nice folks talking about astro came in work and quick we we covered um union types uh literals versus primitives the billion dollar mistakes for knell checking um and typelaces is that all
there anything else that you would suggest we go over from typescript um no i think we're good uh before all these nice folks talking about astro came in work and quick we we covered um union types uh literals versus primitives the billion dollar mistakes for knell checking um and typelaces is that all okay let's see um i will see if i can summarize them uh see if you can explain it to the people in the chat see if any of them don't yet know it and see if those explanations click it all that'll be a fun challenge okay i i will say i am cheating and um looking at the summary because i have to think about how i would even put it into my own terms to say that i understand it so okay unions are where you can unions be made with a const then to go to my other question
okay let's see um i will see if i can summarize them uh see if you can explain it to the people in the chat see if any of them don't yet know it and see if those explanations click it all that'll be a fun challenge okay i i will say i am cheating and um looking at the summary because i have to think about how i would even put it into my own terms to say that i understand it so okay unions are where you can unions be made with a const then to go to my other question yeah if you say like const something equals then some condition question mark cold yeah the ternary okay so unions are where you can put two different types so you can put that it's a billion and then the dashy thing and then the other type which could be a string and it's i i call it a pipe i don't know that that would make more sense than a dashy thing a dashy thing there are a lot of dashy things also a lot of pipes that's true that's true and then this is also the hard thing i have about this is i'm like i know we went through type annotations and i remember going the words just don't make sense to me but it was in chapter two okay i don't know how to explicitly indicating union types with type annotations yeah so let's say you have a variable and you don't immediately assign something to that variable oh you could say it's eventually yeah it starts off undefined but maybe you eventually want to add a string or a number maybe either who knows so you could say let variable colon string or a number or like string or number or undefined or something like that to say that eventually i might add one of these possible types okay that makes sense how type narrowing reduces the possible types of the value so it's like taken away the pipe and leaving it as one cool uh difference between constants variables with literal types and let variables with primitive types and primitive types are these seven that are indicated in chapter two and it is an undefined boolean string number bigant and simple and literal ones are like constants mathematician equals marked goldberg and because mathematician would be literal because we're not telling it if it's string or anything yeah yeah because it's constant can't be real signed so it's not going to be any other string in the universe it's only ever going to be that one literally exact string okay and then the billion dollar mistake um turning on script and all checking because null will not come up with reds quickly in the line telling you that it's wrong and you could break some shit so you want to turn it on you want to break that shit yeah using explicit undefined to represent values that might not exist i don't know if we actually went through that one and it's not forgot about that one oh yeah that was a thing so let's say you declare variable let value mm-hmm what type is that value variable or like let value colon string and then the next time next line you do console dot log parentheses value it's going to log undefined because there's no value in that value variable yes oh so because it was blank where like if we use implicit undefined we actually put undefined in the quotes not quotes brackets in the type annotation in the type annotation yeah could i could i share the playgun for this actually this is like one of my favorite things yeah cool i like that you're doing this because it is helping click more because sometimes like trying to talk about it and then also trying to type it can be very nerve-wracking to also learn yeah so let's say you have a variable like let sup good good variable name and yeah and then you do like count about log sup what's in sup it's undefined undefined well let's say you you declare that sup is eventually going to be a string and then you want to do like sup that to uppercase well perhaps if knows this is implicitly meaning you haven't explicitly said this but like we know it's undefined because you haven't actually assigned a value to it so in reality sup the variable is kind of like the union type string or undefined until you assign something it's either a string or undefined really undefined and type shift yelling at us because it knows we gonna crash or shit and break but then if we do like sup equals hello yay now type shift knows after this sup is again string it's it's definitely defined it will not complain type shift type shift does know type shift yells a lot ultimately you could do sup is string or undefined like that's allowed and then the type of error message says well spelled sup is possibly undefined and then you can instead if you wanted to do like if sup let's say like if math dot random is greater than 0
yeah if you say like const something equals then some condition question mark cold yeah the ternary okay so unions are where you can put two different types so you can put that it's a billion and then the dashy thing and then the other type which could be a string and it's i i call it a pipe i don't know that that would make more sense than a dashy thing a dashy thing there are a lot of dashy things also a lot of pipes that's true that's true and then this is also the hard thing i have about this is i'm like i know we went through type annotations and i remember going the words just don't make sense to me but it was in chapter two okay i don't know how to explicitly indicating union types with type annotations yeah so let's say you have a variable and you don't immediately assign something to that variable oh you could say it's eventually yeah it starts off undefined but maybe you eventually want to add a string or a number maybe either who knows so you could say let variable colon string or a number or like string or number or undefined or something like that to say that eventually i might add one of these possible types okay that makes sense how type narrowing reduces the possible types of the value so it's like taken away the pipe and leaving it as one cool uh difference between constants variables with literal types and let variables with primitive types and primitive types are these seven that are indicated in chapter two and it is an undefined boolean string number bigant and simple and literal ones are like constants mathematician equals marked goldberg and because mathematician would be literal because we're not telling it if it's string or anything yeah yeah because it's constant can't be real signed so it's not going to be any other string in the universe it's only ever going to be that one literally exact string okay and then the billion dollar mistake um turning on script and all checking because null will not come up with reds quickly in the line telling you that it's wrong and you could break some shit so you want to turn it on you want to break that shit yeah using explicit undefined to represent values that might not exist i don't know if we actually went through that one and it's not forgot about that one oh yeah that was a thing so let's say you declare variable let value mm-hmm what type is that value variable or like let value colon string and then the next time next line you do console dot log parentheses value it's going to log undefined because there's no value in that value variable yes oh so because it was blank where like if we use implicit undefined we actually put undefined in the quotes not quotes brackets in the type annotation in the type annotation yeah could i could i share the playgun for this actually this is like one of my favorite things yeah cool i like that you're doing this because it is helping click more because sometimes like trying to talk about it and then also trying to type it can be very nerve-wracking to also learn yeah so let's say you have a variable like let sup good good variable name and yeah and then you do like count about log sup what's in sup it's undefined undefined well let's say you you declare that sup is eventually going to be a string and then you want to do like sup that to uppercase well perhaps if knows this is implicitly meaning you haven't explicitly said this but like we know it's undefined because you haven't actually assigned a value to it so in reality sup the variable is kind of like the union type string or undefined until you assign something it's either a string or undefined really undefined and type shift yelling at us because it knows we gonna crash or shit and break but then if we do like sup equals hello yay now type shift knows after this sup is again string it's it's definitely defined it will not complain type shift type shift does know type shift yells a lot ultimately you could do sup is string or undefined like that's allowed and then the type of error message says well spelled sup is possibly undefined and then you can instead if you wanted to do like if sup let's say like if math dot random is greater than 05 sup is LA then later on you could check like if sup is defined then we count all that log and this is type narrowing to recap because inside the ziff statements and the block in line eights type shift knows that this stuff would only be reached if sup is defined if it's actually a string and not undefined so inside the ziff block sup is actually type string no crash it makes enough sense i don't know if i'd be able to repeat that one back as much but it makes enough sense to keep moving forward okay and then using type aliases to save typing a long unions repetitively that one was just instead of let something be fully a number string dull you would just say let it be oh you would just say it type i think it makes sense oh i didn't mean to do that if you were still sharing i just hit the keyboard that's like a copy and paste or like a cookie cutter like when i say maybe string what i actually mean is string or undefined by the way to enter the chat like we could do like if sup not equaled undefined like head shift is far enough to know that any area that can only be reached if sup is actually a string inside that area sup is a string and like if type of sup is string leads to it all work yes yes what Jacob said there's so many type of checks yes let's not confuse me we haven't even gotten to objects yet that case will just stick with it objects are that isn't too weak join us in two weeks we'll be talking about objects lots to learn before then next week i'll have someone on to talk about data i'm very excited because that's a good place to start instead of Kafka but uh old way of doing it was type of guards in javascript there's so much to learn yes architectural archeological history in javascript that like do it be as useful in this now it is but like cool to know once you have the time okay i still have to catch up and start watching season three critical mass so i have a pretty long to do list and i have to get my website done one side is a little i got it actually really within it's probably gonna be my weekend project but um respect i feel i feel like we're good at least getting my brain a little fuzzy and learning enough that by the time we get to objects i'll be like oh yeah i do understand that so on these closing notes we have a what are the closing ones are they high coups too oh my god i forget i want to say they're just puns right uh i don't know i know they're just puns the puns okay let's see if i still have it up on here i do i do okay okay yeah why are const variables so serious and i'm gonna have a guess before i bring it up on screen why don't you know how to get a critical role i think i did okay and that's close right so critical mass critical role it's because they take themselves too You literally, it's fun
5 sup is LA then later on you could check like if sup is defined then we count all that log and this is type narrowing to recap because inside the ziff statements and the block in line eights type shift knows that this stuff would only be reached if sup is defined if it's actually a string and not undefined so inside the ziff block sup is actually type string no crash it makes enough sense i don't know if i'd be able to repeat that one back as much but it makes enough sense to keep moving forward okay and then using type aliases to save typing a long unions repetitively that one was just instead of let something be fully a number string dull you would just say let it be oh you would just say it type i think it makes sense oh i didn't mean to do that if you were still sharing i just hit the keyboard that's like a copy and paste or like a cookie cutter like when i say maybe string what i actually mean is string or undefined by the way to enter the chat like we could do like if sup not equaled undefined like head shift is far enough to know that any area that can only be reached if sup is actually a string inside that area sup is a string and like if type of sup is string leads to it all work yes yes what Jacob said there's so many type of checks yes let's not confuse me we haven't even gotten to objects yet that case will just stick with it objects are that isn't too weak join us in two weeks we'll be talking about objects lots to learn before then next week i'll have someone on to talk about data i'm very excited because that's a good place to start instead of Kafka but uh old way of doing it was type of guards in javascript there's so much to learn yes architectural archeological history in javascript that like do it be as useful in this now it is but like cool to know once you have the time okay i still have to catch up and start watching season three critical mass so i have a pretty long to do list and i have to get my website done one side is a little i got it actually really within it's probably gonna be my weekend project but um respect i feel i feel like we're good at least getting my brain a little fuzzy and learning enough that by the time we get to objects i'll be like oh yeah i do understand that so on these closing notes we have a what are the closing ones are they high coups too oh my god i forget i want to say they're just puns right uh i don't know i know they're just puns the puns okay let's see if i still have it up on here i do i do okay okay yeah why are const variables so serious and i'm gonna have a guess before i bring it up on screen why don't you know how to get a critical role i think i did okay and that's close right so critical mass critical role it's because they take themselves too You literally, it's fun It's fun. Well, thank you, Josh, for joining today and for coming to hang out and what our thing was funny, Jacob. Our thing was funny. And Jacob, I am going to work on getting the OBS set up with the chat up. Okay. And everyone, please follow. So you get notifications and go follow Josh
It's fun. Well, thank you, Josh, for joining today and for coming to hang out and what our thing was funny, Jacob. Our thing was funny. And Jacob, I am going to work on getting the OBS set up with the chat up. Okay. And everyone, please follow. So you get notifications and go follow Josh See if I can do a shout out. I try to do these. I'm not. I'm actually doing my own Twitch stream in half an hour just working on some types of good stuff. People want a little more in depth stuff. A little I am getting kind of tired so it might be a chill stream. We'll see. I did message you
See if I can do a shout out. I try to do these. I'm not. I'm actually doing my own Twitch stream in half an hour just working on some types of good stuff. People want a little more in depth stuff. A little I am getting kind of tired so it might be a chill stream. We'll see. I did message you I did message you. I saw that tweet and I was like, dude, you're doing two streams. Yeah. Brain dead. I'm already brain dead. It's perfect. Like conference for a day yesterday. Oh, yeah. Great conference, by the way, staff plus New York City, really, really good stuff
I did message you. I saw that tweet and I was like, dude, you're doing two streams. Yeah. Brain dead. I'm already brain dead. It's perfect. Like conference for a day yesterday. Oh, yeah. Great conference, by the way, staff plus New York City, really, really good stuff The lead depth conference line is good. Yes. Yes. Yes. So thank you, the shadow. Hey, and please yes, go follow, Josh follow me. Come join us more often. Ice cream. Oh God. Starting next week. I stream five days a week. Woo. Brain dead. Follow Jacob. Yeah
The lead depth conference line is good. Yes. Yes. Yes. So thank you, the shadow. Hey, and please yes, go follow, Josh follow me. Come join us more often. Ice cream. Oh God. Starting next week. I stream five days a week. Woo. Brain dead. Follow Jacob. Yeah Follow Jacob. Yeah. I don't I don't know if I'm playing D&D anymore because I don't know if we're switching to another thing yet. We were doing something. But we do play D&D on Friday night sometimes. And on Jacob's stream. So go follow Jacob. I'm a giant hippo. It's phenomenal
Follow Jacob. Yeah. I don't I don't know if I'm playing D&D anymore because I don't know if we're switching to another thing yet. We were doing something. But we do play D&D on Friday night sometimes. And on Jacob's stream. So go follow Jacob. I'm a giant hippo. It's phenomenal It's phenomenal. Her name is Hippity. Hippity hop. Or we might start streaming some other game. But I don't remember what it's called. Yes. Go follow. Go follow Jacob. The expanse. We might be doing it. And I'm trying to see if they'll do it on Sunday afternoons when I'm awake
It's phenomenal. Her name is Hippity. Hippity hop. Or we might start streaming some other game. But I don't remember what it's called. Yes. Go follow. Go follow Jacob. The expanse. We might be doing it. And I'm trying to see if they'll do it on Sunday afternoons when I'm awake Because I wake up at 4 a.m. mountain. That's my calls are early. Yeah, working for a finished company. I actually like I like it. Yes. Yeah, thank you Ryan. Thank you for sounding out everybody. Yo, like Ryan mods quite a few channels. But thank you for always modding mine
Because I wake up at 4 a.m. mountain. That's my calls are early. Yeah, working for a finished company. I actually like I like it. Yes. Yeah, thank you Ryan. Thank you for sounding out everybody. Yo, like Ryan mods quite a few channels. But thank you for always modding mine Because I'm always like, I don't know how to block someone. Please ignore these. I'm like a horrible streamer. Well, like, I don't know. All right, I am not going to raid you because if Josh is going to be streaming, I'm like, half an hour, you should just like come back and watch Josh's
Because I'm always like, I don't know how to block someone. Please ignore these. I'm like a horrible streamer. Well, like, I don't know. All right, I am not going to raid you because if Josh is going to be streaming, I'm like, half an hour, you should just like come back and watch Josh's Do you have what are you? Do you use OBS? I do. Yeah. Do you have a countdown on it? No, I don't have anything. I've been meaning this setup. I actually just set up stream elements. I've been meaning a set of like overlays and stuff. I just haven't had the time. OK
Do you have what are you? Do you use OBS? I do. Yeah. Do you have a countdown on it? No, I don't have anything. I've been meaning this setup. I actually just set up stream elements. I've been meaning a set of like overlays and stuff. I just haven't had the time. OK OK. Jacob, how did you get your countdown? Did you start? How did you start yours? I'm more than wondering if I need to like create one. You use overlays like Google Twitch overlays or OBS overlays? That's not overlays. Yes. There's always more to do as a streamer. It's a fun. OK. OK
OK. Jacob, how did you get your countdown? Did you start? How did you start yours? I'm more than wondering if I need to like create one. You use overlays like Google Twitch overlays or OBS overlays? That's not overlays. Yes. There's always more to do as a streamer. It's a fun. OK. OK It's a fun. OK. OK. Well, and goodbye everyone. Thank you all.
It's a fun. OK. OK. Well, and goodbye everyone. Thank you all.