Hello, hello beautiful humans. Welcome to another episode of Teach Gen Tech. And today we have, okay, before the show I asked him how to say his name. Now we're going to, because I started saying in my head magic, but it's... I mean, I like this version I know that some people that have, that have, the problem pronouncing my name, which is magic. Magic. Like if you say it, I can say it, but then after that... I even have a photo when... I was at Starbucks Bank coffee and they asked me for my name, and I have it written on the cup magic
I know that some people that have, that have, the problem pronouncing my name, which is magic. Magic. Like if you say it, I can say it, but then after that... I even have a photo when... I was at Starbucks Bank coffee and they asked me for my name, and I have it written on the cup magic Okay, okay. It's a question. I will say, I hate this. It's something that I've always struggled with, and I feel very, very fortunate for those from all around the world. Are patient? I hate that as like Americans, we've kind of like cut it short for everybody
Okay, okay. It's a question. I will say, I hate this. It's something that I've always struggled with, and I feel very, very fortunate for those from all around the world. Are patient? I hate that as like Americans, we've kind of like cut it short for everybody Like we give them nicknames and stuff, and I'm like, I don't want to do that. I just... I have a... It's frustrating. So thank you. And I mean, I like magic too, but... But still, there are many good news. For example, I could be called Gjagas. I mean, the cool part about Gjagas that there is Greg
Like we give them nicknames and stuff, and I'm like, I don't want to do that. I just... I have a... It's frustrating. So thank you. And I mean, I like magic too, but... But still, there are many good news. For example, I could be called Gjagas. I mean, the cool part about Gjagas that there is Greg It's short for... I mean, Greg is short for Gjagas. And magic doesn't have the English form, so it's more difficult. Got it. Got it. Got it. Okay. Well, please introduce yourself as I got stuff on names, and what we're going to be learning about today. Okay, so I work as a workers ambassador
It's short for... I mean, Greg is short for Gjagas. And magic doesn't have the English form, so it's more difficult. Got it. Got it. Got it. Okay. Well, please introduce yourself as I got stuff on names, and what we're going to be learning about today. Okay, so I work as a workers ambassador So this is a typical never-all role at the Polish company called Body.works. And we are working on a CI-CD application. So, application that will help you automate all your deployments, and not only because you can do lots of different magical stuff if you just have some time and some ideas
So this is a typical never-all role at the Polish company called Body.works. And we are working on a CI-CD application. So, application that will help you automate all your deployments, and not only because you can do lots of different magical stuff if you just have some time and some ideas And yeah, we're going to talk about automation because for most of my life, I was a developer before I became a dev rel. And the thing that unites us and system administrators is the fact that we are lazy. I mean, I know that I always should say the word efficient
And yeah, we're going to talk about automation because for most of my life, I was a developer before I became a dev rel. And the thing that unites us and system administrators is the fact that we are lazy. I mean, I know that I always should say the word efficient And many people say that using core efficient rather than lazy sounds better. But let's be honest, it's not about efficiency. It's about... it's kind of about this laziness
And many people say that using core efficient rather than lazy sounds better. But let's be honest, it's not about efficiency. It's about... it's kind of about this laziness But this is the laziness that drives us forward and make us do different things, thanks to which we don't have to waste so many time doing those boring, repeatable things. And yeah, and that's what we'll talk about this, how to automate our deployments and what in general the CI-CD is
But this is the laziness that drives us forward and make us do different things, thanks to which we don't have to waste so many time doing those boring, repeatable things. And yeah, and that's what we'll talk about this, how to automate our deployments and what in general the CI-CD is And I think this is just like the week because... So, homie and I had a call earlier today talking about a lot of this, automation in life, just like everything, because I definitely am falling behind on a lot of stuff. And then also, it was earlier this week we talked to Leo about data models
And I think this is just like the week because... So, homie and I had a call earlier today talking about a lot of this, automation in life, just like everything, because I definitely am falling behind on a lot of stuff. And then also, it was earlier this week we talked to Leo about data models So it's like figuring out that data model to find out what you can automate. And I'm excited to learn about this because I feel like laziness is working smarter, not harder. And so, and thank you, homie, for joining me again today. And what is CI-DC? CI-C-I-C-E? Yes
So it's like figuring out that data model to find out what you can automate. And I'm excited to learn about this because I feel like laziness is working smarter, not harder. And so, and thank you, homie, for joining me again today. And what is CI-DC? CI-C-I-C-E? Yes So, this is one of those abbreviations that people in IT love to use to show how smart they are and that no one knows what we are talking about. And this is cool, but in general CI-CD means the CI-part means continuous integration, which is just every time you push a change to your code, test it
So, this is one of those abbreviations that people in IT love to use to show how smart they are and that no one knows what we are talking about. And this is cool, but in general CI-CD means the CI-part means continuous integration, which is just every time you push a change to your code, test it That's it. It's simple as that. I mean, really, this is the whole philosophy behind CI-CD is a really simple. And CI-D-part means two things because either about continuous delivery or deployment
That's it. It's simple as that. I mean, really, this is the whole philosophy behind CI-CD is a really simple. And CI-D-part means two things because either about continuous delivery or deployment One means that every time when we test it our code, we prepare everything to make it, let's say, deployable. So, we're just waiting for a sign of our, let's say, senior developer or manager. Okay, let's release this today, but everything every time the code passes the test is ready
One means that every time when we test it our code, we prepare everything to make it, let's say, deployable. So, we're just waiting for a sign of our, let's say, senior developer or manager. Okay, let's release this today, but everything every time the code passes the test is ready So, we are, we aren't in a situation when our code is ready, but we can deploy it yet because we have to do something more. No, it's everything always prepared for it, just pressing the button to release it
So, we are, we aren't in a situation when our code is ready, but we can deploy it yet because we have to do something more. No, it's everything always prepared for it, just pressing the button to release it And continuous deployment means that every time when the test passes, we are deploying everything automatically, just like this. This means we have to have our test suit, really strict, really great, and we have to be prepared for it. So, it's difficult to achieve, but yeah, it's doable
And continuous deployment means that every time when the test passes, we are deploying everything automatically, just like this. This means we have to have our test suit, really strict, really great, and we have to be prepared for it. So, it's difficult to achieve, but yeah, it's doable On the other hand, there is nothing wrong in releasing everything manually and having the sign to release it
On the other hand, there is nothing wrong in releasing everything manually and having the sign to release it But on the other hand, when we try to introduce CICD into our flow, sometimes the introduction looks a bit weird because sometimes we start with the CD part because it's easier to do rather than see the CI part
But on the other hand, when we try to introduce CICD into our flow, sometimes the introduction looks a bit weird because sometimes we start with the CD part because it's easier to do rather than see the CI part And what is the most important about CICD or let's call it really deployment automation because that's all what it is. It's not a tool. It's not a tool, it's not even not a tool set. It's a philosophy or a methodology of how we work. So, we don't really, we don't need any tool for it
And what is the most important about CICD or let's call it really deployment automation because that's all what it is. It's not a tool. It's not a tool, it's not even not a tool set. It's a philosophy or a methodology of how we work. So, we don't really, we don't need any tool for it We could do everything just by remembering to run some tests before pushing our code into a Git repository because that's it
We could do everything just by remembering to run some tests before pushing our code into a Git repository because that's it But it's really important to be, first of all, very transparent with all the team because we are using, we have to use a repository and we have to be strict about the test and also we need to write them at some point
But it's really important to be, first of all, very transparent with all the team because we are using, we have to use a repository and we have to be strict about the test and also we need to write them at some point But the goodness is, oh, and it's also very, what's the important is like language agnostic. So, we can use CICD in whichever language we write and it doesn't matter
But the goodness is, oh, and it's also very, what's the important is like language agnostic. So, we can use CICD in whichever language we write and it doesn't matter And this was kind of a problem for me because I wanted to prepare something cool and I started wondering, yeah, but if I, I know that PHP is not so sexy anymore, so and we can try it, but I will show, I will show the also language agnostic approach
And this was kind of a problem for me because I wanted to prepare something cool and I started wondering, yeah, but if I, I know that PHP is not so sexy anymore, so and we can try it, but I will show, I will show the also language agnostic approach How to create a part of our CICD deployment on a website that really, it doesn't matter and which it is written, we will be able to use it. I dig it and hello, Noel. And okay, so continuous, or CICD is continuous integration and continuous deployment
How to create a part of our CICD deployment on a website that really, it doesn't matter and which it is written, we will be able to use it. I dig it and hello, Noel. And okay, so continuous, or CICD is continuous integration and continuous deployment This deployment and delivery, there are a few parts under the CD and it's not, and it's not compacted anymore. Okay, I was just writing it and I was like, I just want to put it in the chat so I make sure everybody had that written out
This deployment and delivery, there are a few parts under the CD and it's not, and it's not compacted anymore. Okay, I was just writing it and I was like, I just want to put it in the chat so I make sure everybody had that written out All right, well, where does one start with CI PC? Because you said that not everybody can do the CI part, but may do the CD part. And what happened? I see it like this because most companies start at one of two moments
All right, well, where does one start with CI PC? Because you said that not everybody can do the CI part, but may do the CD part. And what happened? I see it like this because most companies start at one of two moments First of all, thanks to the fact that if we're using some CI CD application, it also helps us in the security, because this is this hub for which everything has to go. So we don't have to share FTP passwords and logins to users
First of all, thanks to the fact that if we're using some CI CD application, it also helps us in the security, because this is this hub for which everything has to go. So we don't have to share FTP passwords and logins to users So the moment when we have, for example, a bridge or a person left the company and for some reason, some changes appeared on one of the websites he used because we forgot to rest his passwords and something like this
So the moment when we have, for example, a bridge or a person left the company and for some reason, some changes appeared on one of the websites he used because we forgot to rest his passwords and something like this This is one of the moments when some people, okay, we need to centralize it and how to do it. They learn, okay, maybe let's use something to automate the whole deployment. So we won't have to give away those logins and passwords. So this is one way
This is one of the moments when some people, okay, we need to centralize it and how to do it. They learn, okay, maybe let's use something to automate the whole deployment. So we won't have to give away those logins and passwords. So this is one way So this is one way. And the second one is the moment when we just deployed on production a major backup rather than working code. So we try to learn, okay, so what to do, not to do it again, how to prevent it, how could we test it, how could we check it
So this is one way. And the second one is the moment when we just deployed on production a major backup rather than working code. So we try to learn, okay, so what to do, not to do it again, how to prevent it, how could we test it, how could we check it And this is the moment when they probably start learning about some testing and when they start about testing, they learn about the whole flow of CI CD. And sometimes it's all about, I mean, this is the mic
And this is the moment when they probably start learning about some testing and when they start about testing, they learn about the whole flow of CI CD. And sometimes it's all about, I mean, this is the mic My way was with the laziness because at the moment when I started playing around with all those, with all building, all converting SAS into CSS, building JavaScript and doing many, many things before deploying code, it started to get a bit annoying to always prepare it locally and remember to deploy everything
My way was with the laziness because at the moment when I started playing around with all those, with all building, all converting SAS into CSS, building JavaScript and doing many, many things before deploying code, it started to get a bit annoying to always prepare it locally and remember to deploy everything So it's good boring. So I don't like boring stuff. Real quick, homie asked a question in the chat for Ben. So maybe Ben's still listening. If Ben's site is still using CI DC, tasks are flow
So it's good boring. So I don't like boring stuff. Real quick, homie asked a question in the chat for Ben. So maybe Ben's still listening. If Ben's site is still using CI DC, tasks are flow I asked, I wanted to call that one out because my question was also going to be to everybody joining us, like how well known is CI DC. Is it like, everybody kind of uses it on download or not really, let's see. Ben did reply. We have full-fledged CI CD pipelines that take ages from my question
I asked, I wanted to call that one out because my question was also going to be to everybody joining us, like how well known is CI DC. Is it like, everybody kind of uses it on download or not really, let's see. Ben did reply. We have full-fledged CI CD pipelines that take ages from my question Sorry, yeah, exactly. That's it because we don't always have to run all the tests because we can run like gazillions of tests that will take an hour. But sometimes we just need a simple check. Okay, everything looks as it looks like and we can deploy it. That's it
Sorry, yeah, exactly. That's it because we don't always have to run all the tests because we can run like gazillions of tests that will take an hour. But sometimes we just need a simple check. Okay, everything looks as it looks like and we can deploy it. That's it That's it. And it's working after so sometimes it's very simple. It's, yeah, it's not the full CI CD methodology, but we automated it, we automated it enough to not worry about what happened after us pressing the deploy button
That's it. And it's working after so sometimes it's very simple. It's, yeah, it's not the full CI CD methodology, but we automated it, we automated it enough to not worry about what happened after us pressing the deploy button And if something goes wrong, we'll get an email or a message on Slack that, yes, something go wrong. Go back to your computer, fix it. I mean, that's probably what Zoom is feeling. I feel like Zoom had an outage. I heard they had an outage today
And if something goes wrong, we'll get an email or a message on Slack that, yes, something go wrong. Go back to your computer, fix it. I mean, that's probably what Zoom is feeling. I feel like Zoom had an outage. I heard they had an outage today So it was like something happened that they it's it's crazy. How quickly new spreads when something that is so used. Like it's everyone knows like if Slack goes down, you know, there's like, I'm interested
So it was like something happened that they it's it's crazy. How quickly new spreads when something that is so used. Like it's everyone knows like if Slack goes down, you know, there's like, I'm interested So would something like CI DC help prevent any bugs going out then because it's being checked or can things still pass through it, even if you ran all your checks? Of course they can because someone has to write those tests and we are human. So we are making mistakes
So would something like CI DC help prevent any bugs going out then because it's being checked or can things still pass through it, even if you ran all your checks? Of course they can because someone has to write those tests and we are human. So we are making mistakes So it's more important right now is to find what was the problem? Why the bug went through and fix the test. So the next time when we'll make a similar mistake, it will be it will be called before pushing
So it's more important right now is to find what was the problem? Why the bug went through and fix the test. So the next time when we'll make a similar mistake, it will be it will be called before pushing Yeah, because it's I'm sure that all those enormous companies like Slack, like Zoom, like Microsoft, thanks to CI CD, they are preventing like at least few times a day, a deployment that would crash and burn the moment when it would reach the final server and everyone will be like on Twitter, hey Microsoft, this isn't working again, they messed it up
Yeah, because it's I'm sure that all those enormous companies like Slack, like Zoom, like Microsoft, thanks to CI CD, they are preventing like at least few times a day, a deployment that would crash and burn the moment when it would reach the final server and everyone will be like on Twitter, hey Microsoft, this isn't working again, they messed it up Yeah, right. Yeah, preventing it like really many, many times. The thing is that still we have to write those some of those tests. So it's still likely that something will go wrong or sometimes the infrastructure will go wrong
Yeah, right. Yeah, preventing it like really many, many times. The thing is that still we have to write those some of those tests. So it's still likely that something will go wrong or sometimes the infrastructure will go wrong So and there is also one thing and this is something that I can't wait because I will be doing a webinar in a month about this because there is a huge segment of automating manual testing because there are things that only humans can test in a proper way because automated tests will have some, let's go, they will be a bit flaky, we will never sure if it was for sure working or kind of not or so it's also a whole segment of automating the human test
So and there is also one thing and this is something that I can't wait because I will be doing a webinar in a month about this because there is a huge segment of automating manual testing because there are things that only humans can test in a proper way because automated tests will have some, let's go, they will be a bit flaky, we will never sure if it was for sure working or kind of not or so it's also a whole segment of automating the human test So in general testing is such a wide area, we can like test everything, we can start with those simple things like automate that for example if our lighthouse score went up or down because it's a great thing to check right
So in general testing is such a wide area, we can like test everything, we can start with those simple things like automate that for example if our lighthouse score went up or down because it's a great thing to check right If our lighthouse score went down maybe we shouldn't release it because something is wrong with our code
If our lighthouse score went down maybe we shouldn't release it because something is wrong with our code We can compare screenshots of our website before and after the deployment
We can compare screenshots of our website before and after the deployment So we can check if our small tape in CSS didn't break something on the other hand about which we forgot and thanks for something like this we can see that there is a difference and we didn't thought about it so we can block the release
So we can check if our small tape in CSS didn't break something on the other hand about which we forgot and thanks for something like this we can see that there is a difference and we didn't thought about it so we can block the release We can yeah there are many many things we can check, we can check that behavior
We can yeah there are many many things we can check, we can check that behavior So for example if I will go to my website click on the about section click here click here it should show some let's say a H1 header if it doesn't it's a bug because it only should be here and for some reason it won't and it's also great that there are so many tests that we can run like only by providing I don't know a URL or just clicking some search
So for example if I will go to my website click on the about section click here click here it should show some let's say a H1 header if it doesn't it's a bug because it only should be here and for some reason it won't and it's also great that there are so many tests that we can run like only by providing I don't know a URL or just clicking some search I will show the go how how to use for example ghost inspector. This is something really remarkable how easy it is to create a simple end-to-end test. So I mean got it. I'm really living in a beautiful world here
I will show the go how how to use for example ghost inspector. This is something really remarkable how easy it is to create a simple end-to-end test. So I mean got it. I'm really living in a beautiful world here Quick break from Ben saying yeah definitely bugs sneak in but being able to run your linter and test every time you make co-tanges and then failing the build so you can't deploy it if your lint test fail you can keep you from a lot of bugs getting released and another thing the whole team can see the states of your CI CD pipelines which encourages transparency rather than only like relying on Scouts honor that everyone is running lint test locally and oh I like this way of explaining it CI DC as automated accountability
Quick break from Ben saying yeah definitely bugs sneak in but being able to run your linter and test every time you make co-tanges and then failing the build so you can't deploy it if your lint test fail you can keep you from a lot of bugs getting released and another thing the whole team can see the states of your CI CD pipelines which encourages transparency rather than only like relying on Scouts honor that everyone is running lint test locally and oh I like this way of explaining it CI DC as automated accountability That's true that's true and that is that is really true because yeah this is a totally different way of thinking about how we are working with our code
That's true that's true and that is that is really true because yeah this is a totally different way of thinking about how we are working with our code I remember that one company we had a problem with with one developer who felt in short he didn't felt well about the fact that his code had to be checked it had to be reviewed it was checked by those machines he felt really bad about it and at some point he just stopped working it with us because he didn't like it and okay yeah it's I mean it's it's another thing about talking about code review the way how we are doing them and for example I learned last week about something called blameless debrief this is really interesting because this is also a bit connected with with this it's a part of this it's called cytrally reliability engineering and this this blameless debrief is yeah because bugs happen we make mistakes but when we are trying to find out what happened we don't care about who did it we are trying to not to blame a person it's more about why it happened and what steps we should do to prevent from it happening again just like this we are not concentrating on a person we are just concentrating on on the why interesting I am going to paste this into the chat I just good called it a bit a few things that come to mind is the fact that first off linting just I'm pretty sure like tons of people probably know this but to make sure I check fact check my understanding is linting is just something to kind of like the prettier app in VS code where it just checks your code are do you have the right spacing is there a comma is there a semicolon did you close that bracket also have are you goodness what is the code now where there's a at least in JavaScript where if you don't use that I'm totally spacing what they're called right now not variable constants and all the things if you don't use your constant it likes to freak out and be like you're not using it where are you doing so linting is literally just making sure like giving your code some guidelines and letting you know as you code that there's issues right yes but still this is and this is something that the band mentioned it's relying on scouts owner that everyone is using it that's why we always should add such a step in our cicd pipeline so for example every time we deploy code one of the first steps we are using prettier linter or if we're using pp you are using ppc code for something like this it's like I said different languages different technologies but they all do the same and we are making sure that everyone did it because we I know that we should trust people right but on the other hand we shouldn't trust people yeah yeah it's like you trust people but it's not because you don't think they don't have good intentions it's because we all make mistakes no matter what exactly because we are we are people we are people and sometimes during I don't know we are trying to release a hot fix I don't know something is happening outside because we never know we I mean we very often judge a developer just by the code he pushed and sometimes we don't know what just happened on the other end of the monitor I don't know his baby started crying something happened and he just missed something and he just pressed push and that's why we should check for it because it wasn't his bad intention I mean in most cases I mean if a developer is trying to push an error because he wants to push an error that's a problem but in most cases they don't they just want to release a good code but again we are human sometimes we we just stop thinking about something we just we just made a mistake and I been out of this earlier that CIS CD is in just about testing at his old job anytime they wanted to release they had to submit a hella tedious form describing what the changes were going live so tedious and no one wanted to do it by getting the wrong getting it wrong could lead to the team's risk getting slapped so we wrote a script that automatically submitted that form in our CIS CD so all devs had to do was give it a once over and I find that interesting but I I can tell that I just for for example when it comes to those strips lately because we know that we shouldn't release on Friday right so I lately wrote a small script that runs always before the deploy if it's Friday it's always failing it's blocking us that's cool it's not it's not only about testing it's sometimes about those small things like this interesting I um and I will say it wasn't until this morning that I'm talking to a Android developer that I was like I used to tell people in 2007 when Android phones like first got launched that oh it's open source so anybody can develop those apps y'all I just realized this morning that I was talking about open source like OSS open source like mind blown I'm sharing that because now that I've like seen get hub and stuff like that and like as you're starting to explain CIDC um CICD I'm gonna get the acronyms is um so how do people go in and submit these if like submit hacking things if they have to be approved or if somebody does have CIDC CID uh I don't know why that catches my curiosity so much uh no no but it's but but but but it's it's a very good it's a very good and valid question because uh yeah we can figure yeah we have all those automation have all those tests and still some people are able to push something through uh first of all many tests are just checking if the code is correct um okay because in most cases we are writing a function or effort on whatever we are writing tests to check if it works correct so probably there won't be um and it has the tool check that yeah someone is trying to download something from another website and it's a virus and something like this not on the book of course there are services that are doing it yeah to um the way that I'm like hearing that is basically like these tests can check to see if I wrote my name I am Jen but they're not going to catch it if it uses one N instead of two N's because technically it's correct it is I am Jen it's kind of how I'm hearing that as a way that the test do it is they just check is it correct but not is it felt right or I would even say that or yeah this is this is one example and another thing is uh that someone just submitted something totally different that doesn't affect this part just and this is the moment when we humans are so important in maintaining a project uh because the whole point of CISD is making us developers focused on what matter so it's more important how to write an algorithm how to create the idea behind or when it comes to open source project to maintain and check if someone didn't just submitted a really horrible pull request that we didn't know did our database or something like this it's it's on us on the human but thanks to CISD we don't have to worry about all those things we just automated you can just focus on the things because every time when we are using this uh we are using CISD when it comes to pull requests first we are running everything that is automated so everything is broken and the user that submitted the pull request gets the line sorry there is an error in the test we do something about so this person would either first try to make it working or we'll describe why he thinks that it that the test is failing because it's written in a wrong way because tests sometimes are also written in a bad way because we are humans but still we have like most of the boring tedious work uh done by a machine we can just focus on checking out the code seeing it okay this code really doesn't look good someone is trying to push something uh something bad into our repository we should just delete this pull request like this so but like I said there are also services if I remember that I that are checking for security um so it's also changing in this way so more and more things because sometimes it's really hard to spot uh spot something I mean there are for example ways how to inject some really not nice code inside of it as FG file because it's JavaScript right uh so let's be honest if someone would submit a pull request with and one of it art would be a sfg image that you are suspecting that should be there because of an icon that should be added as we are as you will never never check what's inside of the sfg file right because yeah it's an sfg file it's great all right all right um i did it that's probably the problem and this may be the problem so yeah it's really all about uh making the machine uh take over the boring stuff the tedious stuff the thing that we can miss so we can focus on only on the things that we know the machine can miss and that we don't have to worry about uh looking at like everything because we are just have a small small portion left to to check if it's okay okay i feel like i now have a better understanding about it now i'm excited to see like this in action okay so we are going to okay let me just move uh this is i will i will be looking a bit more here let's show this screen it will be okay it's this one okay can you okay that's perfect so we are going to deploy and test this small little astro site um so i will be using body because of few reasons first of all i work there and i have only taxes to it so it's great and on the other hand body has really one amazing feature it has the whole UI and you don't need to worry about writing uh for example like connections all those json files and anything you can just click here and there everything will be will be working uh okay so i have this here uh deployment pipeline called just in case so if i will forget something or i will have a place to go and see what i have messed up i already connected my repository of this uh palmex webinar
I remember that one company we had a problem with with one developer who felt in short he didn't felt well about the fact that his code had to be checked it had to be reviewed it was checked by those machines he felt really bad about it and at some point he just stopped working it with us because he didn't like it and okay yeah it's I mean it's it's another thing about talking about code review the way how we are doing them and for example I learned last week about something called blameless debrief this is really interesting because this is also a bit connected with with this it's a part of this it's called cytrally reliability engineering and this this blameless debrief is yeah because bugs happen we make mistakes but when we are trying to find out what happened we don't care about who did it we are trying to not to blame a person it's more about why it happened and what steps we should do to prevent from it happening again just like this we are not concentrating on a person we are just concentrating on on the why interesting I am going to paste this into the chat I just good called it a bit a few things that come to mind is the fact that first off linting just I'm pretty sure like tons of people probably know this but to make sure I check fact check my understanding is linting is just something to kind of like the prettier app in VS code where it just checks your code are do you have the right spacing is there a comma is there a semicolon did you close that bracket also have are you goodness what is the code now where there's a at least in JavaScript where if you don't use that I'm totally spacing what they're called right now not variable constants and all the things if you don't use your constant it likes to freak out and be like you're not using it where are you doing so linting is literally just making sure like giving your code some guidelines and letting you know as you code that there's issues right yes but still this is and this is something that the band mentioned it's relying on scouts owner that everyone is using it that's why we always should add such a step in our cicd pipeline so for example every time we deploy code one of the first steps we are using prettier linter or if we're using pp you are using ppc code for something like this it's like I said different languages different technologies but they all do the same and we are making sure that everyone did it because we I know that we should trust people right but on the other hand we shouldn't trust people yeah yeah it's like you trust people but it's not because you don't think they don't have good intentions it's because we all make mistakes no matter what exactly because we are we are people we are people and sometimes during I don't know we are trying to release a hot fix I don't know something is happening outside because we never know we I mean we very often judge a developer just by the code he pushed and sometimes we don't know what just happened on the other end of the monitor I don't know his baby started crying something happened and he just missed something and he just pressed push and that's why we should check for it because it wasn't his bad intention I mean in most cases I mean if a developer is trying to push an error because he wants to push an error that's a problem but in most cases they don't they just want to release a good code but again we are human sometimes we we just stop thinking about something we just we just made a mistake and I been out of this earlier that CIS CD is in just about testing at his old job anytime they wanted to release they had to submit a hella tedious form describing what the changes were going live so tedious and no one wanted to do it by getting the wrong getting it wrong could lead to the team's risk getting slapped so we wrote a script that automatically submitted that form in our CIS CD so all devs had to do was give it a once over and I find that interesting but I I can tell that I just for for example when it comes to those strips lately because we know that we shouldn't release on Friday right so I lately wrote a small script that runs always before the deploy if it's Friday it's always failing it's blocking us that's cool it's not it's not only about testing it's sometimes about those small things like this interesting I um and I will say it wasn't until this morning that I'm talking to a Android developer that I was like I used to tell people in 2007 when Android phones like first got launched that oh it's open source so anybody can develop those apps y'all I just realized this morning that I was talking about open source like OSS open source like mind blown I'm sharing that because now that I've like seen get hub and stuff like that and like as you're starting to explain CIDC um CICD I'm gonna get the acronyms is um so how do people go in and submit these if like submit hacking things if they have to be approved or if somebody does have CIDC CID uh I don't know why that catches my curiosity so much uh no no but it's but but but but it's it's a very good it's a very good and valid question because uh yeah we can figure yeah we have all those automation have all those tests and still some people are able to push something through uh first of all many tests are just checking if the code is correct um okay because in most cases we are writing a function or effort on whatever we are writing tests to check if it works correct so probably there won't be um and it has the tool check that yeah someone is trying to download something from another website and it's a virus and something like this not on the book of course there are services that are doing it yeah to um the way that I'm like hearing that is basically like these tests can check to see if I wrote my name I am Jen but they're not going to catch it if it uses one N instead of two N's because technically it's correct it is I am Jen it's kind of how I'm hearing that as a way that the test do it is they just check is it correct but not is it felt right or I would even say that or yeah this is this is one example and another thing is uh that someone just submitted something totally different that doesn't affect this part just and this is the moment when we humans are so important in maintaining a project uh because the whole point of CISD is making us developers focused on what matter so it's more important how to write an algorithm how to create the idea behind or when it comes to open source project to maintain and check if someone didn't just submitted a really horrible pull request that we didn't know did our database or something like this it's it's on us on the human but thanks to CISD we don't have to worry about all those things we just automated you can just focus on the things because every time when we are using this uh we are using CISD when it comes to pull requests first we are running everything that is automated so everything is broken and the user that submitted the pull request gets the line sorry there is an error in the test we do something about so this person would either first try to make it working or we'll describe why he thinks that it that the test is failing because it's written in a wrong way because tests sometimes are also written in a bad way because we are humans but still we have like most of the boring tedious work uh done by a machine we can just focus on checking out the code seeing it okay this code really doesn't look good someone is trying to push something uh something bad into our repository we should just delete this pull request like this so but like I said there are also services if I remember that I that are checking for security um so it's also changing in this way so more and more things because sometimes it's really hard to spot uh spot something I mean there are for example ways how to inject some really not nice code inside of it as FG file because it's JavaScript right uh so let's be honest if someone would submit a pull request with and one of it art would be a sfg image that you are suspecting that should be there because of an icon that should be added as we are as you will never never check what's inside of the sfg file right because yeah it's an sfg file it's great all right all right um i did it that's probably the problem and this may be the problem so yeah it's really all about uh making the machine uh take over the boring stuff the tedious stuff the thing that we can miss so we can focus on only on the things that we know the machine can miss and that we don't have to worry about uh looking at like everything because we are just have a small small portion left to to check if it's okay okay i feel like i now have a better understanding about it now i'm excited to see like this in action okay so we are going to okay let me just move uh this is i will i will be looking a bit more here let's show this screen it will be okay it's this one okay can you okay that's perfect so we are going to deploy and test this small little astro site um so i will be using body because of few reasons first of all i work there and i have only taxes to it so it's great and on the other hand body has really one amazing feature it has the whole UI and you don't need to worry about writing uh for example like connections all those json files and anything you can just click here and there everything will be will be working uh okay so i have this here uh deployment pipeline called just in case so if i will forget something or i will have a place to go and see what i have messed up i already connected my repository of this uh palmex webinarshtro and it's nothing more than a simple static astro website okay so let's let's do so let's start with the cd part let's start with the deployment so let's call this action deploy and let's set it that it will deploy every time we will change something in the master branch so we don't have to even go later into body every time we'll change our code something will deploy so uh and we will deploy it to to netlify because everyone is using petlify
shtro and it's nothing more than a simple static astro website okay so let's let's do so let's start with the cd part let's start with the deployment so let's call this action deploy and let's set it that it will deploy every time we will change something in the master branch so we don't have to even go later into body every time we'll change our code something will deploy so uh and we will deploy it to to netlify because everyone is using petlify So we have netlify right um if i remember when it comes to astro it will be this product unlock and we need it as i have set up some things that will be deploying the this folder into okay but there is a problem if we want to deploy an astro website we first have to build it there is this first we have to install all the npm packages and then we have to build it every time so we have to first add one more actually called node
So we have netlify right um if i remember when it comes to astro it will be this product unlock and we need it as i have set up some things that will be deploying the this folder into okay but there is a problem if we want to deploy an astro website we first have to build it there is this first we have to install all the npm packages and then we have to build it every time so we have to first add one more actually called nodejs and we have to do something like this and we have to run two commands lpm install and run build so what does it mean that every time when we will change something into in our repository first we will rebuild the whole uh we will rebuild this this folder and this this folder will be deployed to netlify so let's change something into in our code right so let's go into into src pages uh let's go into the index and i will use the github editor it's it's enough hello let's go into hello cicd astro right let's commit the change and i push the deployment and you see it's already running i didn't press anything here it's running automatically first deployment takes a bit longer but we'll see what is happening so right now the Docker image was downloaded we've built everything we can see the whole structure that was built and right now we are deploying the dist folder into into netlify so let's and here we have the website URL so so maybe it's oh i have this so bad caching but um it was simple but it happens automatically so every time when we will check something if we'll change something it will get automatically deployed to our server and maze the problem is if we will mess up something i mean the good part is if we'll mess up something that probably the build action will crash so it won't go further to the deploy so it's okay but let's start doing some maybe some tests before the simple one uh first there is this really cool thing about netlify that each deployment has this unique deploy URL so so right now let's just go here to we are using this broke if unlocked so insert we are deploying it on production we'd be cool but it's kind of not safe because we don't know because if we broke something we deployed it to production so that's why we are going to play around a bit with this with the fact that netlify is always providing us with those cool things here and we can we can do something something about it so it will be great to get this you need the deploy URL so this is when a bit of coding is useful so first of all just a few i will wish we we will we have to install this library called vq it's for parsing uh json files and we are going to do something like this i have it so we will assign the deploy URL from everything we had there to a variable call to deploy URL and having this variable inside of body we can pass it to different actions but we have to first create one more small thing but let's save it right now and let's go back to actions and to variables we're going to create a variable call call and it's enabled changing the value during pipeline execution because this is what we are doing in the middle of the action so let's run it right now manually and see what will happen because one thing will and it should change i hope i didn't break something because this is the cool part about all those life webinars every time when you are so sure that everything will work you will mess up something but i hope not this time um so yeah the cool part also when it comes to not only body because every cacd application works like this right now that every step is executed in a separate uh docker based container so we can use different oh and you see we have added this deploy URL as a as this variable call to i mean this URL is uh as set as this deploy your else which is cool and now let's let's add something let's add something more oh and one thing uh you see there is no product if unlocked so we are not deploying this on production yet that's why now we are going to do a simple let's say a lighthouse lighthouse test um uh it looks cool and see it's helping it for URL and we have to be sure that our performance accessibility best practices at SEO score is better than 50 it's easy to pass and because we passed it so we won't be reaching production yet so if the score will be lower than one of those values our deployment will stop so let's do it and let's see what will happen right now this will this will probably take a second so is buddy astro um like is buddy a plugin for astro no buddy is buddy is uh totally um language framework and everything agnostic we can use it with everything uh okay so in my cases i use buddy mostly with with WordPress but also with different with different frameworks i have my website built on state make so i'm also deploying it using statement and i'm also deploying statement using buddy so you can use everything uh you want with it if there is a Docker image you can run okay um i'm gonna send this link to you in the private chat before i um send it out in the main chat because i i'm reading this right this is just talking through because astro is something that a lot of people use as well that this is this is the link that the documentation under i written for us because i'm a big fan of astro so okay okay so this is the proper link exactly oh and take a look astro is really fast and we have this performance accessibility best practices and what happened that part but right now we didn't deploy it to production right because we only uh we checked if everything is so so right now we should add another metify deployment this time the production we don't have to worry and it should be okay so right now between this and this we can run all those different tests we want to check if if we didn't screw something up so let's add something more maybe um it was called uh it's called the visual tests visual test is amazing it shows and so we will have to run it twice because first time we can set some options here like uh then we did the height of the screen the pixel tolerance several uh but let's leave it as it is the the most basic comparison so the first time uh yeah that someone asked me about the netlify has a build plugin no we are using our own and why to be honest i it's i always preferred approach to have uh all they have the lifting in one place and use netlify as just a hosting platform so for me i will always use because it's imagined that at some point you have this really long cicd flow you really down a lot of work towards it it's working at some point netlify oh and you are keeping all the cicd stuff inside of netlify you are not using fun and at some point let me try to change their pricing and now we are starting moving everything and right here i have all the heavy lifting inside of body and i'm just deploying it to netlify if at some point netlify decides okay we will have uh more expensive pricing and i decide okay so let me move to i don't know cloud server pages or whatever i will just change two actions and but the rest will happen as it was happening before so i prefer to have everything as those small blocks that i can every time change a bit without worrying about the rest so this is my approach i mean i understand that if the same could happen with you know raising prices on body or removing some features uh but still still i i would prefer to keep uh i mean i kind of don't trust all those hosting companies notify it's still a hosting company and i prefer to have the heavy lifting outside of it still i like netlify it works it works free rate um sentia did that make sense to you just a double check uh and in the meantime i will run it for the first time because like i said we will need to run twice because first it will take the initial screenshot and the second time will correct something will change something our code and we will see if with the if it catches as uh not as a bug but as a change that we will have to approve manual because those visual tests are more about uh approving something or or not and uh yeah visual tests can save all i mean especially when you i mean imagine you have a website that have like four crucial pages like let's say it's counteracted it's about us and so yes and you should check those crucial sites every time with visual tests so you are sure that the small change you added to ses for example that should only affect let's say a cart page by some reason affected one of those you'll be able to see it so okay so we have this initial change and now let's go back into the code and let's let's change something and it's so hello cicd astronaut and maybe let's have let's be professional let's add an hour here right so let's commit the change and it's running already you can see it here it's in progress so we'll have to wait wait a second yeah and also the cool part while during webinars it may seem that yes cicd is only taking time yeah that's true it's it is taking time but uh when we are working when it every day uh the moment when we push something we just push it into our background we don't have to focus on it we can work on something on something else and we don't have to worry about it until the moment when it for example informs us that uh yeah you made a mistake we should you you will get a select notification for example i mean this will be our next step we'll step we'll add a notification for ourselves that that we did so that way it really can run in the background without paying attention exactly exactly and this is something so amazing that yeah i can just go do myself a coffee and uh until i will hear my phone doing a thing or i will do that and this is interesting why it passed without you see this is this is the really cool part about uh oh this is kind of weird the way the second huh interesting uh yeah i like this i like this like i said always drink life with the br swim something can go wrong let's see here interesting thing that for some reason this action has problems with emojis it's really great to discover uh to discover a bug during a webbing alright yes i do have a like badge in artwork on our community page that i'm the bug finder no this is this is something really great because we can see that it should see the bug but it um okay so so if you are not using emojis which i will like i said check after the webbing article it's not the time it should spot an error that something changed and then we should get that option to approve or not um because sometimes the change that happened the screen change it's something that we wanted to happen because uh we change the content we change the colors we change something so let me just disable this uh but i mentioned the cool thing about the ghost inspector the ghost inspector is something really really cool it's one of the easiest way to write uh end-to-end tests without touching a line of code so for example let's go to our website it also has this add-on that helps you record any test so you just record it by clicking from site to site so let's okay let's go for it let's record so we are here we want them go to the blog page and then we go to the about page and that's it that's it for now let's call it uh name we'll be not asking and let's be part of the astro suite uh let's create a new one and it's called also and uh execute initial tests from default to okay save it okay and now if we go uh into our dashboard to see our our webinar testing uh we can edit the steps because let's say that uh because on about me we see it's about me it's uh that's it's back in for a second it's a h1 heading so we want also to check if uh let's add the step and an element text equals about okay so the step is added so let's see changes perfectly and now let's go to our body and let's add a new step that is called of course a ghost inspector I already integrated it and I can use another folder the suite called webinar um from more of the island place it's great we don't have to worry and it's start URL this is of course the great thing we can use the start URL of the deploy URL that is passed so it won't reach the production before we do this uh do we need anything else now we don't let's add this action so you know let me just disable the lighthouse for now it will be a bit faster so let's run it again and in a moment we will see that this ghost inspector gets uh we'll start running so let's wait a second yeah like I said it's much better when it comes when it works in the background oh I forgot about the notification uh next time um yeah this is uh especially when I was doing some live workshops about doing it in WordPress uh this waiting times I I had to be prepared for many many and we see that it's running it's running it was triggered and let's see what will happen well it passed what will it not let's go back into body it's here always like we are sending data so we are waiting yeah this like I said this waiting part is always always a bit annoying especially doing doing webinars because uh and the cool part is when at least there is a second person during the webinar so you can chat about something that failed it failed why so let's go here and let's because oh because I messed up the test right because I forgot not the element equals what it should be sorry minus take it should be H1 equals about and there we can for example run it again to see yeah let's run it again and we can see if our test will uh pass this time yeah because I made a mistake I was looking for an element called about me rather than um instead of the H1 instead of H1 and let's go with the element about didn't exist so the test failed correctly and this is also a great thing because it shows that yeah it's it's working it's working and right now it's going and I think this is definitely something that I'm going to have to come back to later on to you in the fact that like it's good to like know these processes and then it's out there yet at the same time I haven't done any of it yet so I'm like I get it but I don't get it and now look here it failed again but now I knew it will fail because H1 text equals about me and the found text was about me with the capital M this is a small typo but of course we won't be in real life we won't be writing something like this but those tests will be different and this attention to small details it's important okay when I was typing about me did you remember that there was a different thing to carrying characters of course now of course and that's important and right now we should either correct our code I or correct our test it depends on where is the bug I think we should correct the code right okay so let's go here let's go to the about let's edit it and it should be about me with the small app right so it will be so let's come at the change and right now everything is running again so yeah the fact that something fails yes that's great it's better this is also the thing we always have to learn when it comes to CI CD because very often we think that if something failed that's bad now it's great because if something failed before reaching the production that's great we won't be hot fixing something on production like hearing for example our balls screaming at us that our netlite is down or it's having yeah it has bugs or something like this we are keeping everything out of production so this is this is amazing I mean that's great that we are having bugs so then when we go and it's still sending data so I don't want to scan it's here oh we passed oh we passed so we have that h1 about me so yeah it was that easy to create a simple a simple test and of course we can do much more using the ghost inspector because it has like unlimited possibility send us what we passed and then we deployed everything to production so and until it passed it was prevented so this is this is the the the coups that I mentioned about notification right I mean I would just show it because here we have a possibility to run different actions because on run is when everything is okay on failure so every time when let's say something fails we want to send our self yeah all those oh yeah let's say to random and every time it's kind of interesting because right now I'm not using slack at the moment but if something would fail this general channel would get the message that but the execution that started by me failed that's smart let me just add this action to see so and we can of course also add an action that when everything goes back to normal right because this is also a really cool thing that we can do because here all our changes run at the moment when either we run it manually on when we push a change to our code but we can also create a pipeline that will run on schedule so for example it will run every five minutes so we can build a very simple uptime robot just like this so let's let's do it right all right we did our self okay and we have this cool thing here called if I remember it was because we have quite a few of them it's called website monitoring and we can pass the URL what was doing where I like what Cynthia said failed fast and that is the such a true point and then homie said these checks will really help because small details syntax type L's cross big and bigger problem this is super interesting the gooey looks intuitive oh thank you that's that's really I I'm I really often wonder how body was born because I know that the guys behind in the depth team there are real nerds that they I think that they are mostly using CLIs and everything at some point they decided yeah let's make a user friendly tool and apart from the URL we have this really great thing check for string this is one of the at least for me I think it's one of those very useful and important things to always add because it is possible to deploy a website that will return a status of 200 so that it means that that website is in theory working but for example it's blank or for example it's blank so let's be sure that our footer is always deployed so we know that it always should consist of these frames right this means that the whole website rendered at least until the footer so interesting okay quite useful so we have it so every five minutes it will we can already see the countdown but we don't have time to wait so let's run it run it manually yeah it was that that quick because it just downloaded it found that your name here was on the website so we don't have to worry and of course we should add into our uptime robot an action that on failure you know send us an notification send us an email whatever and it's really up to us I mean really sky is the limit I can say that one of the oh let me show because when I was having those workshops for WordPress the pipeline that I showed here was that long oh wow yeah I think even at this point because I know we got a wrap soon is that it's something that once I build more I think I'll be able to comprehend it a lot more like because this is the most important part I mean you we can stop sharing already because I will go back more there we go okay so because one of the most important things when it comes to CACDs really go step by step the most thing you can do yes let's add everything let us unit testing and to end testing whatever checks we have if you try to add everything at the same time you will probably fail because it's not that easy to do it
js and we have to do something like this and we have to run two commands lpm install and run build so what does it mean that every time when we will change something into in our repository first we will rebuild the whole uh we will rebuild this this folder and this this folder will be deployed to netlify so let's change something into in our code right so let's go into into src pages uh let's go into the index and i will use the github editor it's it's enough hello let's go into hello cicd astro right let's commit the change and i push the deployment and you see it's already running i didn't press anything here it's running automatically first deployment takes a bit longer but we'll see what is happening so right now the Docker image was downloaded we've built everything we can see the whole structure that was built and right now we are deploying the dist folder into into netlify so let's and here we have the website URL so so maybe it's oh i have this so bad caching but um it was simple but it happens automatically so every time when we will check something if we'll change something it will get automatically deployed to our server and maze the problem is if we will mess up something i mean the good part is if we'll mess up something that probably the build action will crash so it won't go further to the deploy so it's okay but let's start doing some maybe some tests before the simple one uh first there is this really cool thing about netlify that each deployment has this unique deploy URL so so right now let's just go here to we are using this broke if unlocked so insert we are deploying it on production we'd be cool but it's kind of not safe because we don't know because if we broke something we deployed it to production so that's why we are going to play around a bit with this with the fact that netlify is always providing us with those cool things here and we can we can do something something about it so it will be great to get this you need the deploy URL so this is when a bit of coding is useful so first of all just a few i will wish we we will we have to install this library called vq it's for parsing uh json files and we are going to do something like this i have it so we will assign the deploy URL from everything we had there to a variable call to deploy URL and having this variable inside of body we can pass it to different actions but we have to first create one more small thing but let's save it right now and let's go back to actions and to variables we're going to create a variable call call and it's enabled changing the value during pipeline execution because this is what we are doing in the middle of the action so let's run it right now manually and see what will happen because one thing will and it should change i hope i didn't break something because this is the cool part about all those life webinars every time when you are so sure that everything will work you will mess up something but i hope not this time um so yeah the cool part also when it comes to not only body because every cacd application works like this right now that every step is executed in a separate uh docker based container so we can use different oh and you see we have added this deploy URL as a as this variable call to i mean this URL is uh as set as this deploy your else which is cool and now let's let's add something let's add something more oh and one thing uh you see there is no product if unlocked so we are not deploying this on production yet that's why now we are going to do a simple let's say a lighthouse lighthouse test um uh it looks cool and see it's helping it for URL and we have to be sure that our performance accessibility best practices at SEO score is better than 50 it's easy to pass and because we passed it so we won't be reaching production yet so if the score will be lower than one of those values our deployment will stop so let's do it and let's see what will happen right now this will this will probably take a second so is buddy astro um like is buddy a plugin for astro no buddy is buddy is uh totally um language framework and everything agnostic we can use it with everything uh okay so in my cases i use buddy mostly with with WordPress but also with different with different frameworks i have my website built on state make so i'm also deploying it using statement and i'm also deploying statement using buddy so you can use everything uh you want with it if there is a Docker image you can run okay um i'm gonna send this link to you in the private chat before i um send it out in the main chat because i i'm reading this right this is just talking through because astro is something that a lot of people use as well that this is this is the link that the documentation under i written for us because i'm a big fan of astro so okay okay so this is the proper link exactly oh and take a look astro is really fast and we have this performance accessibility best practices and what happened that part but right now we didn't deploy it to production right because we only uh we checked if everything is so so right now we should add another metify deployment this time the production we don't have to worry and it should be okay so right now between this and this we can run all those different tests we want to check if if we didn't screw something up so let's add something more maybe um it was called uh it's called the visual tests visual test is amazing it shows and so we will have to run it twice because first time we can set some options here like uh then we did the height of the screen the pixel tolerance several uh but let's leave it as it is the the most basic comparison so the first time uh yeah that someone asked me about the netlify has a build plugin no we are using our own and why to be honest i it's i always preferred approach to have uh all they have the lifting in one place and use netlify as just a hosting platform so for me i will always use because it's imagined that at some point you have this really long cicd flow you really down a lot of work towards it it's working at some point netlify oh and you are keeping all the cicd stuff inside of netlify you are not using fun and at some point let me try to change their pricing and now we are starting moving everything and right here i have all the heavy lifting inside of body and i'm just deploying it to netlify if at some point netlify decides okay we will have uh more expensive pricing and i decide okay so let me move to i don't know cloud server pages or whatever i will just change two actions and but the rest will happen as it was happening before so i prefer to have everything as those small blocks that i can every time change a bit without worrying about the rest so this is my approach i mean i understand that if the same could happen with you know raising prices on body or removing some features uh but still still i i would prefer to keep uh i mean i kind of don't trust all those hosting companies notify it's still a hosting company and i prefer to have the heavy lifting outside of it still i like netlify it works it works free rate um sentia did that make sense to you just a double check uh and in the meantime i will run it for the first time because like i said we will need to run twice because first it will take the initial screenshot and the second time will correct something will change something our code and we will see if with the if it catches as uh not as a bug but as a change that we will have to approve manual because those visual tests are more about uh approving something or or not and uh yeah visual tests can save all i mean especially when you i mean imagine you have a website that have like four crucial pages like let's say it's counteracted it's about us and so yes and you should check those crucial sites every time with visual tests so you are sure that the small change you added to ses for example that should only affect let's say a cart page by some reason affected one of those you'll be able to see it so okay so we have this initial change and now let's go back into the code and let's let's change something and it's so hello cicd astronaut and maybe let's have let's be professional let's add an hour here right so let's commit the change and it's running already you can see it here it's in progress so we'll have to wait wait a second yeah and also the cool part while during webinars it may seem that yes cicd is only taking time yeah that's true it's it is taking time but uh when we are working when it every day uh the moment when we push something we just push it into our background we don't have to focus on it we can work on something on something else and we don't have to worry about it until the moment when it for example informs us that uh yeah you made a mistake we should you you will get a select notification for example i mean this will be our next step we'll step we'll add a notification for ourselves that that we did so that way it really can run in the background without paying attention exactly exactly and this is something so amazing that yeah i can just go do myself a coffee and uh until i will hear my phone doing a thing or i will do that and this is interesting why it passed without you see this is this is the really cool part about uh oh this is kind of weird the way the second huh interesting uh yeah i like this i like this like i said always drink life with the br swim something can go wrong let's see here interesting thing that for some reason this action has problems with emojis it's really great to discover uh to discover a bug during a webbing alright yes i do have a like badge in artwork on our community page that i'm the bug finder no this is this is something really great because we can see that it should see the bug but it um okay so so if you are not using emojis which i will like i said check after the webbing article it's not the time it should spot an error that something changed and then we should get that option to approve or not um because sometimes the change that happened the screen change it's something that we wanted to happen because uh we change the content we change the colors we change something so let me just disable this uh but i mentioned the cool thing about the ghost inspector the ghost inspector is something really really cool it's one of the easiest way to write uh end-to-end tests without touching a line of code so for example let's go to our website it also has this add-on that helps you record any test so you just record it by clicking from site to site so let's okay let's go for it let's record so we are here we want them go to the blog page and then we go to the about page and that's it that's it for now let's call it uh name we'll be not asking and let's be part of the astro suite uh let's create a new one and it's called also and uh execute initial tests from default to okay save it okay and now if we go uh into our dashboard to see our our webinar testing uh we can edit the steps because let's say that uh because on about me we see it's about me it's uh that's it's back in for a second it's a h1 heading so we want also to check if uh let's add the step and an element text equals about okay so the step is added so let's see changes perfectly and now let's go to our body and let's add a new step that is called of course a ghost inspector I already integrated it and I can use another folder the suite called webinar um from more of the island place it's great we don't have to worry and it's start URL this is of course the great thing we can use the start URL of the deploy URL that is passed so it won't reach the production before we do this uh do we need anything else now we don't let's add this action so you know let me just disable the lighthouse for now it will be a bit faster so let's run it again and in a moment we will see that this ghost inspector gets uh we'll start running so let's wait a second yeah like I said it's much better when it comes when it works in the background oh I forgot about the notification uh next time um yeah this is uh especially when I was doing some live workshops about doing it in WordPress uh this waiting times I I had to be prepared for many many and we see that it's running it's running it was triggered and let's see what will happen well it passed what will it not let's go back into body it's here always like we are sending data so we are waiting yeah this like I said this waiting part is always always a bit annoying especially doing doing webinars because uh and the cool part is when at least there is a second person during the webinar so you can chat about something that failed it failed why so let's go here and let's because oh because I messed up the test right because I forgot not the element equals what it should be sorry minus take it should be H1 equals about and there we can for example run it again to see yeah let's run it again and we can see if our test will uh pass this time yeah because I made a mistake I was looking for an element called about me rather than um instead of the H1 instead of H1 and let's go with the element about didn't exist so the test failed correctly and this is also a great thing because it shows that yeah it's it's working it's working and right now it's going and I think this is definitely something that I'm going to have to come back to later on to you in the fact that like it's good to like know these processes and then it's out there yet at the same time I haven't done any of it yet so I'm like I get it but I don't get it and now look here it failed again but now I knew it will fail because H1 text equals about me and the found text was about me with the capital M this is a small typo but of course we won't be in real life we won't be writing something like this but those tests will be different and this attention to small details it's important okay when I was typing about me did you remember that there was a different thing to carrying characters of course now of course and that's important and right now we should either correct our code I or correct our test it depends on where is the bug I think we should correct the code right okay so let's go here let's go to the about let's edit it and it should be about me with the small app right so it will be so let's come at the change and right now everything is running again so yeah the fact that something fails yes that's great it's better this is also the thing we always have to learn when it comes to CI CD because very often we think that if something failed that's bad now it's great because if something failed before reaching the production that's great we won't be hot fixing something on production like hearing for example our balls screaming at us that our netlite is down or it's having yeah it has bugs or something like this we are keeping everything out of production so this is this is amazing I mean that's great that we are having bugs so then when we go and it's still sending data so I don't want to scan it's here oh we passed oh we passed so we have that h1 about me so yeah it was that easy to create a simple a simple test and of course we can do much more using the ghost inspector because it has like unlimited possibility send us what we passed and then we deployed everything to production so and until it passed it was prevented so this is this is the the the coups that I mentioned about notification right I mean I would just show it because here we have a possibility to run different actions because on run is when everything is okay on failure so every time when let's say something fails we want to send our self yeah all those oh yeah let's say to random and every time it's kind of interesting because right now I'm not using slack at the moment but if something would fail this general channel would get the message that but the execution that started by me failed that's smart let me just add this action to see so and we can of course also add an action that when everything goes back to normal right because this is also a really cool thing that we can do because here all our changes run at the moment when either we run it manually on when we push a change to our code but we can also create a pipeline that will run on schedule so for example it will run every five minutes so we can build a very simple uptime robot just like this so let's let's do it right all right we did our self okay and we have this cool thing here called if I remember it was because we have quite a few of them it's called website monitoring and we can pass the URL what was doing where I like what Cynthia said failed fast and that is the such a true point and then homie said these checks will really help because small details syntax type L's cross big and bigger problem this is super interesting the gooey looks intuitive oh thank you that's that's really I I'm I really often wonder how body was born because I know that the guys behind in the depth team there are real nerds that they I think that they are mostly using CLIs and everything at some point they decided yeah let's make a user friendly tool and apart from the URL we have this really great thing check for string this is one of the at least for me I think it's one of those very useful and important things to always add because it is possible to deploy a website that will return a status of 200 so that it means that that website is in theory working but for example it's blank or for example it's blank so let's be sure that our footer is always deployed so we know that it always should consist of these frames right this means that the whole website rendered at least until the footer so interesting okay quite useful so we have it so every five minutes it will we can already see the countdown but we don't have time to wait so let's run it run it manually yeah it was that that quick because it just downloaded it found that your name here was on the website so we don't have to worry and of course we should add into our uptime robot an action that on failure you know send us an notification send us an email whatever and it's really up to us I mean really sky is the limit I can say that one of the oh let me show because when I was having those workshops for WordPress the pipeline that I showed here was that long oh wow yeah I think even at this point because I know we got a wrap soon is that it's something that once I build more I think I'll be able to comprehend it a lot more like because this is the most important part I mean you we can stop sharing already because I will go back more there we go okay so because one of the most important things when it comes to CACDs really go step by step the most thing you can do yes let's add everything let us unit testing and to end testing whatever checks we have if you try to add everything at the same time you will probably fail because it's not that easy to do it I think even yeah I think even just like checking the like trying to add some random checks and I I feel like that's something that I could at least try to test now just to get in the habit of testing yes exactly and so at the same time I'm like this is such a big concept this is going to take me some time but you use but you use the one of the most important words habit developing a habit because really CACD is simple when it comes to the whole concept it's really that simple on the other hand it can get complicated the moment when we with how the project grows with how when it tests we have an every book still the concept behind is still simple and having this as a habit it's the most important thing it's it's about not to I don't deploy everything using FTP or some fancy lower everything is to have a script set of actions that will always work in the same way and if you will have one script it will probably at some point create a template out of it when you have a template you will start cloning it for every website you have and at some point you realize yeah quite often I have this and this mistake so maybe I should add a check for it and at some point after I did over a year or something of adding those small checks you realize I have a quite long and detailed pipeline that checks many many things for me and they don't have to worry about it and the moment when someone say hey could you deploy using the pilot's in lab and your reaction will be what without any testing without anything right right because it won't become one of your habits and this doesn't matter a lot of applications you will use it's really most about this like I said it's a methodology so it's all about habits about the spread across the teams I think that's one of the hardest ones is when people are coming on and we need to talk about theory um like they're same with some of uh the theory oh gosh now I don't even remember what they're called yet like theories I think are harder to conceptualize and until you get to that point but being aware of them beforehand helps you get through them when you get to them um so thank you once again for being on the show and uh I'm also really excited because I I feel like this could Cynthia um maybe one day if I can commence Cynthia to do it it's gonna come on the show to talk about uh creating a discord app and I think that's something that like we could tie this into you know even of course because I can also tell you that we can have an notification on this card so we can connect the things or we can uh pre-port the whole deployment of this discord applications using a CIC so there are so many ways we can connect everything with everyone and I can tell you that one of them yeah it was it was one of the stupidest uh I think I did when it comes to CICD or the most smart idea it really depends on which which uh when you look at it I created a pipeline uh and I connect and after everything ran correctly it pink this application iftt something like this it's for automation and it played the i of the tiger on Spotify on my mobile phone so every time when something everything went great it played uh i of the tiger on my mobile phone okay that's fine now I just uh it was horrible after the first time really because when you heard i of the tiger every time it's i mean it's one of the best ideas you can have but it shows you that uh and this is also great because we have so many APIs right now we can connect everything with everything we can connect what's virtual inside of this testing thing and after we don't only have to deploy something we can i didn't know connect it with our our philips hue wider it's more wider i was just thinking about that because there's uh Ian from postman he's created like lights in his background that's cool i wouldn't do that so someday i will and thank you uh magic for coming on today it was magical oh thank you thank and especially this especially this bug we we discovered altogether but that's great that's great this is this is the beauty of uh of life webinars we are all learning we are all learning learning our mistakes and uh yeah so much learning so much learning so much learning so much learning well exactly thank you again and thank you for having me thank you can find his twitter over there go follow ask questions yeah it was like we are like yeah it's like point at our things well thank you all and you uh as i had up for everybody uh no live stream tomorrow monday or two days so i'll be back next Thursday next week is a Denver startup week so i'm going to be in person at Denver startup but if you're in town come hang out with real people amazing real people real people not online i'm gonna be with real people everyone's real just internet buddies versus in person buddies thank you all bye bye everyone
I think even yeah I think even just like checking the like trying to add some random checks and I I feel like that's something that I could at least try to test now just to get in the habit of testing yes exactly and so at the same time I'm like this is such a big concept this is going to take me some time but you use but you use the one of the most important words habit developing a habit because really CACD is simple when it comes to the whole concept it's really that simple on the other hand it can get complicated the moment when we with how the project grows with how when it tests we have an every book still the concept behind is still simple and having this as a habit it's the most important thing it's it's about not to I don't deploy everything using FTP or some fancy lower everything is to have a script set of actions that will always work in the same way and if you will have one script it will probably at some point create a template out of it when you have a template you will start cloning it for every website you have and at some point you realize yeah quite often I have this and this mistake so maybe I should add a check for it and at some point after I did over a year or something of adding those small checks you realize I have a quite long and detailed pipeline that checks many many things for me and they don't have to worry about it and the moment when someone say hey could you deploy using the pilot's in lab and your reaction will be what without any testing without anything right right because it won't become one of your habits and this doesn't matter a lot of applications you will use it's really most about this like I said it's a methodology so it's all about habits about the spread across the teams I think that's one of the hardest ones is when people are coming on and we need to talk about theory um like they're same with some of uh the theory oh gosh now I don't even remember what they're called yet like theories I think are harder to conceptualize and until you get to that point but being aware of them beforehand helps you get through them when you get to them um so thank you once again for being on the show and uh I'm also really excited because I I feel like this could Cynthia um maybe one day if I can commence Cynthia to do it it's gonna come on the show to talk about uh creating a discord app and I think that's something that like we could tie this into you know even of course because I can also tell you that we can have an notification on this card so we can connect the things or we can uh pre-port the whole deployment of this discord applications using a CIC so there are so many ways we can connect everything with everyone and I can tell you that one of them yeah it was it was one of the stupidest uh I think I did when it comes to CICD or the most smart idea it really depends on which which uh when you look at it I created a pipeline uh and I connect and after everything ran correctly it pink this application iftt something like this it's for automation and it played the i of the tiger on Spotify on my mobile phone so every time when something everything went great it played uh i of the tiger on my mobile phone okay that's fine now I just uh it was horrible after the first time really because when you heard i of the tiger every time it's i mean it's one of the best ideas you can have but it shows you that uh and this is also great because we have so many APIs right now we can connect everything with everything we can connect what's virtual inside of this testing thing and after we don't only have to deploy something we can i didn't know connect it with our our philips hue wider it's more wider i was just thinking about that because there's uh Ian from postman he's created like lights in his background that's cool i wouldn't do that so someday i will and thank you uh magic for coming on today it was magical oh thank you thank and especially this especially this bug we we discovered altogether but that's great that's great this is this is the beauty of uh of life webinars we are all learning we are all learning learning our mistakes and uh yeah so much learning so much learning so much learning so much learning well exactly thank you again and thank you for having me thank you can find his twitter over there go follow ask questions yeah it was like we are like yeah it's like point at our things well thank you all and you uh as i had up for everybody uh no live stream tomorrow monday or two days so i'll be back next Thursday next week is a Denver startup week so i'm going to be in person at Denver startup but if you're in town come hang out with real people amazing real people real people not online i'm gonna be with real people everyone's real just internet buddies versus in person buddies thank you all bye bye everyone