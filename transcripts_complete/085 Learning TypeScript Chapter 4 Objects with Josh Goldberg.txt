some to you another episode of Teach Shandhaek Learning TypeScript with Josh. Yay! Yay! Josh came to the save earlier this week. Well, I was dreaming learning how to create download Docker, download Docker, use Docker with Postgres, and key to your admin And the first 30 minutes of it, I had no audio. Until Josh showed up and was like, yo, dude, I can't hear you. Oh, shit. Well, that would be helpful. So, yay, Josh. And for those who don't know, we'll see if I can remember it. Josh is a TypeScript maintainer
And the first 30 minutes of it, I had no audio. Until Josh showed up and was like, yo, dude, I can't hear you. Oh, shit. Well, that would be helpful. So, yay, Josh. And for those who don't know, we'll see if I can remember it. Josh is a TypeScript maintainer Is it official TypeScript or is it the winter that you're being able to see? It's just a winter tooling. My job title is, well, not existent and very confusing, because I work on one of the people who works on TypeScript ESLIN, which is neither TypeScript nor ESLIN
Is it official TypeScript or is it the winter that you're being able to see? It's just a winter tooling. My job title is, well, not existent and very confusing, because I work on one of the people who works on TypeScript ESLIN, which is neither TypeScript nor ESLIN It is a tooling that lets you run ESLIN and also prettier on TypeScript code. But I'm just going to need to TypeScript once in a while. OK. OK, because I was always like, I don't know exactly
It is a tooling that lets you run ESLIN and also prettier on TypeScript code. But I'm just going to need to TypeScript once in a while. OK. OK, because I was always like, I don't know exactly But I end up explaining that I'm like, yeah, Josh wrote a book about TypeScript and maintains something about TypeScript and is the TypeScript URL. That is my explanation of you. Thanks. Yeah. I like TypeScript. It's good. It's very fun. Yes
But I end up explaining that I'm like, yeah, Josh wrote a book about TypeScript and maintains something about TypeScript and is the TypeScript URL. That is my explanation of you. Thanks. Yeah. I like TypeScript. It's good. It's very fun. Yes It's very fun. Yes. And so I will share my screen really quick, because this is what the book looks like. Yay. Everybody should go get the book. It's amazing. I have thoroughly enjoyed learning. And there's funny and punny things in here that make it all worth reading
It's very fun. Yes. And so I will share my screen really quick, because this is what the book looks like. Yay. Everybody should go get the book. It's amazing. I have thoroughly enjoyed learning. And there's funny and punny things in here that make it all worth reading And also, it definitely builds upon itself, which I'm seeing, of course, we're on chapter four. It's taken us a while to get here, but we are. We are moving. And I'm doing this for those who are curious. I am streaming from my iPad. So everyone can see what I'm working on as well
And also, it definitely builds upon itself, which I'm seeing, of course, we're on chapter four. It's taken us a while to get here, but we are. We are moving. And I'm doing this for those who are curious. I am streaming from my iPad. So everyone can see what I'm working on as well But also, if I go to chapter four, I bookmarked it. You all can see my notes, because I'm also still learning my iPad. It doesn't really get any bigger than this. Unless I zoom in on the iPad itself. So if we want to see my notes, I can zoom
But also, if I go to chapter four, I bookmarked it. You all can see my notes, because I'm also still learning my iPad. It doesn't really get any bigger than this. Unless I zoom in on the iPad itself. So if we want to see my notes, I can zoom But before we get there, Josh, we are on chapter four, objects. Yes. What went into building this? And what's your overall? Why is this chapter four? And what do you think is the most important pieces of this? Quizzing you before we go look at the summary? Objects are really important
But before we get there, Josh, we are on chapter four, objects. Yes. What went into building this? And what's your overall? Why is this chapter four? And what do you think is the most important pieces of this? Quizzing you before we go look at the summary? Objects are really important In JavaScript, one of the really important things in JavaScript for everyone is writing all sorts of objects all over the place. And because people do all sorts of wild and wacky things, I'm learning these days in one of my favorite phrases
In JavaScript, one of the really important things in JavaScript for everyone is writing all sorts of objects all over the place. And because people do all sorts of wild and wacky things, I'm learning these days in one of my favorite phrases With their objects, a TypeScript has to be able to represent them super flexibly. But when you get down to it, in JavaScript and objects, or an object literal, the little curly brackets with stop inside is a set of key and value pairs. That's what it is
With their objects, a TypeScript has to be able to represent them super flexibly. But when you get down to it, in JavaScript and objects, or an object literal, the little curly brackets with stop inside is a set of key and value pairs. That's what it is That's what it is. So in the Type system, TypeScript lets you describe what those key and value pairs are going to be, each of which might have their own type. So you can have an object with like key is the string ABC. The value is number of types
That's what it is. So in the Type system, TypeScript lets you describe what those key and value pairs are going to be, each of which might have their own type. So you can have an object with like key is the string ABC. The value is number of types And then this object stuff just keeps going into different ways of representing different key value pair types. So an object in like short object is a key and a value. And it's in the curly bracket through regular brackets
And then this object stuff just keeps going into different ways of representing different key value pair types. So an object in like short object is a key and a value. And it's in the curly bracket through regular brackets I call them curly brackets or curly boys or squiggly bracket boys or squiggly wigglies. I'm like, you sound like you are on Jason's string. Because he always calls them like curly bracket or curly boys. I think he has a shirt about it. That is my representation of it. That's probably not great
I call them curly brackets or curly boys or squiggly bracket boys or squiggly wigglies. I'm like, you sound like you are on Jason's string. Because he always calls them like curly bracket or curly boys. I think he has a shirt about it. That is my representation of it. That's probably not great Please don't judge my drawing. Okay, so me being the super nuve for everyone who is curious, I am figuring stuff out as I go. Like I'm like, I want to do this project
Please don't judge my drawing. Okay, so me being the super nuve for everyone who is curious, I am figuring stuff out as I go. Like I'm like, I want to do this project Let's go learn it, which has it struggles or is really awesome because then you live stream with like 10 other people that all know what they're doing. And you're the super nuve who's sharing your screen asking questions about CSS. You know that does happen too. That was a great stream though
Let's go learn it, which has it struggles or is really awesome because then you live stream with like 10 other people that all know what they're doing. And you're the super nuve who's sharing your screen asking questions about CSS. You know that does happen too. That was a great stream though I had so much fun because I was not paying attention to like anything else anyone was saying. And I was so grateful because Jacob was like running the stream. And then I was just focusing on my code but I could ask questions when I got stuck. It was phenomenal
I had so much fun because I was not paying attention to like anything else anyone was saying. And I was so grateful because Jacob was like running the stream. And then I was just focusing on my code but I could ask questions when I got stuck. It was phenomenal It was phenomenal. For anyone who is curious, I would highly, highly suggest you're ever wanting to learn stuff. They friends in just live stream it. It's a lot of fun. Okay, so the reason I went into that is so, I'm trying to think of how to explain this of a value
It was phenomenal. For anyone who is curious, I would highly, highly suggest you're ever wanting to learn stuff. They friends in just live stream it. It's a lot of fun. Okay, so the reason I went into that is so, I'm trying to think of how to explain this of a value I'm gonna go back a couple pages because I tried writing this out. A value is different than a variable. But whatever, no, no. This isn't, I was thinking I was putting pieces together and I wasn't just a little sad
I'm gonna go back a couple pages because I tried writing this out. A value is different than a variable. But whatever, no, no. This isn't, I was thinking I was putting pieces together and I wasn't just a little sad So I also said, I skipped instead of me trying to, what's the key and what's the value? So that way I stopped trying to guess and look at the awkward. So in JavaScript, every object is a set of key and value pairs. It's like, and could you go earlier in the page? I wonder if I have an example here
So I also said, I skipped instead of me trying to, what's the key and what's the value? So that way I stopped trying to guess and look at the awkward. So in JavaScript, every object is a set of key and value pairs. It's like, and could you go earlier in the page? I wonder if I have an example here Okay, no. Next page then if you don't mind. Trying to get an example. Sure. All right, here you go. Top of the page, Poet equals. Then Poet equals an object with two key value pairs. Born as a key, 1935 is a value. The value's type is number
Okay, no. Next page then if you don't mind. Trying to get an example. Sure. All right, here you go. Top of the page, Poet equals. Then Poet equals an object with two key value pairs. Born as a key, 1935 is a value. The value's type is number So then typescript would understand that Poet variable to be type object that contains a born number and a name's string. Is that what you're looking for? Let me see if it is an ongoing two. So this is variable. Very well, sure. That's how it's going to be spot right now
So then typescript would understand that Poet variable to be type object that contains a born number and a name's string. Is that what you're looking for? Let me see if it is an ongoing two. So this is variable. Very well, sure. That's how it's going to be spot right now And then a, this is an object. And then we've got to change colors because we've got too much going on here. Let's do purple. Sure. And then I feel like so this, wow, that didn't work very well. Yeah, is a key. And this one's a key too. But it wouldn't be the value is 1935 or the value is a number
And then a, this is an object. And then we've got to change colors because we've got too much going on here. Let's do purple. Sure. And then I feel like so this, wow, that didn't work very well. Yeah, is a key. And this one's a key too. But it wouldn't be the value is 1935 or the value is a number Yeah, runtime in the runtime area of understanding. Yeah, Poet.born is the number 1935. But in the type system, type script would consider it to be type number. So you can later do Poet.born equals 1, 2, 3. That would be allowed because Poet.born is considered to be type number
Yeah, runtime in the runtime area of understanding. Yeah, Poet.born is the number 1935. But in the type system, type script would consider it to be type number. So you can later do Poet.born equals 1, 2, 3. That would be allowed because Poet.born is considered to be type number Kind of like how it would let variable. Like you said, let born equals 1935. That's type number. You can then later on assign it a different number. Just keep in mind in JavaScript, a const variable can't be reassigned. But you can do whatever the heck you want to its properties
Kind of like how it would let variable. Like you said, let born equals 1935. That's type number. You can then later on assign it a different number. Just keep in mind in JavaScript, a const variable can't be reassigned. But you can do whatever the heck you want to its properties So you can do like Poet.born equals negative 1, even though Poet is const. And I hear what you're saying. I'm trying to think of how to conceptualize this. So I remember going back to it. Sure. So would you say the key can be a type number, type string, whatever
So you can do like Poet.born equals negative 1, even though Poet is const. And I hear what you're saying. I'm trying to think of how to conceptualize this. So I remember going back to it. Sure. So would you say the key can be a type number, type string, whatever And then the value is what is ever declared in the key. Because then like 1935 can always change. But in example, it's 1935. Yeah. The same the value can change if you want. OK. OK. I just see this. See me. Can change. And these are the values. And the keys create like. Example. Hell it dot
And then the value is what is ever declared in the key. Because then like 1935 can always change. But in example, it's 1935. Yeah. The same the value can change if you want. OK. OK. I just see this. See me. Can change. And these are the values. And the keys create like. Example. Hell it dot Hell it dot. It would be Poet.born, right? And then that would be a number or would it be Poet. Yeah, it's example. Perfect. This is what I want. And I'm going to point to it. Yay. Yay. Yay. Cool. See, this is why I really, really wanted to get the tablet
Hell it dot. It would be Poet.born, right? And then that would be a number or would it be Poet. Yeah, it's example. Perfect. This is what I want. And I'm going to point to it. Yay. Yay. Yay. Cool. See, this is why I really, really wanted to get the tablet Because I'm like, what you're saying makes sense. But it doesn't always make sense in my head. Because I need arrows. Sure. The arrows are key. Yes. So I'm going to go back a page on. So we're talking about object types now. And I know at least on
Because I'm like, what you're saying makes sense. But it doesn't always make sense in my head. Because I need arrows. Sure. The arrows are key. Yes. So I'm going to go back a page on. So we're talking about object types now. And I know at least on And thank you for letting me ask you questions and being aware of my astro projects, because that does help put it to reference of in at least my first astro project. It was all of the type declarations were in another file
And thank you for letting me ask you questions and being aware of my astro projects, because that does help put it to reference of in at least my first astro project. It was all of the type declarations were in another file Are they always in another file or they normally within the same file? By default, people normally put them in the same file. But if you have types that are used in multiple files and aren't like strongly associated with one particular component or thing, then yeah, it's not unheard of
Are they always in another file or they normally within the same file? By default, people normally put them in the same file. But if you have types that are used in multiple files and aren't like strongly associated with one particular component or thing, then yeah, it's not unheard of It's not uncommon to put them in a dedicated like types file. It's kind of like when you declare constants. Like if it's only used in one place, yeah, it was keeping that one file. But if you use it in a few different places, maybe put it in a shared separate file. Yeah
It's not uncommon to put them in a dedicated like types file. It's kind of like when you declare constants. Like if it's only used in one place, yeah, it was keeping that one file. But if you use it in a few different places, maybe put it in a shared separate file. Yeah Yeah. We'll go back and write that one. Cool. Yay. That totally made sense. Cool. Now, if we skip a little further, which guys we're going to, y'all, we're just going to scroll. Because it's like the fast way to get to the summary. Realtar. Yay. All right. So. All right. Yep, tip down
Yeah. We'll go back and write that one. Cool. Yay. That totally made sense. Cool. Now, if we skip a little further, which guys we're going to, y'all, we're just going to scroll. Because it's like the fast way to get to the summary. Realtar. Yay. All right. So. All right. Yep, tip down Yep, tip down. We talked about this a little bit. And I kind of like going through the summary first, because then I'm like, OK, I know what I'm going to be learning and what to look at for, which that works for some people for learning
Yep, tip down. We talked about this a little bit. And I kind of like going through the summary first, because then I'm like, OK, I know what I'm going to be learning and what to look at for, which that works for some people for learning Other people are like, no, dude, I've got to go from the beginning. So I think this was really helpful of how typescript interpret types from objects type literals, describing object literal types, including nested and optional properties, which nested totally made sense to me as an optional divin
Other people are like, no, dude, I've got to go from the beginning. So I think this was really helpful of how typescript interpret types from objects type literals, describing object literal types, including nested and optional properties, which nested totally made sense to me as an optional divin And I was like, why? Why? It was frustrating for me. Declaring, inferring, and type neuroing with unions of object literal types. And discriminated unions and discriminates. What a concept. You're going to have to read the chapter to get that one
And I was like, why? Why? It was frustrating for me. Declaring, inferring, and type neuroing with unions of object literal types. And discriminated unions and discriminates. What a concept. You're going to have to read the chapter to get that one And combining object types together with intersection types. So a lot of this. And I really like that you always reference. I like that pointer, guys. We got pointers. Pointer. Pointer bullets. That you always put where we'll cover it more, or you link back to where it was previously covered
And combining object types together with intersection types. So a lot of this. And I really like that you always reference. I like that pointer, guys. We got pointers. Pointer. Pointer bullets. That you always put where we'll cover it more, or you link back to where it was previously covered That being said, I don't think anybody wants to go through that again of me scrolling a ton. So that one. Yeah. Cool. All right. Go into section two. Declaring object types. This, I, some of these notes may be in here, because I'm just working on remembering what we previously were talking about
That being said, I don't think anybody wants to go through that again of me scrolling a ton. So that one. Yeah. Cool. All right. Go into section two. Declaring object types. This, I, some of these notes may be in here, because I'm just working on remembering what we previously were talking about So if we are declaring object types, which this might make it easier for everybody to see. It's a little easier. It's like, it looks like a show of text and that. So we're declaring object types
So if we are declaring object types, which this might make it easier for everybody to see. It's a little easier. It's like, it looks like a show of text and that. So we're declaring object types So I was like, I need to remember what the types are, which is null undefined, gluelian string, number, bigant, and symbol. Those are the primitive types, not the object types. The two terms are different. See, this is this is where I'm a fact check in myself. Cool
So I was like, I need to remember what the types are, which is null undefined, gluelian string, number, bigant, and symbol. Those are the primitive types, not the object types. The two terms are different. See, this is this is where I'm a fact check in myself. Cool Cool. Everything you said is right, except if you cross out object and write primitive, then it'll be completely right. Sweet. Yay. And OK. OK. Because they're primitive types, because an object type and object needs to be have a key and a value. Right? OK. Yep. OK
Cool. Everything you said is right, except if you cross out object and write primitive, then it'll be completely right. Sweet. Yay. And OK. OK. Because they're primitive types, because an object type and object needs to be have a key and a value. Right? OK. Yep. OK Right? OK. Yep. OK. Basically everything in JavaScript is either a primitive or an instance of a class, which we haven't gotten into yet, or a function, or an object. Basically everything. OK. OK. All these. These are okay cool yeah That totally makes more sense
Right? OK. Yep. OK. Basically everything in JavaScript is either a primitive or an instance of a class, which we haven't gotten into yet, or a function, or an object. Basically everything. OK. OK. All these. These are okay cool yeah That totally makes more sense And what we were talking about for their on. Yeah, it's Ryan. Hello, Ryan. Ryan. I love that Ryan always does that. Like Ryan is the best at like hosting stuff when I'm like, I love talking to people, but like life streaming and then managing the chat and stuff. I was like, okay, hold on
And what we were talking about for their on. Yeah, it's Ryan. Hello, Ryan. Ryan. I love that Ryan always does that. Like Ryan is the best at like hosting stuff when I'm like, I love talking to people, but like life streaming and then managing the chat and stuff. I was like, okay, hold on Let me, let me do this. Just realize something though, y'all, let's see if I can just do the window to make it easier for all of us to see. Hey, there we go. Awesome. Also, it's got a really good back stretch. Nice. Nice. That is always important. So, okay, declaring objects
Let me, let me do this. Just realize something though, y'all, let's see if I can just do the window to make it easier for all of us to see. Hey, there we go. Awesome. Also, it's got a really good back stretch. Nice. Nice. That is always important. So, okay, declaring objects What would you say is a short summary of declaring objects? You can create a new object in JavaScript. And so, actually, sorry, I'm misinterpreted
What would you say is a short summary of declaring objects? You can create a new object in JavaScript. And so, actually, sorry, I'm misinterpreted When we say declaring object types, it's similar to how you might say that a variable will eventually be, or only ever be like a string or a number or something. Here we're saying it'll only ever be an object with these particular keys and values in it
When we say declaring object types, it's similar to how you might say that a variable will eventually be, or only ever be like a string or a number or something. Here we're saying it'll only ever be an object with these particular keys and values in it So, on this example, like you're showing on screen, let Poet Later, we're saying, Poet Later, the variable will only ever be assigned an object that has born number name string. Technically, I should have said, it's only ever going to be assigned a value that has those things, but that's semantics
So, on this example, like you're showing on screen, let Poet Later, we're saying, Poet Later, the variable will only ever be assigned an object that has born number name string. Technically, I should have said, it's only ever going to be assigned a value that has those things, but that's semantics So, I think this is a part that leads to my question later on of like error type string is not assignable to this. Because, like, what this alone makes sense when we go to when you're adding extras, that's where I'm like, wait a second. So, cool. Aaliest object types
So, I think this is a part that leads to my question later on of like error type string is not assignable to this. Because, like, what this alone makes sense when we go to when you're adding extras, that's where I'm like, wait a second. So, cool. Aaliest object types This one made sense, and especially because we talked about Aaliestness earlier, what I was curious about was, you answered this one already. Yay, so we don't need to go through that one
This one made sense, and especially because we talked about Aaliestness earlier, what I was curious about was, you answered this one already. Yay, so we don't need to go through that one So, just because we were talking about, like, const, let, and those type of things, if let wasn't added here, could you just do a Poet equals instead of Poet Later equals, right? Like the Poet from earlier? Well, no, it says type Poet, and that's the object
So, just because we were talking about, like, const, let, and those type of things, if let wasn't added here, could you just do a Poet equals instead of Poet Later equals, right? Like the Poet from earlier? Well, no, it says type Poet, and that's the object And then you say let Poet, let Poet Later be Poet, and then you use let Poet, but do you need to have let Poet Later declared for to use Poet as a, or could I say? You could say, like, let Poet, Coal, and Capital Be Poet equals the type
And then you say let Poet, let Poet Later be Poet, and then you use let Poet, but do you need to have let Poet Later declared for to use Poet as a, or could I say? You could say, like, let Poet, Coal, and Capital Be Poet equals the type They all work the same as with primitive or literal types, or type unions. You can slap that type in a place, even if it doesn't really seem necessary. Cool. Okay. Yeah. And this, I was like, okay, cool. This totally made sense
They all work the same as with primitive or literal types, or type unions. You can slap that type in a place, even if it doesn't really seem necessary. Cool. Okay. Yeah. And this, I was like, okay, cool. This totally made sense And this was another way of showing that you couldn't just put, like, with the error of just Emily Dickensen because it's missing information. Yes. Like in theory, Emily Dickensen, that string has some properties on it
And this was another way of showing that you couldn't just put, like, with the error of just Emily Dickensen because it's missing information. Yes. Like in theory, Emily Dickensen, that string has some properties on it It has like length and, you know, two string and stuff, but it does not have born and it does not have name. So it doesn't work. And that one made total sense to me
It has like length and, you know, two string and stuff, but it does not have born and it does not have name. So it doesn't work. And that one made total sense to me Anything else you would want us to know about alias objects types? So alias are used for all sorts of things, but the concept of an alias itself is actually really small as a concept. It's just whatever I say this word, I actually mean whatever's to the rights of the equal sign
Anything else you would want us to know about alias objects types? So alias are used for all sorts of things, but the concept of an alias itself is actually really small as a concept. It's just whatever I say this word, I actually mean whatever's to the rights of the equal sign So whenever I say Poet, I actually mean object that has born and name. That's okay. Okay. And then structural typing made sense to me. Let me see if I can find this. I like that I made myself a note of it. Because this one talks about depth typing
So whenever I say Poet, I actually mean object that has born and name. That's okay. Okay. And then structural typing made sense to me. Let me see if I can find this. I like that I made myself a note of it. Because this one talks about depth typing And I remember on like our last string, I had to ask like, it was the first time I heard of what depth typing was. And I was like, what is this? And one night I came up with funny titles and I was like, let me read that's really quick. Y'all can laugh at it. It's totally okay
And I remember on like our last string, I had to ask like, it was the first time I heard of what depth typing was. And I was like, what is this? And one night I came up with funny titles and I was like, let me read that's really quick. Y'all can laugh at it. It's totally okay It's totally okay. But I don't know if it applies, but. Yeah, you mean. I. And. That's. That's. I mean. I. I don't know if I can find this. I don't know if I can find this. I don't know if I can find this. Okay. There we go
It's totally okay. But I don't know if it applies, but. Yeah, you mean. I. And. That's. That's. I mean. I. I don't know if I can find this. I don't know if I can find this. I don't know if I can find this. Okay. There we go Okay. There we go. I didn't have my phone with me to put it earlier, but types of ducks, how having data types help your ducking code. I like it. I want to do a talk on that someday. Inspired by our string. So thanks. I like it. But
Okay. There we go. I didn't have my phone with me to put it earlier, but types of ducks, how having data types help your ducking code. I like it. I want to do a talk on that someday. Inspired by our string. So thanks. I like it. But I like it. But. The only problem is that you put it at the, it's a little longer of a title in the funny parts at the end. I'm wondering if there's a way to move the ducking code like the joke too earlier in the title to emphasize it more
I like it. But. The only problem is that you put it at the, it's a little longer of a title in the funny parts at the end. I'm wondering if there's a way to move the ducking code like the joke too earlier in the title to emphasize it more Were you worried that I was about to criticize it? No, I, um, I, I didn't know like I was like, I'm pretty sure these, uh, pieces of it make sense
Were you worried that I was about to criticize it? No, I, um, I, I didn't know like I was like, I'm pretty sure these, uh, pieces of it make sense But I was like, wait, if duckie, if duck code is without types and is just like going with a flow does adding data types actually help because then it's no longer duck typing. So I was more like over analyzing that part of things. Um, then word structure and stuff like that
But I was like, wait, if duckie, if duck code is without types and is just like going with a flow does adding data types actually help because then it's no longer duck typing. So I was more like over analyzing that part of things. Um, then word structure and stuff like that Um, but we could say, uh, let's choose the color. Oh, sure. Help your ducking code. This reminds me of one of the greatest Simpson's gags of all time. Have you seen the picture of a needs feed and seed? No. Formerly owned by Chuck. Oh my gosh
Um, but we could say, uh, let's choose the color. Oh, sure. Help your ducking code. This reminds me of one of the greatest Simpson's gags of all time. Have you seen the picture of a needs feed and seed? No. Formerly owned by Chuck. Oh my gosh Oh my gosh. I don't think I've ever actually watched a full episode of this. It's a, it used to be a lot better. I haven't seen a lot of TV. It's kind of sad, kind of boring, but that's okay. So what do you think of this one though? Help your ducking code with data types. I like it. Yeah
Oh my gosh. I don't think I've ever actually watched a full episode of this. It's a, it used to be a lot better. I haven't seen a lot of TV. It's kind of sad, kind of boring, but that's okay. So what do you think of this one though? Help your ducking code with data types. I like it. Yeah I like it. Yeah. I work on it. I'll work on it. It was work on it. I was like, I was just excited that it, the concept I was like, uh, I woke up in the middle of the night and all these like title ideas came to mind. Yes. And I'm like, why, why doesn't it have to come to me at like 1 a.m
I like it. Yeah. I work on it. I'll work on it. It was work on it. I was like, I was just excited that it, the concept I was like, uh, I woke up in the middle of the night and all these like title ideas came to mind. Yes. And I'm like, why, why doesn't it have to come to me at like 1 a.mm.? Why can't it come to me like, you know, during the day when I'm awake? So it was one of those. That's why I'm like, no hard feelings if it doesn't make sense. Do you keep like a whiteboard or pen paper by your bed, anything like that? Um, I send them to myself in a message. Nice
m.? Why can't it come to me like, you know, during the day when I'm awake? So it was one of those. That's why I'm like, no hard feelings if it doesn't make sense. Do you keep like a whiteboard or pen paper by your bed, anything like that? Um, I send them to myself in a message. Nice Nice. I found that that's super useful, like having a message or paper or whatever. Yeah. Yes, that is true. Ryan, that is so true. I said, Ryan said it's because you're more relaxed. I eat shower thoughts. That is why so many people remember things and or have ideas
Nice. I found that that's super useful, like having a message or paper or whatever. Yeah. Yes, that is true. Ryan, that is so true. I said, Ryan said it's because you're more relaxed. I eat shower thoughts. That is why so many people remember things and or have ideas Um, I actually, since I started using the tablet. I started going to sleep with it next to me. So I can just put this in a notebook and actually start having them together. Nice. Yeah. Plus one of the driving. I've written like verbally dictated written a lot of blog posts in the car
Um, I actually, since I started using the tablet. I started going to sleep with it next to me. So I can just put this in a notebook and actually start having them together. Nice. Yeah. Plus one of the driving. I've written like verbally dictated written a lot of blog posts in the car Oh, that's a good call. That's good to reminder because if we are moving back to Phoenix in July, it'll be a 14 hour drive. So, you know, I'll just like be really productive and write things. Expecting you have your own TypeScript book binding to that drive. Yes. Yes
Oh, that's a good call. That's good to reminder because if we are moving back to Phoenix in July, it'll be a 14 hour drive. So, you know, I'll just like be really productive and write things. Expecting you have your own TypeScript book binding to that drive. Yes. Yes Yes. Yes. Like TypeScript for people who don't know JavaScript. Okay. So you said checking. This one also completely made sense to me. I was just like, oh. It's. Yeah. That one was easy. What would you say is the summary of that one? And glad to make sense to you because I have to look back. Okay
Yes. Yes. Like TypeScript for people who don't know JavaScript. Okay. So you said checking. This one also completely made sense to me. I was just like, oh. It's. Yeah. That one was easy. What would you say is the summary of that one? And glad to make sense to you because I have to look back. Okay Okay. What makes sense for you? Yeah. Yeah. Okay. The way I understood it is usage checking is when basically it's like, hey, we had first name last name. You entered the first name. But hey, last name is not here. So it's still wrong. Because last name is not here. Yeah. Exactly. Yeah
Okay. What makes sense for you? Yeah. Yeah. Okay. The way I understood it is usage checking is when basically it's like, hey, we had first name last name. You entered the first name. But hey, last name is not here. So it's still wrong. Because last name is not here. Yeah. Exactly. Yeah Exactly. Yeah. If you wrote last name. So we use an example earlier of how you can use somebody's like, you can put the poet's information as a string. But if you don't put names and their, their name in the string there, it's not going to know it because it's not. Reading it correctly. So
Exactly. Yeah. If you wrote last name. So we use an example earlier of how you can use somebody's like, you can put the poet's information as a string. But if you don't put names and their, their name in the string there, it's not going to know it because it's not. Reading it correctly. So So. But excess property type. There is a what for a reason. Because I was like. The other one made sense. Totally made sense. I was missing. But going to excess property type. If I go to the next page. I was like, I was looking at the error. And I'm like. I'm not. What's not clicking. Sure
So. But excess property type. There is a what for a reason. Because I was like. The other one made sense. Totally made sense. I was missing. But going to excess property type. If I go to the next page. I was like, I was looking at the error. And I'm like. I'm not. What's not clicking. Sure Sure. So TypeScript. Tells you when the thing you did, the value does not match what you previously said it should be. You declare a variable. And you say it's going to be a particular type that is two things. And the initial value for the variable has three things. Wow
Sure. So TypeScript. Tells you when the thing you did, the value does not match what you previously said it should be. You declare a variable. And you say it's going to be a particular type that is two things. And the initial value for the variable has three things. Wow Wow. So the complete there that seconds indentation level to says an object will make only specify known properties. As if you say it's going to be a particular type, you can only specify properties. Mentioned in that type. And activity does not exist on type poets
Wow. So the complete there that seconds indentation level to says an object will make only specify known properties. As if you say it's going to be a particular type, you can only specify properties. Mentioned in that type. And activity does not exist on type poets So typeScript is telling you, hey, you said it's going to be this thing. I don't know if it's what it is. Because it's going to be something a little, it's going to be this thing. It's going to be this thing
So typeScript is telling you, hey, you said it's going to be this thing. I don't know if it's what it is. Because it's going to be something a little, it's going to be this thing. It's going to be this thing Actually more than that thing, you added excess things, you weren't saying you were going to. Okay, so I. Y'all, I know this is on two pages. So bear with me for going back and forward. But oh, actually not. I'm like a side by side
Actually more than that thing, you added excess things, you weren't saying you were going to. Okay, so I. Y'all, I know this is on two pages. So bear with me for going back and forward. But oh, actually not. I'm like a side by side It doesn't, but it does have this kind of creepy thing that I can do. Creepy. Creepy is my middle name. Oh. This is what we have from the other page. Okay. I guess that'll work. Okay. I mean, like, zoom this in since it's a little smaller
It doesn't, but it does have this kind of creepy thing that I can do. Creepy. Creepy is my middle name. Oh. This is what we have from the other page. Okay. I guess that'll work. Okay. I mean, like, zoom this in since it's a little smaller So we have, and I think this does help at least for me being able to see them on the same page. So we said the type is poet and that object includes born in name. And then we have the const poet match is poet. That's an alias. And so the keys are born in name values are the year and name
So we have, and I think this does help at least for me being able to see them on the same page. So we said the type is poet and that object includes born in name. And then we have the const poet match is poet. That's an alias. And so the keys are born in name values are the year and name And that's all that's in our object. That's it. Well, we're done. But if we say, well, hey, our poet is walking has an activity going on. It's not going to work because it's never assigned. Okay. That really makes more sense. Thank you. Cool. Yeah
And that's all that's in our object. That's it. Well, we're done. But if we say, well, hey, our poet is walking has an activity going on. It's not going to work because it's never assigned. Okay. That really makes more sense. Thank you. Cool. Yeah Cool. Yeah. Yeah, I think it was just that it was on different pages. I know that's one of the real drawbacks of books. Like traditional page oriented books. I wish it could be. I wish the PDF view of it was like the old Riley online platform or it is one thing
Cool. Yeah. Yeah, I think it was just that it was on different pages. I know that's one of the real drawbacks of books. Like traditional page oriented books. I wish it could be. I wish the PDF view of it was like the old Riley online platform or it is one thing Do it like a seamless view like this. But it's still get the little page breaks, right? Yeah. So like this one, I'm just like. If I didn't have this here, it still doesn't entirely make sense, but they are closer together. So it's something. It is something. Which I guess I'll just keep it here
Do it like a seamless view like this. But it's still get the little page breaks, right? Yeah. So like this one, I'm just like. If I didn't have this here, it still doesn't entirely make sense, but they are closer together. So it's something. It is something. Which I guess I'll just keep it here So not that tight totally made sense to me. I'm trying to scroll down. So it's like you have an object within an object. Right? Yeah. So if we look at these ones are still. And I'm going to put pens with her. And then so this is. Object. Object. I can spell guys. I know. No, no, no, no
So not that tight totally made sense to me. I'm trying to scroll down. So it's like you have an object within an object. Right? Yeah. So if we look at these ones are still. And I'm going to put pens with her. And then so this is. Object. Object. I can spell guys. I know. No, no, no, no No, no, no, no. There we go. Object. One. Is. Poem. And then. I don't know if you guys heard that, but I just made a beep a lot on me because my elbow hit it. And then. Author. Is object. Chill. Right? Yeah. Objects in an object. Cool. That wouldn't be sincere
No, no, no, no. There we go. Object. One. Is. Poem. And then. I don't know if you guys heard that, but I just made a beep a lot on me because my elbow hit it. And then. Author. Is object. Chill. Right? Yeah. Objects in an object. Cool. That wouldn't be sincere And it's still going to have the same issues if you don't have them lining up properly and enter the right information. So. Gravy. This one is good. Maybe. Uh, no, we don't need to go through that way. But optional properties. So. Just to make sure that I understand it's basically saying that
And it's still going to have the same issues if you don't have them lining up properly and enter the right information. So. Gravy. This one is good. Maybe. Uh, no, we don't need to go through that way. But optional properties. So. Just to make sure that I understand it's basically saying that Earlier we talked about if stuff is missing. Then we're going to get an error. But sometimes you don't always need a name and a date. Sometimes you just need a date because you don't know or you need the name because you have no idea when they were alive
Earlier we talked about if stuff is missing. Then we're going to get an error. But sometimes you don't always need a name and a date. Sometimes you just need a date because you don't know or you need the name because you have no idea when they were alive Or it's a blind date and you just need to know when to meet them. That's the name. Exactly. Exactly. So. All of that being said, just to break it down for myself on this last one. Okay, we're going back to the other. Let's go. There we go. Stretched. Yeah. So. Type. Riders is string
Or it's a blind date and you just need to know when to meet them. That's the name. Exactly. Exactly. So. All of that being said, just to break it down for myself on this last one. Okay, we're going back to the other. Let's go. There we go. Stretched. Yeah. So. Type. Riders is string Riders is string. Um, with a line. And then undefined. An editor is question mark with a string. So is this saying it could be either one of those or I need to do the line. I'm just going to rewrite it now and not pink. So I would have to do the line, which is or. And then. Undefined
Riders is string. Um, with a line. And then undefined. An editor is question mark with a string. So is this saying it could be either one of those or I need to do the line. I'm just going to rewrite it now and not pink. So I would have to do the line, which is or. And then. Undefined Undefined. I'm not sure what which what you mentioned the question. Okay. Please. Does. This. Me the same as. It does not. Author. Colin. Versus editor question mark. Colin. The question mark says this property does not have to exist. When there's no question mark, the property must exist. Even if
Undefined. I'm not sure what which what you mentioned the question. Okay. Please. Does. This. Me the same as. It does not. Author. Colin. Versus editor question mark. Colin. The question mark says this property does not have to exist. When there's no question mark, the property must exist. Even if Even if. It's. The property must exist. Even if. It's value is undefined. Because there's a difference between the property not existing and the property existing, but having the value undefined. Okay. Question. Oh. What. Okay. Okay. And I think it's. So they would have to type undefined
Even if. It's. The property must exist. Even if. It's value is undefined. Because there's a difference between the property not existing and the property existing, but having the value undefined. Okay. Question. Oh. What. Okay. Okay. And I think it's. So they would have to type undefined It could it save link. Yeah. If they. So this is most commonly done when. Well, actually, it's not super common. A lot of the time people will just put the question mark. It's easier to type
It could it save link. Yeah. If they. So this is most commonly done when. Well, actually, it's not super common. A lot of the time people will just put the question mark. It's easier to type Why would you want this? But like, let's say you have like a function that returns string or undefined or something. Or like you have a variable that's only sometimes given a string. You might want to explicitly have that value in the object, even though it might be undefined
Why would you want this? But like, let's say you have like a function that returns string or undefined or something. Or like you have a variable that's only sometimes given a string. You might want to explicitly have that value in the object, even though it might be undefined So you might do like author a colon mark. This might be my author maybe. The variable may. I don't know if that helps or just made things more complicated, but. No, it helps. Yeah. Okay. That totally makes sense now. And then we get to unions and
So you might do like author a colon mark. This might be my author maybe. The variable may. I don't know if that helps or just made things more complicated, but. No, it helps. Yeah. Okay. That totally makes sense now. And then we get to unions and I kind of struggled with unions and the last chapter. Not my favorite. But. I could you go over like what you were planning with like unions of object types and inferred object type unions and kind of go into. That process behind that. It's all based on the concept of unions
I kind of struggled with unions and the last chapter. Not my favorite. But. I could you go over like what you were planning with like unions of object types and inferred object type unions and kind of go into. That process behind that. It's all based on the concept of unions So we should get you make sure you're solid on unions in general before we over complicated with objects. So can you describe what you think of unions as for me to be. I'm trying to remember. I think that's a big reason that I keep writing like earlier I wrote with the values or what the
So we should get you make sure you're solid on unions in general before we over complicated with objects. So can you describe what you think of unions as for me to be. I'm trying to remember. I think that's a big reason that I keep writing like earlier I wrote with the values or what the on the other page, I wrote the seven that were there. Sure, there were a lot of types. Yeah, the types. There we go. Thank you. The types, because I'm like, I feel like I'm going to forget what types are
on the other page, I wrote the seven that were there. Sure, there were a lot of types. Yeah, the types. There we go. Thank you. The types, because I'm like, I feel like I'm going to forget what types are I think union is the same way where I'm like, I'm not used to the word, so I'm not used to the definition, because I still associate it with English language instead of coding
I think union is the same way where I'm like, I'm not used to the word, so I'm not used to the definition, because I still associate it with English language instead of coding So, if I were to do this, and I want to show everybody instead of just like asking you for the answer, because I mean, don't get me wrong, it is really easy just to ask everybody for the answer. But then I'm not going to be great at googling things. Okay
So, if I were to do this, and I want to show everybody instead of just like asking you for the answer, because I mean, don't get me wrong, it is really easy just to ask everybody for the answer. But then I'm not going to be great at googling things. Okay Okay. Well, Siri wanted to answer, but didn't understand. So, this is back in chapter three. Unions are expanding a values allowed type to be one or more possible types. Okay
Okay. Well, Siri wanted to answer, but didn't understand. So, this is back in chapter three. Unions are expanding a values allowed type to be one or more possible types. Okay Okay. So, this is when we said, that mathematician is a variable, but it could be undefined or Mark Goldberg, but it would have to be Mark Goldberg the exact string, or it just could be undefined or string. You tell me, it's a let variable
Okay. So, this is when we said, that mathematician is a variable, but it could be undefined or Mark Goldberg, but it would have to be Mark Goldberg the exact string, or it just could be undefined or string. You tell me, it's a let variable Is it stringer undefined or Mark Goldberg or undefined? Mark Goldberg is undefined. Wait. Yeah. A let variable is allowed to be reassigned. So, this is going to be string because it would be annoying to not let people assign any other strings to a let variable
Is it stringer undefined or Mark Goldberg or undefined? Mark Goldberg is undefined. Wait. Yeah. A let variable is allowed to be reassigned. So, this is going to be string because it would be annoying to not let people assign any other strings to a let variable So, it would be string or undefined to the union type. Okay. You look unhappy with this. No, it's just one of those things that are like going to take longer to like sink in. It's repetition, not what you're saying. So, that is I think one of the hardest parts of learning is it doesn't always
So, it would be string or undefined to the union type. Okay. You look unhappy with this. No, it's just one of those things that are like going to take longer to like sink in. It's repetition, not what you're saying. So, that is I think one of the hardest parts of learning is it doesn't always Yeah. Because when it's referred to in another area, it's kind of hard to remember to go back and where to go back. So, I appreciate you asking me to I know what it is because then I'm like, that is a solid question. I don't know. I don't know if I remember what it is
Yeah. Because when it's referred to in another area, it's kind of hard to remember to go back and where to go back. So, I appreciate you asking me to I know what it is because then I'm like, that is a solid question. I don't know. I don't know if I remember what it is I was going to say union as in it puts you into things together. So, kind of. Okay. Let's face this right here. It's damaged. I can hang out over here. So, at least know where I got it from. Right
I was going to say union as in it puts you into things together. So, kind of. Okay. Let's face this right here. It's damaged. I can hang out over here. So, at least know where I got it from. Right Right. That is making more sense then because inferred object type unions is just saying instead of it being like a mathematician can be undefined or a string. It just means that there's two different type of objects that it could be, right? Yeah. Yep
Right. That is making more sense then because inferred object type unions is just saying instead of it being like a mathematician can be undefined or a string. It just means that there's two different type of objects that it could be, right? Yeah. Yep Yep. It's either the one pages or the one with rhymes exactly. Okay. So, or, okay. Yeah. Yeah. Yeah. But would it still have to both have three in them? It does not. Note the type that's in the comment there. But both of those two options have an optional without poor choice of words
Yep. It's either the one pages or the one with rhymes exactly. Okay. So, or, okay. Yeah. Yeah. Yeah. But would it still have to both have three in them? It does not. Note the type that's in the comment there. But both of those two options have an optional without poor choice of words Both of those two potential types that can technically constituents, but like the two potential type objects. They both have names string and they both have pages and rhymes, but in each of them, one of those latter two are optional
Both of those two potential types that can technically constituents, but like the two potential type objects. They both have names string and they both have pages and rhymes, but in each of them, one of those latter two are optional So, in the first one, it says, if you have a rhymes property, it's undefined. Like it's not there. But you do have pages and things. That question mark is very key. But that being said, I could do one that is just make sure I'm following along of like one type is name string and just has the one
So, in the first one, it says, if you have a rhymes property, it's undefined. Like it's not there. But you do have pages and things. That question mark is very key. But that being said, I could do one that is just make sure I'm following along of like one type is name string and just has the one And then another one could be name and rhymes as both required. So they both don't have to have two keys. To be a union. Yeah. Like if you have removed pages from the first one. Yeah. Yeah. This might make more sense to me. Back. Oh, the back. So I just wanted to be. And maybe maybe. Yeah. Yeah
And then another one could be name and rhymes as both required. So they both don't have to have two keys. To be a union. Yeah. Like if you have removed pages from the first one. Yeah. Yeah. This might make more sense to me. Back. Oh, the back. So I just wanted to be. And maybe maybe. Yeah. Yeah Yeah. Yeah. You have a new great time I can tell. It makes so much more sense finally being able to like be like, okay, cool. Like I kind of get what you're saying. But I don't
Yeah. Yeah. You have a new great time I can tell. It makes so much more sense finally being able to like be like, okay, cool. Like I kind of get what you're saying. But I don't But I don't. So can I like at least write it out, which helps when I don't necessarily want to write it out in code because then I'm more worried about like the errors there. So I think it's a like understanding like could I do this because they're all required
But I don't. So can I like at least write it out, which helps when I don't necessarily want to write it out in code because then I'm more worried about like the errors there. So I think it's a like understanding like could I do this because they're all required But the first one has one key and the second one has two keys. You could totally do that. Okay. I will note. So first of all, yes, you're absolutely right. I'm not trying to correct any understanding because I think yours is perfect and good and great
But the first one has one key and the second one has two keys. You could totally do that. Okay. I will note. So first of all, yes, you're absolutely right. I'm not trying to correct any understanding because I think yours is perfect and good and great I think it's not that there was something interesting because I think it's cool. The specific type you just wrote where they both have a name and only one of them has a pages could be represented as an object. It would be equivalent to say an object that has. Oh, yeah, hello
I think it's not that there was something interesting because I think it's cool. The specific type you just wrote where they both have a name and only one of them has a pages could be represented as an object. It would be equivalent to say an object that has. Oh, yeah, hello Oh, yeah, hello. That has a name, colon string, and then pages as an optional number. That's equivalent. But basically the same. Oh, yeah, yeah. The fact that you just said, oh, yeah, yeah, it's great because you understand why that's the case and that makes me happy
Oh, yeah, hello. That has a name, colon string, and then pages as an optional number. That's equivalent. But basically the same. Oh, yeah, yeah. The fact that you just said, oh, yeah, yeah, it's great because you understand why that's the case and that makes me happy Yeah, so I could have just done the question mark for pages. But if I did name, rhymes, and I just didn't think of anything. Don't need to have the same number of keys. I actually understand what keys are. And what up, alien? Hello, hello. I really need to work on my website soon
Yeah, so I could have just done the question mark for pages. But if I did name, rhymes, and I just didn't think of anything. Don't need to have the same number of keys. I actually understand what keys are. And what up, alien? Hello, hello. I really need to work on my website soon I really should hit you up. We could do a stream for that just like hanging out, making fun of me work on my site. And FYI, it was really fun though when we did it on Friday because I learned a lot in alien
I really should hit you up. We could do a stream for that just like hanging out, making fun of me work on my site. And FYI, it was really fun though when we did it on Friday because I learned a lot in alien I did try to tell everyone that I could have broken everything that is not because I got it from the scene. I could have done it myself because I copy paste and try to make things work. So. Okay. Yay. Oh. So basically what I was just trying to ask you is explicit. Object types. Yeah
I did try to tell everyone that I could have broken everything that is not because I got it from the scene. I could have done it myself because I copy paste and try to make things work. So. Okay. Yay. Oh. So basically what I was just trying to ask you is explicit. Object types. Yeah Object types. Yeah. What you wanted was the next thing. And look, I mean, that's just a prettier way of thinking about it. Rather than inferring something with like these weird question mark, undefined things like if that's your data structure, it's nice to represent it in the type system
Object types. Yeah. What you wanted was the next thing. And look, I mean, that's just a prettier way of thinking about it. Rather than inferring something with like these weird question mark, undefined things like if that's your data structure, it's nice to represent it in the type system And we're actually getting out excited. Excuse me. We're starting to think in typescript lands. Like, prefer it was just a type script is letting us annotate like all this stuff that's supposed to happen. And here you are in this
And we're actually getting out excited. Excuse me. We're starting to think in typescript lands. Like, prefer it was just a type script is letting us annotate like all this stuff that's supposed to happen. And here you are in this If it describing in the type system, how your code is thinking about things, the way your data is structured. And then you're just writing values that adhere to that format. I think it's a really pretty thing
If it describing in the type system, how your code is thinking about things, the way your data is structured. And then you're just writing values that adhere to that format. I think it's a really pretty thing And as you go through the book, you'll get to more and more of these like the data is based on the types, not the other way around kind of moments. Well, just maybe I'm too excited for most people here, but I think it's really cool
And as you go through the book, you'll get to more and more of these like the data is based on the types, not the other way around kind of moments. Well, just maybe I'm too excited for most people here, but I think it's really cool No, it's really cool because I'm starting to enjoy learning about it more because it's starting to put these pieces together where at the very beginning, and it is frustrating because you asked me about unions and I was like, I don't know
No, it's really cool because I'm starting to enjoy learning about it more because it's starting to put these pieces together where at the very beginning, and it is frustrating because you asked me about unions and I was like, I don't know And a lot of it has to do with the fact that if somebody is going to ask me what's an explicit object type, I'm going to be like, do not even remember what unions are because the names don't associate, but if I were to go try to do this. Oh, yeah, okay. Yeah. Yeah
And a lot of it has to do with the fact that if somebody is going to ask me what's an explicit object type, I'm going to be like, do not even remember what unions are because the names don't associate, but if I were to go try to do this. Oh, yeah, okay. Yeah. Yeah Yeah. Yeah. This is, I know I can make this work. I'm just not going to remember the name of it. I'm not going to be going, but it's also needed. You need to remember the name so you can know what Google. Yeah, the googling is key. Or as the kids now do it's chat GPT or whatever. Not going to lie
Yeah. Yeah. This is, I know I can make this work. I'm just not going to remember the name of it. I'm not going to be going, but it's also needed. You need to remember the name so you can know what Google. Yeah, the googling is key. Or as the kids now do it's chat GPT or whatever. Not going to lie Not going to lie. I did do that for if we moved Phoenix, we got to do it. Find somewhere for my father and law to transfer his assisted living. And I was like, I don't even know how do you do that out of state. No idea. And chat GPT came up with my list. I was very excited about this. Okay
Not going to lie. I did do that for if we moved Phoenix, we got to do it. Find somewhere for my father and law to transfer his assisted living. And I was like, I don't even know how do you do that out of state. No idea. And chat GPT came up with my list. I was very excited about this. Okay Okay. Narrowing is doing. Oh, I know it. I'm going to go read it again because I put it up here. You're using a values allowed type to not be one of the more possible types
Okay. Narrowing is doing. Oh, I know it. I'm going to go read it again because I put it up here. You're using a values allowed type to not be one of the more possible types Is this with narrowing object types only be in an if and because if an object says, yo, I don't know, let's say that it has the key of name. And that is the only thing in the object
Is this with narrowing object types only be in an if and because if an object says, yo, I don't know, let's say that it has the key of name. And that is the only thing in the object It doesn't need to be narrowed anymore, right? Or is it just because these are if else is? Is narrowing only for if else is. Yeah, trying to think of how to answer that right
It doesn't need to be narrowed anymore, right? Or is it just because these are if else is? Is narrowing only for if else is. Yeah, trying to think of how to answer that right It is not only for if else is there are actually a lot of cases in code where you end up using narrowing sometimes a surprising cases. Other places I think I've already come up in the book are turnary statements like question mark colon while loops and for loops actually can perform narrowing
It is not only for if else is there are actually a lot of cases in code where you end up using narrowing sometimes a surprising cases. Other places I think I've already come up in the book are turnary statements like question mark colon while loops and for loops actually can perform narrowing But it's just easiest to like most common to say if statements and also just kind of easiest to think of small code snippets that use them
But it's just easiest to like most common to say if statements and also just kind of easiest to think of small code snippets that use them But like if let's say that a variable is like something or undefined and you say while that variable inside the while loop, the variable will be now to anything that's truthy. Okay, okay. I think I need to just practice more with narrowing types to understand them better
But like if let's say that a variable is like something or undefined and you say while that variable inside the while loop, the variable will be now to anything that's truthy. Okay, okay. I think I need to just practice more with narrowing types to understand them better So that one I will give you that. You told us that we would have to read the chapter to get to discriminated unions. So I feel like I should just like skip over this. Well, it is my favorite thing in text and you have personally heard me just kidding. Whatever, I just didn't get to it. I'm sorry
So that one I will give you that. You told us that we would have to read the chapter to get to discriminated unions. So I feel like I should just like skip over this. Well, it is my favorite thing in text and you have personally heard me just kidding. Whatever, I just didn't get to it. I'm sorry I'm sorry. I'm like in reality. We could pause here and I will go through it and then we'll come back to it. Once you can one could do an entire stream on discriminating unions and discrimination in type scripts
I'm sorry. I'm like in reality. We could pause here and I will go through it and then we'll come back to it. Once you can one could do an entire stream on discriminating unions and discrimination in type scripts And before anyone gets their ears perked up on the words I just said it comes from the mathematical concept of separating things discriminating on values and it is not a major nightmare, which is a caveat I have to give always because the word discrimination has multiple meanings and only one of them is commonly used
And before anyone gets their ears perked up on the words I just said it comes from the mathematical concept of separating things discriminating on values and it is not a major nightmare, which is a caveat I have to give always because the word discrimination has multiple meanings and only one of them is commonly used We're going to say separating. I like that. That makes a lot more sense even just looking at it. You were thinking, oh no, what is happening? I was like, what are we discriminating against? Like, what are we saying we're going to be mean to or something? It's those reaction developers
We're going to say separating. I like that. That makes a lot more sense even just looking at it. You were thinking, oh no, what is happening? I was like, what are we discriminating against? Like, what are we saying we're going to be mean to or something? It's those reaction developers We're all on solid now. Am I right in the chat? Oh, that just bring up the great point that we were going to ask about
We're all on solid now. Am I right in the chat? Oh, that just bring up the great point that we were going to ask about What is the latest drama on type scripts? This is my favorite question to ask because I don't 99% of the time I do not realize anything is going on unless I hear about it from Dan, which on Dan stream, we wrote a letter to an author
What is the latest drama on type scripts? This is my favorite question to ask because I don't 99% of the time I do not realize anything is going on unless I hear about it from Dan, which on Dan stream, we wrote a letter to an author I think it's a very kind way about some feedback Dan received from his thread. And then like from you or Jacob and Roy afterwards. That is how I find out about the drama. Yeah, I actually don't think there's very much types of drama. They are making a type of documentary
I think it's a very kind way about some feedback Dan received from his thread. And then like from you or Jacob and Roy afterwards. That is how I find out about the drama. Yeah, I actually don't think there's very much types of drama. They are making a type of documentary Fun fact, same people who made the react documentary I think. Oh, I didn't even know there was a react documentary. Actually, I've been meeting to seem like it's. Actually, don't quote me on that. There might be two popular documentary teams happening. Yeah, I don't know
Fun fact, same people who made the react documentary I think. Oh, I didn't even know there was a react documentary. Actually, I've been meeting to seem like it's. Actually, don't quote me on that. There might be two popular documentary teams happening. Yeah, I don't know Yeah, I don't know. I don't know many recent drama since the last stream, which is kind of good. Right. Right. Dan actually has an interesting question. Now we're chatting about this for the stream
Yeah, I don't know. I don't know many recent drama since the last stream, which is kind of good. Right. Right. Dan actually has an interesting question. Now we're chatting about this for the stream Do typescript wizards like Polkock and me just going to suddenly put myself on the same level as Matt Polkock, even though I am not doing like compete with each other. Like is there competition? And I have never felt that that is the case
Do typescript wizards like Polkock and me just going to suddenly put myself on the same level as Matt Polkock, even though I am not doing like compete with each other. Like is there competition? And I have never felt that that is the case Like maybe technically we do and that like one could choose amongst our different offerings to learn typescripts. But like it's not a competitive area. We're very friendly and supportive of each other. Okay. Okay. And I was actually asked you if you could help new analogy
Like maybe technically we do and that like one could choose amongst our different offerings to learn typescripts. But like it's not a competitive area. We're very friendly and supportive of each other. Okay. Okay. And I was actually asked you if you could help new analogy The analogy I thought it was like local like coffee shops or kombucha things or breweries and like a very hipster gentrified neighborhood like horizon Thai lifts up those. Have you thought of a better analogy than that to describe this loving area? I would
The analogy I thought it was like local like coffee shops or kombucha things or breweries and like a very hipster gentrified neighborhood like horizon Thai lifts up those. Have you thought of a better analogy than that to describe this loving area? I would I think this came to mind because of your code examples of authors. Authors like for normally don't compete in having the better thing. Because they normally don't write the same stuff where it would be copyrighting where they may compete in
I think this came to mind because of your code examples of authors. Authors like for normally don't compete in having the better thing. Because they normally don't write the same stuff where it would be copyrighting where they may compete in I must be the best version of myself because then I'll get more sales in my book. Like it needs to be like I need to level up but it doesn't mean that I'm tearing anybody else down. Yeah, exactly agree. Like I have so many types of books on myself. I got this one from 7 barbed go to 50 lessons
I must be the best version of myself because then I'll get more sales in my book. Like it needs to be like I need to level up but it doesn't mean that I'm tearing anybody else down. Yeah, exactly agree. Like I have so many types of books on myself. I got this one from 7 barbed go to 50 lessons I got programming typescript. And then I can't support which I I reference I'd recommend in mind like it arising title itself. It's like we love each other. It's great. We're too small of an area to have in fighting. I think. Yeah. Yeah. Well, okay
I got programming typescript. And then I can't support which I I reference I'd recommend in mind like it arising title itself. It's like we love each other. It's great. We're too small of an area to have in fighting. I think. Yeah. Yeah. Well, okay Yeah. Well, okay. I'm glad we got you know whatever the drama was out. Not so he's fun. And so discriminated union. Is type objects and JavaScript and typescript is you have a property on the object and decayed what shape the object is. Oh, I don't think we've talked at least. Okay, you might have
Yeah. Well, okay. I'm glad we got you know whatever the drama was out. Not so he's fun. And so discriminated union. Is type objects and JavaScript and typescript is you have a property on the object and decayed what shape the object is. Oh, I don't think we've talked at least. Okay, you might have I do need to clarify this. You might. I don't remember going over what a shape is. Sure. Shape it is. I don't remember this. You might have gone over it. It doesn't mean that it's tough. I did go over briefly but not deeply
I do need to clarify this. You might. I don't remember going over what a shape is. Sure. Shape it is. I don't remember this. You might have gone over it. It doesn't mean that it's tough. I did go over briefly but not deeply If you search for the word shape, it should only come up with a few matches and the first like the first or third of something. Like one of the first few will be the description of like what is a type. It's an object shape. I don't know how to do that yet. I know I can. I just don't know
If you search for the word shape, it should only come up with a few matches and the first like the first or third of something. Like one of the first few will be the description of like what is a type. It's an object shape. I don't know how to do that yet. I know I can. I just don't know I just don't know. I'm going to. My default. Yes. Okay. And I was looking for shape. Yes. What an interesting search interface. I just use like the normal PDF you were like the default one. Yeah, it searches all of it. Can you not just search in it? It searches all of them
I just don't know. I'm going to. My default. Yes. Okay. And I was looking for shape. Yes. What an interesting search interface. I just use like the normal PDF you were like the default one. Yeah, it searches all of it. Can you not just search in it? It searches all of them But it only found shape in the one I have highlighted. What is. I don't know if that's accurate. I remember. Okay. It's. Oh, it's a section in chapter two. The type system page 24 type shapes. I wonder why it only took that one. That's good to know. It's searching all pages right here
But it only found shape in the one I have highlighted. What is. I don't know if that's accurate. I remember. Okay. It's. Oh, it's a section in chapter two. The type system page 24 type shapes. I wonder why it only took that one. That's good to know. It's searching all pages right here Oh, it says 44 results. I don't know why it. You saw the other page that only one. This is 44. I'm guessing it meant only one book or PDF. Okay. Maybe. Okay. That does make more sense. Okay. So you said that it was. I don't think I can zoom in on these. That's annoying. Chapter two. Yeah
Oh, it says 44 results. I don't know why it. You saw the other page that only one. This is 44. I'm guessing it meant only one book or PDF. Okay. Maybe. Okay. That does make more sense. Okay. So you said that it was. I don't think I can zoom in on these. That's annoying. Chapter two. Yeah Chapter two. Yeah. Type shapes. It's the section. If you go to the table of contents, actually, it should be a clickable links in the PDF. I'm feeling. Yeah. That's fantastic. Okay. That means I need to. Oh, it is right. Let's look more. I'm going to use these and type system type
Chapter two. Yeah. Type shapes. It's the section. If you go to the table of contents, actually, it should be a clickable links in the PDF. I'm feeling. Yeah. That's fantastic. Okay. That means I need to. Oh, it is right. Let's look more. I'm going to use these and type system type Also, if you open a PDF in Chrome on the left side, there's there's there's like the mini menu. And then you can also view. Actually, wait. Yeah. On your right side, there are those three symbols of all words, as all pages underneath the plus top rights. You're in the left of the three
Also, if you open a PDF in Chrome on the left side, there's there's there's like the mini menu. And then you can also view. Actually, wait. Yeah. On your right side, there are those three symbols of all words, as all pages underneath the plus top rights. You're in the left of the three What happens if you go to the middle of them? What do you mean? So, in the top right of your application, there's that like bookmarky thing on top of it. Is that bookmarks? Oh, man. Because in Chrome, there's a view that like shows you the table of contents like from the headings
What happens if you go to the middle of them? What do you mean? So, in the top right of your application, there's that like bookmarky thing on top of it. Is that bookmarks? Oh, man. Because in Chrome, there's a view that like shows you the table of contents like from the headings And you can like expands into sub chapters and stuff. No, but you just gave me the idea that I do want to do this to the table of content. But your table of content is not clickable. Well, it seems like a you problem. I'm clicking it just fine
And you can like expands into sub chapters and stuff. No, but you just gave me the idea that I do want to do this to the table of content. But your table of content is not clickable. Well, it seems like a you problem. I'm clicking it just fine Like you do have other ones that are sickable and trying to like not even like these ones, but you see. Well, anyway, I don't know all this to describe that when we would I say object shape, what I mean is the stuff that is known to exist on a type or value
Like you do have other ones that are sickable and trying to like not even like these ones, but you see. Well, anyway, I don't know all this to describe that when we would I say object shape, what I mean is the stuff that is known to exist on a type or value So like, the screen is known to have length to uppercase to lowercase and so on. Let's chapter one. Let's scroll to chapter two. Okay. Say one more time what you thought it meant because I was high. Yeah, I spoke it in an opportunity moment. I was not listening the best I could have
So like, the screen is known to have length to uppercase to lowercase and so on. Let's chapter one. Let's scroll to chapter two. Okay. Say one more time what you thought it meant because I was high. Yeah, I spoke it in an opportunity moment. I was not listening the best I could have What we say object shape. What we mean is the list of stuff that is known to exist on an object or on a value rather. For example, strings are known to have a bunch of stuff like length to uppercase to lowercase, slice, and so on. Well, look, I found it
What we say object shape. What we mean is the list of stuff that is known to exist on an object or on a value rather. For example, strings are known to have a bunch of stuff like length to uppercase to lowercase, slice, and so on. Well, look, I found it So a type is a description of what a shape, okay. Yay. The reason why I don't just say object shapes is because the concept of a type shape also applies to primitives. Like the strings having length and so on. Okay
So a type is a description of what a shape, okay. Yay. The reason why I don't just say object shapes is because the concept of a type shape also applies to primitives. Like the strings having length and so on. Okay Okay. Which properties and methods exist on a value and what is built in the type of operator would be described as, okay. Well, back to chapter four
Okay. Which properties and methods exist on a value and what is built in the type of operator would be described as, okay. Well, back to chapter four And so that means that when we're talking about discrimination, that it's Can I propose it rather than have you be through the long because it is kind of her goes text. Can I share a screen of mine and go through the play. Yes. Yes. 100%. I think that's like an average out one system
And so that means that when we're talking about discrimination, that it's Can I propose it rather than have you be through the long because it is kind of her goes text. Can I share a screen of mine and go through the play. Yes. Yes. 100%. I think that's like an average out one system I think it's from the last two streams. Including this. I like when you do this because it's like, it can make sense, but then I still struggle with it. So this gives it more of a way of understanding it without
I think it's from the last two streams. Including this. I like when you do this because it's like, it can make sense, but then I still struggle with it. So this gives it more of a way of understanding it without I guess also being put on the spot because I'm like, uh, you want me to type this to you. That's scary. I'm going to be wet because it really is like very difficult to type it like or write and learn. So we have type fruit equals name, string
I guess also being put on the spot because I'm like, uh, you want me to type this to you. That's scary. I'm going to be wet because it really is like very difficult to type it like or write and learn. So we have type fruit equals name, string And then maybe some parts of it's a juicy or can be measured in terms of the juiciness. And maybe some of them are can be measured in terms of rounds. Yes. So let's say we have like let fruit fruit equals 50% chance of being apple. Or banana. You know, I don't like apple banana and juicy
And then maybe some parts of it's a juicy or can be measured in terms of the juiciness. And maybe some of them are can be measured in terms of rounds. Yes. So let's say we have like let fruit fruit equals 50% chance of being apple. Or banana. You know, I don't like apple banana and juicy Let's call it. Let's call it. Around. Or what's it? What are some properties that I need one that only applies to apples and one that only applies to bananas? Radie yellow. Color. Interesting. You're making a little more difficult for yourself. I love this. Let's do it. Color. Yeah. So excited
Let's call it. Let's call it. Around. Or what's it? What are some properties that I need one that only applies to apples and one that only applies to bananas? Radie yellow. Color. Interesting. You're making a little more difficult for yourself. I love this. Let's do it. Color. Yeah. So excited Yeah. So excited. All right. So let's say the apple color is another random. Now let's do fruit. If I'm going to separate out just to make a little more real. So in this case, it's an apple. Fruit equals color math. That's the answer. That's the answer. I'm going to put it in the name of the apple
Yeah. So excited. All right. So let's say the apple color is another random. Now let's do fruit. If I'm going to separate out just to make a little more real. So in this case, it's an apple. Fruit equals color math. That's the answer. That's the answer. I'm going to put it in the name of the apple Yeah. And then. Rad of the five red or yellow. Then. Name. Apple. Otherwise. In this case, it's a banana. Else fruit equals name banana. And because we told touch your previously that it's a fruit. Touch your teeth. Y'all get us. Because. We don't have color. Yeah. So that's cool. We
Yeah. And then. Rad of the five red or yellow. Then. Name. Apple. Otherwise. In this case, it's a banana. Else fruit equals name banana. And because we told touch your previously that it's a fruit. Touch your teeth. Y'all get us. Because. We don't have color. Yeah. So that's cool. We So that's cool. We. However, could get a little more specific in our types. What if we wanted to say that it's either an apple or. Banana. Oh. This is not yet discriminated union. Sorry, discriminated types. This is just normal. And in fact, what if
So that's cool. We. However, could get a little more specific in our types. What if we wanted to say that it's either an apple or. Banana. Oh. This is not yet discriminated union. Sorry, discriminated types. This is just normal. And in fact, what if You know what I'm going to make it a little easier. What if curved. Is. And then. And then. And then. No, what? I'm going to make it a little easier. What if curved. Is an applicable property. Only four bananas. Because apples don't care about whether they're. Curved. Banana
You know what I'm going to make it a little easier. What if curved. Is. And then. And then. And then. No, what? I'm going to make it a little easier. What if curved. Is an applicable property. Only four bananas. Because apples don't care about whether they're. Curved. Banana Curved. Banana. Let's say there's like a 50 50 chance it's a banana. That's curved. The chance it's not curved. So now we have this weird object type where it describes a fruit that either an apple. Banana. And it has a property that only cares. If it's a banana
Curved. Banana. Let's say there's like a 50 50 chance it's a banana. That's curved. The chance it's not curved. So now we have this weird object type where it describes a fruit that either an apple. Banana. And it has a property that only cares. If it's a banana If it's a banana. Like in theory, someone could put in like curved. True. For an apple and that makes no sense. Right. There's a fact that this makes no sense, but it's a lot of types groups. Makes sense to you. Yeah. Cool. So what I actually want to do is have my own types
If it's a banana. Like in theory, someone could put in like curved. True. For an apple and that makes no sense. Right. There's a fact that this makes no sense, but it's a lot of types groups. Makes sense to you. Yeah. Cool. So what I actually want to do is have my own types Apple color string name. Apple. And I want to. Banana. Name. Banana. Birds. And then you know what? For now, let's just. Let's just say color string. But later on, we can do some funny stuff because bananas only ever going to be yellow. I guess yellow. Anyway
Apple color string name. Apple. And I want to. Banana. Name. Banana. Birds. And then you know what? For now, let's just. Let's just say color string. But later on, we can do some funny stuff because bananas only ever going to be yellow. I guess yellow. Anyway Anyway. Here, instead of having a girl on separate fruit type, we would say let type fruit equals. Instead of having a fruit object type, we'll say fruit is apple or banana. Because the fruit is either. Apple or banana. So if the name on the fruit is apple, then we know that curved makes no sense
Anyway. Here, instead of having a girl on separate fruit type, we would say let type fruit equals. Instead of having a fruit object type, we'll say fruit is apple or banana. Because the fruit is either. Apple or banana. So if the name on the fruit is apple, then we know that curved makes no sense Because. Curved doesn't exist on the apple type. Mm hmm. I'm going to put the errors here so you can see the squiggly is complaints at the same time as the code. Come on. See these. Okay. So this name property is what's called a discriminant. If name is apple, then type script is able to deduce
Because. Curved doesn't exist on the apple type. Mm hmm. I'm going to put the errors here so you can see the squiggly is complaints at the same time as the code. Come on. See these. Okay. So this name property is what's called a discriminant. If name is apple, then type script is able to deduce Oh, it must be the apple type. Otherwise, if name is banana, type fruit is able to deduce that. So it's either banana type. Does that make sense? Yes. I'm also looking at this then. Okay. So with discriminated unions, then
Oh, it must be the apple type. Otherwise, if name is banana, type fruit is able to deduce that. So it's either banana type. Does that make sense? Yes. I'm also looking at this then. Okay. So with discriminated unions, then Is it easier to describe with the if else or is it only if else's? And if else is just the easiest way to describe narrowing. I'm just using it as a toy example to force narrowing to happen. But like this, this example we have here doesn't actually need a niff else
Is it easier to describe with the if else or is it only if else's? And if else is just the easiest way to describe narrowing. I'm just using it as a toy example to force narrowing to happen. But like this, this example we have here doesn't actually need a niff else Like I could just come that all out and then say fruit equals this. And it's just, oh, I see you have name apples. So curves true. No, don't do that. Okay. I'm looking at this example to see if I can. It makes sense. I'm just like trying to think of how to write it down for future making sense
Like I could just come that all out and then say fruit equals this. And it's just, oh, I see you have name apples. So curves true. No, don't do that. Okay. I'm looking at this example to see if I can. It makes sense. I'm just like trying to think of how to write it down for future making sense But it's okay. You know, worst case, I'll have to come back to it. This is a two-parter. And I'm waiting to do the second part until I get confirmation from you. Okay. Okay. I'm ready. Awesome. So let's say that we are doing the randomization logic. And we don't mess it up
But it's okay. You know, worst case, I'll have to come back to it. This is a two-parter. And I'm waiting to do the second part until I get confirmation from you. Okay. Okay. I'm ready. Awesome. So let's say that we are doing the randomization logic. And we don't mess it up We don't put curved true. So I wish I could show both of this. I'm going to, I want to do is I'm going to have two tabs open. With the types of playgrounds. Here we go. And on the left, you'll see the type definition. It's the same code area
We don't put curved true. So I wish I could show both of this. I'm going to, I want to do is I'm going to have two tabs open. With the types of playgrounds. Here we go. And on the left, you'll see the type definition. It's the same code area And on the right, you'll see stuff after declaring the fruit. So just know that like. This is the same code. Yeah. Using the fruit. A discriminated union. Value that is a. I. What up? So here we can, we can take if fruit dot. By the way, look at this fruit dot color and name
And on the right, you'll see stuff after declaring the fruit. So just know that like. This is the same code. Yeah. Using the fruit. A discriminated union. Value that is a. I. What up? So here we can, we can take if fruit dot. By the way, look at this fruit dot color and name Tech should know that doesn't necessarily have curved because it might not be a banana. It might be apple. And it knows that the name discriminates is only ever apple or banana. But it knows it's either apple or banana. It is the union type apple or banana
Tech should know that doesn't necessarily have curved because it might not be a banana. It might be apple. And it knows that the name discriminates is only ever apple or banana. But it knows it's either apple or banana. It is the union type apple or banana I don't know if you can physically see on the screen. So I'm going to do. You can do. It's like a little indicator. So fruit. If fruit dot named equals Apple. Then fruit dot. Well, fruit doesn't have. Occurred. But if you do fruit. Vanara, then fruit got. that curved does exist
I don't know if you can physically see on the screen. So I'm going to do. You can do. It's like a little indicator. So fruit. If fruit dot named equals Apple. Then fruit dot. Well, fruit doesn't have. Occurred. But if you do fruit. Vanara, then fruit got. that curved does exist The curved property can only exist if the name is banana. We have narrowed our objects type using its discriminant property. Because we said it was banana, therefore it can have an additional property. Yes
The curved property can only exist if the name is banana. We have narrowed our objects type using its discriminant property. Because we said it was banana, therefore it can have an additional property. Yes Yes. And just to show like what if we could add like crispy boolean to apple and then in the else statement here, what say we do like fruit, not crispy. And I have to add it in this code because it doesn't seem to be because it's not what I'm going to go. What up fire 60? Hello, hello
Yes. And just to show like what if we could add like crispy boolean to apple and then in the else statement here, what say we do like fruit, not crispy. And I have to add it in this code because it doesn't seem to be because it's not what I'm going to go. What up fire 60? Hello, hello Fire fix was one of the humans helping me on my docker situation earlier this week. Does what I'm going to call it docker situation less. We're working on type script. I am learning Joshua to book called learning type scripts and has been coming on every other week
Fire fix was one of the humans helping me on my docker situation earlier this week. Does what I'm going to call it docker situation less. We're working on type script. I am learning Joshua to book called learning type scripts and has been coming on every other week And we go through a chapter which Josh is also very patient because he knows that I don't know that much about JavaScript, which I feel like I know I'm learning a lot more. I just don't always put the words with what we're actually talking about of like, oh yeah, I do know that
And we go through a chapter which Josh is also very patient because he knows that I don't know that much about JavaScript, which I feel like I know I'm learning a lot more. I just don't always put the words with what we're actually talking about of like, oh yeah, I do know that Oh, that's the word that goes with it. So And we're talking about discriminated unions, which is like separating out like, hey, this thing may not go with this thing. You have the look of someone who's still processing. And this is a topic that tends to take a little while to process
Oh, that's the word that goes with it. So And we're talking about discriminated unions, which is like separating out like, hey, this thing may not go with this thing. You have the look of someone who's still processing. And this is a topic that tends to take a little while to process So my proposal is I will copy and paste the playground URL that I'm using in the chat. Chris, be true. Because this shares the code. Let me just, yeah, I'll paste it in the chat. And if any of y'all want to talk to around with it. You can, but it's totally reasonable
So my proposal is I will copy and paste the playground URL that I'm using in the chat. Chris, be true. Because this shares the code. Let me just, yeah, I'll paste it in the chat. And if any of y'all want to talk to around with it. You can, but it's totally reasonable And I think a lot of people myself included like to just need to sleep on this on the discriminated union stuff. Yeah. And the links too long so I can't share it. Oh, well, try. Can you tweet it to me? And then I can just like, well, I don't know. I'll look at a later
And I think a lot of people myself included like to just need to sleep on this on the discriminated union stuff. Yeah. And the links too long so I can't share it. Oh, well, try. Can you tweet it to me? And then I can just like, well, I don't know. I'll look at a later I'm going to go to my screen really quick since we're looking at the notes. Because I think the part like what you're saying makes sense. And I don't know why I only did that
I'm going to go to my screen really quick since we're looking at the notes. Because I think the part like what you're saying makes sense. And I don't know why I only did that What I'm struggling with working on putting into my own words is basically if I'm going with this poem with pages is it knows that there needs to be the type pages. And this one knows that it needs to have the type rhymes. So if it doesn't have that in there
What I'm struggling with working on putting into my own words is basically if I'm going with this poem with pages is it knows that there needs to be the type pages. And this one knows that it needs to have the type rhymes. So if it doesn't have that in there It won't know that it's poem with pages or poem with rhymes. Unless we added in later on. Yeah, all it knows is in the circled area is that anything that's a poem is one of those two types. So it's going to have a name. It might have a pages for rhymes
It won't know that it's poem with pages or poem with rhymes. Unless we added in later on. Yeah, all it knows is in the circled area is that anything that's a poem is one of those two types. So it's going to have a name. It might have a pages for rhymes And it has a type that's either pages or rhymes. And if pages, sorry, if the type is pages, then it has pages. If the type is rhymes, then it has rhymes. You know what? Something that I don't think I realize it may be something in the code that is used often, but it's throwing me off are these
And it has a type that's either pages or rhymes. And if pages, sorry, if the type is pages, then it has pages. If the type is rhymes, then it has rhymes. You know what? Something that I don't think I realize it may be something in the code that is used often, but it's throwing me off are these Because in my mind, it would have been something like a comma and then the next one or like a. It could have been like an or type of thing, but we have the colon and the question mark, which just means
Because in my mind, it would have been something like a comma and then the next one or like a. It could have been like an or type of thing, but we have the colon and the question mark, which just means Does that mean the question mark means this one isn't included or it's a possibility of both either. See, this is a very core fundamental thing that would be good for me to have gone over. This is a turnary. And whenever I do a map
Does that mean the question mark means this one isn't included or it's a possibility of both either. See, this is a very core fundamental thing that would be good for me to have gone over. This is a turnary. And whenever I do a maprandom in code in the snippets of code, that's I'm just using it to say that it's a some random chance of using one or the other doesn't matter. And this is a turnary saying it's a 50% chance of the first thing the one after the question mark and a 50% chance of the second thing after the colon
random in code in the snippets of code, that's I'm just using it to say that it's a some random chance of using one or the other doesn't matter. And this is a turnary saying it's a 50% chance of the first thing the one after the question mark and a 50% chance of the second thing after the colon That's all. I don't know what color to put this in. And what did you say that's called against? Turnary. Open in the chat. And I'm finally more conditional operator. So it's three things. It's the only operator from that job is that that has three parts instead of two. It's some condition
That's all. I don't know what color to put this in. And what did you say that's called against? Turnary. Open in the chat. And I'm finally more conditional operator. So it's three things. It's the only operator from that job is that that has three parts instead of two. It's some condition The thing to do with its true. The thing to do with its false. Okay. That helps. I think that was also a thing that I was getting stuck on of just like, okay, cool. But the rest of it makes sense. Now, if I were to go type it myself, this is something I do feel like I'd still be struggling with
The thing to do with its true. The thing to do with its false. Okay. That helps. I think that was also a thing that I was getting stuck on of just like, okay, cool. But the rest of it makes sense. Now, if I were to go type it myself, this is something I do feel like I'd still be struggling with But for the most part, it really does. Incoming, it makes sense. Cool. So what about that intersection types? I would think just based on context means that it could have that type in both of them. So I can say again. So if I go back up here, like it could have pages and rhymes in both
But for the most part, it really does. Incoming, it makes sense. Cool. So what about that intersection types? I would think just based on context means that it could have that type in both of them. So I can say again. So if I go back up here, like it could have pages and rhymes in both We don't know which one it would be. That's context. Not what it actually is. Okay. And now you're looking at intersection types which have combinations of things. Okay. Okay. This week's that's. I'm going to put it in here. Yeah. Type in and something weird. There we go. And
We don't know which one it would be. That's context. Not what it actually is. Okay. And now you're looking at intersection types which have combinations of things. Okay. Okay. This week's that's. I'm going to put it in here. Yeah. Type in and something weird. There we go. And There we go. And. Danger of intersection types. Anything you want to go through here, that's super important that we should know. Yeah. Type skip to super powerful. You can do a lot of stuff in the type system. Probably don't
There we go. And. Danger of intersection types. Anything you want to go through here, that's super important that we should know. Yeah. Type skip to super powerful. You can do a lot of stuff in the type system. Probably don't Probably don't. To debug things when they're very complicated in general, not specific to TypeScript. And a lot of people end up getting all. Hyper about what they can do in TypeScript and overcomplicating things. So try to keep your type simple
Probably don't. To debug things when they're very complicated in general, not specific to TypeScript. And a lot of people end up getting all. Hyper about what they can do in TypeScript and overcomplicating things. So try to keep your type simple Just as you would in any area of code, try to keep things simple so that it's easier for you to read, understand, and modify over time. Yeah. And then keep it simple, stupid, K. I. S. Okay. And then. Oh, intersection types are easy to misuse. I can see that. Okay
Just as you would in any area of code, try to keep things simple so that it's easier for you to read, understand, and modify over time. Yeah. And then keep it simple, stupid, K. I. S. Okay. And then. Oh, intersection types are easy to misuse. I can see that. Okay Okay. By the way, I'm just going to clap myself on the back here because we're at the end. We're actually an important type in TypeScript. But it's not important until you get to like the more fancy stuff. And I wanted to introduce never
Okay. By the way, I'm just going to clap myself on the back here because we're at the end. We're actually an important type in TypeScript. But it's not important until you get to like the more fancy stuff. And I wanted to introduce never But I didn't want to wait until like the very end to introduce it because there was no like one good place to put it. So putting it here, actually like really saved my button in the layout of the book. The like structure and ordering of things. Okay
But I didn't want to wait until like the very end to introduce it because there was no like one good place to put it. So putting it here, actually like really saved my button in the layout of the book. The like structure and ordering of things. Okay Okay. I just remember being really pleased about realizing it's perfect, it's natural. But you know how on some stuff. Like oh my god, that's how it has to be. Yeah. We'll just put yay. Yay
Okay. I just remember being really pleased about realizing it's perfect, it's natural. But you know how on some stuff. Like oh my god, that's how it has to be. Yeah. We'll just put yay. Yay Yay. And I just, I don't know if y'all can see this, but whenever I plug in my tablet, it still shows the wrong time at the very top. So I was thinking at the top of our corner that it's just been like chillin' there and no
Yay. And I just, I don't know if y'all can see this, but whenever I plug in my tablet, it still shows the wrong time at the very top. So I was thinking at the top of our corner that it's just been like chillin' there and no A lot of time is fast and I have the webinar I wanted to go to you in like seven minutes. So I'm glad your paying attention to time. Because I was like, how is the time not moved? Well, we're going to the container store at three o'clock. So you bet your butt on outta here by then
A lot of time is fast and I have the webinar I wanted to go to you in like seven minutes. So I'm glad your paying attention to time. Because I was like, how is the time not moved? Well, we're going to the container store at three o'clock. So you bet your butt on outta here by then Love the container store. And what up, Susie? Yeah. Okay. We have gone through a lot. And it's always like we've hit our flow. We've got like we finally like figured it out took us a few, a few times, but yeah, we got it all done. And we started a little late. I had to eat food y'all
Love the container store. And what up, Susie? Yeah. Okay. We have gone through a lot. And it's always like we've hit our flow. We've got like we finally like figured it out took us a few, a few times, but yeah, we got it all done. And we started a little late. I had to eat food y'all I was starving. Is it British summertime yet? Is that really? Looking it up. Other time zone. During the British summertime, civil in the UK is advanced one hour forward of GMT. I thought it was standard time, not summertime, but summertime makes me way more sense. I like something
I was starving. Is it British summertime yet? Is that really? Looking it up. Other time zone. During the British summertime, civil in the UK is advanced one hour forward of GMT. I thought it was standard time, not summertime, but summertime makes me way more sense. I like something I like something. I was like, it was BTS. Oh. I'm glad you saw the one with Dan. I first saw it on Twitter. And then I realized it was yesterday, not next Thursday. No. We're going to do another one. And the next one we might actually do the types of compiler stuff that we were advertising
I like something. I was like, it was BTS. Oh. I'm glad you saw the one with Dan. I first saw it on Twitter. And then I realized it was yesterday, not next Thursday. No. We're going to do another one. And the next one we might actually do the types of compiler stuff that we were advertising We would do. But thank you. That was a fun stream. Yay. I adore Dan. He's so fun. He's so funny. Yeah. I told him I was like, I wouldn't be on the stream. He's like, what do you want to talk about? I don't know. I just want to be on your stream. Yep. Yeah. That was my. Well, thank you again, Josh
We would do. But thank you. That was a fun stream. Yay. I adore Dan. He's so fun. He's so funny. Yeah. I told him I was like, I wouldn't be on the stream. He's like, what do you want to talk about? I don't know. I just want to be on your stream. Yep. Yeah. That was my. Well, thank you again, Josh And thank you everyone for joining us. We will be back in two weeks on chapter. Oh, my gosh. We're going in new section. We're going part two. Yeah. You do establish the foundations. You're good to go. You could leave and be totally fine. No, we should probably go through functions
And thank you everyone for joining us. We will be back in two weeks on chapter. Oh, my gosh. We're going in new section. We're going part two. Yeah. You do establish the foundations. You're good to go. You could leave and be totally fine. No, we should probably go through functions Not going to lie. Function is a good. Function is going to be a good point. I'm going to focus on my work. Because learning functions in Python was kind of a struggle. So. Like, they make more sense. But. I'll take it. I'll take it. And. Yes. So. Well, thank you everyone. And see you later. Bye.
Not going to lie. Function is a good. Function is going to be a good point. I'm going to focus on my work. Because learning functions in Python was kind of a struggle. So. Like, they make more sense. But. I'll take it. I'll take it. And. Yes. So. Well, thank you everyone. And see you later. Bye.