There are now it and then it didn't arid out. Yay, welcome to Teach Yen Tech, where we break down tech barriers to make it accessible and have super duper cool guests on, like Josh who wrote a book called Learning's TypeScript and does cool things and we have a fun series about learning TypeScript This is chapter seven. I'm actually, I like that we haven't streamed for like two months and I'm like, you know, we're slowly, this might take us like two years to get through the book. Yeah, I mean, we're getting through it, honestly. It's happened. We are, we are and I love it
This is chapter seven. I'm actually, I like that we haven't streamed for like two months and I'm like, you know, we're slowly, this might take us like two years to get through the book. Yeah, I mean, we're getting through it, honestly. It's happened. We are, we are and I love it It's a, but hello everyone. My name is Jen, a host of Teach Yen Tech and this is Josh, as I said, the author of Learning TypeScript, but you also do a lot of other things. And what have you been up to? I haven't asked you conferences or what you've been doing lately. Yeah, it's been a little while
It's a, but hello everyone. My name is Jen, a host of Teach Yen Tech and this is Josh, as I said, the author of Learning TypeScript, but you also do a lot of other things. And what have you been up to? I haven't asked you conferences or what you've been doing lately. Yeah, it's been a little while I've been a little calmer in the last few months. I think my most recent conference was Seattle JS conference was fantastic and wonderful. I'm actually going to a wedding in France, leaving tomorrow over the weekend. We're excited about that. Yay. Shout out, not in running
I've been a little calmer in the last few months. I think my most recent conference was Seattle JS conference was fantastic and wonderful. I'm actually going to a wedding in France, leaving tomorrow over the weekend. We're excited about that. Yay. Shout out, not in running But yeah, no, I got a busy year. I think you and I are sharing the conference pretty soon. T.S. Congress coming up late this month, right? I'm actually at a conference. Well, I'm at that conference because for those who don't know, T.S
But yeah, no, I got a busy year. I think you and I are sharing the conference pretty soon. T.S. Congress coming up late this month, right? I'm actually at a conference. Well, I'm at that conference because for those who don't know, T.SS. Congress, TypeScript Congress is a virtual conference and you should join. It's going to be fun. We're talking and so is Daniel Row, which I like hard-working and growled. I was like, I'm actually talking at a conference that he's, what? That was a mind-blowing
S. Congress, TypeScript Congress is a virtual conference and you should join. It's going to be fun. We're talking and so is Daniel Row, which I like hard-working and growled. I was like, I'm actually talking at a conference that he's, what? That was a mind-blowing And yes, it's also weird to think that I'm actually going to be at a conference that you're talking at too. I'm not talking at the conference. I'm just hosting like a Q and A or two. Yeah, but still, you're here
And yes, it's also weird to think that I'm actually going to be at a conference that you're talking at too. I'm not talking at the conference. I'm just hosting like a Q and A or two. Yeah, but still, you're here And really quick, before I forget Nate, I've been meaning to reach out to you because you need to come on the show. And my spaciness has not reached out. So while I see your name, I need to tell you that. So thank you for the pause. Anthony just got married. Can't grab saturday
And really quick, before I forget Nate, I've been meaning to reach out to you because you need to come on the show. And my spaciness has not reached out. So while I see your name, I need to tell you that. So thank you for the pause. Anthony just got married. Can't grab saturday Woo, I'm really excited. I wish I could have made the wedding. Oh, it looked so beautiful. I saw photos and I'm just so excited. I love his new wife. Well, his fiance, I look now into wife. How would it? Is that? Anyway, she's amazing. I'm getting angry for that. I think like you're saying. Yes
Woo, I'm really excited. I wish I could have made the wedding. Oh, it looked so beautiful. I saw photos and I'm just so excited. I love his new wife. Well, his fiance, I look now into wife. How would it? Is that? Anyway, she's amazing. I'm getting angry for that. I think like you're saying. Yes Yes. And anything else you've been up to? I've actually been working on a fun project called Create TypeScript app, formerly a template typeScript node package. And see why we need to create TypeScript app. It's like a good getting started thing for TypeScript VPOs
Yes. And anything else you've been up to? I've actually been working on a fun project called Create TypeScript app, formerly a template typeScript node package. And see why we need to create TypeScript app. It's like a good getting started thing for TypeScript VPOs It sets up all the linting and building and testing and coverage, month and truth is everything that you possibly want in a generic TypeScript VPO. And that's, I'm taking, I learned to term yesterday, prep timber. So like, Oh, yeah, hack topper this. Yes
It sets up all the linting and building and testing and coverage, month and truth is everything that you possibly want in a generic TypeScript VPO. And that's, I'm taking, I learned to term yesterday, prep timber. So like, Oh, yeah, hack topper this. Yes Yes. Yes, I need to talk to reach out to Brian, see if he wants to be on the show for September. Yeah. For. Yeah. Yeah. Um, software. Yeah. Yeah, rolling out Create TypeScript app for all my VPOs
Yes. Yes, I need to talk to reach out to Brian, see if he wants to be on the show for September. Yeah. For. Yeah. Yeah. Um, software. Yeah. Yeah, rolling out Create TypeScript app for all my VPOs And it's got like a bunch of like repo automations and documentation and stuff to make you do to contribute to some great excited. Yay. And what up, Roy. Yes. Um, Roy, I think he'll be very excited about this news as well
And it's got like a bunch of like repo automations and documentation and stuff to make you do to contribute to some great excited. Yay. And what up, Roy. Yes. Um, Roy, I think he'll be very excited about this news as well Um, since, since something for everyone that doesn't know, I am part of the OSRG. Raid Guild open source Raid Guild. Yeah, there we go. Um, it's where I currently hang out and it's super fun. And all my friends there are all huge TypeScript fanatics
Um, since, since something for everyone that doesn't know, I am part of the OSRG. Raid Guild open source Raid Guild. Yeah, there we go. Um, it's where I currently hang out and it's super fun. And all my friends there are all huge TypeScript fanatics And also are like, Jen, you do a lot of the theory stuff. You don't actually code enough. I'm like, huh, huh, huh, huh, okay. So Roy has been helping me learn how to get unstuck on certain things and building what I want when I have the time to do it. And
And also are like, Jen, you do a lot of the theory stuff. You don't actually code enough. I'm like, huh, huh, huh, huh, okay. So Roy has been helping me learn how to get unstuck on certain things and building what I want when I have the time to do it. And And. I think he will be very excited to hear that. I am going to go through and do all of the chapter assignments. That from Josh's book as well to learn. Awesome. Because we haven't done the assignments, which again, because of time, but also like we should. And. Yes, Nate
And. I think he will be very excited to hear that. I am going to go through and do all of the chapter assignments. That from Josh's book as well to learn. Awesome. Because we haven't done the assignments, which again, because of time, but also like we should. And. Yes, Nate And. Yes, Nate. Yeah, just thought about the first good first issues on it. So I have that. Yeah. Do you want to tell us a bit more about prep timber? So that way people are prepped and ready to go contribute. Yeah. I just learned the word like this week
And. Yes, Nate. Yeah, just thought about the first good first issues on it. So I have that. Yeah. Do you want to tell us a bit more about prep timber? So that way people are prepped and ready to go contribute. Yeah. I just learned the word like this week But in general, HACtoberfest is a yearly celebration of open source. Sponsored by some big companies in open source. I probably forget who's doing it. Did lotion, I think, was the thing maybe get up
But in general, HACtoberfest is a yearly celebration of open source. Sponsored by some big companies in open source. I probably forget who's doing it. Did lotion, I think, was the thing maybe get up Anyway, the idea is, if you get a certain number of merged pull requests, so code contributions, or sorry, not code. Contributions such as code or documentation to open source projects in the month of October. I think it's like five is threshold. You get a free shirt or yet to plan a treaty
Anyway, the idea is, if you get a certain number of merged pull requests, so code contributions, or sorry, not code. Contributions such as code or documentation to open source projects in the month of October. I think it's like five is threshold. You get a free shirt or yet to plan a treaty Is the new website up? Yeah, it's presented by digital ocean. ELA code. I look out. How do you? I don't know how to say that in app right. I feel like. I was that cloud next last week. And they're doing cool things with app right. I think it's like, I'm going to say that. I'm going to say that
Is the new website up? Yeah, it's presented by digital ocean. ELA code. I look out. How do you? I don't know how to say that in app right. I feel like. I was that cloud next last week. And they're doing cool things with app right. I think it's like, I'm going to say that. I'm going to say that It's a long time ago. I was thinking, I guess that's why I'm doing it. They're doing cool things with app right. With Google Cloud next, and they did some cool announcements. And also
It's a long time ago. I was thinking, I guess that's why I'm doing it. They're doing cool things with app right. With Google Cloud next, and they did some cool announcements. And also And also. We followed each other on Twitter that there's a new DevRal there that I should make friends with and see if they want to come talk about October fest. Cool. I'll talk to you. I was talking to all the people. The Tessa was really cool. Shout out. Oh, I don't know if. Like
And also. We followed each other on Twitter that there's a new DevRal there that I should make friends with and see if they want to come talk about October fest. Cool. I'll talk to you. I was talking to all the people. The Tessa was really cool. Shout out. Oh, I don't know if. Like Like. Test it, I got the name wrong. Anyway, yeah, that's really cool. Thanks for having me. I didn't even think to check. I was like, oh yeah, hack toberfest.com. It's September. They probably have it up. So yeah, it's really excited
Like. Test it, I got the name wrong. Anyway, yeah, that's really cool. Thanks for having me. I didn't even think to check. I was like, oh yeah, hack toberfest.com. It's September. They probably have it up. So yeah, it's really excited Anyone who's interested in getting into open source, whether you've never done it before or you've tried or never really contributed to anyone else's library, there are a lot of great tools that people talk about for finding what's called a good first issue. I think it's really exciting
Anyone who's interested in getting into open source, whether you've never done it before or you've tried or never really contributed to anyone else's library, there are a lot of great tools that people talk about for finding what's called a good first issue. I think it's really exciting I like the idea of prep-tember. This is kind of a new thing. When they first rolled out hack toberfest, it was just any repo anywhere. Go contribute. That was chaos because not everyone was ready to receive contributors
I like the idea of prep-tember. This is kind of a new thing. When they first rolled out hack toberfest, it was just any repo anywhere. Go contribute. That was chaos because not everyone was ready to receive contributors So now we're prepping maintainers such as myself to make sure that our depots are ready. We've got dev documentation. We've got getting started guides. We've got good first issues. All that good stuff. And one that I had to do was to get a new app. And one that I am very excited about
So now we're prepping maintainers such as myself to make sure that our depots are ready. We've got dev documentation. We've got getting started guides. We've got good first issues. All that good stuff. And one that I had to do was to get a new app. And one that I am very excited about And then I mentioned about BDuggy coming on the show. I think I'm also partial to it because Ben Meyers helped me figure out how to commit it. But I did my first PR with open sauce. So it has a special place in my heart. That's awesome. And yes
And then I mentioned about BDuggy coming on the show. I think I'm also partial to it because Ben Meyers helped me figure out how to commit it. But I did my first PR with open sauce. So it has a special place in my heart. That's awesome. And yes And yes. I got to make five PRs with the most my dear dogfixes ever. One thing that you make sure to mention that I'm mentioning want to remember is you want to get these done as soon as possible. Because there's a lot of shirts, but not as many shirts as we may want
And yes. I got to make five PRs with the most my dear dogfixes ever. One thing that you make sure to mention that I'm mentioning want to remember is you want to get these done as soon as possible. Because there's a lot of shirts, but not as many shirts as we may want I didn't get a shirt last year. But I did get the cool hologram thing on my GitHub. I didn't get a shirt last year. I didn't get a shirt last year. I've had too many dang shirts of these. Yeah, there are. I mean, for some people, the shirts, I just really wanted one last year for my first year
I didn't get a shirt last year. But I did get the cool hologram thing on my GitHub. I didn't get a shirt last year. I didn't get a shirt last year. I've had too many dang shirts of these. Yeah, there are. I mean, for some people, the shirts, I just really wanted one last year for my first year Now that is my second year. I'm like, that could, that could be cool. That could be cool. Let's see. Y'all, we're going to hopefully not share like too much of my screen today. Let's see it. Share. Share. Share. Hey. Uh, it is. This is my GitHub. And it does, you get your achievements
Now that is my second year. I'm like, that could, that could be cool. That could be cool. Let's see. Y'all, we're going to hopefully not share like too much of my screen today. Let's see it. Share. Share. Share. Hey. Uh, it is. This is my GitHub. And it does, you get your achievements I think there's a achievement here too. Oh, I'm a sponsor. Let's quick draw. That's cool. Thanks. Um, I'm like, I don't even know what all of these are. This is fun. But I was going for the app rate. Uh, this participant and these two. I think it's, it's from last year. Very exciting stuff
I think there's a achievement here too. Oh, I'm a sponsor. Let's quick draw. That's cool. Thanks. Um, I'm like, I don't even know what all of these are. This is fun. But I was going for the app rate. Uh, this participant and these two. I think it's, it's from last year. Very exciting stuff But I know that everybody joined to like hang out with us and hear what we're up to. And that is some of the fun. But we actually also have what we've been learning. And your book. So please tell us about what your book is. And what, what, what we've been going through on this. I feel like it's
But I know that everybody joined to like hang out with us and hear what we're up to. And that is some of the fun. But we actually also have what we've been learning. And your book. So please tell us about what your book is. And what, what, what we've been going through on this. I feel like it's I feel like it's. You're a good explanation. Explanar. I was going to say explanation. You're a good explanation. Explain the tour. Yes. Learning TypeScript. And Hansi, we have development skills in TypeScript. It's a book that I wrote published with a rabbit group with. Bye. Uh, it takes you from
I feel like it's. You're a good explanation. Explanar. I was going to say explanation. You're a good explanation. Explain the tour. Yes. Learning TypeScript. And Hansi, we have development skills in TypeScript. It's a book that I wrote published with a rabbit group with. Bye. Uh, it takes you from I just know JavaScript or in James case. I haven't coded in JavaScript before. Uh, to TypeScript. So what is TypeScript? Why do we like it? How does it. Stuff work like the type system
I just know JavaScript or in James case. I haven't coded in JavaScript before. Uh, to TypeScript. So what is TypeScript? Why do we like it? How does it. Stuff work like the type system What is a type system? How does that work? And then all the most common features that most developers are using in TypeScript. Like interfaces, arrays, couples, functions, type, or reunions. A lot of good stuff. Yes. And this was something that was fun on. That we started with is the fact that
What is a type system? How does that work? And then all the most common features that most developers are using in TypeScript. Like interfaces, arrays, couples, functions, type, or reunions. A lot of good stuff. Yes. And this was something that was fun on. That we started with is the fact that I just and I met when I didn't even. I'm still learning JavaScript. If you ask Roy, I still don't know that. The differences of all of them. It's like I can figure stuff out. I just don't always know their names, which is currently what I'm working through. And I promise Roy, I will reply on
I just and I met when I didn't even. I'm still learning JavaScript. If you ask Roy, I still don't know that. The differences of all of them. It's like I can figure stuff out. I just don't always know their names, which is currently what I'm working through. And I promise Roy, I will reply on It's supposed to be replying on. But. We are on chapter seven interfaces, which is kind of crazy that we've. Almost that we've made it this far, but then also that it's taken us this long to get here. Yeah. I'm actually right. I think we're at the
It's supposed to be replying on. But. We are on chapter seven interfaces, which is kind of crazy that we've. Almost that we've made it this far, but then also that it's taken us this long to get here. Yeah. I'm actually right. I think we're at the I think we're at the bell curve of information where like we are now hitting the point where like you could get to most types of co bases and be generally fine. Like to know major new things we're introducing. That's that's fair. And I see that a lot more in. So we have the book
I think we're at the bell curve of information where like we are now hitting the point where like you could get to most types of co bases and be generally fine. Like to know major new things we're introducing. That's that's fair. And I see that a lot more in. So we have the book I am sharing my iPad. Case anybody curious how I'm doing this. And this is big reason why when I was asking about like external monitors, a lot of people are like just use your iPad. I'm like, I can't use my iPad because I do things on my iPad when I stream. So, but I do believe. There's a pointer
I am sharing my iPad. Case anybody curious how I'm doing this. And this is big reason why when I was asking about like external monitors, a lot of people are like just use your iPad. I'm like, I can't use my iPad because I do things on my iPad when I stream. So, but I do believe. There's a pointer There's a pointer. Okay, that was fine. We let's do the great. So going through it, something we've done in the past is going to the summary, which I will get there. I did not go through all of get through the entire chapter this time because I personally am working on catching up with Josh
There's a pointer. Okay, that was fine. We let's do the great. So going through it, something we've done in the past is going to the summary, which I will get there. I did not go through all of get through the entire chapter this time because I personally am working on catching up with Josh And if you all didn't know, Josh does like conferences and live streams and creates cool new things. And it's always busy and somehow balanced. And I'm like. I did a conference last week and I had a 4 a.m. call yesterday and I'm just like, I'm. I will get there. I will I will get there
And if you all didn't know, Josh does like conferences and live streams and creates cool new things. And it's always busy and somehow balanced. And I'm like. I did a conference last week and I had a 4 a.m. call yesterday and I'm just like, I'm. I will get there. I will I will get there It's getting better. You got this. Yes, yes. Okay. So the summary. We talked about using interfaces instead of type aliases to declare object types. That one part mostly made sense. I like the references in them. Various interface property types, optional, read, only function and method
It's getting better. You got this. Yes, yes. Okay. So the summary. We talked about using interfaces instead of type aliases to declare object types. That one part mostly made sense. I like the references in them. Various interface property types, optional, read, only function and method Also mostly made sense, at least for me. And then where I didn't get as apparently the second half of the chapter, which is awesome. So using index signatures for catch all object properties, reusing interfaces and using nested interfaces extends inheritance. That's just a hard sentence to say
Also mostly made sense, at least for me. And then where I didn't get as apparently the second half of the chapter, which is awesome. So using index signatures for catch all object properties, reusing interfaces and using nested interfaces extends inheritance. That's just a hard sentence to say And how interfaces with some same name can bridge together. And hello. I was so excited. I got some of Parasetal stream yesterday. And I realized that. Parasetal, I feel like you kind of stream like Theo, you make your videos as you stream, which is smart. I use it as a talk show
And how interfaces with some same name can bridge together. And hello. I was so excited. I got some of Parasetal stream yesterday. And I realized that. Parasetal, I feel like you kind of stream like Theo, you make your videos as you stream, which is smart. I use it as a talk show I feel like where I'm like, I get to talk to everybody and it's hard to clip things. We'll get there. It is all learning. Outside of this
I feel like where I'm like, I get to talk to everybody and it's hard to clip things. We'll get there. It is all learning. Outside of this Outside of this. And I'm curious while I'm looking at the summary, what was the idea behind this chapter or why is this chapter so important in our building blocks? Yeah, a couple of reasons. One, the least important is that every programming language has its equivalent of tabs for spaces
Outside of this. And I'm curious while I'm looking at the summary, what was the idea behind this chapter or why is this chapter so important in our building blocks? Yeah, a couple of reasons. One, the least important is that every programming language has its equivalent of tabs for spaces And in typescripts, I think the biggest one is types versus interfaces using object type aliases versus interfaces. So now that you've read this chapter, you can engage in that discussion by screaming on Twitter about it. There are small differences. They don't really matter most of the time
And in typescripts, I think the biggest one is types versus interfaces using object type aliases versus interfaces. So now that you've read this chapter, you can engage in that discussion by screaming on Twitter about it. There are small differences. They don't really matter most of the time The real juice in this chapter, though, I think is that it introduces a lot of concepts around how to declare more rich object shapes, whether it's with type aliases or interfaces. Things like the second list item optional, we don't only function versus method properties
The real juice in this chapter, though, I think is that it introduces a lot of concepts around how to declare more rich object shapes, whether it's with type aliases or interfaces. Things like the second list item optional, we don't only function versus method properties So now you're not just writing code and then writing little shapes in the type system to describe it. You're getting more deeper to the type system. You're really getting used to describing rich stuff in there and thinking of the type system as a major part of your code
So now you're not just writing code and then writing little shapes in the type system to describe it. You're getting more deeper to the type system. You're really getting used to describing rich stuff in there and thinking of the type system as a major part of your code Does that sound right to you? Yeah, and it does make sense and something that we're going to scroll all the way back up to the chapter, beginning the chapter, maybe, maybe, keep going
Does that sound right to you? Yeah, and it does make sense and something that we're going to scroll all the way back up to the chapter, beginning the chapter, maybe, maybe, keep going Is something that I really liked about the beginning of this chapter is, let me have to find where I put it or where it is. I know that I highlighted it, but the fact that it makes it faster to read as well when you're using interfaces instead. And I was like, that was interesting to me because me
Is something that I really liked about the beginning of this chapter is, let me have to find where I put it or where it is. I know that I highlighted it, but the fact that it makes it faster to read as well when you're using interfaces instead. And I was like, that was interesting to me because me Ah, I did highlight it's these two points right here. It's speedier for the type script checker. And I was like, that's interesting to think about how fast it takes to go through all that and generate
Ah, I did highlight it's these two points right here. It's speedier for the type script checker. And I was like, that's interesting to think about how fast it takes to go through all that and generate Yeah, I will note that that's less of a concern this year than it was when I was writing the book. They're constantly doing perfect improvements in type script. So I can't remember the last time I had to switch from type to interface for perf performance
Yeah, I will note that that's less of a concern this year than it was when I was writing the book. They're constantly doing perfect improvements in type script. So I can't remember the last time I had to switch from type to interface for perf performance But that I know there are cases when that that still happens. I just don't remember what they are through edge. But yeah, it's really cool. And actually, there's a really good talk and we'll link in the chat from Alexandra, Sakura, on type to performance. That's interesting
But that I know there are cases when that that still happens. I just don't remember what they are through edge. But yeah, it's really cool. And actually, there's a really good talk and we'll link in the chat from Alexandra, Sakura, on type to performance. That's interesting That's interesting. And then floating around. See what was that. Oh, yeah, B E J. That's really good. I don't remember if that's what Alexandra was speaking on that type of conversation. But yay
That's interesting. And then floating around. See what was that. Oh, yeah, B E J. That's really good. I don't remember if that's what Alexandra was speaking on that type of conversation. But yay But yay. And I did like this example and I highlighted it because that's how my brain works is making sure that there's. Different colors to pop out. Of that you call out that the syntaxes are so similar. And like for this example of the type of aliases versus interfaces, it's the actual like the
But yay. And I did like this example and I highlighted it because that's how my brain works is making sure that there's. Different colors to pop out. Of that you call out that the syntaxes are so similar. And like for this example of the type of aliases versus interfaces, it's the actual like the Semicoin. Wow. Took a second to figure out. I'm like, that symbol that symbol right there, the one. And I feel like that's something that I was like, oh, it's not as difficult as I thought it was going to be. And not as. I feel like it's not going to be as many names as like something. Like. The
Semicoin. Wow. Took a second to figure out. I'm like, that symbol that symbol right there, the one. And I feel like that's something that I was like, oh, it's not as difficult as I thought it was going to be. And not as. I feel like it's not going to be as many names as like something. Like. The Like. The. How to say it like all of the things that's that like event streaming has they have logs they have so many names for the stupid stuff. And that's actually not that big. Yeah, so I'm like, yeah, there's not going to be a million names about the same thing. And I'm very excited about that
Like. The. How to say it like all of the things that's that like event streaming has they have logs they have so many names for the stupid stuff. And that's actually not that big. Yeah, so I'm like, yeah, there's not going to be a million names about the same thing. And I'm very excited about that And. And did we want to take a quick look at her talk or just make sure that we all go watch it later. I would suggest a watch it later. It goes deep. It's really cool. Yeah, I'm excited. I always love to see these. All right. So. We have these. Wait. I'm going to
And. And did we want to take a quick look at her talk or just make sure that we all go watch it later. I would suggest a watch it later. It goes deep. It's really cool. Yeah, I'm excited. I always love to see these. All right. So. We have these. Wait. I'm going to Wait. I'm going to. I said they don't think that they've seen that. Yeah. So the phrasing here, I'm actually kind of proud of. And I'm going to, I'm going to hold it on the little gecko score, whatever score. Within the spectrum of types of developers who do prefer semi-colons, myself included
Wait. I'm going to. I said they don't think that they've seen that. Yeah. So the phrasing here, I'm actually kind of proud of. And I'm going to, I'm going to hold it on the little gecko score, whatever score. Within the spectrum of types of developers who do prefer semi-colons, myself included And I'm going to put them after object type aliases because it is analogous analogous to declaring a variable or declaring a thing. So it's type x equals whatever. If you don't use some of the goals and you don't need a semicolon, it's the same
And I'm going to put them after object type aliases because it is analogous analogous to declaring a variable or declaring a thing. So it's type x equals whatever. If you don't use some of the goals and you don't need a semicolon, it's the same But an interface is more of a declaration rather than a statement, which is two very nipicky terms that often use interchangeably. And then the language design, like referring to the different technical terms for all these things, there is like an actual difference between the two. Sparkle emoji
But an interface is more of a declaration rather than a statement, which is two very nipicky terms that often use interchangeably. And then the language design, like referring to the different technical terms for all these things, there is like an actual difference between the two. Sparkle emoji Sparkle emoji. I did put kind of sparkle emojis on the graphic. So. Yeah. That is. I updated our graphic. We'll get. We'll figure out graphics at some point in the YouTube hacks. And. Oh my gosh. So much there. So most of. Excuse my dog if you can hear her. Well, we'll mute real quick. Maybe. What
Sparkle emoji. I did put kind of sparkle emojis on the graphic. So. Yeah. That is. I updated our graphic. We'll get. We'll figure out graphics at some point in the YouTube hacks. And. Oh my gosh. So much there. So most of. Excuse my dog if you can hear her. Well, we'll mute real quick. Maybe. What Maybe. What. She's hard of here. Like she can't hear anymore. So even if I were to like yell at her, she can't hear me. So it's more of just a. Just. Waiting. Weighted out. And. And I really like that in
Maybe. What. She's hard of here. Like she can't hear anymore. So even if I were to like yell at her, she can't hear me. So it's more of just a. Just. Waiting. Weighted out. And. And I really like that in This chapter so far, like your reference in back to a lot of items that we've already talked about or where we will talk about it. Like this one's as we'll see in the next chapter, there's a reference reference to chapter 13 coming up as well. And I was like, OK, cool
This chapter so far, like your reference in back to a lot of items that we've already talked about or where we will talk about it. Like this one's as we'll see in the next chapter, there's a reference reference to chapter 13 coming up as well. And I was like, OK, cool As I want to learn more information, I know where to go for it. And I really appreciate that. Something that. And this one, I feel like is was more of a for myself than for everybody else on the highlights of the differences between interfaces and type aliases were just to remember that
As I want to learn more information, I know where to go for it. And I really appreciate that. Something that. And this one, I feel like is was more of a for myself than for everybody else on the highlights of the differences between interfaces and type aliases were just to remember that That what we're doing for the rest of the chapter in this book is going to be based on interfaces in these two points. More of like a point of reference for myself. But. Oh, y'all, I'm doing a talk at TypeScript Congress and I'm going to use this quote, at least
That what we're doing for the rest of the chapter in this book is going to be based on interfaces in these two points. More of like a point of reference for myself. But. Oh, y'all, I'm doing a talk at TypeScript Congress and I'm going to use this quote, at least At least maybe like the last sentence. TypeScript. A set of types. Yes, you do it. You do it. I'll clip it. You do it. We're doing it in unison. I'm not that. I don't know. I mean, whatever type type system tools or interfaces to help models. How does that model the wackiness? That was great
At least maybe like the last sentence. TypeScript. A set of types. Yes, you do it. You do it. I'll clip it. You do it. We're doing it in unison. I'm not that. I don't know. I mean, whatever type type system tools or interfaces to help models. How does that model the wackiness? That was great Love it. That is going in the talk, just as a heads up, it's going to be amazing
Love it. That is going in the talk, just as a heads up, it's going to be amazing This is, and one of the reasons I really like that is because with the talk I'm talking about learning live and how learning TypeScript and learning, especially with having Josh on the show consistently and having the consistency has helped build more structure in my learning as well
This is, and one of the reasons I really like that is because with the talk I'm talking about learning live and how learning TypeScript and learning, especially with having Josh on the show consistently and having the consistency has helped build more structure in my learning as well And in my code, as I'm learning all of it, because I'm learning TypeScript and JavaScript at the same time. It's fun, although I don't always know the differences that something is TypeScript and not JavaScript. It makes it fun. It makes it fun. All right. Optional properties
And in my code, as I'm learning all of it, because I'm learning TypeScript and JavaScript at the same time. It's fun, although I don't always know the differences that something is TypeScript and not JavaScript. It makes it fun. It makes it fun. All right. Optional properties This made a lot of sense to me. I think that if I see if I can wait, what? So there's actually a typo on the page, like a pretty glaring typo in this code snippet, which has been bugging me. The error message says that a property author is missing in Type
This made a lot of sense to me. I think that if I see if I can wait, what? So there's actually a typo on the page, like a pretty glaring typo in this code snippet, which has been bugging me. The error message says that a property author is missing in Type Missing, I flipped it somewhere in the editing between pages and authors. So this sample is fine. Pages is required, author is optional. So this sample is just wrong. OK. I was just going to say because of the question mark, it's just saying that it's optional. Yeah
Missing, I flipped it somewhere in the editing between pages and authors. So this sample is fine. Pages is required, author is optional. So this sample is just wrong. OK. I was just going to say because of the question mark, it's just saying that it's optional. Yeah Yeah. So, const missing book is totally fine because it has pages, which is required and it doesn't have author, but that's OK because author is optional
Yeah. So, const missing book is totally fine because it has pages, which is required and it doesn't have author, but that's OK because author is optional If you were to say const missing book equals and then object and author without pages, then you'd be in trouble because pages is required and if you don't have pages, then it's the wrong thing. Right. Right. Yeah. So both, are you able to put both as optional? Yeah. And this is fun
If you were to say const missing book equals and then object and author without pages, then you'd be in trouble because pages is required and if you don't have pages, then it's the wrong thing. Right. Right. Yeah. So both, are you able to put both as optional? Yeah. And this is fun You can declare an object that has entirely optional properties, one of them, two of them, 20 of them, and then every object, everything that has not null or defined is assignable to that object because you're just saying it's a shape and it can have any of these properties, but they're optional
You can declare an object that has entirely optional properties, one of them, two of them, 20 of them, and then every object, everything that has not null or defined is assignable to that object because you're just saying it's a shape and it can have any of these properties, but they're optional So as long as you give it something that doesn't have a different type for one of those properties, if it's missing all of them, who cares? It's fine. OK. But this one did make a lot of sense. So this one I was like, cool. Yay. I didn't get super stuck on. Read only made a lot of sense
So as long as you give it something that doesn't have a different type for one of those properties, if it's missing all of them, who cares? It's fine. OK. But this one did make a lot of sense. So this one I was like, cool. Yay. I didn't get super stuck on. Read only made a lot of sense I liked the fact of, oh, really quick, I'll go through this in a second. Parassocial asks, Josh, what's your take on pages, question mark? I'm just going to learn on this great instead of having to read it on this. Great question. What's your take? I also love the JavaScript. What's that? Yeah
I liked the fact of, oh, really quick, I'll go through this in a second. Parassocial asks, Josh, what's your take on pages, question mark? I'm just going to learn on this great instead of having to read it on this. Great question. What's your take? I also love the JavaScript. What's that? Yeah What's that? Yeah. So those two are not the same. They're commonly used similarly and they work similarly, but there are subtle differences. The first page is question mark string is saying you may have a page's property
What's that? Yeah. So those two are not the same. They're commonly used similarly and they work similarly, but there are subtle differences. The first page is question mark string is saying you may have a page's property If you have that page's property, which you don't have to, then it must be a string. Last string are defined. If the property exists, it must be a string, which is different from saying you must always have a page's property and then the value under that property is either stringed or undefined
If you have that page's property, which you don't have to, then it must be a string. Last string are defined. If the property exists, it must be a string, which is different from saying you must always have a page's property and then the value under that property is either stringed or undefined And then yes, that third one, page's question mark string are defined as saying you may have a page's property. If it exists, it may be either stringer under font. Now type of actually has a configuration option, which I can never remember the name. But it's exact optional property types
And then yes, that third one, page's question mark string are defined as saying you may have a page's property. If it exists, it may be either stringer under font. Now type of actually has a configuration option, which I can never remember the name. But it's exact optional property types I'll post that in the chat, which makes it a little more restrictive on this. Because most of the time, who gets a crap, like either the property is there with a thing or it's undefined
I'll post that in the chat, which makes it a little more restrictive on this. Because most of the time, who gets a crap, like either the property is there with a thing or it's undefined Like why do we care about this? But there are some cases where people really want to be strict about whether the property exists. Because there is a difference between a property existing and having an undefined value, versus a property not existing at all on the object
Like why do we care about this? But there are some cases where people really want to be strict about whether the property exists. Because there is a difference between a property existing and having an undefined value, versus a property not existing at all on the object Does that make sense and answer the question that we were going for? I'm also asking you, Jen, because this is your stream and I want to make sure that you're feeling good about all this. It makes a nice sense
Does that make sense and answer the question that we were going for? I'm also asking you, Jen, because this is your stream and I want to make sure that you're feeling good about all this. It makes a nice sense But again, it's going to be this one thing I love about all of these is it's something that I can go back in reference when that knowledge builds because something that may go over my head to not force learning that one part. And cool, you answered Kevin's question as well
But again, it's going to be this one thing I love about all of these is it's something that I can go back in reference when that knowledge builds because something that may go over my head to not force learning that one part. And cool, you answered Kevin's question as well Which I'm going to put it on screen just so that if people don't have access to the chat, they can see this. Hasown property works differently between the two right and yeah, also in the in operator. Yay. All right, cool
Which I'm going to put it on screen just so that if people don't have access to the chat, they can see this. Hasown property works differently between the two right and yeah, also in the in operator. Yay. All right, cool All right, cool. And so what was I going to come through on this one? Hmm, thinking, thinking, seeing what I think with this one, it made a lot of sense and I like that you called out that it doesn't have to be read only for the entire part of it for the entire object. Cool
All right, cool. And so what was I going to come through on this one? Hmm, thinking, thinking, seeing what I think with this one, it made a lot of sense and I like that you called out that it doesn't have to be read only for the entire part of it for the entire object. Cool Cool. Yeah, it's just saying anything that any place where you told me that the type I care about is this page thingy. Don't I'm not allowed to touch text wherever you get whatever, wherever it came from, I don't know. But specifically here, don't modify text. Cool
Cool. Yeah, it's just saying anything that any place where you told me that the type I care about is this page thingy. Don't I'm not allowed to touch text wherever you get whatever, wherever it came from, I don't know. But specifically here, don't modify text. Cool Cool. Anything that we need to go through separately here that you would want to call out? Another typo name from pageish to messengerish, really annoying me. The editing process was crap at towards the end. I just rushed through it and didn't get a lot of proof reading done
Cool. Anything that we need to go through separately here that you would want to call out? Another typo name from pageish to messengerish, really annoying me. The editing process was crap at towards the end. I just rushed through it and didn't get a lot of proof reading done So that was unfortunate. This is what happens when you talk to an author. They just like nitpick their material aggressively
So that was unfortunate. This is what happens when you talk to an author. They just like nitpick their material aggressively Yeah, honestly, most of this chapter is just expressing different ways you can declare different things on properties or methods of object types with interfaces or type of cases. It's just a bunch of cool facts, really, for the most part. And I dig that. So thank you
Yeah, honestly, most of this chapter is just expressing different ways you can declare different things on properties or methods of object types with interfaces or type of cases. It's just a bunch of cool facts, really, for the most part. And I dig that. So thank you So thank you. There was something that was part of functions and methods. Because you can provide, Tecchra provides the two ways of declaring in-face members as functions with the method and property. There. This is the only thing I hate about going through these later on
So thank you. There was something that was part of functions and methods. Because you can provide, Tecchra provides the two ways of declaring in-face members as functions with the method and property. There. This is the only thing I hate about going through these later on I had a question about it, but I didn't write it down. So that doesn't help. You have a fancy highlighting situation. Is there write down things? I know. I know. But I was like, oh, I'll remember now. I don't. I'm sorry. It's fine. How would you briefly tell us about this? Oh, boy
I had a question about it, but I didn't write it down. So that doesn't help. You have a fancy highlighting situation. Is there write down things? I know. I know. But I was like, oh, I'll remember now. I don't. I'm sorry. It's fine. How would you briefly tell us about this? Oh, boy See, Jen, this is one of the reasons why I don't recommend people learn types of JavaScript at the same time, because this relies on the core JavaScript fundamental thing, which is that there is a difference, sort of subtle differences between the two different ways to clear a thing, a field of an object that can be called like a function
See, Jen, this is one of the reasons why I don't recommend people learn types of JavaScript at the same time, because this relies on the core JavaScript fundamental thing, which is that there is a difference, sort of subtle differences between the two different ways to clear a thing, a field of an object that can be called like a function One is a method declaration, which is like the class style. There's actually some syntax sugar that you can use that makes this definition blurry. But generally, the idea is you have a prototype based instance of a class. The method is declared on the class, not the instance
One is a method declaration, which is like the class style. There's actually some syntax sugar that you can use that makes this definition blurry. But generally, the idea is you have a prototype based instance of a class. The method is declared on the class, not the instance Then separately from that, there's a property approach, which is a property, just like any other object property, and the value of that property just so happens to be a function. So if you look on the screen, it has both function types. Those are the two ways of declaring that syntax
Then separately from that, there's a property approach, which is a property, just like any other object property, and the value of that property just so happens to be a function. So if you look on the screen, it has both function types. Those are the two ways of declaring that syntax The functional result is almost identical. It's a thing you can call by its name and it's a function. But the TypeScript lets you explicitly say which of the two ways that was going to be declared that it was declared by. Yeah. Yeah. I didn't realize I was muted
The functional result is almost identical. It's a thing you can call by its name and it's a function. But the TypeScript lets you explicitly say which of the two ways that was going to be declared that it was declared by. Yeah. Yeah. I didn't realize I was muted I mean, I was just shaking my head, but I was also like, yeah, okay. Come on, Josh, you just have to like, nobody wants to be in my head. Just like that would be very confusing for everyone. But sometimes I do wish that they could
I mean, I was just shaking my head, but I was also like, yeah, okay. Come on, Josh, you just have to like, nobody wants to be in my head. Just like that would be very confusing for everyone. But sometimes I do wish that they could And I do get the fact and I appreciate the call out on like these are things that knowing JavaScript beforehand would help. There haven't, I feel like there's been a few, but not as many as I would have thought. Yeah. As many as I could
And I do get the fact and I appreciate the call out on like these are things that knowing JavaScript beforehand would help. There haven't, I feel like there's been a few, but not as many as I would have thought. Yeah. As many as I could As many as I could. I think it's just enough to be in there, but not enough to block you. Yeah. Okay. And then this is where I didn't get to. Oh, yeah. So what are called signatures because apparently I can't spell obvious obvious obvious obvious that looks right
As many as I could. I think it's just enough to be in there, but not enough to block you. Yeah. Okay. And then this is where I didn't get to. Oh, yeah. So what are called signatures because apparently I can't spell obvious obvious obvious obvious that looks right Is it is that actually how you spell it? I'll be shocked. Yeah. And we be I. Yeah. So what is a signature? Because for functions. And signature is description of how something can be used. A call signature is a description of how something can be called
Is it is that actually how you spell it? I'll be shocked. Yeah. And we be I. Yeah. So what is a signature? Because for functions. And signature is description of how something can be used. A call signature is a description of how something can be called So I say that explicitly because there are actually two types of signatures that we refer to in this chapter. We talk about call signatures and later we'll talk about index signatures. So before we get to index signatures, let's just talk about call signatures
So I say that explicitly because there are actually two types of signatures that we refer to in this chapter. We talk about call signatures and later we'll talk about index signatures. So before we get to index signatures, let's just talk about call signatures A call signature describes how an object or a thing of value or shape can be called like a function. For example, interface call signature says this is a shape and it can be called in this way, pass it in input string
A call signature describes how an object or a thing of value or shape can be called like a function. For example, interface call signature says this is a shape and it can be called in this way, pass it in input string It gives back number functionally that's basically the same as type function alias
It gives back number functionally that's basically the same as type function alias The difference is the interface form allows you to add other properties onto it because it's really common in JavaScript for people to say like make a function that manually assign like dot version equals two or whatever like our random arbitrary properties on it
The difference is the interface form allows you to add other properties onto it because it's really common in JavaScript for people to say like make a function that manually assign like dot version equals two or whatever like our random arbitrary properties on it So text group allows you to declare that an interface allows properties that are whatever properties functions methods, whatever. And then also that the object itself is a function that can be called in at least one particular way. Does that make sense? Yeah. Yeah. And it also
So text group allows you to declare that an interface allows properties that are whatever properties functions methods, whatever. And then also that the object itself is a function that can be called in at least one particular way. Does that make sense? Yeah. Yeah. And it also Yeah. And it also. So I'm currently stuck on not on the fact of like what you just explained, but the fact that I'm going through so many names in my head for bumpy lumps because I'm like wait, that's not it. But it's not drag. And it's not Tyler
Yeah. And it also. So I'm currently stuck on not on the fact of like what you just explained, but the fact that I'm going through so many names in my head for bumpy lumps because I'm like wait, that's not it. But it's not drag. And it's not Tyler And it's not Tyler. Dude, what's your name? He's I'm spacing it because there's too many names. Is it a lot of space princesses? Alex. Yes. Uh, he's on our, um, D&D, not D&D, the expanse
And it's not Tyler. Dude, what's your name? He's I'm spacing it because there's too many names. Is it a lot of space princesses? Alex. Yes. Uh, he's on our, um, D&D, not D&D, the expanse When we played the expanse, but his username says one thing and then he has two names in the expanse and then I just like couldn't get to the real thing because that's what happens when you learn their name in the game first. Anyway, thank you Roy for that and Alex
When we played the expanse, but his username says one thing and then he has two names in the expanse and then I just like couldn't get to the real thing because that's what happens when you learn their name in the game first. Anyway, thank you Roy for that and Alex What do you like about call signatures? I'm curious. That that was the whole thing to get to that question. Yes. And is there. That is fair. That is fair. Um, y'all. I, let's take a brief. Um, yay. Thank you for the follow
What do you like about call signatures? I'm curious. That that was the whole thing to get to that question. Yes. And is there. That is fair. That is fair. Um, y'all. I, let's take a brief. Um, yay. Thank you for the follow Um, let's, let's take a brief break because I think y'all will be amused by this. So if I take my hair down, you can see that I have verbal hair and I am quite a goofy human in general
Um, let's, let's take a brief break because I think y'all will be amused by this. So if I take my hair down, you can see that I have verbal hair and I am quite a goofy human in general And then if you take my character, which I will also link in here so that way y'all can go follow Jacob because you should in general, but we, I don't look like me. I look like a completely different person and I'm really mean. Um, it is. Oh, let's, this one won't work
And then if you take my character, which I will also link in here so that way y'all can go follow Jacob because you should in general, but we, I don't look like me. I look like a completely different person and I'm really mean. Um, it is. Oh, let's, this one won't work Uh, do, do, do, do, do, do, do, do, do, do, do, share screen. Go to this one. This one. That's me. Well, that's so different. And I'm a meanie poop who had. Who's really mean to everybody. That is me. Camora from Avengers, but the pair of us. That face things. I'm a, I'm a belter from the expense
Uh, do, do, do, do, do, do, do, do, do, do, do, share screen. Go to this one. This one. That's me. Well, that's so different. And I'm a meanie poop who had. Who's really mean to everybody. That is me. Camora from Avengers, but the pair of us. That face things. I'm a, I'm a belter from the expense A mean builder. Well, she's not mean. She's just like, she's not, she's got a lot going on in life is the best way to say it. She's got a lot going on. But yes, um, she is mean. And it's so funny because they'll be like, they'll be laughing about stuff. And I can't laugh
A mean builder. Well, she's not mean. She's just like, she's not, she's got a lot going on in life is the best way to say it. She's got a lot going on. But yes, um, she is mean. And it's so funny because they'll be like, they'll be laughing about stuff. And I can't laugh And I can't laugh. I have this very serious face. And I got to like sit differently. Anyway, that is the, um, we don't need to go off on. We don't need to expand on the expanse. I'll talk about it nonstop. So let me go back to the book. But yes, this is why I kind of come up with Alex's name
And I can't laugh. I have this very serious face. And I got to like sit differently. Anyway, that is the, um, we don't need to go off on. We don't need to expand on the expanse. I'll talk about it nonstop. So let me go back to the book. But yes, this is why I kind of come up with Alex's name Yeah, too many, too many names to go. But Alex, thank you because you're a sucker for predictability. I think that's a good way of saying it. It's a good value problem in general with tax groups. Calls and new choose and other parts yet. Yeah, very true, very true. All right
Yeah, too many, too many names to go. But Alex, thank you because you're a sucker for predictability. I think that's a good way of saying it. It's a good value problem in general with tax groups. Calls and new choose and other parts yet. Yeah, very true, very true. All right All right. So the next one that you were going to talk about, which you said that you're like, there's two types of signatures, but now we have index signatures. Yeah
All right. So the next one that you were going to talk about, which you said that you're like, there's two types of signatures, but now we have index signatures. Yeah Yeah. A call signature describes how a thing can be called like a function, which by the way, if you ever see an error message like has no call signatures, that's because it's telling you it can't be called like a function
Yeah. A call signature describes how a thing can be called like a function, which by the way, if you ever see an error message like has no call signatures, that's because it's telling you it can't be called like a function An index signature describes how you can index into it or like look up properties dynamically. Um, we've seen this very often in JavaScript code, uh, where someone was like, put it up, make an object and then like randomly assign properties to it
An index signature describes how you can index into it or like look up properties dynamically. Um, we've seen this very often in JavaScript code, uh, where someone was like, put it up, make an object and then like randomly assign properties to it Like word counts, let's say, uh, from the screen is a good example of that where I'm just putting whatever strings or like whatever prompt is what counts on Apple, counts on banana, counts dot cherry and typescripts is being told by us, well, let me do whatever I want, whatever keys
Like word counts, let's say, uh, from the screen is a good example of that where I'm just putting whatever strings or like whatever prompt is what counts on Apple, counts on banana, counts dot cherry and typescripts is being told by us, well, let me do whatever I want, whatever keys And as long as the value is a number, I'm okay with it. So that's an index signature. So you're just strongly typing what the keys and the values are not what the types of the keys and the values, not what the specific keys are. Does that track? Yeah. Yeah. Yeah. That one seems. I don't know
And as long as the value is a number, I'm okay with it. So that's an index signature. So you're just strongly typing what the keys and the values are not what the types of the keys and the values, not what the specific keys are. Does that track? Yeah. Yeah. Yeah. That one seems. I don't know I don't know. It clicks a little more, but like they both click. It's cool. Yeah. Uh, big concepts. No, like they're like work, I was aware that they click or not. Like there is not a lot of stuff to click with it. It's just, okay, this is described to you
I don't know. It clicks a little more, but like they both click. It's cool. Yeah. Uh, big concepts. No, like they're like work, I was aware that they click or not. Like there is not a lot of stuff to click with it. It's just, okay, this is described to you Call it that one describes how you index into it. The tricky thing actually becomes, I come from the letter, which is one of the fun little places where typescript is not truly types a, the type system is a, a form of a heuristic
Call it that one describes how you index into it. The tricky thing actually becomes, I come from the letter, which is one of the fun little places where typescript is not truly types a, the type system is a, a form of a heuristic Because let's say, and I'm just looking at the second example, uh, dates by name, uh, let's say you'd need a Claire index in a shirt and he, he, doing so you said this object, any key is going to get whatever a date value. And then it, type gift is okay with you looking up any key on the object
Because let's say, and I'm just looking at the second example, uh, dates by name, uh, let's say you'd need a Claire index in a shirt and he, he, doing so you said this object, any key is going to get whatever a date value. And then it, type gift is okay with you looking up any key on the object Because you said any key in the universe, literally every possible string one could have talked in JavaScript, gives me back whatever the values. So that's not types. Much like how arrays you can like access things out of bounds and types
Because you said any key in the universe, literally every possible string one could have talked in JavaScript, gives me back whatever the values. So that's not types. Much like how arrays you can like access things out of bounds and types It's like, okay, this is fine by the default compiler options. This is, well, you told me it has the infinite set of strings, this keys. So I'll just go with that. That's interesting. I think that's alluding to the mixing properties and index signatures to you
It's like, okay, this is fine by the default compiler options. This is, well, you told me it has the infinite set of strings, this keys. So I'll just go with that. That's interesting. I think that's alluding to the mixing properties and index signatures to you But it also makes me want to ask you why would you not do any when you start with anything type script as your type? You can think of JavaScript as just type script with a lot of enemies, everything is any. And then as you onboard to type script, you're replacing those enemies with better things
But it also makes me want to ask you why would you not do any when you start with anything type script as your type? You can think of JavaScript as just type script with a lot of enemies, everything is any. And then as you onboard to type script, you're replacing those enemies with better things So yeah, this is, well, this is better than an any, but maybe most of the time using an index signature is not what you want, especially now that it's post whatever 2015
So yeah, this is, well, this is better than an any, but maybe most of the time using an index signature is not what you want, especially now that it's post whatever 2015 And we have things like map and set built into JavaScript that are built for these operations of like getting arbitrary properties. So yeah, this is not ideal, but it's better than Yolo and let me do whatever I want. Fair enough. Fair enough. All right. And I like that explanation
And we have things like map and set built into JavaScript that are built for these operations of like getting arbitrary properties. So yeah, this is not ideal, but it's better than Yolo and let me do whatever I want. Fair enough. Fair enough. All right. And I like that explanation Anything else? Is there anything you specifically want to cover in the mixing properties and index signatures? Yeah, I found it difficult to write this part because it's actually not that big of a concept, but I found it to be tricky personally
Anything else? Is there anything you specifically want to cover in the mixing properties and index signatures? Yeah, I found it difficult to write this part because it's actually not that big of a concept, but I found it to be tricky personally When you have an object like at the bottom between historical novels, higher, all you're saying here is two things. One, any key that's a string gives you back a number. And also I specifically know that I have, or we know code, the key, like that must exist
When you have an object like at the bottom between historical novels, higher, all you're saying here is two things. One, any key that's a string gives you back a number. And also I specifically know that I have, or we know code, the key, like that must exist So if I create an object that's missing that, let's say it only has help enter, it's actually pretty good because although you said that any key in the universe is allowed to exist, you've also said that specifically that key must exist. That's. I like that. And also, key. Yeah, Jerry's writing
So if I create an object that's missing that, let's say it only has help enter, it's actually pretty good because although you said that any key in the universe is allowed to exist, you've also said that specifically that key must exist. That's. I like that. And also, key. Yeah, Jerry's writing He's been all over me today. It's been nice. Hi, Jerry. Jerry, you're cute. It's he a full black cat. It's got a little bit of gray on the chest, he and his brother. We think he has ADHD. He gets very restless and very attached to it all over the place. It's really cute
He's been all over me today. It's been nice. Hi, Jerry. Jerry, you're cute. It's he a full black cat. It's got a little bit of gray on the chest, he and his brother. We think he has ADHD. He gets very restless and very attached to it all over the place. It's really cute It's really cute. I like what Roy said of they want a TypeScript book that is one page use any for everything K, thanks K by. Just for me. Yeah, even self publish. But Roy, I see a future in writing for you and teaching. Roy is a great teacher and doesn't give me the answers
It's really cute. I like what Roy said of they want a TypeScript book that is one page use any for everything K, thanks K by. Just for me. Yeah, even self publish. But Roy, I see a future in writing for you and teaching. Roy is a great teacher and doesn't give me the answers I get very stuck and then I just want to yell at him. Thank you, Roy. Oh, yay. So this part does make sense and then oh, we got numeric index signatures. The Americans. Yeah, but fact in JavaScript. So this is a JavaScript thing that TypeScript has to let us represent
I get very stuck and then I just want to yell at him. Thank you, Roy. Oh, yay. So this part does make sense and then oh, we got numeric index signatures. The Americans. Yeah, but fact in JavaScript. So this is a JavaScript thing that TypeScript has to let us represent Whenever you create an object and then ask for a dynamic property, like what if a thing is array index, so some variable, that property can be anything and it gets coerced or turned into a string. I forget the technical term is like a fancy algorithm. So you can use numbers
Whenever you create an object and then ask for a dynamic property, like what if a thing is array index, so some variable, that property can be anything and it gets coerced or turned into a string. I forget the technical term is like a fancy algorithm. So you can use numbers So like this mixes numbers and strings, things totally fine in JavaScript plan. So now, text-to-bindex signatures can say not just I string, but also I number. That's why they have the type annotation there. It's not just I because it can be stringer number
So like this mixes numbers and strings, things totally fine in JavaScript plan. So now, text-to-bindex signatures can say not just I string, but also I number. That's why they have the type annotation there. It's not just I because it can be stringer number And number must be more specific than string because numbers, keys, get turned into string keys anyway. Which again, it's a JavaScript thing, not a text thing. I appreciate the clarification. Oh. Did you hear that? Jerry agrees. Yes, he does
And number must be more specific than string because numbers, keys, get turned into string keys anyway. Which again, it's a JavaScript thing, not a text thing. I appreciate the clarification. Oh. Did you hear that? Jerry agrees. Yes, he does Yes, he does. This is the fun part about live streaming or calls or doing anything is you will probably have animals in the background. It is the best. Okay. Nested interfaces
Yes, he does. This is the fun part about live streaming or calls or doing anything is you will probably have animals in the background. It is the best. Okay. Nested interfaces Nested interfaces. Which I feel like we kind of talked about earlier because you could in the read me part because you could have things nested but not have the same requirements. Yeah. Yeah. Is there a big difference in this area? No, just
Nested interfaces. Which I feel like we kind of talked about earlier because you could in the read me part because you could have things nested but not have the same requirements. Yeah. Yeah. Is there a big difference in this area? No, just It's the same stuff that you went over back in chapter four with objects where you can nest things. And objects can have a property. That's another object in here. In addition to being able to represent as an object literal, you can ultimately call it an interface. So, yay
It's the same stuff that you went over back in chapter four with objects where you can nest things. And objects can have a property. That's another object in here. In addition to being able to represent as an object literal, you can ultimately call it an interface. So, yay So, yay. This may be a very apparent answer but I'm going to ask it anyway of can you nest object or interface like can you switch back and forth? You can make them match. Yeah. Nothing's not true. I don't really like the way you ask that
So, yay. This may be a very apparent answer but I'm going to ask it anyway of can you nest object or interface like can you switch back and forth? You can make them match. Yeah. Nothing's not true. I don't really like the way you ask that A lot of people say phrases like this is a dumb question and I really don't like that because I don't like encouraging the concept of questions being dumb. Of course, very few dumb questions. There are dumb questions. There's just very, very few of them
A lot of people say phrases like this is a dumb question and I really don't like that because I don't like encouraging the concept of questions being dumb. Of course, very few dumb questions. There are dumb questions. There's just very, very few of them And no one who's concerned about asking a dumb question has ever actually asked a dumb question in my experience. So this might be a parent
And no one who's concerned about asking a dumb question has ever actually asked a dumb question in my experience. So this might be a parent I really like his phrase because to me the person who wrote the book might be a parent but to you someone who's just like reading it now learning it may not be so parents. So, yeah. Plus one I like that. Thank you
I really like his phrase because to me the person who wrote the book might be a parent but to you someone who's just like reading it now learning it may not be so parents. So, yeah. Plus one I like that. Thank you Thank you. I will say I learned that from someone at Cloud Next last week when I'm learning I had questions about everything and they were asking people that came up to the booth or getting to know them of like this may be a parent or this may be something that I'm not seeing right now
Thank you. I will say I learned that from someone at Cloud Next last week when I'm learning I had questions about everything and they were asking people that came up to the booth or getting to know them of like this may be a parent or this may be something that I'm not seeing right now I'm like, there's a great way of asking it because it may not be a parent to everybody. Oh, extensions. What big cool news do you have about adding to extensions? Again, the same as what you saw before just with a different keyword. Yes. It's like an intersection but different
I'm like, there's a great way of asking it because it may not be a parent to everybody. Oh, extensions. What big cool news do you have about adding to extensions? Again, the same as what you saw before just with a different keyword. Yes. It's like an intersection but different We made otherwise, basically the same. So basically I'm hearing that this was a great week to have a shorter episode even though we delayed. I had a delay today. Yeah, yeah, this is perfect. Nice. Overwritten. I don't know if we've talked about this. Oh, well, it does say new
We made otherwise, basically the same. So basically I'm hearing that this was a great week to have a shorter episode even though we delayed. I had a delay today. Yeah, yeah, this is perfect. Nice. Overwritten. I don't know if we've talked about this. Oh, well, it does say new In case anyone's curious the stuff that I have, oops, as I hit my mic, this right here is like notes of is this a new concept or not? And apparently this is new. So no wonder I had no idea about overwritten properties. What is this? Well, glad you're asked
In case anyone's curious the stuff that I have, oops, as I hit my mic, this right here is like notes of is this a new concept or not? And apparently this is new. So no wonder I had no idea about overwritten properties. What is this? Well, glad you're asked You can make things more specific in the derived or extending interface. For example, on the screen, we see with non-noble name, which extends with noble name. In the extended one, the one that extends name is string. So anything that's type with non-noble name name is string, not string or no
You can make things more specific in the derived or extending interface. For example, on the screen, we see with non-noble name, which extends with noble name. In the extended one, the one that extends name is string. So anything that's type with non-noble name name is string, not string or no So we are taking in the with noble name interface and like getting a more specific, more narrow version of it, which seems kind of silly here because they all have the same property why we can just make a new interface
So we are taking in the with noble name interface and like getting a more specific, more narrow version of it, which seems kind of silly here because they all have the same property why we can just make a new interface But like if the base interface with noble name had other things on it, it would still be really useful to be able to extend it, but then say that my name is more specific. More narrow. Does that make sense? Assembly is full to you. Yes. I'm going back to you because we're talking about extensions
But like if the base interface with noble name had other things on it, it would still be really useful to be able to extend it, but then say that my name is more specific. More narrow. Does that make sense? Assembly is full to you. Yes. I'm going back to you because we're talking about extensions And this is something that I owe with coding in general of like extensions to narrow things. Yes. Set theory is weird. This is like the terminology is based on set theory. You are getting you are extending the interface. So it's like a new thing and you can add properties to make it bigger
And this is something that I owe with coding in general of like extensions to narrow things. Yes. Set theory is weird. This is like the terminology is based on set theory. You are getting you are extending the interface. So it's like a new thing and you can add properties to make it bigger You can also narrow existing properties and in that way make it smaller. Mm-hmm. Yeah. Yeah. Yeah. That's that's why I'm like it makes sense, but it doesn't make sense based on words that I've learned so far. So in general, not even
You can also narrow existing properties and in that way make it smaller. Mm-hmm. Yeah. Yeah. Yeah. That's that's why I'm like it makes sense, but it doesn't make sense based on words that I've learned so far. So in general, not even But what did you say this is based off of that I should go look up? You don't have to set theory from like mathematics. So a lot of types could actually come a lot of types systems in fact come down to set theory of like what are the set of allowed things? So like a union type
But what did you say this is based off of that I should go look up? You don't have to set theory from like mathematics. So a lot of types could actually come a lot of types systems in fact come down to set theory of like what are the set of allowed things? So like a union type The concept of a union comes from set theory. It's two unions union them together. I don't introduce set theory. I don't think I ever actually mentioned it in the book. Yeah, I don't because most people don't feel particularly comfortable diving into mathematical principles
The concept of a union comes from set theory. It's two unions union them together. I don't introduce set theory. I don't think I ever actually mentioned it in the book. Yeah, I don't because most people don't feel particularly comfortable diving into mathematical principles But that is like a root of a word a lot of this comes on. So if you do have like a affinity or prior experience or just an enjoyment of math like that area of math, it can be very useful for them. We also have Laura. And I haven't had Laura on the show for forever. It's been crazy
But that is like a root of a word a lot of this comes on. So if you do have like a affinity or prior experience or just an enjoyment of math like that area of math, it can be very useful for them. We also have Laura. And I haven't had Laura on the show for forever. It's been crazy It's been crazy. She is was a math professor. Oh, yeah. Or like, yeah, we could just be like, you know, Laura, you want to come on and talk about set theory and. All right, Roy. Think of extending at the functionality of an interface versus extending the. Quantity of what's in the interface
It's been crazy. She is was a math professor. Oh, yeah. Or like, yeah, we could just be like, you know, Laura, you want to come on and talk about set theory and. All right, Roy. Think of extending at the functionality of an interface versus extending the. Quantity of what's in the interface And Alex is saying. They like to think of it as extending like pulling out of the shapes, extending apart rather than making. The original part bigger. It's always fun seeing how people interpret these different things. Everyone has like a different personal thing that works for them
And Alex is saying. They like to think of it as extending like pulling out of the shapes, extending apart rather than making. The original part bigger. It's always fun seeing how people interpret these different things. Everyone has like a different personal thing that works for them And I appreciate everybody sharing because it's like, you, this is one thing about learning that if like. You might have to hear it seven times from three different people. And four different ways for it to finally make sense. Roy, we're all right here. All of us. Different ways to make it click
And I appreciate everybody sharing because it's like, you, this is one thing about learning that if like. You might have to hear it seven times from three different people. And four different ways for it to finally make sense. Roy, we're all right here. All of us. Different ways to make it click Oh, extending multiple interfaces is extending interfaces multiple times. We've extended the extended. Okay. So that one seems pretty self-explanatory. But what about interface merging? Yes, this is new. Hi, learner. Good to see you. It's lazy
Oh, extending multiple interfaces is extending interfaces multiple times. We've extended the extended. Okay. So that one seems pretty self-explanatory. But what about interface merging? Yes, this is new. Hi, learner. Good to see you. It's lazy It's lazy. Yeah, interface merging is the big thing, like the big thing that interfaces can do that auto types can't. Aliestopry types. Now, whether you want them to do this is separate from the question of whether they can do this thing. Okay
It's lazy. Yeah, interface merging is the big thing, like the big thing that interfaces can do that auto types can't. Aliestopry types. Now, whether you want them to do this is separate from the question of whether they can do this thing. Okay Okay. But if you declare two interfaces near each other in the same area and they have the same name. It's as if you just declared one big interface with all the things from both of them. They merge together. To sub people, that sounds horrifying
Okay. But if you declare two interfaces near each other in the same area and they have the same name. It's as if you just declared one big interface with all the things from both of them. They merge together. To sub people, that sounds horrifying And in a way, it is horrifying because what if you like typoed? Why would it let you do that? That's weird. But it's actually really useful because in JavaScript plans, because JavaScript is weird and wacky, people actually do often merge together their things and an existing type
And in a way, it is horrifying because what if you like typoed? Why would it let you do that? That's weird. But it's actually really useful because in JavaScript plans, because JavaScript is weird and wacky, people actually do often merge together their things and an existing type For example, the global window or the little bits in different environments. People are constantly adding crap to the window, whether it's good stuff like new polyfills or new APIs. Or if it's bad things like window.mycount equals zero or whatever
For example, the global window or the little bits in different environments. People are constantly adding crap to the window, whether it's good stuff like new polyfills or new APIs. Or if it's bad things like window.mycount equals zero or whatever So there's a global interface window that you can then also extend by saying interface window my count number. Okay. And this is explicitly a thing that interfaces are used for. This is like why many people use interfaces even if they wouldn't prefer because they have to. That's
So there's a global interface window that you can then also extend by saying interface window my count number. Okay. And this is explicitly a thing that interfaces are used for. This is like why many people use interfaces even if they wouldn't prefer because they have to. That's That's. Currently swirling around the idea of. How someone may learn if they. That they have objects, even though they may want interfaces to merge. Like how someone would maybe be able to identify that. To get it to work that way if they're newer. It's not a common thing
That's. Currently swirling around the idea of. How someone may learn if they. That they have objects, even though they may want interfaces to merge. Like how someone would maybe be able to identify that. To get it to work that way if they're newer. It's not a common thing If you are newer to typescripts, you can probably just ignore it until it becomes necessary. If you are newer to JavaScript, definitely ignore it. I'd say the there are very few but very distinct and visible cases where this is useful. The most common one, the only one that I've actually
If you are newer to typescripts, you can probably just ignore it until it becomes necessary. If you are newer to JavaScript, definitely ignore it. I'd say the there are very few but very distinct and visible cases where this is useful. The most common one, the only one that I've actually I've got a memory of using this past year is process dot end in node. Where in node.js you can set process environment variables and then run your script and then. The global process dot end is an object with all those variables
I've got a memory of using this past year is process dot end in node. Where in node.js you can set process environment variables and then run your script and then. The global process dot end is an object with all those variables And sometimes you want to say like okay, I know the script will always one with some. Variables you can extend and merge. I forget the name of the interface you use for process on it. So that's like a case where the built-in types are not sufficient to describe the built-in global options
And sometimes you want to say like okay, I know the script will always one with some. Variables you can extend and merge. I forget the name of the interface you use for process on it. So that's like a case where the built-in types are not sufficient to describe the built-in global options The things that are declared in that type of slash the type definitions for. That's. That does make sense and I can see based on that example why a newbie wouldn't be anywhere near that. Now I like it. Learner just said like interfaces versus types are something that they feel confused
The things that are declared in that type of slash the type definitions for. That's. That does make sense and I can see based on that example why a newbie wouldn't be anywhere near that. Now I like it. Learner just said like interfaces versus types are something that they feel confused And I know we've been talking about this a bit, but I I'm curious if you could. Summary is that part. Happy to. It's been a little while. Half an hour. I'm hour. Yeah. So it's been beginning the chapter. And there are like a lot of different resources explaining this and slightly and sometimes
And I know we've been talking about this a bit, but I I'm curious if you could. Summary is that part. Happy to. It's been a little while. Half an hour. I'm hour. Yeah. So it's been beginning the chapter. And there are like a lot of different resources explaining this and slightly and sometimes But basically there are very few interface versus type differences. They're almost the exact same. This what's on the screen now. Good. Yes, plus one to showing this. The two are the same basically type over versus interface
But basically there are very few interface versus type differences. They're almost the exact same. This what's on the screen now. Good. Yes, plus one to showing this. The two are the same basically type over versus interface So for most of the time, not all the most of the time is really just whatever you like the looks of more. Or maybe like the underlying principles in perfect. So don't be confused. Don't say now there are some differences
So for most of the time, not all the most of the time is really just whatever you like the looks of more. Or maybe like the underlying principles in perfect. So don't be confused. Don't say now there are some differences Which the chapter does mention the main the main thing that interfaces can do that object type aliases can't. Is merge, which we were just discussing if you have two interfaces, the same name and the same like scope area they just merged together
Which the chapter does mention the main the main thing that interfaces can do that object type aliases can't. Is merge, which we were just discussing if you have two interfaces, the same name and the same like scope area they just merged together Object type aliases on the other hand can do unions, which interfaces. There's no way to represent a union like string or number. That's a type aliased thing. That's not a database. Now there are other like subtle small differences
Object type aliases on the other hand can do unions, which interfaces. There's no way to represent a union like string or number. That's a type aliased thing. That's not a database. Now there are other like subtle small differences Later in the book, we'll get into like generics and like fancy types, which mean much more towards type aliases, but like that's later. It used to be the case
Later in the book, we'll get into like generics and like fancy types, which mean much more towards type aliases, but like that's later. It used to be the case Lastly, that object type aliases tended to be slower for typescript to compute and have worse error messages or type errors when something was mismatched. Nowadays, that's like not really the case. I think there might be so much cases, but like it's really hard to find them
Lastly, that object type aliases tended to be slower for typescript to compute and have worse error messages or type errors when something was mismatched. Nowadays, that's like not really the case. I think there might be so much cases, but like it's really hard to find them So for the most part, it's just. They're the same basically. I like it. I like it. Okay. Are member naming complex just like if there's if they can't merge like you or when you don't want them to merge? Yeah, if they can't
So for the most part, it's just. They're the same basically. I like it. I like it. Okay. Are member naming complex just like if there's if they can't merge like you or when you don't want them to merge? Yeah, if they can't If you declared this whatever merge properties interface twice and in one thing, you said that different returns. It takes in a string and the other one who said different takes that in number. Well, what is typescripts supposed to do with this information? It's blatantly contradictory
If you declared this whatever merge properties interface twice and in one thing, you said that different returns. It takes in a string and the other one who said different takes that in number. Well, what is typescripts supposed to do with this information? It's blatantly contradictory So it gives you a type error saying hey, if you declare two properties in the same named interface. If you want to merge them, they have to have the same type. Otherwise, I don't know what to do. Got it
So it gives you a type error saying hey, if you declare two properties in the same named interface. If you want to merge them, they have to have the same type. Otherwise, I don't know what to do. Got it Got it. It's like me telling you my favorite color is blue and then two minutes later saying my favorite color is red. I've lied to you at least once. Maybe twice. Or you're a demon eye in your truth changes. True. True. Type. Is definitely that what? So the extra
Got it. It's like me telling you my favorite color is blue and then two minutes later saying my favorite color is red. I've lied to you at least once. Maybe twice. Or you're a demon eye in your truth changes. True. True. Type. Is definitely that what? So the extra Does someone done that? Yeah, like what zodiac sign each language would be. That would be great. That would be a great. That would be a great. What? So we need to talk. Now now we've found who to face merging. We can finally understand the last bit of the chapter liar to faces could drivers
Does someone done that? Yeah, like what zodiac sign each language would be. That would be great. That would be a great. That would be a great. What? So we need to talk. Now now we've found who to face merging. We can finally understand the last bit of the chapter liar to faces could drivers They're great at merging. Which I feel like a lot of drivers aren't. So that is a good thing. I've been driving in New Jersey lately. People are awful. Type. It could be associated with the zodiac sign Virgo. Virgo's are known for their attention to detail precision and practicality. Something
They're great at merging. Which I feel like a lot of drivers aren't. So that is a good thing. I've been driving in New Jersey lately. People are awful. Type. It could be associated with the zodiac sign Virgo. Virgo's are known for their attention to detail precision and practicality. Something Something. I think that's what we're trying to do. I think that's just a fun. Solid. Jesus. I need to figure out what language is Gemini because that's probably the one I'd get along with best. Because our truth changes. Like it's not like we're ever lying to people or truth changes. I love it
Something. I think that's what we're trying to do. I think that's just a fun. Solid. Jesus. I need to figure out what language is Gemini because that's probably the one I'd get along with best. Because our truth changes. Like it's not like we're ever lying to people or truth changes. I love it I love it. Because like, it could be like. convinced that this elephant is my favorite elephant of all time. And this is the best elephant. But then five minutes later, these elephants, we are. And therefore, this is my favorite elephant of all time
I love it. Because like, it could be like. convinced that this elephant is my favorite elephant of all time. And this is the best elephant. But then five minutes later, these elephants, we are. And therefore, this is my favorite elephant of all time And then I'll forget about this elephant and see this elephant. And therefore, I change it again. It's really annoying. I love it. And that does remind me. I don't think we've talked since I went to AWS summit New York. And I survived New York. Oh, yeah. New York
And then I'll forget about this elephant and see this elephant. And therefore, I change it again. It's really annoying. I love it. And that does remind me. I don't think we've talked since I went to AWS summit New York. And I survived New York. Oh, yeah. New York Oh, yeah. New York. How did that go? It was a good Alex came to come hang out at the meetup. And thank you. Next time to give Alex more of a heads up. So he doesn't just have to go. You came from Connecticut. I said goodbye to a couch. Oh, I did say goodbye to a couch. I did do that
Oh, yeah. New York. How did that go? It was a good Alex came to come hang out at the meetup. And thank you. Next time to give Alex more of a heads up. So he doesn't just have to go. You came from Connecticut. I said goodbye to a couch. Oh, I did say goodbye to a couch. I did do that I did do that. Yes, I did do that. Did I freeze or did he freeze? Who froze? I do remember that now. Oh, he froze. Okay. Oh, his Mac is randomly restarting. So we'll just remove him from screen. So he's not stuck in that frozen spot. Yay. I'm glad it was fun. And yeah, out there
I did do that. Yes, I did do that. Did I freeze or did he freeze? Who froze? I do remember that now. Oh, he froze. Okay. Oh, his Mac is randomly restarting. So we'll just remove him from screen. So he's not stuck in that frozen spot. Yay. I'm glad it was fun. And yeah, out there Aaron, I forgot that I was so tired and did not want to move that I said goodbye to a couch. And it was it was pretty great. It was really pretty great. Oh, I'm just replying in a Josh and all caps at school. But okay. Learner, you can do the virtual conferences
Aaron, I forgot that I was so tired and did not want to move that I said goodbye to a couch. And it was it was pretty great. It was really pretty great. Oh, I'm just replying in a Josh and all caps at school. But okay. Learner, you can do the virtual conferences But one day I bet you'll go to in person conferences someday, someday. But yes, New York was fun. I wanted to have Josh about it because I survived. I took public transport into the city. And then I took an Uber back to the airport. It was like two hour ride
But one day I bet you'll go to in person conferences someday, someday. But yes, New York was fun. I wanted to have Josh about it because I survived. I took public transport into the city. And then I took an Uber back to the airport. It was like two hour ride It took forever to fly to JFK to get to JFK to fly. And yeah, well, while you're all here and we'll see if Josh can rejoin, make sure that you hit follow, subscribe if you like and you know, keep hanging out. And also there is the there's the thing there is. The link to open source
It took forever to fly to JFK to get to JFK to fly. And yeah, well, while you're all here and we'll see if Josh can rejoin, make sure that you hit follow, subscribe if you like and you know, keep hanging out. And also there is the there's the thing there is. The link to open source Raid guild, which is where you can come find out and. We're hang out with the community, which I will link. If you want to know what's going on with teach, Jen tech, I'm going here. There's it's it's a little bubble. And hello again
Raid guild, which is where you can come find out and. We're hang out with the community, which I will link. If you want to know what's going on with teach, Jen tech, I'm going here. There's it's it's a little bubble. And hello again And hello again. Hi, sorry, I switched my assistant to sit from stand and I forgot the little out of the bottom was loose and it keeps jostling it out. So turn off my Mac. Sorry, how was New York? Did we already pass that point? You just missed the fact that I said goodbye to a couch
And hello again. Hi, sorry, I switched my assistant to sit from stand and I forgot the little out of the bottom was loose and it keeps jostling it out. So turn off my Mac. Sorry, how was New York? Did we already pass that point? You just missed the fact that I said goodbye to a couch Like I realized my shoes were too small. Like if you walk around a little bit and she's you may not realize that they're too small. Like they're like they probably fit really well, but if you walk around a ton, your feet swell. And I did not know that I had about anything for all these trips
Like I realized my shoes were too small. Like if you walk around a little bit and she's you may not realize that they're too small. Like they're like they probably fit really well, but if you walk around a ton, your feet swell. And I did not know that I had about anything for all these trips And my feet were in so much pain and so many blisters that I had to say goodbye to the couch that I was on because I was so sad I was leaving it because that meant more walking. So Aaron reminded me of that. The subways were good. I From JFK I took the subway to my hotel in Times Square
And my feet were in so much pain and so many blisters that I had to say goodbye to the couch that I was on because I was so sad I was leaving it because that meant more walking. So Aaron reminded me of that. The subways were good. I From JFK I took the subway to my hotel in Times Square And then I said no more about this shenanigans and I took a lift back to the airport when I had a leave. Aaron and Alex came to the open source data infrastructure meetup, which Aaron's going to talk on at one of them sometime soon someday or the Boston one I need to plan the Boston one going to
And then I said no more about this shenanigans and I took a lift back to the airport when I had a leave. Aaron and Alex came to the open source data infrastructure meetup, which Aaron's going to talk on at one of them sometime soon someday or the Boston one I need to plan the Boston one going to And I need to plan when I'll be back in New York. And I survived. Good. New York was the first one. So New York was the hardest one. Chicago was worse for other reasons. And then I just got back from San Francisco, which went really well
And I need to plan when I'll be back in New York. And I survived. Good. New York was the first one. So New York was the hardest one. Chicago was worse for other reasons. And then I just got back from San Francisco, which went really well And I'm like, so there's there's progression of preparedness on these trips. And then San Jose, the week after that. So. It's a good amount of tripping. Yes, yes. And I find out soon if I'm going to a conference in Portugal later this year, that's a big conference. And I'm hoping I am
And I'm like, so there's there's progression of preparedness on these trips. And then San Jose, the week after that. So. It's a good amount of tripping. Yes, yes. And I find out soon if I'm going to a conference in Portugal later this year, that's a big conference. And I'm hoping I am I don't know yet. Good luck. Oh, shout out to the chat. I don't think I'm going this year, but I really like going there. I think was there last year that few cool people. That's the most awesome talks. They're really nice. Great time. And y'all go follow. We'll also follow
I don't know yet. Good luck. Oh, shout out to the chat. I don't think I'm going this year, but I really like going there. I think was there last year that few cool people. That's the most awesome talks. They're really nice. Great time. And y'all go follow. We'll also follow We'll also follow. We'll do Aaron and then I got to wait for a little bit. Aaron, when are you streaming? Okay. This is a big reason in case anybody's curious. I'm going to be doing this. I'm going to be doing this. Josh also streams on Tuesdays
We'll also follow. We'll do Aaron and then I got to wait for a little bit. Aaron, when are you streaming? Okay. This is a big reason in case anybody's curious. I'm going to be doing this. I'm going to be doing this. Josh also streams on Tuesdays And this is why I moved my stream earlier on Tuesdays. But yesterday just wasn't going to happen. I was so struggling. I wake up at four and start work at five. I can handle that. That is routine. That is something I do. Waking up at three to be to work until four. It's screwed up my entire day
And this is why I moved my stream earlier on Tuesdays. But yesterday just wasn't going to happen. I was so struggling. I wake up at four and start work at five. I can handle that. That is routine. That is something I do. Waking up at three to be to work until four. It's screwed up my entire day I'm going to have to do it. I'm going to have to do it. I'm going to have to do it. I'm going to do it. I'm going to have to do it. Thank you. Okay, yes. Go follow Aaron so we can watch her stream. And also go follow Josh because they're fun. Yeah. You get the symbol. Your streams are fun
I'm going to have to do it. I'm going to have to do it. I'm going to have to do it. I'm going to do it. I'm going to have to do it. Thank you. Okay, yes. Go follow Aaron so we can watch her stream. And also go follow Josh because they're fun. Yeah. You get the symbol. Your streams are fun They're very. Like it's easy to ask you questions. Oh, I have to wait another minute before I can shout you out. Yeah. Yeah. Yeah. Learning that's a big reason though. Like I was like, I might as well do it earlier because then other people can join and learn your, your regular. You can't
They're very. Like it's easy to ask you questions. Oh, I have to wait another minute before I can shout you out. Yeah. Yeah. Yeah. Learning that's a big reason though. Like I was like, I might as well do it earlier because then other people can join and learn your, your regular. You can't You can't. So I'm glad. And then Aaron and I had a big discussion on when she should stream. Because no matter what when you make friends with streamers, you're going to overlap with somebody. There's no way to not overlap. And it's a weirdly small community
You can't. So I'm glad. And then Aaron and I had a big discussion on when she should stream. Because no matter what when you make friends with streamers, you're going to overlap with somebody. There's no way to not overlap. And it's a weirdly small community Programmer streamer people in our space. We do. We do. But yes, it's, uh, it is, it is a fun. Crowd and you can always learn something. It ran. And anybody else that wants to get into live learning or streaming. I will share my talk because it will have
Programmer streamer people in our space. We do. We do. But yes, it's, uh, it is, it is a fun. Crowd and you can always learn something. It ran. And anybody else that wants to get into live learning or streaming. I will share my talk because it will have If you were to start doing this tomorrow, slide. And I almost shouted out Aaron again with just because she just replied. And that's not what I'm trying to do. Aaron, I already shouted you out. For me, there we go. If I only work. But yes. Yay. Awesome. Well. All right
If you were to start doing this tomorrow, slide. And I almost shouted out Aaron again with just because she just replied. And that's not what I'm trying to do. Aaron, I already shouted you out. For me, there we go. If I only work. But yes. Yay. Awesome. Well. All right Well. All right. So on that note, is there anything that. I'm missing Josh. Um, I'm just going back to the conference. Also, I'm a good one Twitter. I don't think so. I think. I think interfaces and classes are like the chill middle part of the book. Like you absorb information
Well. All right. So on that note, is there anything that. I'm missing Josh. Um, I'm just going back to the conference. Also, I'm a good one Twitter. I don't think so. I think. I think interfaces and classes are like the chill middle part of the book. Like you absorb information I was going to say classes classes is the next one. And I'm so not excited for classes. I mean, I would just skip it honestly for you. Because you would have to learn jobs in classes. And I think that that is the JavaScript feature that is most like. Not into it. Well, we could do our own separate
I was going to say classes classes is the next one. And I'm so not excited for classes. I mean, I would just skip it honestly for you. Because you would have to learn jobs in classes. And I think that that is the JavaScript feature that is most like. Not into it. Well, we could do our own separate Maybe I'll try to have somebody come on and see if they can help me figure out. What classes are. And actually understand them. Yeah. Um, the nice thing about types of classes. Is that. Typegib adds very few things to them
Maybe I'll try to have somebody come on and see if they can help me figure out. What classes are. And actually understand them. Yeah. Um, the nice thing about types of classes. Is that. Typegib adds very few things to them There are like a couple of like weird things that adds that people don't often use. Um, but like they're very few things. It's mostly about just like type declarations like declaring what the type of the classes should be. As you would expect based on literally everything else in the book
There are like a couple of like weird things that adds that people don't often use. Um, but like they're very few things. It's mostly about just like type declarations like declaring what the type of the classes should be. As you would expect based on literally everything else in the book Just around types. Yeah. Yeah. The bad thing about the typegib and classes that it's classes. And that's a controversial topic in college. Some people love them and use them for everything. Some people hate them and avoid them like the play
Just around types. Yeah. Yeah. The bad thing about the typegib and classes that it's classes. And that's a controversial topic in college. Some people love them and use them for everything. Some people hate them and avoid them like the play Like closer to the avoid, but I don't avoid it like the play. I just like only use it when it's really useful. Who do we know that loves classes? I need to find them and I will make a tweet later
Like closer to the avoid, but I don't avoid it like the play. I just like only use it when it's really useful. Who do we know that loves classes? I need to find them and I will make a tweet later And please retweet and tag people that you think love classes and would like to teach about them because. I want to punch them in the face and you did say that we could skip this chapter, but I feel like it's. One of those things that I'm going to have to. Learn it at some point. Even though
And please retweet and tag people that you think love classes and would like to teach about them because. I want to punch them in the face and you did say that we could skip this chapter, but I feel like it's. One of those things that I'm going to have to. Learn it at some point. Even though Even though. I'm clear. I would say I would prefer to skip it, but like I understand if you. Want to go through that makes sense. Angular in particular out of the like the big comment free moops is like a big class proponent and like has a lot of good reasons. Going for you classes
Even though. I'm clear. I would say I would prefer to skip it, but like I understand if you. Want to go through that makes sense. Angular in particular out of the like the big comment free moops is like a big class proponent and like has a lot of good reasons. Going for you classes So if you know anyone in like the angular areas or like the I think view has like class effect. That's like that's so if you think people do I have. I mean we had a mechco on the show, but that was when he was doing more quick things
So if you know anyone in like the angular areas or like the I think view has like class effect. That's like that's so if you think people do I have. I mean we had a mechco on the show, but that was when he was doing more quick things So it could be kind of weird to be like, hey, you want to come back on the show and teach about classes since you made angular. That might be overkill for that. I could do. See if he says yes just to see I don't know
So it could be kind of weird to be like, hey, you want to come back on the show and teach about classes since you made angular. That might be overkill for that. I could do. See if he says yes just to see I don't know That could be kind of funny, but also at the same time I'm like, polish it's save that one for something more technical down the road. Because he was my fifth stream ever and having to explain things without even knowing what hack renews was was probably painful enough
That could be kind of funny, but also at the same time I'm like, polish it's save that one for something more technical down the road. Because he was my fifth stream ever and having to explain things without even knowing what hack renews was was probably painful enough It's good practice for him though. I think anyone who's super like baked green to set or should regularly
It's good practice for him though. I think anyone who's super like baked green to set or should regularly It possible to do things with people who say don't yet know what hacker uses like it's really really useful for us to stay grounded us being like people who've been around the industry for a while. Like brain of book or make for another. That's cool
It possible to do things with people who say don't yet know what hacker uses like it's really really useful for us to stay grounded us being like people who've been around the industry for a while. Like brain of book or make for another. That's cool That's cool. No, I'm glad I'm glad it's it's definitely fun to have. To have others on. So. All right, will. On that note, I am going to read us. It looks like. Let's see. Fine night singularity. I think you know I've hung out with them before
That's cool. No, I'm glad I'm glad it's it's definitely fun to have. To have others on. So. All right, will. On that note, I am going to read us. It looks like. Let's see. Fine night singularity. I think you know I've hung out with them before I've seen some of their streams or somebody on one of their streams. So let's go say hi to them. Let's do it. And thank you everyone for joining today. And we will see you next week. Okay, I'll see you. Josh raid will be writing Josh on Tuesdays is the goal. So it'll be like a double feature
I've seen some of their streams or somebody on one of their streams. So let's go say hi to them. Let's do it. And thank you everyone for joining today. And we will see you next week. Okay, I'll see you. Josh raid will be writing Josh on Tuesdays is the goal. So it'll be like a double feature All right, see y'all next week.
All right, see y'all next week.