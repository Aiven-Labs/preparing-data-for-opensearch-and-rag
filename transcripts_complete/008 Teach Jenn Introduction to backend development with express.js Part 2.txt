Hello, hello beautiful humans. Welcome back to teach Gen Tech and we're starting our week off again, which I'm pretty excited about with Ramona again. Hey, how we all doing? And that is one of my favorite parts because you're always so delightful So it's like a good way for the rest of us to start our week off. So Joy, I had such a good time last time. I'm excited to help back on and do it again. Yay
So it's like a good way for the rest of us to start our week off. So Joy, I had such a good time last time. I'm excited to help back on and do it again. Yay Yay. Alright, so as a heads up everyone, Ramona, if you are just catching the live today, Ramona was on the show last Monday and we were learning about like back end development with express and JS and we did not get through everything. So this is why you're back
Yay. Alright, so as a heads up everyone, Ramona, if you are just catching the live today, Ramona was on the show last Monday and we were learning about like back end development with express and JS and we did not get through everything. So this is why you're back And it was, yeah, so what we did, we got started in some express, yes, we added one, ah, end point to our app. So we need to expand a little bit on our API and also add a database layer to it, which is going to be super fun
And it was, yeah, so what we did, we got started in some express, yes, we added one, ah, end point to our app. So we need to expand a little bit on our API and also add a database layer to it, which is going to be super fun If anybody wants to check out the previous video, I just linked it in the chat. So if you need to catch up there, you will be able to find it. And we did go ahead and get started on some terminal, products because we needed to get set up and get us closer to just getting where we were last week
If anybody wants to check out the previous video, I just linked it in the chat. So if you need to catch up there, you will be able to find it. And we did go ahead and get started on some terminal, products because we needed to get set up and get us closer to just getting where we were last week So here we go. Alright, we're there. We are in the Ramona's rad folder, which is what we are calling this project and that is cool. Might argue with a folder name. Yes, yes. So that is where we are so far
So here we go. Alright, we're there. We are in the Ramona's rad folder, which is what we are calling this project and that is cool. Might argue with a folder name. Yes, yes. So that is where we are so far And now we need to reopen everything and I'm going to leave that up to you because I don't exactly know where to start again. Sure. So we're going to open up the folder. We're currently in in VS code. Do you remember how to do that? Code space dot. That's it. Yeah
And now we need to reopen everything and I'm going to leave that up to you because I don't exactly know where to start again. Sure. So we're going to open up the folder. We're currently in in VS code. Do you remember how to do that? Code space dot. That's it. Yeah That's it. Yeah. Let's see if it works because I've had to do this with, like it doesn't, and it is a command shifts P. Yeah. Okay. I keep enabling this. Yeah. And it's recently used. Well, that's odd. Yeah. So it just like doesn't like me. Oh. That did it. It likes it that time
That's it. Yeah. Let's see if it works because I've had to do this with, like it doesn't, and it is a command shifts P. Yeah. Okay. I keep enabling this. Yeah. And it's recently used. Well, that's odd. Yeah. So it just like doesn't like me. Oh. That did it. It likes it that time I have to install it like every time. A little annoying, but that's okay. Maybe there's something to be done there with like your term, your, your, your shell settings, shell being the program that runs commands in your terminal. That could be it. That totally could be it. Okay. Cool
I have to install it like every time. A little annoying, but that's okay. Maybe there's something to be done there with like your term, your, your, your shell settings, shell being the program that runs commands in your terminal. That could be it. That totally could be it. Okay. Cool Okay. Cool. So why don't we, we got a quick comment. There's a Z, Z, S, H thing. Wow. I cannot say that from go, go gadget. That is just. Yeah. Good to see you. Yeah. There is. Good to know. Um, wouldn't happen to have a link to that. Would you go go gadget? That'd be super helpful. Please
Okay. Cool. So why don't we, we got a quick comment. There's a Z, Z, S, H thing. Wow. I cannot say that from go, go gadget. That is just. Yeah. Good to see you. Yeah. There is. Good to know. Um, wouldn't happen to have a link to that. Would you go go gadget? That'd be super helpful. Please Please. So, um, cool. So we've got our VS code project here, which is our express backend. Um, tell you what, let's, let's quickly recap where we were and sort of get ourselves back up to speed before we start messing around with it again. Sound good? Yes. Awesome. Let's open up app. J.S
Please. So, um, cool. So we've got our VS code project here, which is our express backend. Um, tell you what, let's, let's quickly recap where we were and sort of get ourselves back up to speed before we start messing around with it again. Sound good? Yes. Awesome. Let's open up app. J.S J.S. and see what this does. So what we've got here is, yeah, we import express. We create an app based on that express dependency. We declare one endpoint to the root path that responds with some HTML. As a string saying, BRB sometime in the next month. Then in line eight. We were back. Love it
J.S. and see what this does. So what we've got here is, yeah, we import express. We create an app based on that express dependency. We declare one endpoint to the root path that responds with some HTML. As a string saying, BRB sometime in the next month. Then in line eight. We were back. Love it Love it. Yeah. That was, that was sooner than we, than we thought we'd be reoreak. Um, then on line eight, we set up our, um, our server, which is the program that listens out for requests online. Sorry on port. 3334. That when it starts up, it says, hey, I'm listening on this port
Love it. Yeah. That was, that was sooner than we, than we thought we'd be reoreak. Um, then on line eight, we set up our, um, our server, which is the program that listens out for requests online. Sorry on port. 3334. That when it starts up, it says, hey, I'm listening on this port So let's confirm that that's what it's doing. So to do that, we're going to run node. It's isn't node and then space app dot J.S. That's right. We're telling note, hey, run this file. And then we can go to the browser. This over three. And then local dot. 334. Yay. It worked
So let's confirm that that's what it's doing. So to do that, we're going to run node. It's isn't node and then space app dot J.S. That's right. We're telling note, hey, run this file. And then we can go to the browser. This over three. And then local dot. 334. Yay. It worked Yay. It worked. And we can confirm that. Hey, it's, uh, you know, it updated. Yeah. It ran. Yay, we're back, which is great. So what we're going to do next is start. It started building out an API. Let's not have this return. Yay. We're back anymore. Let's instead, um, return some, some data
Yay. It worked. And we can confirm that. Hey, it's, uh, you know, it updated. Yeah. It ran. Yay, we're back, which is great. So what we're going to do next is start. It started building out an API. Let's not have this return. Yay. We're back anymore. Let's instead, um, return some, some data Let's pretend we have an API. Ah, go go gadget. Got us a link. Thank you very much. Yeah. Thank you. Yeah. And, um, right. So let's remember this all started last week from, from wanting to make an app where we would store kind words that are shared about us. Mm hmm. You remember? Yes. Right
Let's pretend we have an API. Ah, go go gadget. Got us a link. Thank you very much. Yeah. Thank you. Yeah. And, um, right. So let's remember this all started last week from, from wanting to make an app where we would store kind words that are shared about us. Mm hmm. You remember? Yes. Right Right. And what I usually store. So what, what are these, what is a kind word? What is it that we want to display? We would want to display a set of messages that consist of the name of the person that sent it to us. What else? Uh, the message itself message itself. And, uh, sorry, date date
Right. And what I usually store. So what, what are these, what is a kind word? What is it that we want to display? We would want to display a set of messages that consist of the name of the person that sent it to us. What else? Uh, the message itself message itself. And, uh, sorry, date date Perfect. Those three. These are called attributes. These are the three attributes that make up a single. Now we need to come up with a name of the entity. Entity being the thing that we're storing and querying for. We could call it posts. Could call it words. That doesn't work. I'm for posts. Sure
Perfect. Those three. These are called attributes. These are the three attributes that make up a single. Now we need to come up with a name of the entity. Entity being the thing that we're storing and querying for. We could call it posts. Could call it words. That doesn't work. I'm for posts. Sure Sure. Um, I'm going to go with sure. Hey, Lee. Thank you for. So, right. So we want to send. We're going to send off this data as a collection of posts. Okay. Right. So in order to do that, let's, let's do some JavaScript. Um, let's help online. Oh, yeah, we can kill our server. Awesome
Sure. Um, I'm going to go with sure. Hey, Lee. Thank you for. So, right. So we want to send. We're going to send off this data as a collection of posts. Okay. Right. So in order to do that, let's, let's do some JavaScript. Um, let's help online. Oh, yeah, we can kill our server. Awesome Awesome. So between lines two and three, let's create a new line. And we're going to define a const to where we will store our posts. So we could just call it posts. No. The const equals post or you were right. You were right. Yeah. Right. But it's a plural. So this will be set to be equals
Awesome. So between lines two and three, let's create a new line. And we're going to define a const to where we will store our posts. So we could just call it posts. No. The const equals post or you were right. You were right. Yeah. Right. But it's a plural. So this will be set to be equals Uh, an array. Do you know, do you remember how to declare an array in JavaScript? I'm not quite. We want to use the square bracket notation. So this is an array, right? Right now it's empty because there's nothing in it. Right. Let's put some data in it. And these posts will be objects
Uh, an array. Do you know, do you remember how to declare an array in JavaScript? I'm not quite. We want to use the square bracket notation. So this is an array, right? Right now it's empty because there's nothing in it. Right. Let's put some data in it. And these posts will be objects We good with JavaScript objects. Yes. Good enough. Good enough. Good enough. Good, good enough is absolutely plenty. Let's create an object. Uh, that's done with the curly brackets. So let's hit enter. So this object as all posts are just going to be made up of three attributes. So let's call it
We good with JavaScript objects. Yes. Good enough. Good enough. Good enough. Good, good enough is absolutely plenty. Let's create an object. Uh, that's done with the curly brackets. So let's hit enter. So this object as all posts are just going to be made up of three attributes. So let's call it So let's call it. That's the name of the person who sent us the kind words. Sender. Now do I need to do a value equals sender or something like that? No, these are these are key value pairs in JavaScript, which means it'll be. All lower lower case key
So let's call it. That's the name of the person who sent us the kind words. Sender. Now do I need to do a value equals sender or something like that? No, these are these are key value pairs in JavaScript, which means it'll be. All lower lower case key So the key in this case is the name of the property, which is. So sender is the key. And remember, this is test data for us. So put in a space. And then a string. And now we'll put in the name. Any name. This is our test data. And then we'll put in a comma. So let's start with the one from
So the key in this case is the name of the property, which is. So sender is the key. And remember, this is test data for us. So put in a space. And then a string. And now we'll put in the name. Any name. This is our test data. And then we'll put in a comma. So let's start with the one from Yes, you read my mind. You read my mind. Yes. So that's our first key value pair. So after the string. Let's put in a comma. Hid return and now we'll do the second attribute, which was. Comment is good. Like message. Really. All world set. Yes. Yes. Great nyt. Clearly. TheGood
Yes, you read my mind. You read my mind. Yes. So that's our first key value pair. So after the string. Let's put in a comma. Hid return and now we'll do the second attribute, which was. Comment is good. Like message. Really. All world set. Yes. Yes. Great nyt. Clearly. TheGood Clearly. TheGood. not drop my AirPods, that would be helpful. But to say not only the date, which that one's pretty easy. Oh, but don't forget, don't forget, we're adding an adieu. Oh, the comment. So, come on, come on. That's why you're getting the underlying. Okay, and then, and the date
Clearly. TheGood. not drop my AirPods, that would be helpful. But to say not only the date, which that one's pretty easy. Oh, but don't forget, don't forget, we're adding an adieu. Oh, the comment. So, come on, come on. That's why you're getting the underlying. Okay, and then, and the date Today is, July, the team. But be careful. Dates are not strings. They're displayed as strings. But in JavaScript, we have a special data type for dates. Oh, I can give it to you. It's, it's capital, capital D date. So what you can do is remove the string, quote marks, and we'll make a date
Today is, July, the team. But be careful. Dates are not strings. They're displayed as strings. But in JavaScript, we have a special data type for dates. Oh, I can give it to you. It's, it's capital, capital D date. So what you can do is remove the string, quote marks, and we'll make a date But the capital gives us the indication that this is a JavaScript class. So we want to create a new space date. So if you go back to the beginning of the, of, so just before the capital D, put in a new N E W, but not capital, space, date, and let's remove that equals
But the capital gives us the indication that this is a JavaScript class. So we want to create a new space date. So if you go back to the beginning of the, of, so just before the capital D, put in a new N E W, but not capital, space, date, and let's remove that equals Now, we're in, we're doing is initializing a date. So we want to put in, I call them smooth brackets. Like, I don't know if that's correct term. And always when putting brackets, we want to not leave a space between the bracket and the keyword. That was a lot
Now, we're in, we're doing is initializing a date. So we want to put in, I call them smooth brackets. Like, I don't know if that's correct term. And always when putting brackets, we want to not leave a space between the bracket and the keyword. That was a lot That was a lot. What, what have we done here? We have created a new date instance. We can actually, let's do that. Let's go to the terminal or no, wait, let's open up your browser. No, don't need should have done this from the beginning. I apologize. Browser. Cool
That was a lot. What, what have we done here? We have created a new date instance. We can actually, let's do that. Let's go to the terminal or no, wait, let's open up your browser. No, don't need should have done this from the beginning. I apologize. Browser. Cool Browser. Cool. Could you open up the console? I don't know how to do that here. Like what page from any page? Oh, okay. We guess we'll go to Twitter. Twitter is a good call. That's always my default. So let's open up the console
Browser. Cool. Could you open up the console? I don't know how to do that here. Like what page from any page? Oh, okay. We guess we'll go to Twitter. Twitter is a good call. That's always my default. So let's open up the console Now, yeah, so what do we have here? We have a JavaScript we can play on. We can play with. Could you do me a favor and make it slightly bigger? I think it's like shift command plus. Nice. So really big now. That's perfect. I see it very well. Thank you
Now, yeah, so what do we have here? We have a JavaScript we can play on. We can play with. Could you do me a favor and make it slightly bigger? I think it's like shift command plus. Nice. So really big now. That's perfect. I see it very well. Thank you Thank you. What we can do here is essentially mess around with JavaScript. JavaScript. So for example, we can do one plus one. Here at the bottom where the little blue. Oh, thank you. Chevron is one plus one. In this keyboard, I'm going to get used to it. We can do. Yeah, if you hit enter
Thank you. What we can do here is essentially mess around with JavaScript. JavaScript. So for example, we can do one plus one. Here at the bottom where the little blue. Oh, thank you. Chevron is one plus one. In this keyboard, I'm going to get used to it. We can do. Yeah, if you hit enter It'll execute that JavaScript and show us what it returns. So this expression one plus one gives us two. Let's try it the same with new date. So on that automatically filled that in that school. Yeah. We break it. Hit enter. So that gives us what creating a new date does is gives us a date object
It'll execute that JavaScript and show us what it returns. So this expression one plus one gives us two. Let's try it the same with new date. So on that automatically filled that in that school. Yeah. We break it. Hit enter. So that gives us what creating a new date does is gives us a date object Immediately set to the current, the time at which you executed that command. If you run it again, if you press up, you can press up to do it. I think. Yeah. There we go. Yeah. So let's hit enter. Now notice the difference. The first time it was at 1015 20 with 29 seconds
Immediately set to the current, the time at which you executed that command. If you run it again, if you press up, you can press up to do it. I think. Yeah. There we go. Yeah. So let's hit enter. Now notice the difference. The first time it was at 1015 20 with 29 seconds Now it's at 1015 with 55 seconds. That doesn't mean that it's constantly updating. But rather that that object has its seconds value set to the moment that you hit enter. Do it again. It's 1614. That's fine
Now it's at 1015 with 55 seconds. That doesn't mean that it's constantly updating. But rather that that object has its seconds value set to the moment that you hit enter. Do it again. It's 1614. That's fine That's fine. So what we're doing is storing the current date and date extends to time, which is kind of a weird thing to say, but you know what I mean, right? Yeah. Yeah. Yeah. Cool. Thank you for going with me down the street. Let's wrap it all. Let's hop on back to BS code. So great
That's fine. So what we're doing is storing the current date and date extends to time, which is kind of a weird thing to say, but you know what I mean, right? Yeah. Yeah. Yeah. Cool. Thank you for going with me down the street. Let's wrap it all. Let's hop on back to BS code. So great So great. We've got a post set to lead loving these videos and date. Now our to add one more. Oh, yeah, go for it. Don't forget the comma. I think I was going to be platform and let's say we live. I remember my comments. Yeah. So here's an interesting quirk about JavaScript
So great. We've got a post set to lead loving these videos and date. Now our to add one more. Oh, yeah, go for it. Don't forget the comma. I think I was going to be platform and let's say we live. I remember my comments. Yeah. So here's an interesting quirk about JavaScript The last one doesn't require a comma, but it won't complain if you put it either. OK. I'm just going to I'm glad I'm glad for that. You can totally put them in. Nobody minds. All right. Go go gadget. I'm going to. OK. I think I'm. Ah, I see if I can read today. I think I'm going to now
The last one doesn't require a comma, but it won't complain if you put it either. OK. I'm just going to I'm glad I'm glad for that. You can totally put them in. Nobody minds. All right. Go go gadget. I'm going to. OK. I think I'm. Ah, I see if I can read today. I think I'm going to now Grock is it grokey or grokey? I think it's rocking. Grokey that opening up the browser and trying things out in the console kind of the JavaScript version of a Jupyter notebook. Are you familiar with Jupyter? No
Grock is it grokey or grokey? I think it's rocking. Grokey that opening up the browser and trying things out in the console kind of the JavaScript version of a Jupyter notebook. Are you familiar with Jupyter? No I think I think it's like a and I'm going to super get this wrong because I don't do a lot of Python myself. It's kind of like a Python playground where that you can write stuff in. So it's like a living notebook. I could be totally wrong. Yes. Yes
I think I think it's like a and I'm going to super get this wrong because I don't do a lot of Python myself. It's kind of like a Python playground where that you can write stuff in. So it's like a living notebook. I could be totally wrong. Yes. Yes Yes. Yes. I eventually want to get to Python once I learn enough about JavaScript. So yeah, you got it right. Nice. So go, go gadget. You'll have to come on or hang out with us when we get to Python. I have it on good authority that go go gadget is and it would be an excellent guess
Yes. Yes. I eventually want to get to Python once I learn enough about JavaScript. So yeah, you got it right. Nice. So go, go gadget. You'll have to come on or hang out with us when we get to Python. I have it on good authority that go go gadget is and it would be an excellent guess No pressure to to them. That's what I have to remember. Yay. Awesome. So right back here, let's let's define our first proper for our API. Let's keep the lines nine to 12. That'll be sort of our hello world. Let's add a new endpoint
No pressure to to them. That's what I have to remember. Yay. Awesome. So right back here, let's let's define our first proper for our API. Let's keep the lines nine to 12. That'll be sort of our hello world. Let's add a new endpoint So this will be a get request like before we can put it either before or after the one we currently have your call where we put it. So we can put it like on line 17. So it does have to be before they listen. Okay. So line 13 for example. Okay. So it would be app.get
So this will be a get request like before we can put it either before or after the one we currently have your call where we put it. So we can put it like on line 17. So it does have to be before they listen. Okay. So line 13 for example. Okay. So it would be app.getget. We're going to create a get endpoint for getting all of our posts. So the string. The string would be called posts. Yes. No. Yes. But this is what it shows so it can be cap. So that's not quite right. If you've worked. No, no, you're good. You're good
get. We're going to create a get endpoint for getting all of our posts. So the string. The string would be called posts. Yes. No. Yes. But this is what it shows so it can be cap. So that's not quite right. If you've worked. No, no, you're good. You're good You're good. So this is now we're doing we're finally doing some API design, which I'm quite excited about. Because and if you've designed if you've worked with APIs, you'll need what's called a path, right? A like I don't know API dot get hub dot com slash users slash repositories
You're good. So this is now we're doing we're finally doing some API design, which I'm quite excited about. Because and if you've designed if you've worked with APIs, you'll need what's called a path, right? A like I don't know API dot get hub dot com slash users slash repositories So we want to get slash posts. So forward slash exactly. So when we and we can we'll be able to try this out. We'll need our function to. Yep. That will look pretty much mostly the same. It's it. It's. And then you and squiggly. Yes. I like I like the term squiggly. It's good
So we want to get slash posts. So forward slash exactly. So when we and we can we'll be able to try this out. We'll need our function to. Yep. That will look pretty much mostly the same. It's it. It's. And then you and squiggly. Yes. I like I like the term squiggly. It's good It's good. It helps me like know which ones people are talking about. Totally. So let's now respond. Stought send our posts. Post. Let's try it out. Is it a street or. Great. Great question. We're going to be responding with our array of posts. Okay. So that the way you're doing it now. Perfect
It's good. It helps me like know which ones people are talking about. Totally. So let's now respond. Stought send our posts. Post. Let's try it out. Is it a street or. Great. Great question. We're going to be responding with our array of posts. Okay. So that the way you're doing it now. Perfect Perfect. Okay. Now let's fire up our server. And oh, forget to say. Yep. Somebody recently told me there's a way to get. VSCode to auto save. Which is what that's fancy. If you're like me and you forget to save all the time. Which I do a lot. So let's refresh this. This can be a lot more
Perfect. Okay. Now let's fire up our server. And oh, forget to say. Yep. Somebody recently told me there's a way to get. VSCode to auto save. Which is what that's fancy. If you're like me and you forget to save all the time. Which I do a lot. So let's refresh this. This can be a lot more So let's refresh this. This gives us yay. We're back. Why? Because we asked for the root path. But if we wanted to get the posts. Yep. Hey. Okay. So this looks good. This is giving us text. Right. Which we don't quite want. Because what we want to do instead is
So let's refresh this. This gives us yay. We're back. Why? Because we asked for the root path. But if we wanted to get the posts. Yep. Hey. Okay. So this looks good. This is giving us text. Right. Which we don't quite want. Because what we want to do instead is Respond with this data in such a way so that other apps can understand what it is that we're receiving. What does that mean? When, when for example. When a, let's say, let's say you've got a mobile app. Right. This is a lie. By the way, there's no phone in here. Like my phone's currently my webcam
Respond with this data in such a way so that other apps can understand what it is that we're receiving. What does that mean? When, when for example. When a, let's say, let's say you've got a mobile app. Right. This is a lie. By the way, there's no phone in here. Like my phone's currently my webcam Anyway, completely irrelevant. Let's say your phone is interacting with. Say you're logged into Twitter on your phone. What you're doing is. What you're doing is. Having your phone app send a request to the server asking for my latest tweets. Right. Okay
Anyway, completely irrelevant. Let's say your phone is interacting with. Say you're logged into Twitter on your phone. What you're doing is. What you're doing is. Having your phone app send a request to the server asking for my latest tweets. Right. Okay Right. Okay. The app, the server will tell the app, hey, this is how I formatted the app. The response, the data. Because there are different formats for this kind of data. I don't think we talked about XML
Right. Okay. The app, the server will tell the app, hey, this is how I formatted the app. The response, the data. Because there are different formats for this kind of data. I don't think we talked about XML Or do I seem to remember us talking about XML? Did we do ours? Do I seem to remember you and Anthony covering, covering RSS feeds? We talked about it, but we didn't create one. Right. Right. Yeah, I thought I thought I remembered that. Most RSS feeds are written in a format called XML. Right
Or do I seem to remember us talking about XML? Did we do ours? Do I seem to remember you and Anthony covering, covering RSS feeds? We talked about it, but we didn't create one. Right. Right. Yeah, I thought I thought I remembered that. Most RSS feeds are written in a format called XML. Right Right. No idea. And that isn't XML also like CSV. CSV isn't is a formatting, a text formatting data, a text formatting data, standard, format that is different from XML. XML is is formatted as a bunch of HTML like tags. Okay. Where CSV as the name says is comma separated values
Right. No idea. And that isn't XML also like CSV. CSV isn't is a formatting, a text formatting data, a text formatting data, standard, format that is different from XML. XML is is formatted as a bunch of HTML like tags. Okay. Where CSV as the name says is comma separated values And real quick, go, go gadget. You can like add those as many as you want. I'm copying and pasting them and saving them to what we're done today. So I can set all that up. So thank you. Yeah, thank you for sharing. So right. XML, CSV, there's a third one that you've actually worked with
And real quick, go, go gadget. You can like add those as many as you want. I'm copying and pasting them and saving them to what we're done today. So I can set all that up. So thank you. Yeah, thank you for sharing. So right. XML, CSV, there's a third one that you've actually worked with Called JSON. Oh, yeah. Okay. Yeah, we talked about that last time. Yep. In fact, we have a Jason file in our in our project. Do you remember which one? The one that's called dot Jason. Yes. Well, I mean, technically we have two, but it's the package. Jason
Called JSON. Oh, yeah. Okay. Yeah, we talked about that last time. Yep. In fact, we have a Jason file in our in our project. Do you remember which one? The one that's called dot Jason. Yes. Well, I mean, technically we have two, but it's the package. Jason Jason. And the reason this looks like a JavaScript object is because it pretty much is. It's Jason is short for JavaScript object notation. And this is a way of storing data that. This is a way of storing data that. That looks like JavaScript objects
Jason. And the reason this looks like a JavaScript object is because it pretty much is. It's Jason is short for JavaScript object notation. And this is a way of storing data that. This is a way of storing data that. That looks like JavaScript objects And it's like, I don't want to call it de facto, but it is. One of the most widely ones used ones in modern web development. So if you're doing stuff in Jason, you're pretty good to go. What does that mean for us? It means we need to format our posts to be in Jason. Really quick
And it's like, I don't want to call it de facto, but it is. One of the most widely ones used ones in modern web development. So if you're doing stuff in Jason, you're pretty good to go. What does that mean for us? It means we need to format our posts to be in Jason. Really quick Really quick. I don't know if I remember asking you this time. What is the difference between Jason and YAML? For formatting. Do we have, do you have a YAML file there? No, I'm just thinking about because a lot of it is comparing it to like things that I kind of know about. But. Sure
Really quick. I don't know if I remember asking you this time. What is the difference between Jason and YAML? For formatting. Do we have, do you have a YAML file there? No, I'm just thinking about because a lot of it is comparing it to like things that I kind of know about. But. Sure But. Sure. And then in when I worked at stoplight, the option for some of it was a JSON file or a YAML file. And so that's where I'm going with it. Not that it necessarily needs to be talked about right now. No, no, you're totally good
But. Sure. And then in when I worked at stoplight, the option for some of it was a JSON file or a YAML file. And so that's where I'm going with it. Not that it necessarily needs to be talked about right now. No, no, you're totally good And that is an excellent because I would argue that YAML and Jason and XML are pretty equivalent in functionality storing data. Right. Cool. You store you write data. So it's, it's, it's so instead of having the curly brackets and name. Well, there are colons in YAML
And that is an excellent because I would argue that YAML and Jason and XML are pretty equivalent in functionality storing data. Right. Cool. You store you write data. So it's, it's, it's so instead of having the curly brackets and name. Well, there are colons in YAML But yeah, it's just formatting. Cool. Thank you. And go go gadget very, helpfully and kindly shared the difference between YAML and Jason. Thank you. Super handy. So what I love about streaming is that folks are so helpful and send us links and stuff. It is here
But yeah, it's just formatting. Cool. Thank you. And go go gadget very, helpfully and kindly shared the difference between YAML and Jason. Thank you. Super handy. So what I love about streaming is that folks are so helpful and send us links and stuff. It is here It is here. I do want to point it out and I'll make sure it's in the comments. But I'm going to read it later. Awesome. Thank you, go go gadget. Yeah, thank you. So. What? That is so cool. Go go gadget used to be a librarian. Oh, my gosh, you're like one of my favorite kind of people
It is here. I do want to point it out and I'll make sure it's in the comments. But I'm going to read it later. Awesome. Thank you, go go gadget. Yeah, thank you. So. What? That is so cool. Go go gadget used to be a librarian. Oh, my gosh, you're like one of my favorite kind of people I'm not the best at references. I get frustrated at Google lane or looking for it. So thank you for joining today. I'm going to be a great person. I'm going to be a great person. You too need to team up. I would be fine. So full disclosure, I know Google gadget. So like. That's okay
I'm not the best at references. I get frustrated at Google lane or looking for it. So thank you for joining today. I'm going to be a great person. I'm going to be a great person. You too need to team up. I would be fine. So full disclosure, I know Google gadget. So like. That's okay That's okay. Highly recommend. Um, so, uh, app.js. So what we're going to do is respond in Jason. Okay. So let's, let's open up app.js again. So let's toggle away the project. Because we don't, we don't need to see all of it. Yeah. Um, so response dots. So line 14 response dots send
That's okay. Highly recommend. Um, so, uh, app.js. So what we're going to do is respond in Jason. Okay. So let's, let's open up app.js again. So let's toggle away the project. Because we don't, we don't need to see all of it. Yeah. Um, so response dots. So line 14 response dots send Here we're sending what's called a plain text response. Now we're going to talk about HTTP. We talked about HTTP last time, right? We talked about different request types. And also is taking place here is where send. We're also telling. We're telling the recipient
Here we're sending what's called a plain text response. Now we're going to talk about HTTP. We talked about HTTP last time, right? We talked about different request types. And also is taking place here is where send. We're also telling. We're telling the recipient Hey, this is the kind of data that I'm responding with. This is the format that I'm responding in. And this is, this is a piece of text called a header. So a response is kind of like a document. And it's got some headers to tell you what to expect from the data that you're getting
Hey, this is the kind of data that I'm responding with. This is the format that I'm responding in. And this is, this is a piece of text called a header. So a response is kind of like a document. And it's got some headers to tell you what to expect from the data that you're getting So what you're essentially saying with a header is. Here, ye, here, ye, I am a Jason response or I am a plain text response. Or I am a. Some other kind of response, right? Now, because we are, because express is a very nice piece of tech, it actually gives us a shortcut to be able to do that
So what you're essentially saying with a header is. Here, ye, here, ye, I am a Jason response or I am a plain text response. Or I am a. Some other kind of response, right? Now, because we are, because express is a very nice piece of tech, it actually gives us a shortcut to be able to do that So let's replace send in line 14 with Jason. And let's restart. Let's save and restart. Now you're probably looking at that at that and thinking, well, hello, Twitch. It's like it went way too high. There we go. Now you're probably looking at that and thinking, well, that's the same
So let's replace send in line 14 with Jason. And let's restart. Let's save and restart. Now you're probably looking at that at that and thinking, well, hello, Twitch. It's like it went way too high. There we go. Now you're probably looking at that and thinking, well, that's the same And the reason it is is because to the browser, it is. The browser got a string of Jason and said, well, I'll just display that string. Whatever you say. Okay. But when we start using this API and say a mobile app or in some kind of front end development app
And the reason it is is because to the browser, it is. The browser got a string of Jason and said, well, I'll just display that string. Whatever you say. Okay. But when we start using this API and say a mobile app or in some kind of front end development app Now it's going to be a lot clever and say like, aha, we're dealing with Jason here. Which is all well and good. But we still, we still, we still got stuff to do here. So let's do, let's make our lives easier. I don't know about you, but it's getting a little bit. Is the correct form annoying
Now it's going to be a lot clever and say like, aha, we're dealing with Jason here. Which is all well and good. But we still, we still, we still got stuff to do here. So let's do, let's make our lives easier. I don't know about you, but it's getting a little bit. Is the correct form annoying It's getting a bit cumbersome to restart the server every time we. Make a change. Yeah. So let's set up something called node mode, not node mom, not even on. I don't know how to pronounce it. So let's go back to the terminal. Shut down our server
It's getting a bit cumbersome to restart the server every time we. Make a change. Yeah. So let's set up something called node mode, not node mom, not even on. I don't know how to pronounce it. So let's go back to the terminal. Shut down our server And we're going to install the the NPM package node, which is node and then m o n. So first we need to NPM and then install and then the name of the package. And then node. Oh, afterwards. No, it's one word. So it's node mom. Sorry, I just I described that badly
And we're going to install the the NPM package node, which is node and then m o n. So first we need to NPM and then install and then the name of the package. And then node. Oh, afterwards. No, it's one word. So it's node mom. Sorry, I just I described that badly Mon or MON like the second part of my second half of my name. Yeah. Okay, there we go. I'll get there. No, you're good. Yay. So now I even installed something called node mom. Quick, quick, do me a quick favor of please. Let's try running node mom. So and just write node mom into your terminal
Mon or MON like the second part of my second half of my name. Yeah. Okay, there we go. I'll get there. No, you're good. Yay. So now I even installed something called node mom. Quick, quick, do me a quick favor of please. Let's try running node mom. So and just write node mom into your terminal Let's see what happens. Good. That's fine. We've installed this tool called node month, which in turn, installs an executable file. Let's go over to package.json. Oh, actually, no, let's stay in the terminal for a second
Let's see what happens. Good. That's fine. We've installed this tool called node month, which in turn, installs an executable file. Let's go over to package.json. Oh, actually, no, let's stay in the terminal for a second I'm sorry to take us on so many tanges, but I swear that you're going to love this. Let's type in dot forward slash. And so this is the first one. I'm going to type in node modules. And don't forget you can. You can tap to auto complete. There's an underscore in between. And then enter
I'm sorry to take us on so many tanges, but I swear that you're going to love this. Let's type in dot forward slash. And so this is the first one. I'm going to type in node modules. And don't forget you can. You can tap to auto complete. There's an underscore in between. And then enter And then enter. You know, not yet, dot bin. Oh, no, no, keep that slash. Dot bin b i n. forward slash node mon. Now, don't hit enter just yet. So what's going on here? When we install a package, it also installs all of the executable files, all of the executable scripts into this dot bin folder
And then enter. You know, not yet, dot bin. Oh, no, no, keep that slash. Dot bin b i n. forward slash node mon. Now, don't hit enter just yet. So what's going on here? When we install a package, it also installs all of the executable files, all of the executable scripts into this dot bin folder So we've got node mon. Now we're going to pass, and now we're going to give it the name of the file that it should monitor. So let's put in space. And then app.js. I have no idea if this is going to work, by the way
So we've got node mon. Now we're going to pass, and now we're going to give it the name of the file that it should monitor. So let's put in space. And then app.js. I have no idea if this is going to work, by the way And it knows that it's going to monitor this one because we're in its folder that we're saying, hey, run and watch. Yeah. See? So it's like, hey, I'm watching it. We could actually try it out. Let's, gosh, I don't know. Let's change app.js real quick, any change. Okay. Two seconds. Take your time
And it knows that it's going to monitor this one because we're in its folder that we're saying, hey, run and watch. Yeah. See? So it's like, hey, I'm watching it. We could actually try it out. Let's, gosh, I don't know. Let's change app.js real quick, any change. Okay. Two seconds. Take your time Take your time. Let's add an enter between line 15 and 16, for example, because we're going to add a post request in a second. Okay, save that. Now go back to your terminal. Look at that. Restarting duty changes. So it started up node.js, node.js again, which is cool
Take your time. Let's add an enter between line 15 and 16, for example, because we're going to add a post request in a second. Okay, save that. Now go back to your terminal. Look at that. Restarting duty changes. So it started up node.js, node.js again, which is cool So now we'll never have to restart the server again. Oh, yay. That's good. We can try it out. How about, let's change, yay, we're back to yay, we're live. I was, you know, you read my mind. Save it. Yeah. refresh your browser. Too many things on one screen. Yes. Look at that
So now we'll never have to restart the server again. Oh, yay. That's good. We can try it out. How about, let's change, yay, we're back to yay, we're live. I was, you know, you read my mind. Save it. Yeah. refresh your browser. Too many things on one screen. Yes. Look at that Yes. Look at that. So now we don't refresh anymore. This is, and this is something that you do in a lot of projects. So when you're in development mode, you don't want to be starting and shutting down your server all the time. Just use node.mon. Super handy. So if I, and I need to install node
Yes. Look at that. So now we don't refresh anymore. This is, and this is something that you do in a lot of projects. So when you're in development mode, you don't want to be starting and shutting down your server all the time. Just use node.mon. Super handy. So if I, and I need to install nodemon in each project, like if I wanted to go back into Anthony's with React, I would need to be in that folder too. I believe the project you created with React might have already set up node.mon or an equivalent. Maybe. Most likely, yes. Okay. Cool
mon in each project, like if I wanted to go back into Anthony's with React, I would need to be in that folder too. I believe the project you created with React might have already set up node.mon or an equivalent. Maybe. Most likely, yes. Okay. Cool Okay. Cool. Because it's a, it's, it's, that project is created from a template. And so like the people who make this template anticipate what we're going to need. Okay. Go on it. Okay. Okay. So we are now going to, we got to get to the database part. Let's add another endpoint to our. Yeah
Okay. Cool. Because it's a, it's, it's, that project is created from a template. And so like the people who make this template anticipate what we're going to need. Okay. Go on it. Okay. Okay. So we are now going to, we got to get to the database part. Let's add another endpoint to our. Yeah Yeah. Which is going to be a post request. So app.post. app.post. Now this will be the same route. So it'll be posts. These are things get a little weird. But we'll get there. Same. Okay. Okay. The back. Enter. Now, for now, we're going to have this post request. Just add a new post
Yeah. Which is going to be a post request. So app.post. app.post. Now this will be the same route. So it'll be posts. These are things get a little weird. But we'll get there. Same. Okay. Okay. The back. Enter. Now, for now, we're going to have this post request. Just add a new post Like with node with generic date with data that we're building in now. So do you know how to add a member to an array? No. So we've got access to our posts, right? From line three, we've got our, so we're going to call posts. .push. So this will push something new onto our array
Like with node with generic date with data that we're building in now. So do you know how to add a member to an array? No. So we've got access to our posts, right? From line three, we've got our, so we're going to call posts. .push. So this will push something new onto our array Now we need to give it an our parameter. So curl a smooth brackets. And we want to put in an object that represents a new post. That's curly brackets. So let's hit enter. Now let's put in some generic data once again. The four same attributes. But let's make it distinguishable from the first one
Now we need to give it an our parameter. So curl a smooth brackets. And we want to put in an object that represents a new post. That's curly brackets. So let's hit enter. Now let's put in some generic data once again. The four same attributes. But let's make it distinguishable from the first one So let's make it, well, let's just change change it to whatever. I have one. Oh, you do. Nice. Yes. For long, I got to get their name. Oh, I forgot my camera. I forgot my camera. You got to put, don't forget the comma, yeah
So let's make it, well, let's just change change it to whatever. I have one. Oh, you do. Nice. Yes. For long, I got to get their name. Oh, I forgot my camera. I forgot my camera. You got to put, don't forget the comma, yeah If it's too long like that, do I just put it into one way? I think you can do triple quad marks to do a multi line string. Let's just put it all on one string. Yeah, I will. One line pardon me. I'll put a space. That one. You capture space. And it doesn't need to have a nice day. That's okay
If it's too long like that, do I just put it into one way? I think you can do triple quad marks to do a multi line string. Let's just put it all on one string. Yeah, I will. One line pardon me. I'll put a space. That one. You capture space. And it doesn't need to have a nice day. That's okay That's okay. All right. And then, oh, gotta put my comma all the way down here. Yeah. No. There we go. And then date. New date. And that one. Yeah. Yeah. And safe. Nice. And you know what? Let's just so we can just so we can monitor on our terminal
That's okay. All right. And then, oh, gotta put my comma all the way down here. Yeah. No. There we go. And then date. New date. And that one. Yeah. Yeah. And safe. Nice. And you know what? Let's just so we can just so we can monitor on our terminal Let's put a console log added new, added new post. Oh, we. Yeah, you're good. Okay. Awesome. Drop log, right? Yep. Wait, would this be a string? Okay. Is that it? Perfect. So let's save that. Now let's go back to our browser. And go to slash posts. Now we see here our Jason data of our single post
Let's put a console log added new, added new post. Oh, we. Yeah, you're good. Okay. Awesome. Drop log, right? Yep. Wait, would this be a string? Okay. Is that it? Perfect. So let's save that. Now let's go back to our browser. And go to slash posts. Now we see here our Jason data of our single post You're probably wondering, okay, but how do I post? And certainly can't do that with the way with how we've been doing it so far. Why? That's because when you put an address in a location bar in a browser, it's sending off a get request because of what's the get data
You're probably wondering, okay, but how do I post? And certainly can't do that with the way with how we've been doing it so far. Why? That's because when you put an address in a location bar in a browser, it's sending off a get request because of what's the get data To post data from a browser, most of the time, what we do is fill in an HTML form. So we could fill in an HTML form. But that would require creating an HTML file
To post data from a browser, most of the time, what we do is fill in an HTML form. So we could fill in an HTML form. But that would require creating an HTML file So my question to you, Jen, is do you want to quickly whip up an HTML file to send off that form? Or should we be lazy and do it with a terminal command? Terminal command. Terminal command. Good. So let's now, the problem is you're currently running your server here
So my question to you, Jen, is do you want to quickly whip up an HTML file to send off that form? Or should we be lazy and do it with a terminal command? Terminal command. Terminal command. Good. So let's now, the problem is you're currently running your server here And I don't want to, I don't know about you, but I don't want to stop the server. It's doing its thing. Okay. Besides, we need to have it running so that we can send the post request. So let's open a tab. That would be command T. Just like in a browser. Okay
And I don't want to, I don't know about you, but I don't want to stop the server. It's doing its thing. Okay. Besides, we need to have it running so that we can send the post request. So let's open a tab. That would be command T. Just like in a browser. Okay Okay. Now, yes, we've got a, we've got it running, we've still got it running on tab one, and now we can do stuff here. Now, we're going to be using a tool on the terminal used for sending HTTP requests called curl. Let's hit enter and see if it's installed on your computer. It is nice
Okay. Now, yes, we've got a, we've got it running, we've still got it running on tab one, and now we can do stuff here. Now, we're going to be using a tool on the terminal used for sending HTTP requests called curl. Let's hit enter and see if it's installed on your computer. It is nice It is nice. So by the way, I think it's short for, I don't know what this C is, but URL, you know, URL, right? Yeah. Right. Cool. So let's curl. So URL. Space dash capital X. This is to tell it, we're going to do this kind of HTTP request. So put in a space. And now in all caps post space
It is nice. So by the way, I think it's short for, I don't know what this C is, but URL, you know, URL, right? Yeah. Right. Cool. So let's curl. So URL. Space dash capital X. This is to tell it, we're going to do this kind of HTTP request. So put in a space. And now in all caps post space And now we're going to put in the URL. So that's HTTP. C. Cullen. Forward slash forward slash local host. Cullen. 3334. Forward slash posts. Now, yeah. And that's it. It's doing a thing. No idea if this is going to work. By the way, as always. It is doing a thing. It is doing a thinking
And now we're going to put in the URL. So that's HTTP. C. Cullen. Forward slash forward slash local host. Cullen. 3334. Forward slash posts. Now, yeah. And that's it. It's doing a thing. No idea if this is going to work. By the way, as always. It is doing a thing. It is doing a thinking It's taking oddly long. I have to be honest. Let's go back to tab one. Hey, it out of the new post. Well, then let's refresh here. Hey, there you go. It out of the. That's exciting. What I'm confused about. Go back to tab two. It did add the new post. But this is still running
It's taking oddly long. I have to be honest. Let's go back to tab one. Hey, it out of the new post. Well, then let's refresh here. Hey, there you go. It out of the. That's exciting. What I'm confused about. Go back to tab two. It did add the new post. But this is still running Do you know what I mean? Yeah. So I think. Well, if you hit control, see, that's good. But I think the problem is that it thinks the process is still running. So here's what we're going to do. Let's return. So go back to your app.js. And line between line 24 and 25. Let's return
Do you know what I mean? Yeah. So I think. Well, if you hit control, see, that's good. But I think the problem is that it thinks the process is still running. So here's what we're going to do. Let's return. So go back to your app.js. And line between line 24 and 25. Let's return Let's return. Oh, sorry, just type in return. Oh, save that. No idea if this is going to work by the way. As always. Now, hit up. A. Yeah, do it. Oh, would you look at that? It's still that's that's very odd. Let's see. I'm going to Google that out. Yeah, because it added a new post. So let's see
Let's return. Oh, sorry, just type in return. Oh, save that. No idea if this is going to work by the way. As always. Now, hit up. A. Yeah, do it. Oh, would you look at that? It's still that's that's very odd. Let's see. I'm going to Google that out. Yeah, because it added a new post. So let's see So let's see. Curl post request. Not showing response. Yeah. Press. Yes. The process and express JS. And content type is not mentioned. Ah, party. Sir, I'm doing. So I believe the problem is that in our curl request, reply empty from server
So let's see. Curl post request. Not showing response. Yeah. Press. Yes. The process and express JS. And content type is not mentioned. Ah, party. Sir, I'm doing. So I believe the problem is that in our curl request, reply empty from server Did you do that? Or is that something it did automatically? No, I think I did it because I just changed the name to see if it would change. Yeah, ah, okay. When it did update again, but it, um, if you when I saved it, it said empty reply from server
Did you do that? Or is that something it did automatically? No, I think I did it because I just changed the name to see if it would change. Yeah, ah, okay. When it did update again, but it, um, if you when I saved it, it said empty reply from server But it did update it because I changed the name, uh, to yo. And there is. Need to run it again. And it freezes. But it added it back properly. Nice. So I suspect, let's go back to our terminal and hit control C. Remember what I was talking about headers? We didn't specify a header for our request
But it did update it because I changed the name, uh, to yo. And there is. Need to run it again. And it freezes. But it added it back properly. Nice. So I suspect, let's go back to our terminal and hit control C. Remember what I was talking about headers? We didn't specify a header for our request Okay. Let's try adding one. So go back to our terminal. Hit up. Now move your cursor with your keyboard, like with the left arrow key, over to just after post between post and HTTP. Now I'm going to send you some stuff that will just cover. I'm going to send it to you on the private chat. Okay
Okay. Let's try adding one. So go back to our terminal. Hit up. Now move your cursor with your keyboard, like with the left arrow key, over to just after post between post and HTTP. Now I'm going to send you some stuff that will just cover. I'm going to send it to you on the private chat. Okay Okay. Paste that in, please. It's kind of long to, to, to have me spell out to you. And do we need spaces? You will need a space after the post. You see where it says post-h right now? Oh, yes. Nice. So what we're saying here is, hey, to this post request, add this header
Okay. Paste that in, please. It's kind of long to, to, to have me spell out to you. And do we need spaces? You will need a space after the post. You see where it says post-h right now? Oh, yes. Nice. So what we're saying here is, hey, to this post request, add this header And the header has this content. It's content type. And we're saying, hey, the request I'm sending to you is formatted in Jason. Oh, it added it again. Did we run it? Oh, it, and it didn't finish. Maybe I'm wrong. Hold on. Express. But it's kind of interesting that it added it twice
And the header has this content. It's content type. And we're saying, hey, the request I'm sending to you is formatted in Jason. Oh, it added it again. Did we run it? Oh, it, and it didn't finish. Maybe I'm wrong. Hold on. Express. But it's kind of interesting that it added it twice No, it added, it didn't add it twice. You added it twice by running the request twice. Run it again and it'll add it again. Hmm. Try. Try, uh, go back to app.js. And replace return with response.end. I have no idea if this is going to work. I'm just looking at docs as we do this
No, it added, it didn't add it twice. You added it twice by running the request twice. Run it again and it'll add it again. Hmm. Try. Try, uh, go back to app.js. And replace return with response.end. I have no idea if this is going to work. I'm just looking at docs as we do this And yeah, and then smooth brackets. Great. Yeah. You want the one with, uh, the JSON or without the JSON? Yeah, let's do it the one with with JSON. Hey, really fast. Yay, which is good. And, nay, we're there once. Yay
And yeah, and then smooth brackets. Great. Yeah. You want the one with, uh, the JSON or without the JSON? Yeah, let's do it the one with with JSON. Hey, really fast. Yay, which is good. And, nay, we're there once. Yay Yay. So this is cool, except, um, it's just going to add the same data every time, which is not what we want. Right. So what we can do in a post request is also, when we're sending a post request, we can also send data. Okay. So tell you what, uh, let's go back to the terminal
Yay. So this is cool, except, um, it's just going to add the same data every time, which is not what we want. Right. So what we can do in a post request is also, when we're sending a post request, we can also send data. Okay. So tell you what, uh, let's go back to the terminal And this is where going to things are going to get a little bit bulky. So press up. Space. Dash lowercase d. Short for data. Enter. Yes. No, no, no, no, sorry, sorry. Thank you. Uh, space. And then a string. But let's make this a single quote string. Nice
And this is where going to things are going to get a little bit bulky. So press up. Space. Dash lowercase d. Short for data. Enter. Yes. No, no, no, no, sorry, sorry. Thank you. Uh, space. And then a string. But let's make this a single quote string. Nice Nice. Now we're going to write our JSON as we have before. In fact, tell you what, go back to the browser. Uh, and copy everything, copy, just copy the body of the whole response of the, of the second one. So from curly bracket to curly bracket, include the curly bracket though
Nice. Now we're going to write our JSON as we have before. In fact, tell you what, go back to the browser. Uh, and copy everything, copy, just copy the body of the whole response of the, of the second one. So from curly bracket to curly bracket, include the curly bracket though Curly bracket, curly bracket. Okay. Go back to the terminal and give it a big old paste. Now hit enter. Yeah. Okay. Oh, be quote. That means we didn't terminate a string somewhere. That doesn't make sense. We did terminate the string. Oh, oh, oh, my gosh. Hit, commit, control C
Curly bracket, curly bracket. Okay. Go back to the terminal and give it a big old paste. Now hit enter. Yeah. Okay. Oh, be quote. That means we didn't terminate a string somewhere. That doesn't make sense. We did terminate the string. Oh, oh, oh, my gosh. Hit, commit, control C I know what the problem is. Now let's try again. And please do me a favor and remove all apostrophes from Mr. Cidarth's, uh, message. I think I see an Ive hesitated to DM people. Oh, no, no, no, not those. No, no, no, no, no, no, that can keep those on platform. I'm sorry I was unclear
I know what the problem is. Now let's try again. And please do me a favor and remove all apostrophes from Mr. Cidarth's, uh, message. I think I see an Ive hesitated to DM people. Oh, no, no, no, not those. No, no, no, no, no, no, that can keep those on platform. I'm sorry I was unclear Okay, hold on. Um, okay. Um, maybe hit control C and press up again. Okay. Now move your left arrow key. Let's see. Hey, Jen, thank you so much for putting for. Oh, you can't go up. You can always. Okay. Oh, yeah, you can, it's, it's one line
Okay, hold on. Um, okay. Um, maybe hit control C and press up again. Okay. Now move your left arrow key. Let's see. Hey, Jen, thank you so much for putting for. Oh, you can't go up. You can always. Okay. Oh, yeah, you can, it's, it's one line So let's see, thank you so much on behalf of people who are still figure out. I've hesitated. I think that's the only apostrophe in there. You know what the problem is, it's treating that apostrophe as ending the Jason string. Oh, yeah, let's leave a typo in there. Yeah. Cool
So let's see, thank you so much on behalf of people who are still figure out. I've hesitated. I think that's the only apostrophe in there. You know what the problem is, it's treating that apostrophe as ending the Jason string. Oh, yeah, let's leave a typo in there. Yeah. Cool Yeah. Cool. Now, of course, if we go and refresh our browser, I mean, we're still using the hard wire data. So it doesn't mean anything. Right. But this should now give us access to the Jason data. So let's go back to app.js. And let's console log. Uh, sorry, between lines 17 and 18. Okay
Yeah. Cool. Now, of course, if we go and refresh our browser, I mean, we're still using the hard wire data. So it doesn't mean anything. Right. But this should now give us access to the Jason data. So let's go back to app.js. And let's console log. Uh, sorry, between lines 17 and 18. Okay Okay. So console log, uh, request.body. Nope, no string. Because we want to get that, that data. So request our body. Let's give it a try. Did you send? Yep. Yeah, then send the request again. Now let's go back to tab one and have a look. Undefined. So that didn't work
Okay. So console log, uh, request.body. Nope, no string. Because we want to get that, that data. So request our body. Let's give it a try. Did you send? Yep. Yeah, then send the request again. Now let's go back to tab one and have a look. Undefined. So that didn't work What we tried logging something that doesn't exist, I thought it would exist. I was wrong. So, uh, let's go back to app.js while I look up something real quick. Ha, ha, ha, ha. What? Process Jason. So let's have a request dot body then. That should be right
What we tried logging something that doesn't exist, I thought it would exist. I was wrong. So, uh, let's go back to app.js while I look up something real quick. Ha, ha, ha, ha. What? Process Jason. So let's have a request dot body then. That should be right Uh, if you are using valid Jason and posting it with content type application, Jason, then you can use a body parser middleware. Ha, oh. Ah ha. Sorry, I know that's a lot of, aha, that's not very helpful. Let's go back to the top real quick. To the top, the top of our app dot Jason
Uh, if you are using valid Jason and posting it with content type application, Jason, then you can use a body parser middleware. Ha, oh. Ah ha. Sorry, I know that's a lot of, aha, that's not very helpful. Let's go back to the top real quick. To the top, the top of our app dot Jason So, um, between lines two and three, we're going to add a middleware. So app.use. And then in brackets, express dot Jason. And that Jason will also have brackets. Perfect. What we're doing here is telling express, hey, process Jason, please
So, um, between lines two and three, we're going to add a middleware. So app.use. And then in brackets, express dot Jason. And that Jason will also have brackets. Perfect. What we're doing here is telling express, hey, process Jason, please Oh, because we added express in here, but we didn't add Jason in here for access to use Jason. Exactly. So let's send in that request again. Let's see what happens. Go back to tab one. Oh, um, tab one added new post. Hey, hey, good
Oh, because we added express in here, but we didn't add Jason in here for access to use Jason. Exactly. So let's send in that request again. Let's see what happens. Go back to tab one. Oh, um, tab one added new post. Hey, hey, good Hey, hey, good. This is, this is excellent because it means that now we have access to. We have we can, we can, we can now process this data. Okay. So let's go back to our app dot JS. And after this, we'll finally be able to install, do some databases. Okay. So, uh, posts dot push line 20. Okay
Hey, hey, good. This is, this is excellent because it means that now we have access to. We have we can, we can, we can now process this data. Okay. So let's go back to our app dot JS. And after this, we'll finally be able to install, do some databases. Okay. So, uh, posts dot push line 20. Okay Okay. Sorry, before we do that, we need to turn this data from Jason to an object. Okay. Because right now, because Jason is a string, what we sent it is a string. You know what I mean? Yes. Like, oh, but request up. I'm sorry, ignore what I said. That is a JavaScript object. So online 21
Okay. Sorry, before we do that, we need to turn this data from Jason to an object. Okay. Because right now, because Jason is a string, what we sent it is a string. You know what I mean? Yes. Like, oh, but request up. I'm sorry, ignore what I said. That is a JavaScript object. So online 21 So online 21. Let's replace sit-art. I'm sorry. Is it sit-art? I am bad at the pronunciation. I'm not sure. Okay. Um, sorry, sorry if I miss, I'm sorry if I print miss pronounced it. seem to remember. Yeah. Um, let's remove that string altogether. Including the quote marks
So online 21. Let's replace sit-art. I'm sorry. Is it sit-art? I am bad at the pronunciation. I'm not sure. Okay. Um, sorry, sorry if I miss, I'm sorry if I print miss pronounced it. seem to remember. Yeah. Um, let's remove that string altogether. Including the quote marks Oh, no, no, no, no, not the object. Just. Just. Yeah. Okay. And we're going to replace that with request dot body dot sender. Excellent. Let's do the same for the other three attributes. Now be careful. Um, can you scroll to the left? We don't want the message to be said to the request body sender
Oh, no, no, no, no, not the object. Just. Just. Yeah. Okay. And we're going to replace that with request dot body dot sender. Excellent. Let's do the same for the other three attributes. Now be careful. Um, can you scroll to the left? We don't want the message to be said to the request body sender You want to be set to request body post? No, the post is the whole object. This is very specifically is. So request. Our body is that object that is made up of those four attributes that we're sending from a client to the server, right? Right
You want to be set to request body post? No, the post is the whole object. This is very specifically is. So request. Our body is that object that is made up of those four attributes that we're sending from a client to the server, right? Right It's made up of a sender, a message, a date, and a platform. Oh, message got it. Yeah. Exactly. Free for date. Now, this is interesting. Do we really need to send a date or should we just let the server create it? I think we can create it. Yeah. Yeah. Perfect
It's made up of a sender, a message, a date, and a platform. Oh, message got it. Yeah. Exactly. Free for date. Now, this is interesting. Do we really need to send a date or should we just let the server create it? I think we can create it. Yeah. Yeah. Perfect Yeah. Perfect. Hey, and say, and let's, let's remove the console log online 19. Do we need it? I don't think we do. We already know what it looks like. Cool. Let's send that post request again. This one? Yeah. And if we want, we can, or we can send a different one. It's up to us
Yeah. Perfect. Hey, and say, and let's, let's remove the console log online 19. Do we need it? I don't think we do. We already know what it looks like. Cool. Let's send that post request again. This one? Yeah. And if we want, we can, or we can send a different one. It's up to us It's up to us. Just to see what it looks like now. Probably the same. Yep. Yep. With one difference, I've hesitated no longer has the apostrophe. Oh, yes. But that's it. So now we can add posts dynamically. Which is cool. Okay
It's up to us. Just to see what it looks like now. Probably the same. Yep. Yep. With one difference, I've hesitated no longer has the apostrophe. Oh, yes. But that's it. So now we can add posts dynamically. Which is cool. Okay Okay. So now we've got, now we've got an API where we can get all of the posts and we can add new posts. Okay. Which is all well and good until we have to shut down our server. Or restart it. What happens? Our posts get set to the initial blank state of having just one, which is not very helpful
Okay. So now we've got, now we've got an API where we can get all of the posts and we can add new posts. Okay. Which is all well and good until we have to shut down our server. Or restart it. What happens? Our posts get set to the initial blank state of having just one, which is not very helpful This is where a database comes in. Yay. So let's install a database. And for the purposes of this exercise, there are the purposes of this, of this session, we're going to install something called MongoDB. So let's actually kill our server. Because we're going to do some NPM install stuff
This is where a database comes in. Yay. So let's install a database. And for the purposes of this exercise, there are the purposes of this, of this session, we're going to install something called MongoDB. So let's actually kill our server. Because we're going to do some NPM install stuff So what is MongoDB? MongoDB is a database, which is a program. MongoDB is a database, which is a program, whose purpose is to store and retrieve data. So what we do with a database is declare a schema. We call it the term schema. schema is like kind of like a blueprint. I like that. Yeah. Yeah
So what is MongoDB? MongoDB is a database, which is a program. MongoDB is a database, which is a program, whose purpose is to store and retrieve data. So what we do with a database is declare a schema. We call it the term schema. schema is like kind of like a blueprint. I like that. Yeah. Yeah Yeah. Yeah. Exactly. So before we install MongoDB, we're actually going to install a JavaScript package that acts as a layer between us, the programmer, and MongoDB. Okay. Right? This is called the Mongoose. Okay. So let's install the package Mongoose with lowercase m. Okay. So that is NPM
Yeah. Yeah. Exactly. So before we install MongoDB, we're actually going to install a JavaScript package that acts as a layer between us, the programmer, and MongoDB. Okay. Right? This is called the Mongoose. Okay. So let's install the package Mongoose with lowercase m. Okay. So that is NPM So that is NPM. Install Mongoose. That's it. Perfect. Yay. I want to see what the term is. Because Mongoose is, as I said, a layer around it
So that is NPM. Install Mongoose. That's it. Perfect. Yay. I want to see what the term is. Because Mongoose is, as I said, a layer around it And there's a term for, there's a special term for these layers that act between the programming language and the database, which is ORM, which is short for, I think it's object relational mapping. Yes. Object relational mapping. So this is mapping posts from us to MongoDB
And there's a term for, there's a special term for these layers that act between the programming language and the database, which is ORM, which is short for, I think it's object relational mapping. Yes. Object relational mapping. So this is mapping posts from us to MongoDB But of course, we've installed Mongoose. Now we're going to install MongoDB. Now let's see here. That's what you have there. Is there an easy way to do it? Here. I'm going to send you a link. If I may, I'm a chat
But of course, we've installed Mongoose. Now we're going to install MongoDB. Now let's see here. That's what you have there. Is there an easy way to do it? Here. I'm going to send you a link. If I may, I'm a chat Either way, I have, last time I used installed MongoDB was ages ago, so we're definitely going to hit some bumps. But that's okay. We're learning. Okay. So we're at Creativity Server. And then download. Ah, over here. Cool
Either way, I have, last time I used installed MongoDB was ages ago, so we're definitely going to hit some bumps. But that's okay. We're learning. Okay. So we're at Creativity Server. And then download. Ah, over here. Cool Cool. And then once that's installed, I should be able to install it from the terminal or I need to open this. One sec. This is going to require some like hard wiring stuff. And I was kind of hoping there'd be a home, there is a home, there is a home, way here. I'll send you two commands
Cool. And then once that's installed, I should be able to install it from the terminal or I need to open this. One sec. This is going to require some like hard wiring stuff. And I was kind of hoping there'd be a home, there is a home, there is a home, way here. I'll send you two commands And I'm very sorry, Jen. It was on the website that you were on. Thank you for telling me I did Google, right? That's good. That's good. You did Google it right. If this guy I was using did not. Here. That's okay. Okay
And I'm very sorry, Jen. It was on the website that you were on. Thank you for telling me I did Google, right? That's good. That's good. You did Google it right. If this guy I was using did not. Here. That's okay. Okay That's okay. Okay. Um, and then scroll down to, we've already installed, you've already installed HomeBrew. So step one, brew tap MongoDB slash brew. Ah, okay. So that's going to tell HomeBrew to be like, hey, um, here's a, here's a package you could install called MongoDB slash brew
That's okay. Okay. Um, and then scroll down to, we've already installed, you've already installed HomeBrew. So step one, brew tap MongoDB slash brew. Ah, okay. So that's going to tell HomeBrew to be like, hey, um, here's a, here's a package you could install called MongoDB slash brew After that, we'll do brew update. Ah, you have a back button. There we go. It's doing its thing. And then after that, we will brew install MongoDB. And what is HomeBrew? It is a package manager. Ah, kind of like NPM is a package manager
After that, we'll do brew update. Ah, you have a back button. There we go. It's doing its thing. And then after that, we will brew install MongoDB. And what is HomeBrew? It is a package manager. Ah, kind of like NPM is a package manager HomeBrew is one, so NPM is a package manager for all things JavaScript. Right? Okay. HomeBrew is a package manager for all, for all kinds of open source slash, uh, terminal programs on your Mac. So it is specific. I think HomeBrew's on Windows now as well or on Linux. I could be wrong
HomeBrew is one, so NPM is a package manager for all things JavaScript. Right? Okay. HomeBrew is a package manager for all, for all kinds of open source slash, uh, terminal programs on your Mac. So it is specific. I think HomeBrew's on Windows now as well or on Linux. I could be wrong I could be wrong. Regardless, um, yeah, HomeBrew lets you install open source packages and install them on your Mac, such as, uh, MongoDB. So after running brew install, that's how you installed. No jazz, for example, I think. Hmm. Okay. Yeah, and other stuff
I could be wrong. Regardless, um, yeah, HomeBrew lets you install open source packages and install them on your Mac, such as, uh, MongoDB. So after running brew install, that's how you installed. No jazz, for example, I think. Hmm. Okay. Yeah, and other stuff Um, so yeah, now it's going to install a whole bunch of stuff, which is totally fine because we don't actually need to worry. We can let it run and go back to, um, uh, VS code. Okay, give me two seconds. I need to raise my desk and stand for a bit. Take your time
Um, so yeah, now it's going to install a whole bunch of stuff, which is totally fine because we don't actually need to worry. We can let it run and go back to, um, uh, VS code. Okay, give me two seconds. I need to raise my desk and stand for a bit. Take your time Take your time. Do you do? As it takes, I like that it's a electronic, but it does take a while to actually. Oh, yeah. I have. Is it, is it, is it the Ikea one? No, I don't know if I'm a parent. It is
Take your time. Do you do? As it takes, I like that it's a electronic, but it does take a while to actually. Oh, yeah. I have. Is it, is it, is it the Ikea one? No, I don't know if I'm a parent. It is It is. If it's, yeah, oh, um, it was actually less expensive than an Ikea one because it was on sale, but I don't remember what brain it is. Totally fair. Uh, cool. So I'm in VS code. Yes. Now, let's go and import Mongoose. So, uh, between lines two and one and two
It is. If it's, yeah, oh, um, it was actually less expensive than an Ikea one because it was on sale, but I don't remember what brain it is. Totally fair. Uh, cool. So I'm in VS code. Yes. Now, let's go and import Mongoose. So, uh, between lines two and one and two And that would be the const express or which would be comms. Condes. Uh, yeah, const Mongoose. We're going to. We're going to. We will require. Me, me, me, me, me, Mongoose. For that. Looks good. Next, we're going to set up. So, oh, actually, go back to the terminal. It looks like it finished. Yay
And that would be the const express or which would be comms. Condes. Uh, yeah, const Mongoose. We're going to. We're going to. We will require. Me, me, me, me, me, Mongoose. For that. Looks good. Next, we're going to set up. So, oh, actually, go back to the terminal. It looks like it finished. Yay Yay. To start MongoDB. Slash, brew slash MongoDB community now and restarted login. Brew services start MongoDB, brew MongoDB community. So what does that mean? What this command would do is. Start up MongoDB and have it run when you turn on your computer
Yay. To start MongoDB. Slash, brew slash MongoDB community now and restarted login. Brew services start MongoDB, brew MongoDB community. So what does that mean? What this command would do is. Start up MongoDB and have it run when you turn on your computer It is totally fine to have it run when you turn on your computer. If you're going to be doing lots of web development, you're going to be doing MongoDB. So it's a good idea to have it running. If you ever want to shut it down, you can do brew services. Stop MongoDB. Okay. That's not so far
It is totally fine to have it run when you turn on your computer. If you're going to be doing lots of web development, you're going to be doing MongoDB. So it's a good idea to have it running. If you ever want to shut it down, you can do brew services. Stop MongoDB. Okay. That's not so far That's not so far. So now MongoDB is running, which is fabulous. So, uh, let's go back to VS Code. So MongoDB and your server are going to be two separately running programs. MongoDB does its own. And your server does its own thing, which is good
That's not so far. So now MongoDB is running, which is fabulous. So, uh, let's go back to VS Code. So MongoDB and your server are going to be two separately running programs. MongoDB does its own. And your server does its own thing, which is good Except we need to create a connection between the two. Right. That's what we're going to be writing next. So between lines two and three, let's set up a new const. Which is equals two. Let's call it MongoDB. Space equal two. Now, this is going to be our, the URL of our database. Okay. Okay
Except we need to create a connection between the two. Right. That's what we're going to be writing next. So between lines two and three, let's set up a new const. Which is equals two. Let's call it MongoDB. Space equal two. Now, this is going to be our, the URL of our database. Okay. Okay Okay. Okay. So that'll be in a string. Because it's an address. MongoDB. Colin. Slash slash. Now we're going to put in the IP address of our MongoDB database. Right. Um, you've used, so you've used this address before as local host, but we're going to use the actual IP address. Okay
Okay. Okay. So that'll be in a string. Because it's an address. MongoDB. Colin. Slash slash. Now we're going to put in the IP address of our MongoDB database. Right. Um, you've used, so you've used this address before as local host, but we're going to use the actual IP address. Okay Okay. Which is one two seven. Point zero. Point zero again. Point one. So that's the IP address, right. Uh, forward slash. Now we need to give our database a name. Let's call it kind underscore words. So this is the address where our kind words database lives. Okay. Awesome
Okay. Which is one two seven. Point zero. Point zero again. Point one. So that's the IP address, right. Uh, forward slash. Now we need to give our database a name. Let's call it kind underscore words. So this is the address where our kind words database lives. Okay. Awesome Okay. Awesome. So after that, let's create a new line. And we're going to connect Mongoose to this URL. So that's Mongoose.connect. Now we'll give it some parameters. Which is parentheses. That's right. Okay. And now that URL. Uh, okay. Okay. Doesn't help when I can't see it. Okay
Okay. Awesome. So after that, let's create a new line. And we're going to connect Mongoose to this URL. So that's Mongoose.connect. Now we'll give it some parameters. Which is parentheses. That's right. Okay. And now that URL. Uh, okay. Okay. Doesn't help when I can't see it. Okay Okay. Oh, no, no, uh, use a variable. Oh, we. So just MongoDB. That's right. Right. Cool. comma. And then the options object I just sent you in the private chat. Okay. Use new URL parser true and use unified topology true
Okay. Oh, no, no, uh, use a variable. Oh, we. So just MongoDB. That's right. Right. Cool. comma. And then the options object I just sent you in the private chat. Okay. Use new URL parser true and use unified topology true We're telling hey, when we're telling Mongoose, hey, when you connect to MongoDB, do these things. Okay. I have no idea what these do. Okay. I would say I would say let's put a pin on finding out what these do. And, uh, and, and, and get your. Let's see if we can get this connected. Yeah
We're telling hey, when we're telling Mongoose, hey, when you connect to MongoDB, do these things. Okay. I have no idea what these do. Okay. I would say I would say let's put a pin on finding out what these do. And, uh, and, and, and get your. Let's see if we can get this connected. Yeah Yeah. So let's add a new line after that. To get the, the actual connection. So const, let's declare a new variable. And let's call it DB short for database. Would it be require again? Or would it just be? No, it's our, it's our Mongoose. Okay. The one we declared in line two. So just Mongoose
Yeah. So let's add a new line after that. To get the, the actual connection. So const, let's declare a new variable. And let's call it DB short for database. Would it be require again? Or would it just be? No, it's our, it's our Mongoose. Okay. The one we declared in line two. So just Mongoose So just Mongoose. Mm-hmm. Okay. Okay. Dot connection. Now here, we've got, um, now whenever we want to interact with our database, we can use this DB object. Okay. Good so far. Yeah. Yeah. We're gonna learn. We're gonna learn. Yeah, yeah. We'll get there. Okay
So just Mongoose. Mm-hmm. Okay. Okay. Dot connection. Now here, we've got, um, now whenever we want to interact with our database, we can use this DB object. Okay. Good so far. Yeah. Yeah. We're gonna learn. We're gonna learn. Yeah, yeah. We'll get there. Okay Okay. So I'm also gonna send you another command that you're gonna paste the line after. And along and chunky. So this is saying, hey, if it doesn't connect, um, show an error. Okay. Yeah. Got it. Let's run and see what happens. I have no idea what's going to happen
Okay. So I'm also gonna send you another command that you're gonna paste the line after. And along and chunky. So this is saying, hey, if it doesn't connect, um, show an error. Okay. Yeah. Got it. Let's run and see what happens. I have no idea what's going to happen And to run it, that was something. That was the node mon1. No. Oh, actually, Jen, let's take the opportunity now and create ourselves a nice NPM shortcut. Okay. Let's go package Jason. Okay. Now line six between line six and seven, let's add a new line. We're gonna add a new script
And to run it, that was something. That was the node mon1. No. Oh, actually, Jen, let's take the opportunity now and create ourselves a nice NPM shortcut. Okay. Let's go package Jason. Okay. Now line six between line six and seven, let's add a new line. We're gonna add a new script Um, so it's name is the key. So let's do some, let's call it start. So that'll be a colon. And now as a string, we're gonna do the actual command. And that is node. Don't forget the string. Yeah. So that's no one. Oh, sorry, I want it. No, I don't remember. No, no, you're good
Um, so it's name is the key. So let's do some, let's call it start. So that'll be a colon. And now as a string, we're gonna do the actual command. And that is node. Don't forget the string. Yeah. So that's no one. Oh, sorry, I want it. No, I don't remember. No, no, you're good So node mon, perfect. And then the name of the file we want to monitor. Which is the really long file or app.js. It is app.js. I see this. And I run start. I'm so sorry, Laura. Ah, sorry, why did I call you Laura? Jen, I'm so sorry, Jen. You forgot a comma. Damn it. It's always the commas for me
So node mon, perfect. And then the name of the file we want to monitor. Which is the really long file or app.js. It is app.js. I see this. And I run start. I'm so sorry, Laura. Ah, sorry, why did I call you Laura? Jen, I'm so sorry, Jen. You forgot a comma. Damn it. It's always the commas for me I'm gonna get the commas. So now we can type in NPM start. Oh, yay. No error means that we are connected to our MongoDB instance. Yay. Which is excellent. And we can keep, we can leave that running now. I'm curious. So has it changed this yet? No. Okay. Wait, give it a refresh
I'm gonna get the commas. So now we can type in NPM start. Oh, yay. No error means that we are connected to our MongoDB instance. Yay. Which is excellent. And we can keep, we can leave that running now. I'm curious. So has it changed this yet? No. Okay. Wait, give it a refresh Should give us that error. Okay. So. Why is that? That's because if we go back to, oh yeah. But we're not running the server right now. Are we? Yes, we are. Here. We did an NPM start. Oh, and it starts running the server and the database. Okay
Should give us that error. Okay. So. Why is that? That's because if we go back to, oh yeah. But we're not running the server right now. Are we? Yes, we are. Here. We did an NPM start. Oh, and it starts running the server and the database. Okay Okay. Well, the database, remember, we started it up when we ran brew services start MongoDB. Got it. Okay. MongoDB is running in its own thing. We just started up our express server. Okay. Sound good? Yes. Cool. Let's go back to app.js. Now, let's start. Let's start creating a schema. Okay
Okay. Well, the database, remember, we started it up when we ran brew services start MongoDB. Got it. Okay. MongoDB is running in its own thing. We just started up our express server. Okay. Sound good? Yes. Cool. Let's go back to app.js. Now, let's start. Let's start creating a schema. Okay Okay. So, um, and I have no idea how this works. We are learning this from scratch. Oh, go go gadget new. Why? Oh. From many of the. Please do tell. New. Why what? Sorry. Probably why the server was still running. And I got confused on that. Oh, yeah, yeah. So let's see
Okay. So, um, and I have no idea how this works. We are learning this from scratch. Oh, go go gadget new. Why? Oh. From many of the. Please do tell. New. Why what? Sorry. Probably why the server was still running. And I got confused on that. Oh, yeah, yeah. So let's see So let's see. So we are going to declare a new schema, right? For our database. And we only want one, which is the posts. Okay. So could you scroll up please? And let's put it. Yeah, let's do all of our MongoDB stuff before our express stuff
So let's see. So we are going to declare a new schema, right? For our database. And we only want one, which is the posts. Okay. So could you scroll up please? And let's put it. Yeah, let's do all of our MongoDB stuff before our express stuff And I don't know about you, but this is getting a little bit hard to read. Wouldn't you say? Yes. How about we use comments to make our lives a little easier? So between lines two and three, let's add a comment. All set up MongoDB. You can. Yep. Or that perfect. Perfect. Then connection
And I don't know about you, but this is getting a little bit hard to read. Wouldn't you say? Yes. How about we use comments to make our lives a little easier? So between lines two and three, let's add a comment. All set up MongoDB. You can. Yep. Or that perfect. Perfect. Then connection Then connection. Actually, I was going to say, let's separate this by concern. So setup database connection with MongoDB. Perfect. And then between lines seven and eight, let's put a. Let's put in three new lines. So we got lots of space. And in the second one, we put in our comment
Then connection. Actually, I was going to say, let's separate this by concern. So setup database connection with MongoDB. Perfect. And then between lines seven and eight, let's put a. Let's put in three new lines. So we got lots of space. And in the second one, we put in our comment Set up express server. For example, I like the space. I like it too. Let's me. Makes it easy for me to. Yeah. Cool. So after line nine, let's now declare our schema. So const. Uh, post schema. Post dot schema or post schema. No, it's one variable name. So that needs to be camel case. So
Set up express server. For example, I like the space. I like it too. Let's me. Makes it easy for me to. Yeah. Cool. So after line nine, let's now declare our schema. So const. Uh, post schema. Post dot schema or post schema. No, it's one variable name. So that needs to be camel case. So So. And we'll set that to be. You do not like me, whatever. It's because we're not done writing it. Because. New. Space. Mungoose. Dot. No space. Capital S schema. And it takes as it takes a parameter. And. And a curly bracket. Here you go. Hit enter. And now we're going to define our schema
So. And we'll set that to be. You do not like me, whatever. It's because we're not done writing it. Because. New. Space. Mungoose. Dot. No space. Capital S schema. And it takes as it takes a parameter. And. And a curly bracket. Here you go. Hit enter. And now we're going to define our schema Which is all the attributes and keys we used earlier, like sender. Yep. So we got sender. But. What do we put here? Now we put in a data type. Text. String with capital S. Don't forget the space. Yes. Nice. Nice. Dates different though. Is it date with the capital? It's date with the capital. Yes
Which is all the attributes and keys we used earlier, like sender. Yep. So we got sender. But. What do we put here? Now we put in a data type. Text. String with capital S. Don't forget the space. Yes. Nice. Nice. Dates different though. Is it date with the capital? It's date with the capital. Yes Yes. You're still getting a comment just so I get easy using comments. There we go. Perfect. Then we're going to create a class for our model. A model is a commonly used term here for thing that gets saved to the database. Okay. One post will be a model. Okay
Yes. You're still getting a comment just so I get easy using comments. There we go. Perfect. Then we're going to create a class for our model. A model is a commonly used term here for thing that gets saved to the database. Okay. One post will be a model. Okay Okay. I get confused on classes like it's something I got really really confused on. So I'm just going to go with it. We'll go with it. We can also add some other point. Talk about JavaScript. Constructors, prototypes. Classes and subclasses and just get just about all the jargon while I can't
Okay. I get confused on classes like it's something I got really really confused on. So I'm just going to go with it. We'll go with it. We can also add some other point. Talk about JavaScript. Constructors, prototypes. Classes and subclasses and just get just about all the jargon while I can't No, I'm sorry. Yes. Yes. Just kidding on. But no, you're totally good. So in the context of databases, what we're doing here is defining a schema from which we can define a model. Okay. So after line 15, we'll define a new variable
No, I'm sorry. Yes. Yes. Just kidding on. But no, you're totally good. So in the context of databases, what we're doing here is defining a schema from which we can define a model. Okay. So after line 15, we'll define a new variable And that's still a const, right? Or is it variable? No, it is const. No, you're good with const. And let's call it post with capital P. We'll set that to be equals. Um, mongoose dot model. And this will take two parameters. The first is a string, no, uh, no object
And that's still a const, right? Or is it variable? No, it is const. No, you're good with const. And let's call it post with capital P. We'll set that to be equals. Um, mongoose dot model. And this will take two parameters. The first is a string, no, uh, no object Yeah, the first is a string, which is the name of the model. And that'll always be the same as the variable name here. So it'll be post with the capital P. So when we go into the database, it'll, there will be a table of posts. Okay. And the second parameter is the schema
Yeah, the first is a string, which is the name of the model. And that'll always be the same as the variable name here. So it'll be post with the capital P. So when we go into the database, it'll, there will be a table of posts. Okay. And the second parameter is the schema Which we defined online 10. And I put it in the schema. It's not mongoose dot schema. It's the schema, it's the schema that we defined in line 10. Um, so it'd be post schema? Correct. Perfect. Now, now we can, uh, we can start, uh, declaring, saving and retrieving posts. Okay
Which we defined online 10. And I put it in the schema. It's not mongoose dot schema. It's the schema, it's the schema that we defined in line 10. Um, so it'd be post schema? Correct. Perfect. Now, now we can, uh, we can start, uh, declaring, saving and retrieving posts. Okay Okay. I don't know about you. I find that, I find that exciting. I just need to look up how to get all of them. But, um, let's go down to the post request. So instead of posts, oh, actually, so sorry. Let's scroll back up line 22. Const posts. Minute. We don't need it anymore. All of them
Okay. I don't know about you. I find that, I find that exciting. I just need to look up how to get all of them. But, um, let's go down to the post request. So instead of posts, oh, actually, so sorry. Let's scroll back up line 22. Const posts. Minute. We don't need it anymore. All of them All of them. Uh, even that. No, 22 to 27. Those lines are gone. That is, of course, going to give us some errors because, for example, in line 32, we're trying to, um, push to something that doesn't exist. Right. I'm just curious what it looks like right now. Oh, hey, look, what a great error
All of them. Uh, even that. No, 22 to 27. Those lines are gone. That is, of course, going to give us some errors because, for example, in line 32, we're trying to, um, push to something that doesn't exist. Right. I'm just curious what it looks like right now. Oh, hey, look, what a great error Look at the top one. Post not defined. We took away the definition. Okay. So, um, oh, my god, you be models. So in line 32, we're instead of pushing, we're going to declare a new post. So let's say const post equals. New post. Yes, replace exactly that with new post. Capital. Got. All right
Look at the top one. Post not defined. We took away the definition. Okay. So, um, oh, my god, you be models. So in line 32, we're instead of pushing, we're going to declare a new post. So let's say const post equals. New post. Yes, replace exactly that with new post. Capital. Got. All right Got. All right. Let's add a space between new and post. So now it's saying, hey, construct me a post model. Then between lines 37 and 38. Post.save. Post.save. brackets with no parameters. So that'll save it to the database. Okay. That's done. But of course, our get request is still broken
Got. All right. Let's add a space between new and post. So now it's saying, hey, construct me a post model. Then between lines 37 and 38. Post.save. Post.save. brackets with no parameters. So that'll save it to the database. Okay. That's done. But of course, our get request is still broken And that's where I need to find out how to get all querying. Here we go. Take. Let me see. Long goose get all models. What it is. How to get an object of all models of the long goose instance. No, that's not what I want. Okay. So. Line 30. Let's have a new line between line 29 and 30. So. Post
And that's where I need to find out how to get all querying. Here we go. Take. Let me see. Long goose get all models. What it is. How to get an object of all models of the long goose instance. No, that's not what I want. Okay. So. Line 30. Let's have a new line between line 29 and 30. So. Post So. Post. Sorry, that's capital P post. Oh, actually, I'm really sorry. Before the before line 29. Sorry, in line 29 before the function. Yeah. Yes. Let's put in async space. Perfect. Now we can. Convert to arrow function. You can do it if you want. Which is just like this
So. Post. Sorry, that's capital P post. Oh, actually, I'm really sorry. Before the before line 29. Sorry, in line 29 before the function. Yeah. Yes. Let's put in async space. Perfect. Now we can. Convert to arrow function. You can do it if you want. Which is just like this Actually, you can let you can let me just code do it automatically. We can see the difference. Oh. Okay. You can undo that if you want. Because I seem to remember you preferring writing functions out. Yeah, but I think it'll be good to see that there's differences in it as I'm learning. Totally
Actually, you can let you can let me just code do it automatically. We can see the difference. Oh. Okay. You can undo that if you want. Because I seem to remember you preferring writing functions out. Yeah, but I think it'll be good to see that there's differences in it as I'm learning. Totally Totally. Totally. Okay. So let's have const posts. Lowercase. If it's a variable, it's lowercase. Post capital P. The model dot find. Not all dot find. Oh, sorry. No, I meant the post model with a capital P. So post dot find. And then we'll put in our brackets. And inside that an empty object
Totally. Totally. Okay. So let's have const posts. Lowercase. If it's a variable, it's lowercase. Post capital P. The model dot find. Not all dot find. Oh, sorry. No, I meant the post model with a capital P. So post dot find. And then we'll put in our brackets. And inside that an empty object Which means nothing. It means curly brackets. I'm going to learn this stuff. It takes time. So what are we doing here? We're saying posts find all of the posts that meet these criteria. Okay. But we're not passing any criteria
Which means nothing. It means curly brackets. I'm going to learn this stuff. It takes time. So what are we doing here? We're saying posts find all of the posts that meet these criteria. Okay. But we're not passing any criteria If it's no criteria, it's just like, all right, then you get all the posts. Okay. We're done. I have no idea what this is going to work. I'm very excited. Oh, we got an error. Oh, my goodness. And I have no idea what that. Ah. We crashed. Yeah, yeah, yeah, crashed. It crashed real good
If it's no criteria, it's just like, all right, then you get all the posts. Okay. We're done. I have no idea what this is going to work. I'm very excited. Oh, we got an error. Oh, my goodness. And I have no idea what that. Ah. We crashed. Yeah, yeah, yeah, crashed. It crashed real good Let's look at that. Converting, converting circular structure to Jason. Starting at object with constructor topology. S object with constructor object. This is an error if you see where it says like, users, Gen, Geno desktop code folder, Ramones, Rad, node modules, express lib, response dot JS
Let's look at that. Converting, converting circular structure to Jason. Starting at object with constructor topology. S object with constructor object. This is an error if you see where it says like, users, Gen, Geno desktop code folder, Ramones, Rad, node modules, express lib, response dot JS It's, it's doing something. Um, tell you what, let's add a, um, let's go back to our app.js. And let's do a console log of console.log posts. Oh, my goodness. I think I'm so sorry. I know it's wrong. Um, in line 30, did I forget a comma? I forgot a thing
It's, it's doing something. Um, tell you what, let's add a, um, let's go back to our app.js. And let's do a console log of console.log posts. Oh, my goodness. I think I'm so sorry. I know it's wrong. Um, in line 30, did I forget a comma? I forgot a thing Remember how we made this function async? Yes. In line 30 after the equals, we want to have a weight. What is just the word weight? A weight. So it's like, I am, uh, exactly. That's it. Because find us asynchronous by doing it this way. We're telling it, no, no
Remember how we made this function async? Yes. In line 30 after the equals, we want to have a weight. What is just the word weight? A weight. So it's like, I am, uh, exactly. That's it. Because find us asynchronous by doing it this way. We're telling it, no, no You wait until it's done, getting all the posts. Nice. Empty. Why is it empty? Because we haven't had it with define. No, it's because our database is empty. Oh, yeah. Okay. Let's add a post. Uh, I'm determined. Okay. Which was what we did over here? Yeah. I'm going to add this one. Yep
You wait until it's done, getting all the posts. Nice. Empty. Why is it empty? Because we haven't had it with define. No, it's because our database is empty. Oh, yeah. Okay. Let's add a post. Uh, I'm determined. Okay. Which was what we did over here? Yeah. I'm going to add this one. Yep Yep. And then let's take a look at the terminal first. Add a new post. Alright. And get out of that. Now finishing touch. Let's turn off the server, turn it on and see if it got persisted. So I'm just restarting the server, right? NPM start
Yep. And then let's take a look at the terminal first. Add a new post. Alright. And get out of that. Now finishing touch. Let's turn off the server, turn it on and see if it got persisted. So I'm just restarting the server, right? NPM start And then we're just going to refresh this and see if it's still there. Nope. It's still there. Nice. So now we're going to like double, double check it. Because it should come up in incognito. Yay. Of course. It absolutely should
And then we're just going to refresh this and see if it's still there. Nope. It's still there. Nice. So now we're going to like double, double check it. Because it should come up in incognito. Yay. Of course. It absolutely should So now, Jen, you've got yourself a want to find back end app with a database connection. And if I want to add more, I Yes, no, you totally can't. Let's. I don't know about you, but curl is nice, but it's kind of a pain in the butt. Okay. What a lot of devs do is they use something called postman
So now, Jen, you've got yourself a want to find back end app with a database connection. And if I want to add more, I Yes, no, you totally can't. Let's. I don't know about you, but curl is nice, but it's kind of a pain in the butt. Okay. What a lot of devs do is they use something called postman I don't use it much myself, but we can totally use it if you want. It's an app for doing. Yeah, let's try that next next time, because I think I can try doing this a bit the way it is. And I also want to see if I can. Build this myself with my notes. Totally. Or at least add more. And possibly
I don't use it much myself, but we can totally use it if you want. It's an app for doing. Yeah, let's try that next next time, because I think I can try doing this a bit the way it is. And I also want to see if I can. Build this myself with my notes. Totally. Or at least add more. And possibly And possibly. Pretty it up. Sure. We did. I don't even know. I don't even know how we do that, but. Yeah, between the last one and this one, I'm like, okay. Yeah, I commend you. I commend you, Jen. Listen, let me ask
And possibly. Pretty it up. Sure. We did. I don't even know. I don't even know how we do that, but. Yeah, between the last one and this one, I'm like, okay. Yeah, I commend you. I commend you, Jen. Listen, let me ask Listen, let me ask. Before we wrap up for today, is there anything here that you're like, I absolutely have no idea what we did here. Or any questions you might have. No. No. Maybe if I added, if I went through and did looked up the HTML version to add a post, I could make this pretty. Oh, this
Listen, let me ask. Before we wrap up for today, is there anything here that you're like, I absolutely have no idea what we did here. Or any questions you might have. No. No. Maybe if I added, if I went through and did looked up the HTML version to add a post, I could make this pretty. Oh, this Oh, this. No, this here. This would I just add a HTML insert for this? Ah. So you want to make this you want to make this data look pretty? Is what you're saying? Just like the dogs going bananas. Take your time. I should be hours. So are you getting time? I know. And for that
Oh, this. No, this here. This would I just add a HTML insert for this? Ah. So you want to make this you want to make this data look pretty? Is what you're saying? Just like the dogs going bananas. Take your time. I should be hours. So are you getting time? I know. And for that And for that. Oh, for like anybody listening or watching. I don't know why you're working. I think she's just like mom is time to like finish. I want she loves cuddles. So I think she's yelling at me. Cuddles. Me on. Me on. You've got to say quite for like a little bit longer
And for that. Oh, for like anybody listening or watching. I don't know why you're working. I think she's just like mom is time to like finish. I want she loves cuddles. So I think she's yelling at me. Cuddles. Me on. Me on. You've got to say quite for like a little bit longer I can I can answer your question. Oh. She wants a little bit of attention. Sorry, just to make sure I understand correctly. Because right now we're looking at the J something. There's enough it's not pretty. Right. It's kind of messy looking
I can I can answer your question. Oh. She wants a little bit of attention. Sorry, just to make sure I understand correctly. Because right now we're looking at the J something. There's enough it's not pretty. Right. It's kind of messy looking So your question is what can we do to make that nicer? Yes. So let me. I will Google it. I know you're not. That's what I'm telling you. No, no, you're totally good. So the thing is this API is not meant to render the data. Is it? Okay. Right. It's just meant to be a data. It's the term broker
So your question is what can we do to make that nicer? Yes. So let me. I will Google it. I know you're not. That's what I'm telling you. No, no, you're totally good. So the thing is this API is not meant to render the data. Is it? Okay. Right. It's just meant to be a data. It's the term broker I'm not sure. It's meant to serve the data. It's just like, hey, you want some data? Here it is. Got it. So that's when Anthony was talking about adding the front end to the back end. Exactly
I'm not sure. It's meant to serve the data. It's just like, hey, you want some data? Here it is. Got it. So that's when Anthony was talking about adding the front end to the back end. Exactly Exactly. So if you had a React app that would be used to display the posts, then you would do an HTTP request to this back end and be like, get the posts, receive that JSON, and then render it in React. Okay. I get what you're saying. Yeah. Yeah
Exactly. So if you had a React app that would be used to display the posts, then you would do an HTTP request to this back end and be like, get the posts, receive that JSON, and then render it in React. Okay. I get what you're saying. Yeah. Yeah Yeah. Yeah. Really doing here is just having a little program that serves the data and saves the data. In fact, let's do one more thing before we go. Let's do the same get request, but in the terminal with curl. So let's do curl. Space HTTP. colon4-4-4-4-4-4- localhost. colon3334- slash posts
Yeah. Yeah. Really doing here is just having a little program that serves the data and saves the data. In fact, let's do one more thing before we go. Let's do the same get request, but in the terminal with curl. So let's do curl. Space HTTP. colon4-4-4-4-4-4- localhost. colon3334- slash posts Enter. Yeah. And it showed it. I'm going to show it. So it's literally just being like, hey, you want the JSON? I got you. Cool. This is definitely. It's up to you. Cool. That makes sense. It also makes a lot more sense like with the front end versus the back end and all that too. So
Enter. Yeah. And it showed it. I'm going to show it. So it's literally just being like, hey, you want the JSON? I got you. Cool. This is definitely. It's up to you. Cool. That makes sense. It also makes a lot more sense like with the front end versus the back end and all that too. So So. This is exciting. We covered loads like kudos, Jen. Like, thank you. Thank you. It's also I am still at the moment where I'm like, okay, like I get it, but I don't get it yet
So. This is exciting. We covered loads like kudos, Jen. Like, thank you. Thank you. It's also I am still at the moment where I'm like, okay, like I get it, but I don't get it yet But I can see that I'm starting to get it because like, I'm able to guess like what we're going to be doing next a lot easier. But totally. Okay. Okay. There's a lot. There's a lot. A lot. It is a lot. But I appreciate it. Oh, yeah. This is this is I could do this all day
But I can see that I'm starting to get it because like, I'm able to guess like what we're going to be doing next a lot easier. But totally. Okay. Okay. There's a lot. There's a lot. A lot. It is a lot. But I appreciate it. Oh, yeah. This is this is I could do this all day Like, but I think I think you'd need to like also have some time to let it let it settle. Yes. You don't mess around with it. That is something that I'm learning that I just need to like, yeah. Let it sit. You need to break it. You I will. You got to break it
Like, but I think I think you'd need to like also have some time to let it let it settle. Yes. You don't mess around with it. That is something that I'm learning that I just need to like, yeah. Let it sit. You need to break it. You I will. You got to break it Like, I think I think as programmers, like one of the misconceptions we give newcomers is that, oh, yeah, we know we never break anything after when you have 10 years of experience. This is a lie. We break stuff all the time. That's how you learn
Like, I think I think as programmers, like one of the misconceptions we give newcomers is that, oh, yeah, we know we never break anything after when you have 10 years of experience. This is a lie. We break stuff all the time. That's how you learn I think that's also something that I keep trying to rebuild it from scratch. And it takes me forever where I think if I just try to break it or edit it as it is, it's going to be a lot easier. Yeah. Error messages are your friend. Yes. Yes. All right
I think that's also something that I keep trying to rebuild it from scratch. And it takes me forever where I think if I just try to break it or edit it as it is, it's going to be a lot easier. Yeah. Error messages are your friend. Yes. Yes. All right Yes. All right. Well, thank you so much for coming on the show today, Ramon. Almost said that today's show, which is like a US thing. And I'm like, that's that's not what we're giving up. I mix them up. I mix them up. Which one the today's show is. I know of it, but I don't know who's on it
Yes. All right. Well, thank you so much for coming on the show today, Ramon. Almost said that today's show, which is like a US thing. And I'm like, that's that's not what we're giving up. I mix them up. I mix them up. Which one the today's show is. I know of it, but I don't know who's on it Neither do I never watch it anymore. Okay. Well, thank you once again. We definitely did go through a lot. And I feel like I'm going to be asking you back at some point. Awesome. Looking forward to it. Thank you. Bye. Let's talk about the homework.
Neither do I never watch it anymore. Okay. Well, thank you once again. We definitely did go through a lot. And I feel like I'm going to be asking you back at some point. Awesome. Looking forward to it. Thank you. Bye. Let's talk about the homework.