Hello beautiful humans. Thank you for joining Teach Gen Tech. Today we have MISCO joining us and I'm very excited because this is a brand new concept to me as I've been learning about JavaScript and frameworks. So MISCO please introduce yourself and what we're going to talk about today Hi Gen, thank you for having me. We're going to talk about today about this thing that I'm creating called Quick. A little bit about me let's see. I did this thing called AngularJS. It got kind of popular. So that's my prior life currently working as a CTO builder IO and builder IO
Hi Gen, thank you for having me. We're going to talk about today about this thing that I'm creating called Quick. A little bit about me let's see. I did this thing called AngularJS. It got kind of popular. So that's my prior life currently working as a CTO builder IO and builder IO We were making it very cool. We're imagining the way headless CMSs work. So that's kind of what I'm working on these days
We were making it very cool. We're imagining the way headless CMSs work. So that's kind of what I'm working on these days But Quick is my passion right now and Quick is a framework for building my maps but it's very different than existing frameworks in that it really focuses on or rather that I think is prefaced with. Existing frameworks usually download all the JavaScript eagerly and then the application runs
But Quick is my passion right now and Quick is a framework for building my maps but it's very different than existing frameworks in that it really focuses on or rather that I think is prefaced with. Existing frameworks usually download all the JavaScript eagerly and then the application runs And what Quick does is it goes the other way around. It tries super hard not to download any JavaScript until it absolutely has to. And for small applications obviously makes no difference but like once the application gets large and big it makes a huge difference in terms of performance
And what Quick does is it goes the other way around. It tries super hard not to download any JavaScript until it absolutely has to. And for small applications obviously makes no difference but like once the application gets large and big it makes a huge difference in terms of performance Interesting and to take a back of it we I have started to learn a bit about formats and different ways that JavaScript can be like there's vanilla JavaScript that can't do or like it's the bare basis that everything is kind of based off of. And then there's like I've done some work in React
Interesting and to take a back of it we I have started to learn a bit about formats and different ways that JavaScript can be like there's vanilla JavaScript that can't do or like it's the bare basis that everything is kind of based off of. And then there's like I've done some work in React I've done some work in Express. Like if I remember correctly we built a web app and it was much more of like the front end where when we were doing Express it was much more of the back end
I've done some work in Express. Like if I remember correctly we built a web app and it was much more of like the front end where when we were doing Express it was much more of the back end And eventually those who are going to be on the show together to help me go from making a full app it's going to be fine. So where does take it a step back I know we're focusing on Quick but where does like angular and quick go into that are they similar to either of those. Yeah yeah they are
And eventually those who are going to be on the show together to help me go from making a full app it's going to be fine. So where does take it a step back I know we're focusing on Quick but where does like angular and quick go into that are they similar to either of those. Yeah yeah they are Yeah yeah they are. So I think the category is front end right so on the end of the day you need to render something on a screen right you have to put characters and colors and boxes or whatever in the screen
Yeah yeah they are. So I think the category is front end right so on the end of the day you need to render something on a screen right you have to put characters and colors and boxes or whatever in the screen And so you could do it manually you just pure vanilla JS but you're gonna discover pretty quickly that like that's just a lot of boiler prayed boring code
And so you could do it manually you just pure vanilla JS but you're gonna discover pretty quickly that like that's just a lot of boiler prayed boring code And for that reason people create frameworks and you know there's AngularGes, Angular, SwaltView, React, Solid, you know to just name a few there's gazillions but gazillions of them
And for that reason people create frameworks and you know there's AngularGes, Angular, SwaltView, React, Solid, you know to just name a few there's gazillions but gazillions of them And they're all basically try to solve this particular problem by saying hey let me give you tools so that you can have easier time making things you know painting things on a screen and more importantly you know easier time updating it right because it's one thing to just paint something quite another thing to be like okay now I have to go updated because now you change something you click on something or you added something to shop in cart right
And they're all basically try to solve this particular problem by saying hey let me give you tools so that you can have easier time making things you know painting things on a screen and more importantly you know easier time updating it right because it's one thing to just paint something quite another thing to be like okay now I have to go updated because now you change something you click on something or you added something to shop in cart right And so the the burden butter of what frameworks care about is how do I show you stuff and how do I update stuff based on interaction
And so the the burden butter of what frameworks care about is how do I show you stuff and how do I update stuff based on interaction Got it got it yeah I felt like this is gonna be it's this is something that I've learned since joining the working more on the back end of the tech world and I'm saying back end of tech world not just like back end developer not there yet but I've been in sales and in marketing and learning services so it's much more teaching about the technology after the technology is developed is very different than being part of building the technology and updating and it's definitely something that it's I've been on this journey for maybe a month now where I started working on learning JavaScript and then I've always want to become a Debril and so while I was working on finding out more of how to be able to do that everyone's like yo you got the personality but you don't have the tech or content and I'm like oh while we're gonna do teach Jen tech and get both so I love that it's they all build on top of each other and it's so similar yet different and also something that I really do want to call out of thank you for being human I know we touched on this very very briefly but I was very nervous about this and I feel like this is something that so many newbies getting into tech are like oh I don't understand the tech and there is a big comparison of what you know not all people can break it down or want to break it down that's something I've learned on the podcast I also have of like putting that intellectual burden on people it's not something that's made for everyone yet there are so many kind people in this world that are definitely willing to break it down for you and so thank you again for joining which describing is this thing called curse of knowledge right like once once you understand something you have a really hard time imagining what it is not understanding something right and this is a general problem for people for humans right is that once they understand something like it's obvious like of course it's obvious like how do you how do you so dumb not understanding the way well turns out before you understood this like you were also on the other side where it wasn't obvious at all how how long did it take you to build like angular and then now quick is it something that you did pretty quickly like six months or no it takes a long time so let me back up a little bit first then I want to point out that I feel like anything in like including software right it's not that it is complicated like every single part of it is pretty simple it's just there's a lot of it right so if you've been doing something longer it's not really that you understand I mean things build up on each other and become complicated right but like the thing I really want to get across and I always told as my kids as well is that it's just good Gillian small things that are in themselves pretty simple and straightforward right the difference really comes down to is just there's just so many of them and because it's so many of them it really just comes down to like the amount of time to spend on it right so it is just like you you have to spend a lot of time on it to kind of go through it and learn all these things but individually they're all pretty straightforward I love that so you ask me how long it took me to build angular JS pretty long time actually because I didn't know what I was doing right it's a learning experience for everybody I think angular JS took about two years but I mean that was a long time ago and I can't quite remember with quick it was much much quicker it was only about a year maybe a year and a half we kind of knew already what we wanted and so we were able to just go straight after the particular goal but quick is also a lot more ambitious than what angular JS was trying to do angular JS was one of the first ones in this particular space I think the way you think about it is it kind of went through stages you know at the very very beginning browsers were didn't even have JavaScript right they were not really interactive and so you just showed static documents and so on a server you would generate the HTML send of the client the client would show it and that would be bad and at some point we added JavaScript and so we're like oh now we can make it interactive and the first kind of interaction we added is that servers still produced HTML and then after the fact we sprinkled JavaScript on top of it so we generated the content and then we made the content interactive and a problem with that approach is that you kind of have to do it twice you do it once on a backend like oh I'm generating a whatever clock right so I have to generate a clock and then you go to the client you go like all right the client has to update so now I have to read code there's pretty much identical for updating the clock right and so creating the clock and replay repainting the clock end up being two things that you write in two different locations and two different languages and gets annoying pretty quickly and so people were looking for kind of the unified answers to this particular problem and the answer came in in this component-based frameworks I guess you could call them and I like to think that AngularGest was one of the first but the idea of component-based frameworks is that you write a component and then that component runs both on a server and on the client originally that wasn't the case originally they only ran on a client but then we kind of realized like oh if it just runs on a client then it takes a long time for the page to be painted right so you navigate to a page and you just see a blank page right like just whiteness and then the page says oh you need to go get the JavaScript and the framework and the application and everything as if you go fetch all that stuff and then you go and execute all that stuff it's at some point like a couple of seconds later everything executes and downloads and runs and like now you have your clock painted right and so there's a huge delay between like I navigate to a page and then I see something and that's kind of the problem with like the first generation like the one of the generations of frameworks and so people came up with this idea of server-side rendering right and the idea is like well what if we ran the code on the server first it's JavaScript so we can do that and then we can get a static snapshot of what the page will look like send the static snapshot over to the client and then in the client you would run the code again but instead of just staring at a blank page you're now staring at the actual application of course it doesn't work like it's just like a printing okay but you have like oh at least I'm recognizing it's a clock what can I do over here right I think I'm gonna think about it might hopefully by the time you kind of figure out what I want to do okay you go buddy sorry hopefully by the time you figure out what you want to do you you know the page was able to initialize and run all that stuff and become interactive right so we went from like white page to like wait two seconds to having an interactive thing to you know having a painting of the thing that you want wait two seconds and then having an interactive thing that's an improvement and so collectively we called it the service side renderer and thank you for explaining that I think that's something that like I've had I've worked a previously worked at GoDaddy so when I was in the hosting department that was a big thing was you know load time on websites that helps SEO all that so I never knew all of this went into it so it's definitely very cool to learn about and hi Dan thank you for joining and I think Mishko is is definitely no longer gonna be a mysterious white void because he's joining today to talk about why was that why was that mystery as white void because nobody like you you've done this cool thing and so like nobody it's I think this is the something that happens a lot in any industry where people that have accomplished something or is well known people are like oh well they're yeah or they're untouchable like oh we'll never hear from them or something like that is it's it's something that I've heard from a lot of different platforms and it's like no like it's just harder to get them because they're they get so many messages yeah but like I mean I understand how it could go to your head right like but I I think I'm under the day most people are pretty down to earth it is just comes down to like you know people get a lot of messages and so he's trying to juggle everything but I you know I'm under the day people won't have fun anyways and so like it's nice to come on a show and talk about things and like this is my relaxing time yeah and thank you for that and just for all of the humans that have joined as a heads up Mishko does know that he's gonna have to break it down quite a bit for teach genteque like we're not 100 present there and Mishko I really appreciate you breaking down a bit of the I could almost say the theory behind it or you know yeah that's the theory but yeah yeah the theory of it it really helps learning the theory to understand what we're gonna be going into okay so since I already gave you three quarters away on a theory so let me just finish the story perfect so so like you know think about the stages right stage one is everything is just a server-side rendered and there's no interactivity in the client you have static pages so obviously we're like hmm that doesn't work very well we want interactivity so stage two would be like okay server-side rendered but then you sprinkle a JavaScript on the client to make it interact this is kind of like the jQuery days and a problem there is like you're duplicating work and it's kind of hacky it's odd-hoc it's not like it doesn't scale very well basically so then people are like okay I have an idea we'll do everything in JavaScript and so you have the client-side frameworks that are born and then the problem becomes yeah but it's slow before it interacts right there's this white void before like I can work it and so the service-side rendering is the answer's like oh well pre-render on a server send you the image snapshot right it's it's not interactive it's it's dead it's it's you can't do anything with it but hopefully by the time the JavaScript wakes up and does it stuff we have made it interactive and you won't even notice the switch a root and then you can play with it so that's kind of where we are is the kind of the status quo and so the thing that's different about quick is that well let me back up a second the problem is that there is this delay between like you think you have a page like you might as well wake it's sounding really robotic all of a sudden oh no is it me I hear it when you're not you're muted I can't hear you I cannot hear you I don't know what my all my mics and stuff are trying to do you know this is when we have backup okay I think I think your mic is working on you know while we're waiting I think I can tell bad computer jokes that's my favorite thing I like dad jokes and I tell dad jokes to my kids I'm sorry so so do you know where I keep my dad jokes no where in a dad a base okay okay cool and apparently it was just me so you know Bluetooth headsets are amazing but not always your friends so you know gotta yeah to the old sturdy plug-in yeah so Bluetooth is well that's not it's a complicated thing okay so so what were we we were talking about kind of how we went through stages of developing our applications right and so currently we're in the stage where you know you're on Twitter somebody sends you a link and it's like I don't shoes you want to buy shoes right click on the shoes and you immediately see the shoes and then there's a buy button right and you try to click the buy button and it doesn't work because it takes like I don't know 10 seconds for all this JavaScript to kind of wake up and do its thing etc and finally the thing works right and so people are like you know screw it you know I don't need to choose that much since they leave so there is a need to have the applications that just come on instantly right the problem is that we kind of don't have the technology right like the technology we have is server-side render HTML which is a static snapshot right send it to the client while the person is looking at the static thing we download all the JavaScript all the behavior and then we re-render everything and we do like switch a room or like switch you the interactive one for the static one and hopefully you don't want to even notice and then you can do stuff and the problem is in a mobile device that could be like 10 15 even 30 seconds I don't know if I can still imagine that like everything loads so quickly it depends like so you know if you have an iPhone and if you have a 5G network it's not so bad it could be like a couple seconds if you on that their hand have like an all super old Motorola device right and you're like in 3G then yeah it can take a long time okay so so quick is basically what we I like to think of it as a next stage of this particular game and then what the quick tries to do it says you know what instead of sending you static snapshot you know and and then trying to spend all this time trying to figure out where the so on the back of the second like what what makes a HTML static right and the answer is well it's the lack of listeners right you didn't attach any behavior to it so you have the tree you have everything rendered but it's nothing attached to it and because there's nothing attached to it like you know clicking the button doesn't do anything right because you didn't tell the computer or the browser like what should happen when I click this button and because you didn't tell that to the browser obviously browser won't do anything right like you're gonna button the thing happens right and and so so the problem is like well how do we figure out what what listener goes where and the answer to it is this process we called hydration but basically just means just run the damn application from the very very beginning and whatever it produces that's for your listeners right got it running it from the very very beginning is huge amount of expense that we would like to avoid so quick has kind of coined the term called reasonable and the idea behind quick is that you want to run the application on a server get it to a particular state serialize it into the HTML including the listeners send it to the client and the client can just continue exactly with the server left off and so because of that you get rid of that time this delay right so quick is kind of weird and hard to explain because we usually when you look at different frameworks you are comparing the developer experience like do I use templates do I use JSX do I you know like how exactly am I gonna tell the computer what to do right and some people like want some people like the other and like you know we have a debates about what's better like whatever right and the other day it doesn't really matter you're just really telling the computer like I want this to happen right so the thing that's different about quick is not how you told the computer but actually what quick does underneath so that it can skip the step right and so when you start looking with playing with quick you look at it you go like this looks just like react the answer is yep that's that's kind of intentional like you know the fact that it looks just like react is not a coincidence but what's different what's unique about it is what actually happens now for a small hello world app you know the difference is kind of trivial and not really interesting but if you get like into a large application the fact that quick can skip hydration is pretty cool maybe I don't do one more thing and then we jump into maybe some coding car are you familiar with the virtual machines like virtual servers or yeah like so VMware came out like maybe 20 years ago and they had this crazy thing that was kind of mind blowing when I first saw it where you could open up a browser or sorry open up like another computer inside of your computer and so the main computer is called the host computer and the thing that you're opening inside of it is called the virtual computer and it was kind of like yeah what's the craziness is this so the thing with the virtual with the virtual machines is that you are for example running on a windows and you boot up like Linux inside of it right inside a virtual box and then the boot up process is slow like on all computers like it takes several minutes for it to come up and then once it boots up the crazy thing you can do with the VM is you can let's say you open up like the Chrome browser you can save it and it saves it to the disk and then you can take that file and you can give it to your friend and that friend can like just resume the file and they skip the boot up process right they don't they don't go through boot up and opening up Chrome they literally just open it and they're like Chrome open application running you know system booted like what how did you let us to skip the stuff in between yeah well that's because the VM fully saves everything into that file so that it can just resume where it left off right and this is what we mean by resumability so the the thing with quick that we're trying to do is we want to make the web reasonable so we want the web to be just like the VM machine where the boot up process right that it's called hydration or like the thing that figures out where the listeners go and grounds the application all that stuff we want to skip that part right we want to go straight to like okay the application is running go okay and and so that's kind of the magical bit behind quick is is not that it's trying to build the app differently or like in a different style from a developer point of view it's that what happens underneath is different and the result is that instead of forcing the browser to download all the JavaScript ahead of time and then execute all the JavaScript ahead of time which is expensive we figured out a way to do it the other way around where like the browser doesn't really download anything and then when you start interacting with the page then we only download that very specific thing that's needed for that interaction right so like if you look think about a large application like Amazon app right you could have like code for like adding things to shopping cart code for like looking at the product from a different angle code for like commenting on the product code for like sending a review code for asking for refund code for like like this be gillian things you can do right right but you don't do all of those things at once you only do one of them right like I want to look at the product from a different angle is just a tiny sliver of what the application can do and so instead of downloading everything ahead of time and then running everything out of time which is expensive quick basically says actually you only want to just look at the product from a different angle so I'm just only going to download that particular piece of code so that answers my actual follow-up question which was going to be what was is the difference of that compared to caching and how you explain that it only loads that particular piece that's going to be a lot different than caching where it previously loaded and tries to cause it to go a bit faster yeah so I mean caching is a very complicated term in terms of like it could be used all over the place right so like not exactly sure what you mean by it like in a case of HTML when you when you render the HTML on a server we definitely cash that on a system that's called a CDN content delivery network and so CDN is basically the thing that actually serves up the file and so yes you can definitely cash it out that layer so that when you navigate to the you know sneaker for example the CDN can instantly just be like oh here's the file good yeah I think I'm thinking more like browser caching because if it's if we're on the browser side we wouldn't necessarily need it to be cashed because quick is made to load when just first specific part it doesn't need to previously like it'll load faster from the very beginning instead of having to have it cashed on the browser side to be able to load quicker yeah so caching is about you know faster delivery of the content but there's a second problem which is when the browsers when the application starts up on the client it has to execute the application right and browsers don't really know how to cash the execution right the execution is actually code running that has to happen right so that's the even if you somehow deliver all the JavaScript quickly to the client because it's cashed and whatever you're still paying for the cost of like running it all and so in the way you can think of a quick as a way of caching it so quick basically figured out a way to run it once on a server cash the result in such a way so that on the client the client the browser can continue from where the server left off rather than going all the way to the beginning and redo all that work all right I think like it sinks in enough this is something that I've definitely had to learn where I'm like it makes enough sense yet it's going to be something that I got a noodle on and knowing my luck I'm gonna have like a question for you in like two weeks and be like okay cool I will tweet you and see if I can get this answered but this is a hard concept because like I've been actually struggling with it to explain it to the people on Twitter of like how different it is because people are used to looking at the world in a particular way and so if you come with something different they're like so it's just like this other things like no no no so it's just like that thing like well no right and so it is a different enough thing that it's not immediately obvious why it's different okay but I think I enjoy being newer to it because I'm like okay cool like it I do like we all do you need to compare it to something because it's kind of hard to conceptualize yet at the same time I'm like I feel like I'm new enough that I'm like I'm not I don't have a ton to compare it to okay let's do some coding and let's see examples will help it so okay you have a new thing here excellent the magical command to get started with quick is npm create quick at latest quick at there you go so that should download and install things yep and sure you can start with that folder name and so you want to do quick city yep express sounds good prettier sounds good I do like prettier it makes me happy yeah so so now you can follow those steps so city into quick app and do npm install and then we should probably get the visual studio running inside of that folder so we can look around this is a very very random thing to appreciate but it's pretty and it has emojis it makes it easier to to comprehend as somebody that's newer to this as someone that is I'm also horribly dyslexic so it'll take me a while to like reread things having the different icons and like next steps and those type of things makes it a lot easier to go look at it and go okay cool this is what I've done so far these are next steps so I will let you thank you I will let Adam and Manu know Adam and Manu were two people working on it most of the time yes please thank them so getting used to this keyboard I'm used to typing on my laptop itself and since having to do two screens my quates this is a new keyboard you know it's a I type fast on a keyboard except when somebody's watching and then I can't type to save my life well I'm glad that it's not just me where it's the moment somebody's watching you're like whoop I can't type yes and for those that are watching do you have any questions so far I feel like a lot of you are on the more technical side as well and we went through theory of some basics which I really appreciate so anyone else have some any questions so far before you type npm start if you type code dot it should open up the VS code in that folder it's called space dots sorry yeah you're right never mind okay well it's my VS code doesn't that's okay it's okay I'll just click on the open button over there and then we can just open the folder I need to remember where it is supposed to be in here but I didn't move it into there so it's over here quick I'll put it up here we go yep yeah yeah okay so if we just do npm start over there okay and yeah if you open up local those 3000 usually if you do it in an Intel needle window it's kind of nicer because that you can make sure there's no like third-party extensions adding JavaScript which happens often times okay so here's your hello world of quick city this would be identical to just about any framework you that you would open up right that is not kind of the interesting bit so I want to show you the interesting bit so if you right click on it somewhere and go open up the developer tools go to the network tab let me get this bigger it like went into a very weird okay and refresh this page again okay and let's see so if you click on JS you have it on the top it says fetch code it says JS fetch xhr and jscs it's a yes it was right of it no to js one so you can only only want to see the JavaScript that's coming down okay so we're in a dev mode because we're in a dev mode we're using this thing called beat beat is like a server for refreshing your thing and one of the things it does is called hot module reloading anyway beat is a dev mode only thing and it would not be available in production so so that we only seeing it so you see where it says filter you can type in beat and then there's a check mark that says invert and then click on the invert check mark okay and the thing I want to show you is that you have no JavaScript downloaded onto the page okay because quick kind of figured out look at it and says like what this is a static page there's no need for JavaScript in here anywhere and so it didn't send anything down if you were to use any other framework like whether it doesn't matter like whatever framework you would choose the existing frameworks basically can't do this they would be like oh code let's send it over to the client whether you need it or not now there are ways to disable JavaScript like in the in the page where it's completely static like of course you can disable on any framework sending them the JavaScript but what we're going to show you in the second is like what happens when some things are interactive and other things are static then like you can't just disable JavaScript right and the thing is that existing frameworks they can't differentiate and so they always send all the JavaScript to the client and they always execute it it's not imagine in a in a normal setting what you were having here is a situation where you know you you send a static page to the client and then you send the JavaScript and the JavaScript like we does everything and then repaints the static page only to come to the exact same state which was completely pointless but the reason we did that is because we didn't know what if there was a behavior over there what if there was a listener that we needed to find and because we don't know we had to do it and so quick because it works differently can be intelligent about it like actually I looked at it and I decided that there's no behavior and so there's nothing that I need to do everything you're saying makes sense I think something that all I have to try later on is doing this exact same thing with like what I built with react and then what I built with express because it's like what you're saying makes sense yet a visual I think is going to be really good to do later on I'm not too worried about it right now I'm just excited that I got the hello world's going on okay so let's open this file up so I think if you go to your code your VS code and if you open up the source folder and then side of the source folder should be yep yep yeah it should be routes and look for a file called index
Got it got it yeah I felt like this is gonna be it's this is something that I've learned since joining the working more on the back end of the tech world and I'm saying back end of tech world not just like back end developer not there yet but I've been in sales and in marketing and learning services so it's much more teaching about the technology after the technology is developed is very different than being part of building the technology and updating and it's definitely something that it's I've been on this journey for maybe a month now where I started working on learning JavaScript and then I've always want to become a Debril and so while I was working on finding out more of how to be able to do that everyone's like yo you got the personality but you don't have the tech or content and I'm like oh while we're gonna do teach Jen tech and get both so I love that it's they all build on top of each other and it's so similar yet different and also something that I really do want to call out of thank you for being human I know we touched on this very very briefly but I was very nervous about this and I feel like this is something that so many newbies getting into tech are like oh I don't understand the tech and there is a big comparison of what you know not all people can break it down or want to break it down that's something I've learned on the podcast I also have of like putting that intellectual burden on people it's not something that's made for everyone yet there are so many kind people in this world that are definitely willing to break it down for you and so thank you again for joining which describing is this thing called curse of knowledge right like once once you understand something you have a really hard time imagining what it is not understanding something right and this is a general problem for people for humans right is that once they understand something like it's obvious like of course it's obvious like how do you how do you so dumb not understanding the way well turns out before you understood this like you were also on the other side where it wasn't obvious at all how how long did it take you to build like angular and then now quick is it something that you did pretty quickly like six months or no it takes a long time so let me back up a little bit first then I want to point out that I feel like anything in like including software right it's not that it is complicated like every single part of it is pretty simple it's just there's a lot of it right so if you've been doing something longer it's not really that you understand I mean things build up on each other and become complicated right but like the thing I really want to get across and I always told as my kids as well is that it's just good Gillian small things that are in themselves pretty simple and straightforward right the difference really comes down to is just there's just so many of them and because it's so many of them it really just comes down to like the amount of time to spend on it right so it is just like you you have to spend a lot of time on it to kind of go through it and learn all these things but individually they're all pretty straightforward I love that so you ask me how long it took me to build angular JS pretty long time actually because I didn't know what I was doing right it's a learning experience for everybody I think angular JS took about two years but I mean that was a long time ago and I can't quite remember with quick it was much much quicker it was only about a year maybe a year and a half we kind of knew already what we wanted and so we were able to just go straight after the particular goal but quick is also a lot more ambitious than what angular JS was trying to do angular JS was one of the first ones in this particular space I think the way you think about it is it kind of went through stages you know at the very very beginning browsers were didn't even have JavaScript right they were not really interactive and so you just showed static documents and so on a server you would generate the HTML send of the client the client would show it and that would be bad and at some point we added JavaScript and so we're like oh now we can make it interactive and the first kind of interaction we added is that servers still produced HTML and then after the fact we sprinkled JavaScript on top of it so we generated the content and then we made the content interactive and a problem with that approach is that you kind of have to do it twice you do it once on a backend like oh I'm generating a whatever clock right so I have to generate a clock and then you go to the client you go like all right the client has to update so now I have to read code there's pretty much identical for updating the clock right and so creating the clock and replay repainting the clock end up being two things that you write in two different locations and two different languages and gets annoying pretty quickly and so people were looking for kind of the unified answers to this particular problem and the answer came in in this component-based frameworks I guess you could call them and I like to think that AngularGest was one of the first but the idea of component-based frameworks is that you write a component and then that component runs both on a server and on the client originally that wasn't the case originally they only ran on a client but then we kind of realized like oh if it just runs on a client then it takes a long time for the page to be painted right so you navigate to a page and you just see a blank page right like just whiteness and then the page says oh you need to go get the JavaScript and the framework and the application and everything as if you go fetch all that stuff and then you go and execute all that stuff it's at some point like a couple of seconds later everything executes and downloads and runs and like now you have your clock painted right and so there's a huge delay between like I navigate to a page and then I see something and that's kind of the problem with like the first generation like the one of the generations of frameworks and so people came up with this idea of server-side rendering right and the idea is like well what if we ran the code on the server first it's JavaScript so we can do that and then we can get a static snapshot of what the page will look like send the static snapshot over to the client and then in the client you would run the code again but instead of just staring at a blank page you're now staring at the actual application of course it doesn't work like it's just like a printing okay but you have like oh at least I'm recognizing it's a clock what can I do over here right I think I'm gonna think about it might hopefully by the time you kind of figure out what I want to do okay you go buddy sorry hopefully by the time you figure out what you want to do you you know the page was able to initialize and run all that stuff and become interactive right so we went from like white page to like wait two seconds to having an interactive thing to you know having a painting of the thing that you want wait two seconds and then having an interactive thing that's an improvement and so collectively we called it the service side renderer and thank you for explaining that I think that's something that like I've had I've worked a previously worked at GoDaddy so when I was in the hosting department that was a big thing was you know load time on websites that helps SEO all that so I never knew all of this went into it so it's definitely very cool to learn about and hi Dan thank you for joining and I think Mishko is is definitely no longer gonna be a mysterious white void because he's joining today to talk about why was that why was that mystery as white void because nobody like you you've done this cool thing and so like nobody it's I think this is the something that happens a lot in any industry where people that have accomplished something or is well known people are like oh well they're yeah or they're untouchable like oh we'll never hear from them or something like that is it's it's something that I've heard from a lot of different platforms and it's like no like it's just harder to get them because they're they get so many messages yeah but like I mean I understand how it could go to your head right like but I I think I'm under the day most people are pretty down to earth it is just comes down to like you know people get a lot of messages and so he's trying to juggle everything but I you know I'm under the day people won't have fun anyways and so like it's nice to come on a show and talk about things and like this is my relaxing time yeah and thank you for that and just for all of the humans that have joined as a heads up Mishko does know that he's gonna have to break it down quite a bit for teach genteque like we're not 100 present there and Mishko I really appreciate you breaking down a bit of the I could almost say the theory behind it or you know yeah that's the theory but yeah yeah the theory of it it really helps learning the theory to understand what we're gonna be going into okay so since I already gave you three quarters away on a theory so let me just finish the story perfect so so like you know think about the stages right stage one is everything is just a server-side rendered and there's no interactivity in the client you have static pages so obviously we're like hmm that doesn't work very well we want interactivity so stage two would be like okay server-side rendered but then you sprinkle a JavaScript on the client to make it interact this is kind of like the jQuery days and a problem there is like you're duplicating work and it's kind of hacky it's odd-hoc it's not like it doesn't scale very well basically so then people are like okay I have an idea we'll do everything in JavaScript and so you have the client-side frameworks that are born and then the problem becomes yeah but it's slow before it interacts right there's this white void before like I can work it and so the service-side rendering is the answer's like oh well pre-render on a server send you the image snapshot right it's it's not interactive it's it's dead it's it's you can't do anything with it but hopefully by the time the JavaScript wakes up and does it stuff we have made it interactive and you won't even notice the switch a root and then you can play with it so that's kind of where we are is the kind of the status quo and so the thing that's different about quick is that well let me back up a second the problem is that there is this delay between like you think you have a page like you might as well wake it's sounding really robotic all of a sudden oh no is it me I hear it when you're not you're muted I can't hear you I cannot hear you I don't know what my all my mics and stuff are trying to do you know this is when we have backup okay I think I think your mic is working on you know while we're waiting I think I can tell bad computer jokes that's my favorite thing I like dad jokes and I tell dad jokes to my kids I'm sorry so so do you know where I keep my dad jokes no where in a dad a base okay okay cool and apparently it was just me so you know Bluetooth headsets are amazing but not always your friends so you know gotta yeah to the old sturdy plug-in yeah so Bluetooth is well that's not it's a complicated thing okay so so what were we we were talking about kind of how we went through stages of developing our applications right and so currently we're in the stage where you know you're on Twitter somebody sends you a link and it's like I don't shoes you want to buy shoes right click on the shoes and you immediately see the shoes and then there's a buy button right and you try to click the buy button and it doesn't work because it takes like I don't know 10 seconds for all this JavaScript to kind of wake up and do its thing etc and finally the thing works right and so people are like you know screw it you know I don't need to choose that much since they leave so there is a need to have the applications that just come on instantly right the problem is that we kind of don't have the technology right like the technology we have is server-side render HTML which is a static snapshot right send it to the client while the person is looking at the static thing we download all the JavaScript all the behavior and then we re-render everything and we do like switch a room or like switch you the interactive one for the static one and hopefully you don't want to even notice and then you can do stuff and the problem is in a mobile device that could be like 10 15 even 30 seconds I don't know if I can still imagine that like everything loads so quickly it depends like so you know if you have an iPhone and if you have a 5G network it's not so bad it could be like a couple seconds if you on that their hand have like an all super old Motorola device right and you're like in 3G then yeah it can take a long time okay so so quick is basically what we I like to think of it as a next stage of this particular game and then what the quick tries to do it says you know what instead of sending you static snapshot you know and and then trying to spend all this time trying to figure out where the so on the back of the second like what what makes a HTML static right and the answer is well it's the lack of listeners right you didn't attach any behavior to it so you have the tree you have everything rendered but it's nothing attached to it and because there's nothing attached to it like you know clicking the button doesn't do anything right because you didn't tell the computer or the browser like what should happen when I click this button and because you didn't tell that to the browser obviously browser won't do anything right like you're gonna button the thing happens right and and so so the problem is like well how do we figure out what what listener goes where and the answer to it is this process we called hydration but basically just means just run the damn application from the very very beginning and whatever it produces that's for your listeners right got it running it from the very very beginning is huge amount of expense that we would like to avoid so quick has kind of coined the term called reasonable and the idea behind quick is that you want to run the application on a server get it to a particular state serialize it into the HTML including the listeners send it to the client and the client can just continue exactly with the server left off and so because of that you get rid of that time this delay right so quick is kind of weird and hard to explain because we usually when you look at different frameworks you are comparing the developer experience like do I use templates do I use JSX do I you know like how exactly am I gonna tell the computer what to do right and some people like want some people like the other and like you know we have a debates about what's better like whatever right and the other day it doesn't really matter you're just really telling the computer like I want this to happen right so the thing that's different about quick is not how you told the computer but actually what quick does underneath so that it can skip the step right and so when you start looking with playing with quick you look at it you go like this looks just like react the answer is yep that's that's kind of intentional like you know the fact that it looks just like react is not a coincidence but what's different what's unique about it is what actually happens now for a small hello world app you know the difference is kind of trivial and not really interesting but if you get like into a large application the fact that quick can skip hydration is pretty cool maybe I don't do one more thing and then we jump into maybe some coding car are you familiar with the virtual machines like virtual servers or yeah like so VMware came out like maybe 20 years ago and they had this crazy thing that was kind of mind blowing when I first saw it where you could open up a browser or sorry open up like another computer inside of your computer and so the main computer is called the host computer and the thing that you're opening inside of it is called the virtual computer and it was kind of like yeah what's the craziness is this so the thing with the virtual with the virtual machines is that you are for example running on a windows and you boot up like Linux inside of it right inside a virtual box and then the boot up process is slow like on all computers like it takes several minutes for it to come up and then once it boots up the crazy thing you can do with the VM is you can let's say you open up like the Chrome browser you can save it and it saves it to the disk and then you can take that file and you can give it to your friend and that friend can like just resume the file and they skip the boot up process right they don't they don't go through boot up and opening up Chrome they literally just open it and they're like Chrome open application running you know system booted like what how did you let us to skip the stuff in between yeah well that's because the VM fully saves everything into that file so that it can just resume where it left off right and this is what we mean by resumability so the the thing with quick that we're trying to do is we want to make the web reasonable so we want the web to be just like the VM machine where the boot up process right that it's called hydration or like the thing that figures out where the listeners go and grounds the application all that stuff we want to skip that part right we want to go straight to like okay the application is running go okay and and so that's kind of the magical bit behind quick is is not that it's trying to build the app differently or like in a different style from a developer point of view it's that what happens underneath is different and the result is that instead of forcing the browser to download all the JavaScript ahead of time and then execute all the JavaScript ahead of time which is expensive we figured out a way to do it the other way around where like the browser doesn't really download anything and then when you start interacting with the page then we only download that very specific thing that's needed for that interaction right so like if you look think about a large application like Amazon app right you could have like code for like adding things to shopping cart code for like looking at the product from a different angle code for like commenting on the product code for like sending a review code for asking for refund code for like like this be gillian things you can do right right but you don't do all of those things at once you only do one of them right like I want to look at the product from a different angle is just a tiny sliver of what the application can do and so instead of downloading everything ahead of time and then running everything out of time which is expensive quick basically says actually you only want to just look at the product from a different angle so I'm just only going to download that particular piece of code so that answers my actual follow-up question which was going to be what was is the difference of that compared to caching and how you explain that it only loads that particular piece that's going to be a lot different than caching where it previously loaded and tries to cause it to go a bit faster yeah so I mean caching is a very complicated term in terms of like it could be used all over the place right so like not exactly sure what you mean by it like in a case of HTML when you when you render the HTML on a server we definitely cash that on a system that's called a CDN content delivery network and so CDN is basically the thing that actually serves up the file and so yes you can definitely cash it out that layer so that when you navigate to the you know sneaker for example the CDN can instantly just be like oh here's the file good yeah I think I'm thinking more like browser caching because if it's if we're on the browser side we wouldn't necessarily need it to be cashed because quick is made to load when just first specific part it doesn't need to previously like it'll load faster from the very beginning instead of having to have it cashed on the browser side to be able to load quicker yeah so caching is about you know faster delivery of the content but there's a second problem which is when the browsers when the application starts up on the client it has to execute the application right and browsers don't really know how to cash the execution right the execution is actually code running that has to happen right so that's the even if you somehow deliver all the JavaScript quickly to the client because it's cashed and whatever you're still paying for the cost of like running it all and so in the way you can think of a quick as a way of caching it so quick basically figured out a way to run it once on a server cash the result in such a way so that on the client the client the browser can continue from where the server left off rather than going all the way to the beginning and redo all that work all right I think like it sinks in enough this is something that I've definitely had to learn where I'm like it makes enough sense yet it's going to be something that I got a noodle on and knowing my luck I'm gonna have like a question for you in like two weeks and be like okay cool I will tweet you and see if I can get this answered but this is a hard concept because like I've been actually struggling with it to explain it to the people on Twitter of like how different it is because people are used to looking at the world in a particular way and so if you come with something different they're like so it's just like this other things like no no no so it's just like that thing like well no right and so it is a different enough thing that it's not immediately obvious why it's different okay but I think I enjoy being newer to it because I'm like okay cool like it I do like we all do you need to compare it to something because it's kind of hard to conceptualize yet at the same time I'm like I feel like I'm new enough that I'm like I'm not I don't have a ton to compare it to okay let's do some coding and let's see examples will help it so okay you have a new thing here excellent the magical command to get started with quick is npm create quick at latest quick at there you go so that should download and install things yep and sure you can start with that folder name and so you want to do quick city yep express sounds good prettier sounds good I do like prettier it makes me happy yeah so so now you can follow those steps so city into quick app and do npm install and then we should probably get the visual studio running inside of that folder so we can look around this is a very very random thing to appreciate but it's pretty and it has emojis it makes it easier to to comprehend as somebody that's newer to this as someone that is I'm also horribly dyslexic so it'll take me a while to like reread things having the different icons and like next steps and those type of things makes it a lot easier to go look at it and go okay cool this is what I've done so far these are next steps so I will let you thank you I will let Adam and Manu know Adam and Manu were two people working on it most of the time yes please thank them so getting used to this keyboard I'm used to typing on my laptop itself and since having to do two screens my quates this is a new keyboard you know it's a I type fast on a keyboard except when somebody's watching and then I can't type to save my life well I'm glad that it's not just me where it's the moment somebody's watching you're like whoop I can't type yes and for those that are watching do you have any questions so far I feel like a lot of you are on the more technical side as well and we went through theory of some basics which I really appreciate so anyone else have some any questions so far before you type npm start if you type code dot it should open up the VS code in that folder it's called space dots sorry yeah you're right never mind okay well it's my VS code doesn't that's okay it's okay I'll just click on the open button over there and then we can just open the folder I need to remember where it is supposed to be in here but I didn't move it into there so it's over here quick I'll put it up here we go yep yeah yeah okay so if we just do npm start over there okay and yeah if you open up local those 3000 usually if you do it in an Intel needle window it's kind of nicer because that you can make sure there's no like third-party extensions adding JavaScript which happens often times okay so here's your hello world of quick city this would be identical to just about any framework you that you would open up right that is not kind of the interesting bit so I want to show you the interesting bit so if you right click on it somewhere and go open up the developer tools go to the network tab let me get this bigger it like went into a very weird okay and refresh this page again okay and let's see so if you click on JS you have it on the top it says fetch code it says JS fetch xhr and jscs it's a yes it was right of it no to js one so you can only only want to see the JavaScript that's coming down okay so we're in a dev mode because we're in a dev mode we're using this thing called beat beat is like a server for refreshing your thing and one of the things it does is called hot module reloading anyway beat is a dev mode only thing and it would not be available in production so so that we only seeing it so you see where it says filter you can type in beat and then there's a check mark that says invert and then click on the invert check mark okay and the thing I want to show you is that you have no JavaScript downloaded onto the page okay because quick kind of figured out look at it and says like what this is a static page there's no need for JavaScript in here anywhere and so it didn't send anything down if you were to use any other framework like whether it doesn't matter like whatever framework you would choose the existing frameworks basically can't do this they would be like oh code let's send it over to the client whether you need it or not now there are ways to disable JavaScript like in the in the page where it's completely static like of course you can disable on any framework sending them the JavaScript but what we're going to show you in the second is like what happens when some things are interactive and other things are static then like you can't just disable JavaScript right and the thing is that existing frameworks they can't differentiate and so they always send all the JavaScript to the client and they always execute it it's not imagine in a in a normal setting what you were having here is a situation where you know you you send a static page to the client and then you send the JavaScript and the JavaScript like we does everything and then repaints the static page only to come to the exact same state which was completely pointless but the reason we did that is because we didn't know what if there was a behavior over there what if there was a listener that we needed to find and because we don't know we had to do it and so quick because it works differently can be intelligent about it like actually I looked at it and I decided that there's no behavior and so there's nothing that I need to do everything you're saying makes sense I think something that all I have to try later on is doing this exact same thing with like what I built with react and then what I built with express because it's like what you're saying makes sense yet a visual I think is going to be really good to do later on I'm not too worried about it right now I'm just excited that I got the hello world's going on okay so let's open this file up so I think if you go to your code your VS code and if you open up the source folder and then side of the source folder should be yep yep yeah it should be routes and look for a file called indextsx and so this is your component right you can see welcome to quick city the meta framework for quick and this is exactly what's rendered there's also a what we call a layout layout is basically the banner on the top and the footer at the bottom and that's that's controlled by the layout file in here we don't have to worry about it just yet but let's go back to index
tsx and so this is your component right you can see welcome to quick city the meta framework for quick and this is exactly what's rendered there's also a what we call a layout layout is basically the banner on the top and the footer at the bottom and that's that's controlled by the layout file in here we don't have to worry about it just yet but let's go back to indextsx so let's add some behavior right because like as of right now this doesn't do anything and so it's not really that exciting so let's say we want to allow you to click on the welcome to quick city title so we can add a listener to it so after h1 before the closing tag you can just say on click dollar sign and the C is capital and click before sorry before h1 so it's a bracket h1 space on click close bracket right so before the greater than sign okay sorry right there yeah so space on click no on on as in like yes okay it's trying to complete it for you over there and so in here it's going to be an arrow function to open close parentheses fat arrow and then let's do something simple like alert hello yep and so so no it opened close parentheses fat arrow means equal sign greater than sign equal greater than then okay called it the fat arrow okay see these are the terms like I'm like I'm not used to hearing out loud which is really helpful now that I'm learning all of that while doing these videos sure so now you can type in like like say alert and in parentheses you can say you know high or something in quotes it's it's alert parentheses like this yeah open parentheses alert open parentheses okay learn open parentheses that's a quote right what you have on there open parentheses there you go and now quote now quotes now hi okay here all right what I always type that that sounds good to me all right so because beat is running when you save this file it should automatically refresh the page so there's nothing for you to do okay so now if you click on welcome to quick city it will send okay so so the thing we're demonstrating here is that we have interaction now and so while at the beginning you could say like oh no javascript needs to be sent to the client now you can't do this right you can't just like blindly not send any javascript to the client because you wouldn't have the interaction so now the problem becomes is that all the existing frameworks are like what we have to have the javascript behavior and so they would send all of it down what I mean that all of it is all of it that you see on a page meaning including the header the footer the text everything that you see on a page would be sent so if you hit okay and if you click on a network tab again always have network tab okay refresh this page and again notice the network tab is empty right meaning no javascript got sent to the client now go and click on your welcome to quick city notice that javascript downloaded and executed now hit okay on that and if you click on the the the code is downloaded again if you click on response okay notice that the only thing that downloaded is just your alert right the file you wrote if you look at the file you wrote is much longer right there's multiple lines of code and all kinds of stuff in here and yet the system kind of looked at it and said yeah but the only thing you really need is just the alert and nothing else I'm curious just to see like the difference on the console and they need to be the inspects then we were in network right so if you refresh here you'll see tons of code download although um oh wow that is so cool and Google search is not the best example because Google search is actually also one of these frameworks that knows how to lazy load javascript but if you would go to um let's a good example I don't go to like uh target or what one of those ecommerce stores that doesn't matter and so if you look at yeah see old insane javascript that's coming down and then is builder IO is that built with quick uh our homepage is built with quick yes um and we're working on to allow other people to do this as well so builder IO is CMS system CMS means content management system okay uh yeah if you if you look at uh view page source um if you look at the network the options are in the front lines inspect and if you do network and yeah refresh this so there are some javascript wrote it but not a lot so the thing you're literally looking for is the um the size of it party down is is another technology we have for moving third party code of the main thread but you know that for another day yeah i'm like that's for for another time but it's really cool seeing how yes so the thing we can do is if you open up a new tab and in a new tab you also go to builder IO but this time add question mark render equals next but add on the URL just say question mark on the end of it's just a question mark render equals next so this is going to render using next JS which is a react system and now go to inspect and now look at the network and refresh this page and look at all the code of being valid oh wow right and now compare that to um to the other page you had which just has two items in there now of course if you interact with the menu right like if you hover over the menu you will see more code downloads yeah code downloads as you or if I scroll because we're like you know different things like this is interactive right so notice the difference right the difference is in classical system like everything is front loaded whereas here everything is it's push versus pull right like in the old system like everything is pushed to the client eagerly and now we're flipping it around and say actually let me just pull on the stuff that I need and it's not it's not the same amount of code in front of you versus behind you it's like all of it in front of you or just the tiny sliver of the things that you need to get the thing that the user actually asked for right so if I say add to the shopping cart then I'm only going to download the shopping cart code and not the commenting code right if I'm commenting on something that I'm only going to download the commenting code but not the shopping cart code or the menu code or the you know return or feedback code or whatever right like there's gazillion things you can do on the website um something that I just want to point out is it even uh for while I'm scrolling and having to gain more content I it only loaded in uh 546 milliseconds where like the um JavaScript version was 1
tsx so let's add some behavior right because like as of right now this doesn't do anything and so it's not really that exciting so let's say we want to allow you to click on the welcome to quick city title so we can add a listener to it so after h1 before the closing tag you can just say on click dollar sign and the C is capital and click before sorry before h1 so it's a bracket h1 space on click close bracket right so before the greater than sign okay sorry right there yeah so space on click no on on as in like yes okay it's trying to complete it for you over there and so in here it's going to be an arrow function to open close parentheses fat arrow and then let's do something simple like alert hello yep and so so no it opened close parentheses fat arrow means equal sign greater than sign equal greater than then okay called it the fat arrow okay see these are the terms like I'm like I'm not used to hearing out loud which is really helpful now that I'm learning all of that while doing these videos sure so now you can type in like like say alert and in parentheses you can say you know high or something in quotes it's it's alert parentheses like this yeah open parentheses alert open parentheses okay learn open parentheses that's a quote right what you have on there open parentheses there you go and now quote now quotes now hi okay here all right what I always type that that sounds good to me all right so because beat is running when you save this file it should automatically refresh the page so there's nothing for you to do okay so now if you click on welcome to quick city it will send okay so so the thing we're demonstrating here is that we have interaction now and so while at the beginning you could say like oh no javascript needs to be sent to the client now you can't do this right you can't just like blindly not send any javascript to the client because you wouldn't have the interaction so now the problem becomes is that all the existing frameworks are like what we have to have the javascript behavior and so they would send all of it down what I mean that all of it is all of it that you see on a page meaning including the header the footer the text everything that you see on a page would be sent so if you hit okay and if you click on a network tab again always have network tab okay refresh this page and again notice the network tab is empty right meaning no javascript got sent to the client now go and click on your welcome to quick city notice that javascript downloaded and executed now hit okay on that and if you click on the the the code is downloaded again if you click on response okay notice that the only thing that downloaded is just your alert right the file you wrote if you look at the file you wrote is much longer right there's multiple lines of code and all kinds of stuff in here and yet the system kind of looked at it and said yeah but the only thing you really need is just the alert and nothing else I'm curious just to see like the difference on the console and they need to be the inspects then we were in network right so if you refresh here you'll see tons of code download although um oh wow that is so cool and Google search is not the best example because Google search is actually also one of these frameworks that knows how to lazy load javascript but if you would go to um let's a good example I don't go to like uh target or what one of those ecommerce stores that doesn't matter and so if you look at yeah see old insane javascript that's coming down and then is builder IO is that built with quick uh our homepage is built with quick yes um and we're working on to allow other people to do this as well so builder IO is CMS system CMS means content management system okay uh yeah if you if you look at uh view page source um if you look at the network the options are in the front lines inspect and if you do network and yeah refresh this so there are some javascript wrote it but not a lot so the thing you're literally looking for is the um the size of it party down is is another technology we have for moving third party code of the main thread but you know that for another day yeah i'm like that's for for another time but it's really cool seeing how yes so the thing we can do is if you open up a new tab and in a new tab you also go to builder IO but this time add question mark render equals next but add on the URL just say question mark on the end of it's just a question mark render equals next so this is going to render using next JS which is a react system and now go to inspect and now look at the network and refresh this page and look at all the code of being valid oh wow right and now compare that to um to the other page you had which just has two items in there now of course if you interact with the menu right like if you hover over the menu you will see more code downloads yeah code downloads as you or if I scroll because we're like you know different things like this is interactive right so notice the difference right the difference is in classical system like everything is front loaded whereas here everything is it's push versus pull right like in the old system like everything is pushed to the client eagerly and now we're flipping it around and say actually let me just pull on the stuff that I need and it's not it's not the same amount of code in front of you versus behind you it's like all of it in front of you or just the tiny sliver of the things that you need to get the thing that the user actually asked for right so if I say add to the shopping cart then I'm only going to download the shopping cart code and not the commenting code right if I'm commenting on something that I'm only going to download the commenting code but not the shopping cart code or the menu code or the you know return or feedback code or whatever right like there's gazillion things you can do on the website um something that I just want to point out is it even uh for while I'm scrolling and having to gain more content I it only loaded in uh 546 milliseconds where like the um JavaScript version was 13 seconds and then target was 3
3 seconds and then target was 356 seconds yeah so this is something yeah this is something that also would tremendously help with SEO too to be able to talk to marketing or you know small businesses now can I ask you like a totally random thing about that I know that I was looking at it so is builder that I owe just is it a website builder then so this is where it kind of gets hard to explain uh in a way yes but it's a very particular kind of website builder right okay imagine your target dot com uh you cannot run target dot com on something like wix so wix is a uh the builder right because there's just like so much complicated things that they need specifically to them so so builders are uh website builders are kind of targeting uh I guess mom and pops you know like small businesses they don't really have a lot of complicated stuff in there yeah somebody like target like it probably has a hundred engineers working on this thing uh complicated shopping cart like all kinds of stuff there's no way you can run it on a basic builder so what uh builder IO is is kind of a builder but for like enterprises and specifically the thing over there is that enterprises have their own technology stack and builder integrates with the technology stack versus something like wix basically says we are the technology stack and take it or leave it right so the difference is like do you play with whatever the customer already has or do you say no no no this is it right and that's kind of the difference most most website builders are like this is it take it or leave it you cannot modify things inside of it um whereas uh builder IO is really meant for enterprises that have complicated uh needs and we can work with whatever existing technologies they happen to have that's really cool I went to Verizon because I used to work for this company back in the day and the website would always take forever to load so I was just curious but it's it's still saying you know uh seven hundred twenty nine milliseconds so a better thing to look at is not load so load means how long it took to download all the code okay the blue one it says DOM content loaded that is a better number um so that that's also says 500 so so the really to look at it properly you uh actually let's go to builder because builder has it built both in in next jess and i'm quick right so this is the quick version and the other one over is is the other one so well let's do this experiment click on a um performance tab inside of the depth tools and click on the uh next uh whatever the recycling the the the the arrow with a pointing-type itself you see the in the left yeah that that thing yeah and just let it do its thing and just wait okay good and then do the same exact thing on the next jess website so it's the same exact website and that one was under performance yeah it's under performance yeah click that button and just let it do its thing and okay because these are different sites they'll be scaled differently uh so it's important to kind of look at but but look at um all the yellow stuff that you see at the top yeah or at leganc the java script at the at the bottom the the pie chart it says 1
56 seconds yeah so this is something yeah this is something that also would tremendously help with SEO too to be able to talk to marketing or you know small businesses now can I ask you like a totally random thing about that I know that I was looking at it so is builder that I owe just is it a website builder then so this is where it kind of gets hard to explain uh in a way yes but it's a very particular kind of website builder right okay imagine your target dot com uh you cannot run target dot com on something like wix so wix is a uh the builder right because there's just like so much complicated things that they need specifically to them so so builders are uh website builders are kind of targeting uh I guess mom and pops you know like small businesses they don't really have a lot of complicated stuff in there yeah somebody like target like it probably has a hundred engineers working on this thing uh complicated shopping cart like all kinds of stuff there's no way you can run it on a basic builder so what uh builder IO is is kind of a builder but for like enterprises and specifically the thing over there is that enterprises have their own technology stack and builder integrates with the technology stack versus something like wix basically says we are the technology stack and take it or leave it right so the difference is like do you play with whatever the customer already has or do you say no no no this is it right and that's kind of the difference most most website builders are like this is it take it or leave it you cannot modify things inside of it um whereas uh builder IO is really meant for enterprises that have complicated uh needs and we can work with whatever existing technologies they happen to have that's really cool I went to Verizon because I used to work for this company back in the day and the website would always take forever to load so I was just curious but it's it's still saying you know uh seven hundred twenty nine milliseconds so a better thing to look at is not load so load means how long it took to download all the code okay the blue one it says DOM content loaded that is a better number um so that that's also says 500 so so the really to look at it properly you uh actually let's go to builder because builder has it built both in in next jess and i'm quick right so this is the quick version and the other one over is is the other one so well let's do this experiment click on a um performance tab inside of the depth tools and click on the uh next uh whatever the recycling the the the the arrow with a pointing-type itself you see the in the left yeah that that thing yeah and just let it do its thing and just wait okay good and then do the same exact thing on the next jess website so it's the same exact website and that one was under performance yeah it's under performance yeah click that button and just let it do its thing and okay because these are different sites they'll be scaled differently uh so it's important to kind of look at but but look at um all the yellow stuff that you see at the top yeah or at leganc the java script at the at the bottom the the pie chart it says 1281 milliseconds or 1.2 seconds right was the the java script time for it to come to life and all the yellow is basically java script running on the on the client and so you can see that on a your modern device we're talking about 1
281 milliseconds or 1.2 seconds right was the the java script time for it to come to life and all the yellow is basically java script running on the on the client and so you can see that on a your modern device we're talking about 15 seconds of java script hammering your device right and this is a desktop device versus if you have a mobile this easily could be 3 4 5 even 10 times longer right because it's a mobile device which is not as powerful now go to the quick version of this uh and you are sorry you need to scroll to the top because you you scrolled scroll to the top here we go now do they now do the button again the performance button refresh yeah okay just give it a second and we should see uh similar kind of graph notice how much less yellow is in there yeah not only how much less yellow but look at the the the summary the scripting it's a 67 milliseconds okay versus 1,280 or something 1,281 right like huge difference um i'm sorry we're 67 milliseconds versus the other one was 800 i think that one thought that that thing was the overall system i think the was 821 sorry yeah um so we're talking huge difference of the amount of java script that got downloaded to make this page interactive and so the what quick is about is not about a different way of building your site in terms of the user experience uh developer experience it's about different way of delivering the content to the browser so that the browser doesn't choke when we first navigate to a page this is very very cool and i feel like now that words words are going to help like i'm like excited about it yet i'm i'm working on formulating my questions because it definitely i can see how this would really help with um websites and those type of things on now because i've noticed in like if i'm doing something in HTML or CSS or java script or react there's slightly different variations on how to do something mm-hmm is with your experience and um i'm not i'm not sure the best way to ask this is it much different from uh you know being able to do it you said it's very comparable to react in the way you build something yep okay so if those who know react it may be a bit easier for them to use quick compared to those who know express for example uh well express is a backend technology right um so let's let's build a counter let's say in here and maybe uh if we have a few more minutes and then maybe we can call it a day um because it's about an hour right yeah okay okay so um let's make a new component so i think if you go at like line 12 you could type in component and i think it should autocomplete if we got this right get component dollar see what it says component dollar and just hit uh sorry you clicked on the first one is we're supposed to click on the second one the one with the box the empty box the second uh okay oh cool um oh it generated a lot of stuff in there um maybe okay that's okay we'll just do use this she just called it a counter so just type counter with the capital C where just start typing right now without doing anything just type counter capital C deal okay so um no space leave the space perfect okay so what we did is we created a new component um and the component is called a counter you can see it on line 16 there's the counter props we we're not going to use any props so it's unless we know the template generated all this extra things that is unnecessary for us uh line 17 has used store its red so i think you have to click on it and hit control space bar i think to autocomplete and call a second one and yeah sorry you added the mixture stuff but it did the import so like it just make sure it's a store to leave the extra yeah that's weird there we go uh did it not do an import yeah sorry you know what i think it's apple or control and then period I don't know if you have a Mac or Windows yeah apple one is in the Mac apple a period yeah um there we go and add missing function to no no no no not uh you update import as you want there we go okay okay so we have a button and the button is line 23 you can see that there's a button and it has an on-click behavior and the on-click behavior updates the the count and on line 24 we just print the value uh and then the only thing we have to do is now refer to the counter from the main example right so if you go down the line 8
5 seconds of java script hammering your device right and this is a desktop device versus if you have a mobile this easily could be 3 4 5 even 10 times longer right because it's a mobile device which is not as powerful now go to the quick version of this uh and you are sorry you need to scroll to the top because you you scrolled scroll to the top here we go now do they now do the button again the performance button refresh yeah okay just give it a second and we should see uh similar kind of graph notice how much less yellow is in there yeah not only how much less yellow but look at the the the summary the scripting it's a 67 milliseconds okay versus 1,280 or something 1,281 right like huge difference um i'm sorry we're 67 milliseconds versus the other one was 800 i think that one thought that that thing was the overall system i think the was 821 sorry yeah um so we're talking huge difference of the amount of java script that got downloaded to make this page interactive and so the what quick is about is not about a different way of building your site in terms of the user experience uh developer experience it's about different way of delivering the content to the browser so that the browser doesn't choke when we first navigate to a page this is very very cool and i feel like now that words words are going to help like i'm like excited about it yet i'm i'm working on formulating my questions because it definitely i can see how this would really help with um websites and those type of things on now because i've noticed in like if i'm doing something in HTML or CSS or java script or react there's slightly different variations on how to do something mm-hmm is with your experience and um i'm not i'm not sure the best way to ask this is it much different from uh you know being able to do it you said it's very comparable to react in the way you build something yep okay so if those who know react it may be a bit easier for them to use quick compared to those who know express for example uh well express is a backend technology right um so let's let's build a counter let's say in here and maybe uh if we have a few more minutes and then maybe we can call it a day um because it's about an hour right yeah okay okay so um let's make a new component so i think if you go at like line 12 you could type in component and i think it should autocomplete if we got this right get component dollar see what it says component dollar and just hit uh sorry you clicked on the first one is we're supposed to click on the second one the one with the box the empty box the second uh okay oh cool um oh it generated a lot of stuff in there um maybe okay that's okay we'll just do use this she just called it a counter so just type counter with the capital C where just start typing right now without doing anything just type counter capital C deal okay so um no space leave the space perfect okay so what we did is we created a new component um and the component is called a counter you can see it on line 16 there's the counter props we we're not going to use any props so it's unless we know the template generated all this extra things that is unnecessary for us uh line 17 has used store its red so i think you have to click on it and hit control space bar i think to autocomplete and call a second one and yeah sorry you added the mixture stuff but it did the import so like it just make sure it's a store to leave the extra yeah that's weird there we go uh did it not do an import yeah sorry you know what i think it's apple or control and then period I don't know if you have a Mac or Windows yeah apple one is in the Mac apple a period yeah um there we go and add missing function to no no no no not uh you update import as you want there we go okay okay so we have a button and the button is line 23 you can see that there's a button and it has an on-click behavior and the on-click behavior updates the the count and on line 24 we just print the value uh and then the only thing we have to do is now refer to the counter from the main example right so if you go down the line 85 you do yes so in line 8.5 we would like to say counter with a angle brackets right so on the same line so 8.5 is my way of saying insert in your line between 8
5 you do yes so in line 8.5 we would like to say counter with a angle brackets right so on the same line so 8.5 is my way of saying insert in your line between 89 okay that's what i was thinking but thank you for the clarification okay um i'm sorry what did you say we were inserting uh counter so angle bracket so open uh what is it great or less than sign here we go counter perfect you just hit enter on it and then back slash so that it be set close it and then closing angle bracket there you go uh and why is it complaining oh because oh it wants a step sorry so in there uh counter put space step equals one step so that's like a parameter to it right uh and i think the one has to be a number so yeah perfect exactly you got it cool so now if you go to our quick tab we have a counter oh yeah again again look at at the bottom there is no JavaScript yeah and if you click on the counter javascript downloads and it updates the counter right so now notice this you click on a counter it downloads some javascript and then if you click on the welcome to quick city it downloads more javascript okay right so instead of having a world where all the javascript is eagerly delivered to the client and you know for a hello world it's trivial it doesn't matter but for large websites this becomes a problem we have this other world where instead of delivering everything at once we actually deliver just a bit that you need to perform the operation and nothing else yeah this makes sense this makes sense now to one day i do need to work through remaking all of these uh myself which has been interesting to say the least um but this is really cool how it does that in with much less load time and now i'm curious when you've said that you're explaining this to people that it can be kind of hard to explain do you normally show them the network load times is that how you normally explain it yeah i never go load times is usually what i focus on i think the the reason is that you know people have preconceived notions of things and so you know you know if somebody already knows angular react and view they they have a very clear idea of what a framework is and when you come up with it with quick the difference is not necessarily of how it looks like but what it does underneath it and my argument is that all the existing frameworks they do it by eagerly pushing javascript to the client and so to even suggest that you could flip this around and have this lazy is i think it just doesn't fit into people's mental model and because of that people are just having trouble understanding it because they look at this thing they go like well it looks just like a react so like why do we need another framework that looks just like react right and what they're not really or rather what i'm failing to explain or you know what's not really clicking is that it's not about the developer experience it's not about what you as a developer right it's about the end result of what gets fed to the browser so so quick is is a you kind of framework that you know has a developer experience similar to react and react is love developer experience by a lot of people right so so so we think we have a good developer experience there but it's not about that right it's about the fact that when you have large websites you will end up suffering the faith of too much javascript being downloaded eagerly and what quick aims for is to make sure that that doesn't happen right that instead of eagerly downloading javascript it becomes lazy and then instead of like downloading all of the javascript it becomes download just the bare minimum that you need to get the job done so it really kind of flips the the way code is delivered to the client and as i said for for small websites it makes no difference it's really get big right that like it makes a huge difference and i think this is going to be a very not related but possibly related question uh when i worked in hosting and it was echo daddy and people work in parian load times it a lot of it was with wordpress but wordpress you wouldn't be able to use something like quick because it's built with yeah because wordpress is its own way of doing things yeah that's what i thought and essentially it competes with quick okay not really because it's a different thing it's a different way yeah yeah yeah controls the rendering pipeline like i guess wordpress they could migrate on top of quick and then they would get these benefits uh but like that's such a complicated and huge effort and nobody's going to do that yeah but it it makes sense uh thank you for helping close that loop for me because i was like this is where most people but i get like wordpress is like a more technical website builder kind of thing um without type of format and uh and uh davi co is saying could go headless yeah so that's builder right builder right is a headless cms so wordpress is hosted cms i think that's what the term is for it right so cms being content management system right like you have some content that you want to fill readers and you want to change it all the time um and so that whole headless thing is the uh you know i want to modify content without um having engineers involved in the process because like the last thing engineer wants to know is like oh you wanted 10% sale last week but now you want a 15% sale really like that that's what my job is to change the percentages got it got it okay cool well i think that i've definitely gotten a lot of knowledge dropped from you any anything else that you think we should know before letting you go today um no just you know i i love coding and i think it it's just the amount of time you spend on it so i like i would like to just encourage you to just not give up on this and just you know and and the more it's like everything else in life the more you know it but particular topic the more enjoyable it becomes right definitely that's what i always tell my kids it's like the only the reason you're not enjoying this thing is because you don't have that no enough about it yes and it's horribly um on days that i don't have a guest i've been doing co-work with me like co-work with Jen and it's really embarrassing when i'm working through it and people are joining and they're like Jen we did this instead and i'm like i'm trying i just don't get it there's millions of different ways of doing things and it just takes time so don't give up thank you thank you for that and we hope to keep you on the loop on this journey i know you have lots of shows to be on but thank you for your time today we appreciate it we should go you will come
9 okay that's what i was thinking but thank you for the clarification okay um i'm sorry what did you say we were inserting uh counter so angle bracket so open uh what is it great or less than sign here we go counter perfect you just hit enter on it and then back slash so that it be set close it and then closing angle bracket there you go uh and why is it complaining oh because oh it wants a step sorry so in there uh counter put space step equals one step so that's like a parameter to it right uh and i think the one has to be a number so yeah perfect exactly you got it cool so now if you go to our quick tab we have a counter oh yeah again again look at at the bottom there is no JavaScript yeah and if you click on the counter javascript downloads and it updates the counter right so now notice this you click on a counter it downloads some javascript and then if you click on the welcome to quick city it downloads more javascript okay right so instead of having a world where all the javascript is eagerly delivered to the client and you know for a hello world it's trivial it doesn't matter but for large websites this becomes a problem we have this other world where instead of delivering everything at once we actually deliver just a bit that you need to perform the operation and nothing else yeah this makes sense this makes sense now to one day i do need to work through remaking all of these uh myself which has been interesting to say the least um but this is really cool how it does that in with much less load time and now i'm curious when you've said that you're explaining this to people that it can be kind of hard to explain do you normally show them the network load times is that how you normally explain it yeah i never go load times is usually what i focus on i think the the reason is that you know people have preconceived notions of things and so you know you know if somebody already knows angular react and view they they have a very clear idea of what a framework is and when you come up with it with quick the difference is not necessarily of how it looks like but what it does underneath it and my argument is that all the existing frameworks they do it by eagerly pushing javascript to the client and so to even suggest that you could flip this around and have this lazy is i think it just doesn't fit into people's mental model and because of that people are just having trouble understanding it because they look at this thing they go like well it looks just like a react so like why do we need another framework that looks just like react right and what they're not really or rather what i'm failing to explain or you know what's not really clicking is that it's not about the developer experience it's not about what you as a developer right it's about the end result of what gets fed to the browser so so quick is is a you kind of framework that you know has a developer experience similar to react and react is love developer experience by a lot of people right so so so we think we have a good developer experience there but it's not about that right it's about the fact that when you have large websites you will end up suffering the faith of too much javascript being downloaded eagerly and what quick aims for is to make sure that that doesn't happen right that instead of eagerly downloading javascript it becomes lazy and then instead of like downloading all of the javascript it becomes download just the bare minimum that you need to get the job done so it really kind of flips the the way code is delivered to the client and as i said for for small websites it makes no difference it's really get big right that like it makes a huge difference and i think this is going to be a very not related but possibly related question uh when i worked in hosting and it was echo daddy and people work in parian load times it a lot of it was with wordpress but wordpress you wouldn't be able to use something like quick because it's built with yeah because wordpress is its own way of doing things yeah that's what i thought and essentially it competes with quick okay not really because it's a different thing it's a different way yeah yeah yeah controls the rendering pipeline like i guess wordpress they could migrate on top of quick and then they would get these benefits uh but like that's such a complicated and huge effort and nobody's going to do that yeah but it it makes sense uh thank you for helping close that loop for me because i was like this is where most people but i get like wordpress is like a more technical website builder kind of thing um without type of format and uh and uh davi co is saying could go headless yeah so that's builder right builder right is a headless cms so wordpress is hosted cms i think that's what the term is for it right so cms being content management system right like you have some content that you want to fill readers and you want to change it all the time um and so that whole headless thing is the uh you know i want to modify content without um having engineers involved in the process because like the last thing engineer wants to know is like oh you wanted 10% sale last week but now you want a 15% sale really like that that's what my job is to change the percentages got it got it okay cool well i think that i've definitely gotten a lot of knowledge dropped from you any anything else that you think we should know before letting you go today um no just you know i i love coding and i think it it's just the amount of time you spend on it so i like i would like to just encourage you to just not give up on this and just you know and and the more it's like everything else in life the more you know it but particular topic the more enjoyable it becomes right definitely that's what i always tell my kids it's like the only the reason you're not enjoying this thing is because you don't have that no enough about it yes and it's horribly um on days that i don't have a guest i've been doing co-work with me like co-work with Jen and it's really embarrassing when i'm working through it and people are joining and they're like Jen we did this instead and i'm like i'm trying i just don't get it there's millions of different ways of doing things and it just takes time so don't give up thank you thank you for that and we hope to keep you on the loop on this journey i know you have lots of shows to be on but thank you for your time today we appreciate it we should go you will come