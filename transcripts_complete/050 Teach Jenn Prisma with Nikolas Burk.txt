Hello, hello beautiful humans. Welcome to another episode of Teach Gen Tech or as a homey updated the graphic Teach Gen Prisma, which I'm excited for all of those who have joined in on the journey of the Tweety Tag app. I think that's what we decided it was called Nicholas is here joining us today from Prisma and Nicholas, please introduce yourself and what the flow of today is going to be. Alright, yeah, very happy to do that. First of all, thank you for the invitation, Jen. I'm really looking forward to this
Nicholas is here joining us today from Prisma and Nicholas, please introduce yourself and what the flow of today is going to be. Alright, yeah, very happy to do that. First of all, thank you for the invitation, Jen. I'm really looking forward to this We've talked a little bit before the stream already, and I think we're just in the perfect position to really get a lot out of the stream together. My name is Nicholas. I work at Prisma. We are a startup that is focused on building database tools
We've talked a little bit before the stream already, and I think we're just in the perfect position to really get a lot out of the stream together. My name is Nicholas. I work at Prisma. We are a startup that is focused on building database tools So we kind of just want to make it easier for developers to work with databases. And yeah, like over there, I lead the developer advocacy team. We have four developer advocates on the team currently that I'm managing. And I've been actually around at this company for almost six years now
So we kind of just want to make it easier for developers to work with databases. And yeah, like over there, I lead the developer advocacy team. We have four developer advocates on the team currently that I'm managing. And I've been actually around at this company for almost six years now So I started when we were only five people. We were still called Graph Cool back at that time. Actually, we were in kind of another company with another product. And then we kind of pivoted over time, everything evolved
So I started when we were only five people. We were still called Graph Cool back at that time. Actually, we were in kind of another company with another product. And then we kind of pivoted over time, everything evolved And now we're called Prisma and are focusing on the database layer of developer applications. I dig that. And y'all, in case you were curious, like, I ended up using Prisma because Anthony said so. This is my like answer to a lot of stuff is Anthony told me to do it
And now we're called Prisma and are focusing on the database layer of developer applications. I dig that. And y'all, in case you were curious, like, I ended up using Prisma because Anthony said so. This is my like answer to a lot of stuff is Anthony told me to do it Anthony said so straight from the horses mouth. So he does know that half the time, those are like the two things I say all the time is or bendy Myers is always says things about accessibility. So I'm always like, what would bend you? And then because of like make sure I have my alt text and stuff
Anthony said so straight from the horses mouth. So he does know that half the time, those are like the two things I say all the time is or bendy Myers is always says things about accessibility. So I'm always like, what would bend you? And then because of like make sure I have my alt text and stuff And then Anthony made me do it as the other thing I say on repeat. So and what up Ryan and Anthony, yay, you're joining us as I'm talking about you. All right. It's so fun to be on stream yard only as a guest when we use it to stream what's new in Prisma every three weeks
And then Anthony made me do it as the other thing I say on repeat. So and what up Ryan and Anthony, yay, you're joining us as I'm talking about you. All right. It's so fun to be on stream yard only as a guest when we use it to stream what's new in Prisma every three weeks I mean, there as an admin and I can also move everything around, highlight, comments and all that. And here I for the first time I see what Prisma what three yard looks like as a guest. That's fun. And Anthony. There we go. Anthony says you're a stream yard pro. Some experience under my belt here
I mean, there as an admin and I can also move everything around, highlight, comments and all that. And here I for the first time I see what Prisma what three yard looks like as a guest. That's fun. And Anthony. There we go. Anthony says you're a stream yard pro. Some experience under my belt here I'm hoping that later this week I'm going to be starting to use OBS and ping instead. So we'll see we'll see I'm getting there. Yeah, actually, we thought about evaluating ping as well. Haven't started really looking into that, but it's floating around in our team
I'm hoping that later this week I'm going to be starting to use OBS and ping instead. So we'll see we'll see I'm getting there. Yeah, actually, we thought about evaluating ping as well. Haven't started really looking into that, but it's floating around in our team And I think at some point we'll also see if and maybe serves our requirements better than screen art. I will say it is pretty cool and being able to do like chat overlays and things with OBS. And then the usability of going because I use it for D&D as well
And I think at some point we'll also see if and maybe serves our requirements better than screen art. I will say it is pretty cool and being able to do like chat overlays and things with OBS. And then the usability of going because I use it for D&D as well I played D&D on Friday nights and the host has a ping account and it's really easy to get in kind of like stream yard. So from that aspect, I like it. Nice. All right. And should we talk a little bit about what we have planned for the screen today? Yes. All right
I played D&D on Friday nights and the host has a ping account and it's really easy to get in kind of like stream yard. So from that aspect, I like it. Nice. All right. And should we talk a little bit about what we have planned for the screen today? Yes. All right All right. Also, not multitasking very well and making sure that I am putting that we are live on all the things. So people know to come hang out with us. But I try to have it like where I just have to hit enter. And then when I don't, it's it's this. It is me not being able to multitask
All right. Also, not multitasking very well and making sure that I am putting that we are live on all the things. So people know to come hang out with us. But I try to have it like where I just have to hit enter. And then when I don't, it's it's this. It is me not being able to multitask But this I think is the fun thing about streaming live is I don't have to fake it. I'm literally this is who I am. So this is what everybody gets. And what up, homie. And thank you, Anthony and Ryan. I am working on it. I have like three new lights and lights behind me now
But this I think is the fun thing about streaming live is I don't have to fake it. I'm literally this is who I am. So this is what everybody gets. And what up, homie. And thank you, Anthony and Ryan. I am working on it. I have like three new lights and lights behind me now We're going to get a figure it out eventually. It's going to happen. But yes, please talk to us about Christmas. Yeah. So for the screen today, I think on a high level, we'll do two things
We're going to get a figure it out eventually. It's going to happen. But yes, please talk to us about Christmas. Yeah. So for the screen today, I think on a high level, we'll do two things So first of all, I want to give you a thorough introduction to Prisma so that you really understand like what it is, why it's useful, how it fits into the stack and familiarize yourself with the three main Prisma workflows, that's data modeling, that's migrations and that's querying
So first of all, I want to give you a thorough introduction to Prisma so that you really understand like what it is, why it's useful, how it fits into the stack and familiarize yourself with the three main Prisma workflows, that's data modeling, that's migrations and that's querying And we'll talk about all of these in in more detail. So again, we'll build up the context slowly for all of that. And then I think in the second part, once we've gained that basic understanding, we can move on and look at the 2D tech app and figure out together if we can make it work
And we'll talk about all of these in in more detail. So again, we'll build up the context slowly for all of that. And then I think in the second part, once we've gained that basic understanding, we can move on and look at the 2D tech app and figure out together if we can make it work I am also not a next JS expert. I'm not a frontend developer expert, frontend development expert in general. My background actually is a mobile development. That's what I did before I joined GraphQL or like Prisma, how we are now called
I am also not a next JS expert. I'm not a frontend developer expert, frontend development expert in general. My background actually is a mobile development. That's what I did before I joined GraphQL or like Prisma, how we are now called So the last six years, I was able to transition into the JavaScript ecosystem, which by the way, compared to at least the Apple developer ecosystem with iOS, like JavaScript and Node.js, just a hot mess with all the different options and versions and browsers and libraries
So the last six years, I was able to transition into the JavaScript ecosystem, which by the way, compared to at least the Apple developer ecosystem with iOS, like JavaScript and Node.js, just a hot mess with all the different options and versions and browsers and libraries That's a lot more, you have a lot more paved paths inside of the the Apple developer ecosystem. We have talked about just so that we you know too
That's a lot more, you have a lot more paved paths inside of the the Apple developer ecosystem. We have talked about just so that we you know too We've talked a little bit about Android development and with Zachary Powell and what we might do someday, might, might, is once I get Tweety Tag to work, is we actually make it into an Android app and work with him on how to make it into an Android app. So it's ever evolving
We've talked a little bit about Android development and with Zachary Powell and what we might do someday, might, might, is once I get Tweety Tag to work, is we actually make it into an Android app and work with him on how to make it into an Android app. So it's ever evolving But yes, where would you like to start? Let's start on the Prisma landing page and maybe you can already go ahead and share your screen
But yes, where would you like to start? Let's start on the Prisma landing page and maybe you can already go ahead and share your screen I was quickly thinking with her, I should do that, but I think maybe since I walk you also through the the main main Prisma workflows, we can just start by sharing your screen. I like how it's just like if I type Prisma, it just knows to go to connect your data. Where I was at the entire time
I was quickly thinking with her, I should do that, but I think maybe since I walk you also through the the main main Prisma workflows, we can just start by sharing your screen. I like how it's just like if I type Prisma, it just knows to go to connect your data. Where I was at the entire time So let me make sure I go to the homepage. Yeah, it's just Prisma.au. Exactly. And if you scroll down, there is one section that I want to highlight here to get started and that's how does Prisma fit in your stack. That's where I want to start. A little bit further down, a little bit further down
So let me make sure I go to the homepage. Yeah, it's just Prisma.au. Exactly. And if you scroll down, there is one section that I want to highlight here to get started and that's how does Prisma fit in your stack. That's where I want to start. A little bit further down, a little bit further down This is Prisma client. I think there's Prisma studio and Prisma migrate. Yes, a bit further down. How does Prisma fit in your stack? So, Jen, have you seen such an architecture diagram already with a client and a server and database? Not specifically this way
This is Prisma client. I think there's Prisma studio and Prisma migrate. Yes, a bit further down. How does Prisma fit in your stack? So, Jen, have you seen such an architecture diagram already with a client and a server and database? Not specifically this way The way I've seen it has been more of in a go daddy context. When I worked in hosting there, where we would work with my SQL and we would have to help people with their hosting servers. And so not exactly, but kind of. All right. All right
The way I've seen it has been more of in a go daddy context. When I worked in hosting there, where we would work with my SQL and we would have to help people with their hosting servers. And so not exactly, but kind of. All right. All right All right. So let me untangle this then a little bit and explain the context for why I want to start with this diagram to explain what Prisma is and where it fits into one stack. So these three components here are typically also called the three tier architecture
All right. So let me untangle this then a little bit and explain the context for why I want to start with this diagram to explain what Prisma is and where it fits into one stack. So these three components here are typically also called the three tier architecture And that's pretty much the standard way how to build web applications these days. Three tier because we have these three main components. We have the client, we have the server and the database. And the terms for this are somewhat ambiguous sometimes
And that's pretty much the standard way how to build web applications these days. Three tier because we have these three main components. We have the client, we have the server and the database. And the terms for this are somewhat ambiguous sometimes So client sometimes is also called the front end. You could call the server and the database together the backend. Sometimes people call only the server of the backend. Sometimes they call the server the API
So client sometimes is also called the front end. You could call the server and the database together the backend. Sometimes people call only the server of the backend. Sometimes they call the server the API So the terminology is a little bit ambiguous, but these three components I think in general are just like very good as a mental model for how to think about a web application
So the terminology is a little bit ambiguous, but these three components I think in general are just like very good as a mental model for how to think about a web application And if we start at the front end, you I think in previous streams, for example, have built React applications, right? And you also just talked about a mobile application. So on the front end, that's exactly the kind of applications that are being built there
And if we start at the front end, you I think in previous streams, for example, have built React applications, right? And you also just talked about a mobile application. So on the front end, that's exactly the kind of applications that are being built there It's mobile applications and it's web applications that are running in the browser that might be built with React, with Angular, with View, with Svelte, all of these like UI JavaScript frameworks, they give you a way how to build JavaScript applications that are running on the front end on the client
It's mobile applications and it's web applications that are running in the browser that might be built with React, with Angular, with View, with Svelte, all of these like UI JavaScript frameworks, they give you a way how to build JavaScript applications that are running on the front end on the client The main purpose of these client applications is to render a user interface to the users so that they can interact with the application. So it's usually very heavy in terms of building user interactions, building user interface, building views
The main purpose of these client applications is to render a user interface to the users so that they can interact with the application. So it's usually very heavy in terms of building user interactions, building user interface, building views And then because views just by themselves would be pretty useless, most of the time these applications also need some data, right
And then because views just by themselves would be pretty useless, most of the time these applications also need some data, right Inside of the application, if we are talking about an application like Twitter, then if I'm on the feed, I need to fetch the data that is the input for my feed, or if I click on somebody's profile, I need to render the information for that particular person
Inside of the application, if we are talking about an application like Twitter, then if I'm on the feed, I need to fetch the data that is the input for my feed, or if I click on somebody's profile, I need to render the information for that particular person If we didn't have this aspect of the data that we're pulling into the front end, into the client, then we would really only have like a skeleton of our view without anything to really look at. So that's the client that it needs data
If we didn't have this aspect of the data that we're pulling into the front end, into the client, then we would really only have like a skeleton of our view without anything to really look at. So that's the client that it needs data Where does it get the data from? Well, if we look at the right side of this diagram, we see the database and that's where the data is being stored, where it's persisted, where it's going to just stay over time
Where does it get the data from? Well, if we look at the right side of this diagram, we see the database and that's where the data is being stored, where it's persisted, where it's going to just stay over time And yeah, it's just that's the place where the data lives, where it exists in the physical world, so to say. But these client applications, so that you could now say that, okay, that's convenient. I already know how to build kind of like a client application with views, but I need data
And yeah, it's just that's the place where the data lives, where it exists in the physical world, so to say. But these client applications, so that you could now say that, okay, that's convenient. I already know how to build kind of like a client application with views, but I need data So I have my database on the other side, so why doesn't my front end just fetch the data from the database directly? And that's actually a really valid question, I think, that a lot of people might ask, have you had this question yourself in the past, or have you had a talk about this
So I have my database on the other side, so why doesn't my front end just fetch the data from the database directly? And that's actually a really valid question, I think, that a lot of people might ask, have you had this question yourself in the past, or have you had a talk about this Again, I'm horrible at multitasking and I feel like I'm really, really happy that Ramon and Anthony are here today, because if I remember correctly, Ramon and I, and I was looking for the link because I'm pretty sure it was this
Again, I'm horrible at multitasking and I feel like I'm really, really happy that Ramon and Anthony are here today, because if I remember correctly, Ramon and I, and I was looking for the link because I'm pretty sure it was this Yes, Ramon and I built an express API. Yeah, yeah. And I think that's like literally the most like, direct way that I've ever done it. Like I might have done some of it when I did the, yes, we did Ramon, we connected it with Mongo. Okay, yes
Yes, Ramon and I built an express API. Yeah, yeah. And I think that's like literally the most like, direct way that I've ever done it. Like I might have done some of it when I did the, yes, we did Ramon, we connected it with Mongo. Okay, yes Okay, yes. So I was like, I'm pretty sure I've done this kind of a very long time ago, so it's a long time ago now. But all right. But yeah, that's the, that's the client and the database. So why do we need this server in the middle, this like middleman? There are multiple reasons to that
Okay, yes. So I was like, I'm pretty sure I've done this kind of a very long time ago, so it's a long time ago now. But all right. But yeah, that's the, that's the client and the database. So why do we need this server in the middle, this like middleman? There are multiple reasons to that Maybe if you were to redesign the web from the ground up, maybe you would come up with a way how the client could interact with the database directly
Maybe if you were to redesign the web from the ground up, maybe you would come up with a way how the client could interact with the database directly But the way how the web, the web is built today and the infrastructure it runs on, it just makes sense to put the server in between for several reasons
But the way how the web, the web is built today and the infrastructure it runs on, it just makes sense to put the server in between for several reasons One reason is that most databases, if we're talking about the most mature and popular ones like Postgres, like my SQL, like MongoDB, they don't work with the like most popular protocol that we're using on the web and that's HGDP
One reason is that most databases, if we're talking about the most mature and popular ones like Postgres, like my SQL, like MongoDB, they don't work with the like most popular protocol that we're using on the web and that's HGDP You connect to them with another protocol that's on a lower level TCP and that's just one incompatibility of why a client who typically sends HGDP requests can't really talk to a database directly because the database only understands TCP
You connect to them with another protocol that's on a lower level TCP and that's just one incompatibility of why a client who typically sends HGDP requests can't really talk to a database directly because the database only understands TCP So that's one reason the client wants to talk HTTP but the client, the database only accepts TCP so the client cannot directly talk to the database. That's one reason why we put the server in between
So that's one reason the client wants to talk HTTP but the client, the database only accepts TCP so the client cannot directly talk to the database. That's one reason why we put the server in between Another reason is that we need some business logic for our app and with business logic, I mean such features already as user authentication
Another reason is that we need some business logic for our app and with business logic, I mean such features already as user authentication If we want to be able to provide a way for a user to log into our application with a user name, with an email and the password, that's something that we cannot implement in the database because we actually need to write code, we need to do more than just store data inside of a data store
If we want to be able to provide a way for a user to log into our application with a user name, with an email and the password, that's something that we cannot implement in the database because we actually need to write code, we need to do more than just store data inside of a data store We actually have to implement some code, some logic and that's not possible in the database. Maybe there would be ways, things like store procedures but I don't even want to get into that because it's just not the way how we want to build modern applications
We actually have to implement some code, some logic and that's not possible in the database. Maybe there would be ways, things like store procedures but I don't even want to get into that because it's just not the way how we want to build modern applications So yeah, the business logic, things like authentication or if you need to implement a payment process or if you need to communicate with external services, all of these things they count as business logic and you would implement them on the server side
So yeah, the business logic, things like authentication or if you need to implement a payment process or if you need to communicate with external services, all of these things they count as business logic and you would implement them on the server side So now we have an understanding of these three components
So now we have an understanding of these three components We have an understanding of the client, that's where we have the UI, JavaScript frameworks, then we have the database, Postgres, MySQL, Mongo to store the data and in the middle this middleman, the API server that somehow mediates between the two. Yeah
We have an understanding of the client, that's where we have the UI, JavaScript frameworks, then we have the database, Postgres, MySQL, Mongo to store the data and in the middle this middleman, the API server that somehow mediates between the two. Yeah Yeah. Okay, first off, I think that's the first time. And y'all, especially with Ronan and Anthony here, I feel like I need to say this caveat. Y'all might have told me this but I didn't click
Yeah. Okay, first off, I think that's the first time. And y'all, especially with Ronan and Anthony here, I feel like I need to say this caveat. Y'all might have told me this but I didn't click At least now it kind of makes sense of why it needs to be the server in the middle and why my front end couldn't connect to the back end of the translation of the two protocols. I will say I'm just putting this out in the world
At least now it kind of makes sense of why it needs to be the server in the middle and why my front end couldn't connect to the back end of the translation of the two protocols. I will say I'm just putting this out in the world Anybody know someone that wants to come on the show and just talk protocols and teach us about all of the protocols because so many out there and what we all use them for, please send them my way. But thank you Nicholas for at least this is making sense right now. That's that's great
Anybody know someone that wants to come on the show and just talk protocols and teach us about all of the protocols because so many out there and what we all use them for, please send them my way. But thank you Nicholas for at least this is making sense right now. That's that's great Yeah, so let's zoom a little bit into the API server and the different kinds of things that it's typically also responsible for
Yeah, so let's zoom a little bit into the API server and the different kinds of things that it's typically also responsible for So like when you build a front end app, for example with React, what kind of app did you actually build Gen and where did you get the data from back then? Run that by me one more time
So like when you build a front end app, for example with React, what kind of app did you actually build Gen and where did you get the data from back then? Run that by me one more time When you build a React app here on the stream or like some other app where you build a front end, where did these get their data from? For the React one, it was just like googling build React app and that was it. It just was the front end of it
When you build a React app here on the stream or like some other app where you build a front end, where did these get their data from? For the React one, it was just like googling build React app and that was it. It just was the front end of it And when we did the when I did the one with Ramon on Express, I'm pretty sure we just put in data to query it and just that was it. It wasn't like, oh, actually on the the Express one, we were putting in things people say to us that are nice. Okay
And when we did the when I did the one with Ramon on Express, I'm pretty sure we just put in data to query it and just that was it. It wasn't like, oh, actually on the the Express one, we were putting in things people say to us that are nice. Okay Okay. Like, you know, like if you have a bad day, let's make an API that we'll call goodness that people will say to you. Okay. Okay. And you stored that manually inside of the inside of the MongoDB database, which you were using then and then you were putting an API on top of that
Okay. Like, you know, like if you have a bad day, let's make an API that we'll call goodness that people will say to you. Okay. Okay. And you stored that manually inside of the inside of the MongoDB database, which you were using then and then you were putting an API on top of that And please know, this was stream number three. So we're talking about stream number two and three. And the only one I had before that is do I know the difference between HTML, CSS, and JavaScript and back then, no, no, I did not
And please know, this was stream number three. So we're talking about stream number two and three. And the only one I had before that is do I know the difference between HTML, CSS, and JavaScript and back then, no, no, I did not So this was all new to me at that point, but yes, we did definitely by remember correctly. And then this is a question from homey if they become proficient using Prisma. Will they have to write very little SQL if at all? That's a really good question
So this was all new to me at that point, but yes, we did definitely by remember correctly. And then this is a question from homey if they become proficient using Prisma. Will they have to write very little SQL if at all? That's a really good question And I think this is already a good statement as well. They indeed will have to write very little SQL because what Prisma does, it abstracts the SQL away
And I think this is already a good statement as well. They indeed will have to write very little SQL because what Prisma does, it abstracts the SQL away Usually when you are working as a backend developer, so the person implementing the server here, again, your job is to mediate between the client and the database
Usually when you are working as a backend developer, so the person implementing the server here, again, your job is to mediate between the client and the database So what that means is that the client will send you requests, typically HTTP requests via REST API, such as the one that you have built with Express Gen or a GraphQL API that's in principle very similar to a REST API. It also delivers data
So what that means is that the client will send you requests, typically HTTP requests via REST API, such as the one that you have built with Express Gen or a GraphQL API that's in principle very similar to a REST API. It also delivers data It also allows you to invoke operations on the backend, but it's just a little bit more developer friendly, I would say, if you work with a GraphQL API. But in principle, they have the same responsibilities and that's to deliver data to the client
It also allows you to invoke operations on the backend, but it's just a little bit more developer friendly, I would say, if you work with a GraphQL API. But in principle, they have the same responsibilities and that's to deliver data to the client So as a backend developer, as a server site developer, what I need to do is I need to somehow process incoming requests. And I have to then write code that understands what exactly is being requested
So as a backend developer, as a server site developer, what I need to do is I need to somehow process incoming requests. And I have to then write code that understands what exactly is being requested It creates a corresponding database query, reads that data from the database, packages up packages the data that I just received from the database as a response up in a structure that's expected by the client and send it back to the client
It creates a corresponding database query, reads that data from the database, packages up packages the data that I just received from the database as a response up in a structure that's expected by the client and send it back to the client Maybe we take an example just the example about the Twitter profile, which I've mentioned before. So assume that you're opening the Twitter application in your web browser and you're navigating to someone's profile
Maybe we take an example just the example about the Twitter profile, which I've mentioned before. So assume that you're opening the Twitter application in your web browser and you're navigating to someone's profile What then happens is that the Twitter app on the front end, it sends an HTTP request to the server. And in that HTTP request, it includes information about who is the user that you're requesting the profile from. Help my messages aren't up just so that way I can go through these at the same time
What then happens is that the Twitter app on the front end, it sends an HTTP request to the server. And in that HTTP request, it includes information about who is the user that you're requesting the profile from. Help my messages aren't up just so that way I can go through these at the same time And we'll go look at your profile. All right. Yeah, if you actually open the console here, that might be interesting to look at this and see the network request that are being sent
And we'll go look at your profile. All right. Yeah, if you actually open the console here, that might be interesting to look at this and see the network request that are being sent If you click on the arrows there, so yeah, you're now in the console view, I meant the network request tabs inside of the developer tools area network. And let's see, I haven't tried this myself before
If you click on the arrows there, so yeah, you're now in the console view, I meant the network request tabs inside of the developer tools area network. And let's see, I haven't tried this myself before If you select the box for fetch slash XHR first, because that will only show us the HTTP requests, it's on top. Yes, this. And now if you refresh the page, if you refresh the page, let's see, if there is some kind of, okay, this looks way to complicated
If you select the box for fetch slash XHR first, because that will only show us the HTTP requests, it's on top. Yes, this. And now if you refresh the page, if you refresh the page, let's see, if there is some kind of, okay, this looks way to complicated I don't really know how to parse this right now. But just in principle, what happens is that and it's like vastly simplified the scenario I'm opening up here. Obviously, when you actually use Twitter.com, it's much more complicated. What's happening under the hood
I don't really know how to parse this right now. But just in principle, what happens is that and it's like vastly simplified the scenario I'm opening up here. Obviously, when you actually use Twitter.com, it's much more complicated. What's happening under the hood But in principle, what happens is that the front end, it needs the data that you see here on my profile. It needs my name, it needs my Twitter handle, it needs my bio, and all of that it requests from the server by sending this HTTP request to the Twitter API
But in principle, what happens is that the front end, it needs the data that you see here on my profile. It needs my name, it needs my Twitter handle, it needs my bio, and all of that it requests from the server by sending this HTTP request to the Twitter API And it includes probably my user ID or my user handle some way to uniquely identify me as a user. So then the backend developers at Twitter, they certainly have gone through that process. Oh, there you go
And it includes probably my user ID or my user handle some way to uniquely identify me as a user. So then the backend developers at Twitter, they certainly have gone through that process. Oh, there you go Oh, there you go. The backend developers at Twitter, they have implemented logic to then receive such a request from the front end and extract my username or my user ID, my handle from that request
Oh, there you go. The backend developers at Twitter, they have implemented logic to then receive such a request from the front end and extract my username or my user ID, my handle from that request And use that as a variable inside of a database query that there's then sending off to the database, the database responds with the data of my profile
And use that as a variable inside of a database query that there's then sending off to the database, the database responds with the data of my profile And the backend developer, again, writes code to package the data that they just received from the database, package it into this structure that's expected on the front end and then return it to the front end
And the backend developer, again, writes code to package the data that they just received from the database, package it into this structure that's expected on the front end and then return it to the front end So this kind of journey of the data, traveling from the front end as a request to the server, then to the database and back through the server to the client, I think is like really important to understand kind of where where Prisma fits into that
So this kind of journey of the data, traveling from the front end as a request to the server, then to the database and back through the server to the client, I think is like really important to understand kind of where where Prisma fits into that And he got us an example while you were explaining to. Yes. So here we are in the network tab again for for this URL. And then we specifically see what kind of HTTP request has been sent
And he got us an example while you were explaining to. Yes. So here we are in the network tab again for for this URL. And then we specifically see what kind of HTTP request has been sent So all of this, what you see there on the right side in the general and response header sections are part of the HTTP request that has been sent through your browser in this particular situation. Nice. Okay. Anthony as well
So all of this, what you see there on the right side in the general and response header sections are part of the HTTP request that has been sent through your browser in this particular situation. Nice. Okay. Anthony as well Anthony as well. Yes, that's always so good to have people on the stream who think along and who don't let you down when you're stuck and you have to debug something. Oh, it's been fun. We've gotten stuck on having to be debug stuff in like so many different streams. It's a lot
Anthony as well. Yes, that's always so good to have people on the stream who think along and who don't let you down when you're stuck and you have to debug something. Oh, it's been fun. We've gotten stuck on having to be debug stuff in like so many different streams. It's a lot It's a lot. I feel encouraged that it's not just me. All right
It's a lot. I feel encouraged that it's not just me. All right So that's how I wanted to start just with this kind of basic understanding of these three components and how the data flows in between them and where Prisma is relevant because as a front end developer, if you're building a reactive and I'm not talking about next year's at this moment or anything where you can also execute server side code from a front end from a front end framework, but just a reactive or a view app which is just an app that's running inside the browser as a front end developer who's building an app like this, you will not get in touch with Prisma directly because Prisma really only happens on the backend or is used on the backend because it needs to interact with a database and this database interaction is implemented on the server side
So that's how I wanted to start just with this kind of basic understanding of these three components and how the data flows in between them and where Prisma is relevant because as a front end developer, if you're building a reactive and I'm not talking about next year's at this moment or anything where you can also execute server side code from a front end from a front end framework, but just a reactive or a view app which is just an app that's running inside the browser as a front end developer who's building an app like this, you will not get in touch with Prisma directly because Prisma really only happens on the backend or is used on the backend because it needs to interact with a database and this database interaction is implemented on the server side So again, as a front end developer, you're not interacting with Prisma directly, but you're always just like sending HTTP requests to some kind of API that will serve you the data that you need for your application
So again, as a front end developer, you're not interacting with Prisma directly, but you're always just like sending HTTP requests to some kind of API that will serve you the data that you need for your application So if it's not for front end developers, okay, it's must be for backend developers and that's indeed the case
So if it's not for front end developers, okay, it's must be for backend developers and that's indeed the case As a backend developer, when I start building a new application and I have these three components and I'm the backend developer, I'm using a relational database like Postgres or MySQL, I have several kind of choices for how I want to interact with its database in terms of abstraction level
As a backend developer, when I start building a new application and I have these three components and I'm the backend developer, I'm using a relational database like Postgres or MySQL, I have several kind of choices for how I want to interact with its database in terms of abstraction level The lowest level of abstraction would be to just send plain SQL strings that I can write inside of my JavaScript code. I just write a SQL string and I submit to the database and I receive a response back. That's totally possible, but it has several flaws or drawbacks
The lowest level of abstraction would be to just send plain SQL strings that I can write inside of my JavaScript code. I just write a SQL string and I submit to the database and I receive a response back. That's totally possible, but it has several flaws or drawbacks So first, you actually have to really know what you're doing in terms of using SQL because SQL, I think, is one of the oldest technologies that we're using these days that is still kind of state of the art in the industry
So first, you actually have to really know what you're doing in terms of using SQL because SQL, I think, is one of the oldest technologies that we're using these days that is still kind of state of the art in the industry SQL has been developed in the 60s or 70s and it has been around for that long and we're still using it. It's still the default for building applications. So it's still a great technology, but it's also really powerful and really complex and makes it very easy to shoot yourself in the foot
SQL has been developed in the 60s or 70s and it has been around for that long and we're still using it. It's still the default for building applications. So it's still a great technology, but it's also really powerful and really complex and makes it very easy to shoot yourself in the foot So usually you want to use higher level abstractions that are more developer friendly and let you reach your goals as a developer faster. Another problem just with the fact that we're writing SQL strings inside of our application means that a string is not type checked at all
So usually you want to use higher level abstractions that are more developer friendly and let you reach your goals as a developer faster. Another problem just with the fact that we're writing SQL strings inside of our application means that a string is not type checked at all We don't get any syntax highlighting or auto completion or for that matter and he read squiggly lines underneath when we're making a typo. So it's also very easy to accidentally introduce any typos or other kinds of mistakes inside of your SQL queries that might blow up the entire application
We don't get any syntax highlighting or auto completion or for that matter and he read squiggly lines underneath when we're making a typo. So it's also very easy to accidentally introduce any typos or other kinds of mistakes inside of your SQL queries that might blow up the entire application So really working on the lowest level of SQL, I think I've seen only very, very few teams who actually do this and typically these are the teams that are staffed with very experienced SQL engineers and I think that's also the only kind of situation where it's reasonable to choose that approach and not choose a higher level abstraction
So really working on the lowest level of SQL, I think I've seen only very, very few teams who actually do this and typically these are the teams that are staffed with very experienced SQL engineers and I think that's also the only kind of situation where it's reasonable to choose that approach and not choose a higher level abstraction Then the next level of abstraction is what we call SQL query builders. In the Node.js ecosystem, there is a popular one that's called Knex.js and that's basically just a way to compose a SQL string by calling functions
Then the next level of abstraction is what we call SQL query builders. In the Node.js ecosystem, there is a popular one that's called Knex.js and that's basically just a way to compose a SQL string by calling functions So a very standard SQL query that would just return all the records from a table that's called users. It's just select star from users. That's a pretty standard like SQL string SQL query that you could write
So a very standard SQL query that would just return all the records from a table that's called users. It's just select star from users. That's a pretty standard like SQL string SQL query that you could write And if you're using a SQL query builder, then you don't write this as a string anymore, but you would call a function that's called select. And then as an argument to that function, you would pass the name of the table. So you would call dot select and then from users
And if you're using a SQL query builder, then you don't write this as a string anymore, but you would call a function that's called select. And then as an argument to that function, you would pass the name of the table. So you would call dot select and then from users And so it's already a little bit nicer because we're calling a function and then this actual string is composed for me under the hood
And so it's already a little bit nicer because we're calling a function and then this actual string is composed for me under the hood I don't have to type the string anymore inside of my code, but it's still very error prone and it's also actually still requires quite a high level knowledge of SQL if you follow that approach. And now we're going to the highest level of abstraction to so-called ORM's, object relational members
I don't have to type the string anymore inside of my code, but it's still very error prone and it's also actually still requires quite a high level knowledge of SQL if you follow that approach. And now we're going to the highest level of abstraction to so-called ORM's, object relational members And when we're talking about object relational members, the reason why they're called like this is because they map the data structures between the relational database and the object-oriented programming language that we're using
And when we're talking about object relational members, the reason why they're called like this is because they map the data structures between the relational database and the object-oriented programming language that we're using And the difference is that inside of our object-oriented programming language, we may have objects that are nested. So nested structures inside of our application. And inside of a database, you can't, inside of a relational database at least, you cannot have nested structures
And the difference is that inside of our object-oriented programming language, we may have objects that are nested. So nested structures inside of our application. And inside of a database, you can't, inside of a relational database at least, you cannot have nested structures There you have a so-called flat or normalized data model where the data is organized in tables
There you have a so-called flat or normalized data model where the data is organized in tables And when you want to represent any kind of relations between your entities, between your data, then what you have to do is you have to reference the tables with each other with so-called foreign keys, whereas again, in our object-oriented programming language, when we want to represent related data, we just use nesting
And when you want to represent any kind of relations between your entities, between your data, then what you have to do is you have to reference the tables with each other with so-called foreign keys, whereas again, in our object-oriented programming language, when we want to represent related data, we just use nesting We can just nest our objects deeply inside of each other. And that mapping that has to happen somewhere, and that's what's happening inside of the ORM. And that's the problem that Prisma solves. It makes it easier for primarily backend developers, but also to front-end developers
We can just nest our objects deeply inside of each other. And that mapping that has to happen somewhere, and that's what's happening inside of the ORM. And that's the problem that Prisma solves. It makes it easier for primarily backend developers, but also to front-end developers Thanks to Framework like NextJS, where you can write server-side code as well. But primarily backend developers makes their lives easier by giving them a nice abstraction to work with a database instead of using SQL. I'm letting it sink in
Thanks to Framework like NextJS, where you can write server-side code as well. But primarily backend developers makes their lives easier by giving them a nice abstraction to work with a database instead of using SQL. I'm letting it sink in And Anthony, are you talking about Tweety Tag? Because he's seen it. There's a PR cholin in there of how to probably fix it. And this is how he came on. Nicholas, join the show. Is he on Team Tweety Tag? And looked at all of this, because, and I just want to throw this out there
And Anthony, are you talking about Tweety Tag? Because he's seen it. There's a PR cholin in there of how to probably fix it. And this is how he came on. Nicholas, join the show. Is he on Team Tweety Tag? And looked at all of this, because, and I just want to throw this out there It was actually Laura, who is on on Mondays. She, we mostly talk about Python, and we were talking about like how to get questions answered. And I did not realize that Prisma had a Slack channel. So I head up Prisma, and was like, y'all I'm stuck, please help. And yeah, so it was pretty good
It was actually Laura, who is on on Mondays. She, we mostly talk about Python, and we were talking about like how to get questions answered. And I did not realize that Prisma had a Slack channel. So I head up Prisma, and was like, y'all I'm stuck, please help. And yeah, so it was pretty good Yeah, we'll look at the Tweety Tag in a little bit, but let's maybe first familiarize yourself with the main workflows of Prisma that I mentioned before. And again, we are now working on the backend side
Yeah, we'll look at the Tweety Tag in a little bit, but let's maybe first familiarize yourself with the main workflows of Prisma that I mentioned before. And again, we are now working on the backend side And the goal of working on a backend usually is to build some kind of API that's exposed to a front end later down the line so that the front end developers can get the data that they need when they're actually building the product
And the goal of working on a backend usually is to build some kind of API that's exposed to a front end later down the line so that the front end developers can get the data that they need when they're actually building the product All right, how about you hit the big get started button in the top right corner, and we'll walk through the quick start together. And I will show you or like I will like provide you a couple of more in depth explanations here as as we go along, then it's provided in the in the quick start. Yeah
All right, how about you hit the big get started button in the top right corner, and we'll walk through the quick start together. And I will show you or like I will like provide you a couple of more in depth explanations here as as we go along, then it's provided in the in the quick start. Yeah Yeah. All right, you don't have, we can just use this is you can just use this guide here. You don't have to click on that link. There you go. This is the instructions to start with Prisma
Yeah. All right, you don't have, we can just use this is you can just use this guide here. You don't have to click on that link. There you go. This is the instructions to start with Prisma So what we want to do now in this guide is we want to set up a local database for that we're going to use SQLite. Have you heard of SQLite before or do you know how it's different from traditional databases like Postgres or my SQL? No
So what we want to do now in this guide is we want to set up a local database for that we're going to use SQLite. Have you heard of SQLite before or do you know how it's different from traditional databases like Postgres or my SQL? No All right, SQLite is a super simple and straightforward relational database that just stores all its data inside of a single file with a dot db suffix
All right, SQLite is a super simple and straightforward relational database that just stores all its data inside of a single file with a dot db suffix And the reason why that super simple compared to other databases is that with other databases, Postgres or my SQL, you actually have to install a piece of software on your computer in order to interact with that database
And the reason why that super simple compared to other databases is that with other databases, Postgres or my SQL, you actually have to install a piece of software on your computer in order to interact with that database So you first have to would have to install Postgres now or you're using Docker to spin up a Postgres instance, but you somehow need to get a database server running on your machine or on some kind of remote machine that you can then connect to with SQLite
So you first have to would have to install Postgres now or you're using Docker to spin up a Postgres instance, but you somehow need to get a database server running on your machine or on some kind of remote machine that you can then connect to with SQLite You can skip that step and that's why we chose chose that for our quick start. It allows you to still persist data on the file system, but you don't need to have an extra piece of software running on your computer and it just makes the entire process of getting to know Prisma a lot simpler as well
You can skip that step and that's why we chose chose that for our quick start. It allows you to still persist data on the file system, but you don't need to have an extra piece of software running on your computer and it just makes the entire process of getting to know Prisma a lot simpler as well That's why we're using SQLite here. I like Anthony's add in for it too. It's like a regular SQL database, but way more dober way more dober. I like it. I like it. I like it. Okay. Cool. So yeah, let's get started with these first commands. Let's create your project directory here. Nice. Yeah
That's why we're using SQLite here. I like Anthony's add in for it too. It's like a regular SQL database, but way more dober way more dober. I like it. I like it. I like it. Okay. Cool. So yeah, let's get started with these first commands. Let's create your project directory here. Nice. Yeah Nice. Yeah. If you just type that in, you created the directory and you navigate it into it immediately. And the next step here is to initialize a node project. Have you seen this before? This NPM init? Yes. I believe I ended up doing this at some point. We'll try to figure this out last week
Nice. Yeah. If you just type that in, you created the directory and you navigate it into it immediately. And the next step here is to initialize a node project. Have you seen this before? This NPM init? Yes. I believe I ended up doing this at some point. We'll try to figure this out last week All right. What the NPM init is for, it basically just creates the package JSON file that then lists all of your dependencies. Right? The NPM init, like, yeah, I don't think it does a lot more than just create the package JSON file
All right. What the NPM init is for, it basically just creates the package JSON file that then lists all of your dependencies. Right? The NPM init, like, yeah, I don't think it does a lot more than just create the package JSON file And then in the second step here, we had NPM installed TypeScript, TSMote, and the types from nodes. So just a couple of more dependencies
And then in the second step here, we had NPM installed TypeScript, TSMote, and the types from nodes. So just a couple of more dependencies Actually, these are all development dependencies that we don't need at runtime, that we only need at development time to get TypeScript to work here in this context. And what we ultimately want to do here is we want to write a TypeScript script
Actually, these are all development dependencies that we don't need at runtime, that we only need at development time to get TypeScript to work here in this context. And what we ultimately want to do here is we want to write a TypeScript script So a little program that's just running from top to bottom. So no complicated server or anything. Just a script that's running from top to bottom. And that will then read and write data in our SQLite database that we're going to use as well. Got it. All right. Next, we need a TSconfig file
So a little program that's just running from top to bottom. So no complicated server or anything. Just a script that's running from top to bottom. And that will then read and write data in our SQLite database that we're going to use as well. Got it. All right. Next, we need a TSconfig file And the touch TSconfig is the command for creating that. And at this point, you can actually already go maybe and open this directory inside of VS Code if that's possible. Oh nice. You're using the code, code shortcut. I love this one. So yes, the TSconfig JSON is already there. And it's empty
And the touch TSconfig is the command for creating that. And at this point, you can actually already go maybe and open this directory inside of VS Code if that's possible. Oh nice. You're using the code, code shortcut. I love this one. So yes, the TSconfig JSON is already there. And it's empty And it's empty. So you can now go ahead and copy the boilerplate from the Quick Start. It's really nothing special in there. Just some default TypeScript configuration. All right
And it's empty. So you can now go ahead and copy the boilerplate from the Quick Start. It's really nothing special in there. Just some default TypeScript configuration. All right All right. And at this point, I think actually from this point, I will guide you a little bit further instead of using the Quick Start. So now we have just the basic TypeScript project set up. And as the next step, we want to set up Prisma and the database
All right. And at this point, I think actually from this point, I will guide you a little bit further instead of using the Quick Start. So now we have just the basic TypeScript project set up. And as the next step, we want to set up Prisma and the database And then in the last step, we'll write the TypeScript program, the TypeScript script that will read and write data into the database. Okay. So to set up Prisma, you can install Prisma as a development dependency as well
And then in the last step, we'll write the TypeScript program, the TypeScript script that will read and write data into the database. Okay. So to set up Prisma, you can install Prisma as a development dependency as well That's with the command NPM install just Prisma and then dash capital D or dash dash save dash death to store it as a development dependency. If you just do dash and capital D now with a space, it will put this into your development dependencies
That's with the command NPM install just Prisma and then dash capital D or dash dash save dash death to store it as a development dependency. If you just do dash and capital D now with a space, it will put this into your development dependencies Have you seen this before? Like, are you aware of the difference between a regular dependency and a development dependency? I'm going to go now. Okay
Have you seen this before? Like, are you aware of the difference between a regular dependency and a development dependency? I'm going to go now. Okay Okay. So then maybe quickly hit Enter and then I'll explain the difference between the two and to understand the difference, I think it's best to look at the package package file package.json in your side nav on the left. If you select that and you scroll a little bit, yes, or just make it bigger
Okay. So then maybe quickly hit Enter and then I'll explain the difference between the two and to understand the difference, I think it's best to look at the package package file package.json in your side nav on the left. If you select that and you scroll a little bit, yes, or just make it bigger You see that you have these death dependencies right there. And usually you have, so at the moment, you have only the death dependencies, but usually you also have regular dependencies and in fact, we'll install one in just a second
You see that you have these death dependencies right there. And usually you have, so at the moment, you have only the death dependencies, but usually you also have regular dependencies and in fact, we'll install one in just a second The regular dependencies that you don't see here yet, other ones that are being packaged with your application when you deploy it
The regular dependencies that you don't see here yet, other ones that are being packaged with your application when you deploy it So for example, when you deploy your application to Versal, then it packages all the dependencies, the regular dependencies into your application bundle because these dependencies are needed in order to make your application work
So for example, when you deploy your application to Versal, then it packages all the dependencies, the regular dependencies into your application bundle because these dependencies are needed in order to make your application work The development dependencies, on the other hand, they are not needed for the application at runtime. So they aren't bundled into that application bundle that you're uploading to Versal because you only need them at development time
The development dependencies, on the other hand, they are not needed for the application at runtime. So they aren't bundled into that application bundle that you're uploading to Versal because you only need them at development time For example, TypeScript is like, that is not what is running inside of your web browser, right? It's only JavaScript. So TypeScript kind of gets removed from the application bundle when you deploy it. The same with Prisma here, the Prisma dependencies, just the Prisma CLI
For example, TypeScript is like, that is not what is running inside of your web browser, right? It's only JavaScript. So TypeScript kind of gets removed from the application bundle when you deploy it. The same with Prisma here, the Prisma dependencies, just the Prisma CLI The Prisma CLI helps you with your workflows that you do during development, but it won't help you when you do or it's not useful for the application at runtime. Once the application has been deployed, the Prisma CLI has no use anymore
The Prisma CLI helps you with your workflows that you do during development, but it won't help you when you do or it's not useful for the application at runtime. Once the application has been deployed, the Prisma CLI has no use anymore It's only useful for the developer as they build their application. Really quick, just because I definitely, this is how my brain works, even though sometimes it can be very annoying of like going, okay, cool
It's only useful for the developer as they build their application. Really quick, just because I definitely, this is how my brain works, even though sometimes it can be very annoying of like going, okay, cool So we have like the dev dependencies and there's four of them here, and then I'm looking at Tweety Tags, so the one I get that we built it totally different. But it only has one dev dependency. Well, now I think you're in the root folder of Tweety Tag
So we have like the dev dependencies and there's four of them here, and then I'm looking at Tweety Tags, so the one I get that we built it totally different. But it only has one dev dependency. Well, now I think you're in the root folder of Tweety Tag If I remember the package structure correctly, if you go back or if you go to the root and now you click on the next forms app, you'll find another package that pays off in there. And there you'll find a whole lot more dependencies for your React app for your next app
If I remember the package structure correctly, if you go back or if you go to the root and now you click on the next forms app, you'll find another package that pays off in there. And there you'll find a whole lot more dependencies for your React app for your next app And that's actually also just like the one issue I saw with your repo that you basically have two like separate projects in one repo at the moment. And I think that's our main task later to kind of merge them into a single one. Got it. And Anthony, thank you. That also really does help
And that's actually also just like the one issue I saw with your repo that you basically have two like separate projects in one repo at the moment. And I think that's our main task later to kind of merge them into a single one. Got it. And Anthony, thank you. That also really does help I'm a what? Monorepo is I think like a new trend at the moment to structure all of your applications inside of a single repo. So you're kind of the natural born Monorepo is because you put all of your epsis into a single repo. I'm going to pretend that I totally get that. I don't
I'm a what? Monorepo is I think like a new trend at the moment to structure all of your applications inside of a single repo. So you're kind of the natural born Monorepo is because you put all of your epsis into a single repo. I'm going to pretend that I totally get that. I don't I don't. I was going to say thank you for this one though. This is helpful to know when we deployed the React app that I built the Anthony, it was React was a dependency, not a dev dependency. So this is starting to make a little more sense. Nice. All right, great
I don't. I was going to say thank you for this one though. This is helpful to know when we deployed the React app that I built the Anthony, it was React was a dependency, not a dev dependency. So this is starting to make a little more sense. Nice. All right, great All right, great. So now we have all the development dependencies set up. And now we can invoke the Prisma CLI that you just installed. And what we want to do is we want to create a Prisma schema file that we're going to use to define our database schema
All right, great. So now we have all the development dependencies set up. And now we can invoke the Prisma CLI that you just installed. And what we want to do is we want to create a Prisma schema file that we're going to use to define our database schema And the command that you're that you can do this with is called NPX. You prefix it with NPX. Then Prisma, just like the dependency itself, exactly. And then the init command. And you can't you can't enter that's enough already
And the command that you're that you can do this with is called NPX. You prefix it with NPX. Then Prisma, just like the dependency itself, exactly. And then the init command. And you can't you can't enter that's enough already And what this is going to do is just create a new directory on your file system that's called Prisma and it creates this dot n file. That's everything that this command did. So have you seen dot n files before or have you heard of the concept of environment variables? All I know
And what this is going to do is just create a new directory on your file system that's called Prisma and it creates this dot n file. That's everything that this command did. So have you seen dot n files before or have you heard of the concept of environment variables? All I know And this is probably not enough about them is they are in get ignores because you don't want them uploaded. And that is where you put your API keys and such. And that's exactly all I know about them. I don't know what it stands for or anything, but no problem
And this is probably not enough about them is they are in get ignores because you don't want them uploaded. And that is where you put your API keys and such. And that's exactly all I know about them. I don't know what it stands for or anything, but no problem In that case, I would even say that we remove that additional layer of in direct of in direction. You can delete this dot n file here because for kind of teaching purposes, I think it's easier to just do it without. You can just go ahead and delete this file
In that case, I would even say that we remove that additional layer of in direct of in direction. You can delete this dot n file here because for kind of teaching purposes, I think it's easier to just do it without. You can just go ahead and delete this file I will say while I was building a Tweety tag, I was okay, showing all of that because I was like, y'all, this is learning. Like I'm not keeping anything secret in here right now. Like I'll change it later on. It's fine. So yeah, but the dot n file is usually used to define your database URL
I will say while I was building a Tweety tag, I was okay, showing all of that because I was like, y'all, this is learning. Like I'm not keeping anything secret in here right now. Like I'll change it later on. It's fine. So yeah, but the dot n file is usually used to define your database URL But in this case, I think we can do it directly inside of the Prisma schema. So if you look at this file schema dot Prisma, it currently contains these two blocks, how we call them, a generator and a data source. The generator, really, you can't ignore at this point
But in this case, I think we can do it directly inside of the Prisma schema. So if you look at this file schema dot Prisma, it currently contains these two blocks, how we call them, a generator and a data source. The generator, really, you can't ignore at this point You don't really need to understand like what it's used for at this point. It just like should suffice to say that it's responsible to generate Prisma client later on. And Prisma client is what's responsible to the component that lets you interact with your database
You don't really need to understand like what it's used for at this point. It just like should suffice to say that it's responsible to generate Prisma client later on. And Prisma client is what's responsible to the component that lets you interact with your database Read data from it and write data into it. More important here is the data source. And that's where you specify the connection to a database. And this connection consists of two things. One is the provider. That means the kind of database that you're using and the URL
Read data from it and write data into it. More important here is the data source. And that's where you specify the connection to a database. And this connection consists of two things. One is the provider. That means the kind of database that you're using and the URL That is where to find the database. With Postgres, the URL would have to point to a Postgres server. That's what I mentioned in the beginning that with Postgres with my SQL, you always need to have a server running. And then this URL would actually point to that server
That is where to find the database. With Postgres, the URL would have to point to a Postgres server. That's what I mentioned in the beginning that with Postgres with my SQL, you always need to have a server running. And then this URL would actually point to that server In our case, since we want to use SQLite, you can first go ahead and adjust the provider from Postgres to SQLite. And you can do that also by using the autocompletion. If you stop now and if you had control space on your keyboard, it shows you all the options that you can choose with this
In our case, since we want to use SQLite, you can first go ahead and adjust the provider from Postgres to SQLite. And you can do that also by using the autocompletion. If you stop now and if you had control space on your keyboard, it shows you all the options that you can choose with this And that, by the way, is one of the things that you should get used to when you're using Prisma control space. Because autocompletion is really the thing that we're optimizing for you to get as much progress as possible inside of your editor
And that, by the way, is one of the things that you should get used to when you're using Prisma control space. Because autocompletion is really the thing that we're optimizing for you to get as much progress as possible inside of your editor And really, if you're completely blocked or stuck, we want you to go into the Prisma documentation to figure out more specifics about what you want to achieve. Very cool. Thank you. Next, we need to set the database URL
And really, if you're completely blocked or stuck, we want you to go into the Prisma documentation to figure out more specifics about what you want to achieve. Very cool. Thank you. Next, we need to set the database URL And for that, because we're just specifying the location on our file system, you can type the following. So first, you can delete this entire end, including the end. You can... And now open new double quotes. And inside of these quotes, you type file colon. .slash. .dev.db
And for that, because we're just specifying the location on our file system, you can type the following. So first, you can delete this entire end, including the end. You can... And now open new double quotes. And inside of these quotes, you type file colon. .slash. .dev.db .slash. .dev.db. DB like database basically. Yes, yes. So what this means is that we want the SQLite database file to live on our file system in the current directory. That's what we specify with a .slash. We say that this is in our current directory
.slash. .dev.db. DB like database basically. Yes, yes. So what this means is that we want the SQLite database file to live on our file system in the current directory. That's what we specify with a .slash. We say that this is in our current directory So inside of the Prisma directory, actually, where the schema.prisma file is also located. And the name of our database, we want to be def.db. We could also call it hello.db. We could call it gen.db or users.db. But in this case, we just want to call it def.db as our name. Awesome
So inside of the Prisma directory, actually, where the schema.prisma file is also located. And the name of our database, we want to be def.db. We could also call it hello.db. We could call it gen.db or users.db. But in this case, we just want to call it def.db as our name. Awesome Awesome. And we do have a question in here. So homie is asking, Prisma does a great job creating a layer between the dev and SQL with that in mind. Briefly, what are some of the reasons they should reach out for my SQL versus Postgres. See if I can talk
Awesome. And we do have a question in here. So homie is asking, Prisma does a great job creating a layer between the dev and SQL with that in mind. Briefly, what are some of the reasons they should reach out for my SQL versus Postgres. See if I can talk See if I can talk. They have worked with Postgres so far and are becoming comfortable. Are there reasons that they should look at other SQL database types? That's a really good question
See if I can talk. They have worked with Postgres so far and are becoming comfortable. Are there reasons that they should look at other SQL database types? That's a really good question It basically comes down to what database should I pick for my application? And there are a lot of different trade-offs. Although I will say that for the majority of applications, it probably won't make a big difference whether you use Postgres or you use my SQL or even SQL server
It basically comes down to what database should I pick for my application? And there are a lot of different trade-offs. Although I will say that for the majority of applications, it probably won't make a big difference whether you use Postgres or you use my SQL or even SQL server If you look closer, all of these have different kind of characteristics here and there, different kind of trade-offs. Postgres, for example, has a rich extension system, great way to work then with a geolocation data via extensions, for example
If you look closer, all of these have different kind of characteristics here and there, different kind of trade-offs. Postgres, for example, has a rich extension system, great way to work then with a geolocation data via extensions, for example So Postgres from what I've heard is a very solid choice
So Postgres from what I've heard is a very solid choice And if you already are familiar with Postgres and you don't have a very application specific reason to switch to another database for maybe specific performance reasons or something like this, I think just using Postgres as kind of the default is totally fine. Got it. Thank you
And if you already are familiar with Postgres and you don't have a very application specific reason to switch to another database for maybe specific performance reasons or something like this, I think just using Postgres as kind of the default is totally fine. Got it. Thank you Got it. Thank you. And we also have, by the way, in the Prisma Data Guide, which is a resource that we're maintaining with all kinds of information. This is about databases in general. We do have a... We do have an article that compares all the different database types
Got it. Thank you. And we also have, by the way, in the Prisma Data Guide, which is a resource that we're maintaining with all kinds of information. This is about databases in general. We do have a... We do have an article that compares all the different database types So I just dropped this in our internal chat here in our private chat in Sremar Gen. And you can you can share this maybe in the public chat so that others can find it. Just to show what it looks like real quick. And here we go. This is great. I definitely will want to look at this as well
So I just dropped this in our internal chat here in our private chat in Sremar Gen. And you can you can share this maybe in the public chat so that others can find it. Just to show what it looks like real quick. And here we go. This is great. I definitely will want to look at this as well Yes, it's a very kind of thorough introduction to the topic of databases in general. And it's not Prisma-specific. The entire Prisma Data Guide, it carries our name, but it's really a very generic resource that doesn't talk about Prisma specifically, but just teaching database concepts
Yes, it's a very kind of thorough introduction to the topic of databases in general. And it's not Prisma-specific. The entire Prisma Data Guide, it carries our name, but it's really a very generic resource that doesn't talk about Prisma specifically, but just teaching database concepts I like what Anthony said. For example, I used my SQL because I had a personal score to settle, which it is. It's because that's what GoDaddy used. And I would have to like talk about it
I like what Anthony said. For example, I used my SQL because I had a personal score to settle, which it is. It's because that's what GoDaddy used. And I would have to like talk about it And I still, to the stand, I'm like, I just want to understand databases because I'm like, why like with WordPress and so much of it? I've been tech adjacent for so long now that I'm learning. I'm like, I'm just going to figure that out. It's going to be great. All right
And I still, to the stand, I'm like, I just want to understand databases because I'm like, why like with WordPress and so much of it? I've been tech adjacent for so long now that I'm learning. I'm like, I'm just going to figure that out. It's going to be great. All right All right. Then we have the Prisma schema in place. We defined our database connection. So the next thing that you'll have to do is you'll need to write a model. And the models is what we use to define the structure of our database
All right. Then we have the Prisma schema in place. We defined our database connection. So the next thing that you'll have to do is you'll need to write a model. And the models is what we use to define the structure of our database So usually when you're working with SQL database, you now would have to write some SQL code to even create tables inside of the database and so that you can then later store data inside of the tables. So you first need tables and then you can fill these tables with records
So usually when you're working with SQL database, you now would have to write some SQL code to even create tables inside of the database and so that you can then later store data inside of the tables. So you first need tables and then you can fill these tables with records In our SQLite database, we have nothing. In fact, we don't even have the SQLite database filed yet. We don't see the depth.db file inside of your, inside of the Prisma directory yet. So we don't have to create it manually. I see that I think you wanted to do that
In our SQLite database, we have nothing. In fact, we don't even have the SQLite database filed yet. We don't see the depth.db file inside of your, inside of the Prisma directory yet. So we don't have to create it manually. I see that I think you wanted to do that But actually, Prisma will create that file for you when you run your first migration. So I'm that would have that would be the workflow. If you didn't use Prisma, you actually indeed now would have to manually create the depth of the b file
But actually, Prisma will create that file for you when you run your first migration. So I'm that would have that would be the workflow. If you didn't use Prisma, you actually indeed now would have to manually create the depth of the b file And then you would have to find some way to send the instructions to the database to create some tables so that you can then store data. With Prisma, you just define the structure of your database right here inside the Prisma schema
And then you would have to find some way to send the instructions to the database to create some tables so that you can then store data. With Prisma, you just define the structure of your database right here inside the Prisma schema And then you can run the Prisma CLI commands to put the structures in the database in place to sync up the the structure of your Prisma schema with the structure inside of the database. And yes, at this point, I would say you can copy the two models here and just paste them in
And then you can run the Prisma CLI commands to put the structures in the database in place to sync up the the structure of your Prisma schema with the structure inside of the database. And yes, at this point, I would say you can copy the two models here and just paste them in I will say I want to give a shout out to Homey. Homey had to come on the stream with me for a little bit to start understanding these models because it was not syncing in. And that's why I got excited. I was like, I know they go in here and I know what they do a bit better now
I will say I want to give a shout out to Homey. Homey had to come on the stream with me for a little bit to start understanding these models because it was not syncing in. And that's why I got excited. I was like, I know they go in here and I know what they do a bit better now So, yes, thank you, Homey. And thank you for the graphic today. It was great graphic
So, yes, thank you, Homey. And thank you for the graphic today. It was great graphic Okay, so in the spirit of making this a little bit like educational and just interested kind of in how would you describe the Prisma schema after my explanations kind of in your own words, like what these models are for and what your current understanding now is of like where we are in in the workflow in terms of the database and all that
Okay, so in the spirit of making this a little bit like educational and just interested kind of in how would you describe the Prisma schema after my explanations kind of in your own words, like what these models are for and what your current understanding now is of like where we are in in the workflow in terms of the database and all that I would say the just on what we've done so far, the ones that actually don't make as much sense, but I don't think I focused as much on is the package.json or tsconfig.json like goes for new to me or if I did them, I don't remember it
I would say the just on what we've done so far, the ones that actually don't make as much sense, but I don't think I focused as much on is the package.json or tsconfig.json like goes for new to me or if I did them, I don't remember it The explanation of the data source that made a lot of sense to me. That's how what I connected to Ivan and it was cool to hear more about SQL Lite. I didn't know that was a thing. So, okay
The explanation of the data source that made a lot of sense to me. That's how what I connected to Ivan and it was cool to hear more about SQL Lite. I didn't know that was a thing. So, okay So, okay. The generator client actually makes more sense now because of, I don't see if I can go back to it because of this because I'm like, oh, that's the generator client at least in my head is that it translate it. So, it's what the generator that translates between the two
So, okay. The generator client actually makes more sense now because of, I don't see if I can go back to it because of this because I'm like, oh, that's the generator client at least in my head is that it translate it. So, it's what the generator that translates between the two So, that made a lot more sense and then the models are basically what is the information you want about something or someone
So, that made a lot more sense and then the models are basically what is the information you want about something or someone So, for the Tweety Tag app, it was like, I want to and this is where I really, really appreciate homey like having me write it out because I was not getting, it just wasn't clicking. And so, by putting it in a mirror board, which sounds a little weird to do for a database
So, for the Tweety Tag app, it was like, I want to and this is where I really, really appreciate homey like having me write it out because I was not getting, it just wasn't clicking. And so, by putting it in a mirror board, which sounds a little weird to do for a database I'm loading it up right now. I'm over here. It helped me like understand, go away please. What I would want to have as models of like a Twitter handle, I don't mean more than a Twitter handle in one model. Like, I don't want their first name. I just want their Twitter handle
I'm loading it up right now. I'm over here. It helped me like understand, go away please. What I would want to have as models of like a Twitter handle, I don't mean more than a Twitter handle in one model. Like, I don't want their first name. I just want their Twitter handle And like, I would want maybe the Twitter space may have the Twitter space link and the Twitter space meaning as one model. So, it really helped like conceptualize it, putting it all on here. And look, Prisma's there. Yay. Very nice
And like, I would want maybe the Twitter space may have the Twitter space link and the Twitter space meaning as one model. So, it really helped like conceptualize it, putting it all on here. And look, Prisma's there. Yay. Very nice Yay. Very nice. So, it definitely, that's how I would explain it because then once this was done, I could use index. Wait, no, I'm skipping a step. The part that I'm skipping to in just like memory is after all of this when it calls it. So, I don't remember all the stuff between it. That's cool
Yay. Very nice. So, it definitely, that's how I would explain it because then once this was done, I could use index. Wait, no, I'm skipping a step. The part that I'm skipping to in just like memory is after all of this when it calls it. So, I don't remember all the stuff between it. That's cool That's cool. All right, all right. But I think that was a great explanation, especially like with the models that the models represent the information that we need to store inside of the database to make the application work basically
That's cool. All right, all right. But I think that was a great explanation, especially like with the models that the models represent the information that we need to store inside of the database to make the application work basically But again, at this point, inside of your editor, you only have defined these models, but we don't have a database yet. And we also don't have the tables yet. So, that's what we'll do in the next step
But again, at this point, inside of your editor, you only have defined these models, but we don't have a database yet. And we also don't have the tables yet. So, that's what we'll do in the next step We'll run a Prisma command in the terminal to sink the Prisma schema with a database schema and make sure that the database has the same structure as we defined in the Prisma schema file. And the command that you can run for this is called NPX. Again, that's the prefix
We'll run a Prisma command in the terminal to sink the Prisma schema with a database schema and make sure that the database has the same structure as we defined in the Prisma schema file. And the command that you can run for this is called NPX. Again, that's the prefix And then Prisma, the next word is migrate. And the actual command now is called dev, DEV, again, NPX Prisma migrate dev. So, what this is going to do is going to read the Prisma schema and now asks for a name that you should give this
And then Prisma, the next word is migrate. And the actual command now is called dev, DEV, again, NPX Prisma migrate dev. So, what this is going to do is going to read the Prisma schema and now asks for a name that you should give this Ah, I think you didn't save the Prisma schema file and it complains that there are no models inside of it right now. If you save it and rerun the command, then it should ask you for a name for the migration. You can just call it in it at this point because it's the first one that we're running
Ah, I think you didn't save the Prisma schema file and it complains that there are no models inside of it right now. If you save it and rerun the command, then it should ask you for a name for the migration. You can just call it in it at this point because it's the first one that we're running We're initializing the database. You can hit enter and you see that some things have happened here. Actually, let's look at the terminal output and understand piece by piece what has happened. If you scroll up again to where you ran the command, there you go
We're initializing the database. You can hit enter and you see that some things have happened here. Actually, let's look at the terminal output and understand piece by piece what has happened. If you scroll up again to where you ran the command, there you go And as everyone will probably tell you that watch the stream a lot, I like to click things too fast. I get really excited and I hit enter or I forget. So that is, well, so far you have the perfect pace in terms of hitting enter
And as everyone will probably tell you that watch the stream a lot, I like to click things too fast. I get really excited and I hit enter or I forget. So that is, well, so far you have the perfect pace in terms of hitting enter So yeah, so first it loaded the Prisma schema from its location on the file system. It read the file system and then it understood, okay, there should be a SQLite database file called DEFDB and then it created that file
So yeah, so first it loaded the Prisma schema from its location on the file system. It read the file system and then it understood, okay, there should be a SQLite database file called DEFDB and then it created that file So on the left inside of the your side, Nath in the file system, you already see that there is one that's called DEF.DB now. And you can ignore the one with dash, dash journal in the end that's just like a helper, a SQLite file, but you can ignore that. So we have DEF.DB, that's our database
So on the left inside of the your side, Nath in the file system, you already see that there is one that's called DEF.DB now. And you can ignore the one with dash, dash journal in the end that's just like a helper, a SQLite file, but you can ignore that. So we have DEF.DB, that's our database And at this point, we also already created two tables inside of the database because the command that you just executed, not only created the database files, but also the two tables that we that we had that we defined inside of the Prisma schema
And at this point, we also already created two tables inside of the database because the command that you just executed, not only created the database files, but also the two tables that we that we had that we defined inside of the Prisma schema So if you now want to know what these tables look like or what the SQL code looks like that you would have to write if when you don't use Prisma, you can indeed open up the migrations folder there. So not node, I don't want to know
So if you now want to know what these tables look like or what the SQL code looks like that you would have to write if when you don't use Prisma, you can indeed open up the migrations folder there. So not node, I don't want to know And this one as well, that's the folder for the migration that you just created. It is named with a timestamp at first. So that's what all of these numbers are and then you see underscore init and init is just the name of the migration that you provided
And this one as well, that's the folder for the migration that you just created. It is named with a timestamp at first. So that's what all of these numbers are and then you see underscore init and init is just the name of the migration that you provided And that's the SQL code that was auto generated by Prisma and that was already sent to the database as well. So inside of DEF.DB, you already have these tables now, but both of them are empty
And that's the SQL code that was auto generated by Prisma and that was already sent to the database as well. So inside of DEF.DB, you already have these tables now, but both of them are empty You can actually validate that they're empty in a tool that's called Prisma Studio that comes with every Prisma project. That's a web UI to inspect the data inside of your database. And you can open that by running npx Prisma Studio inside of your terminal. Sorry, my dog just scared the banana
You can actually validate that they're empty in a tool that's called Prisma Studio that comes with every Prisma project. That's a web UI to inspect the data inside of your database. And you can open that by running npx Prisma Studio inside of your terminal. Sorry, my dog just scared the banana Just that. I believe it. And that is she does, she's a wild old lady. That is hot my dog is. What was the command again? Sorry, it's npx Prisma Studio. This will open a browser window. Wow. Okay, I definitely wasn't doing this with your Prisma models. And you can select post and user
Just that. I believe it. And that is she does, she's a wild old lady. That is hot my dog is. What was the command again? Sorry, it's npx Prisma Studio. This will open a browser window. Wow. Okay, I definitely wasn't doing this with your Prisma models. And you can select post and user Yeah, if you hit command plus, I think it's it's a zooming in a bit more convenient way because it keeps the entire screen or UI at least. Yeah, so here you could already start creating records for users and posts now if you wanted to. So you could click the add record button on top
Yeah, if you hit command plus, I think it's it's a zooming in a bit more convenient way because it keeps the entire screen or UI at least. Yeah, so here you could already start creating records for users and posts now if you wanted to. So you could click the add record button on top But or actually, yeah, that's maybe add a user, not a post because here you have to provide I think an author ID. If you just hit discard changes, yeah, and then you click on the plus on top. And then you can select user. And now you're on the user table and then you can add a record
But or actually, yeah, that's maybe add a user, not a post because here you have to provide I think an author ID. If you just hit discard changes, yeah, and then you click on the plus on top. And then you can select user. And now you're on the user table and then you can add a record And you can add, yeah, the ID you don't have to add, just an email. That's the only field that's required. You can add anything. You don't have to add, it won't validate like the structure of an email. And now you can either enter a name or just hit like save one change. Yeah, yeah, save
And you can add, yeah, the ID you don't have to add, just an email. That's the only field that's required. You can add anything. You don't have to add, it won't validate like the structure of an email. And now you can either enter a name or just hit like save one change. Yeah, yeah, save Yeah, yeah, save. All right, I think this, so that's the long outstanding UX back in Prisma Studio that already got, I think Jason Langstorff on our stream when I did the same with him one and a half years ago in Prisma Studio when you type something into a field, you have and it's still selected
Yeah, yeah, save. All right, I think this, so that's the long outstanding UX back in Prisma Studio that already got, I think Jason Langstorff on our stream when I did the same with him one and a half years ago in Prisma Studio when you type something into a field, you have and it's still selected And you click like save changes, then it actually won't change. You have to click outside of that field once. So yeah, you can add Jen again and click somewhere else. And now you can hit save one change and then it'll press. Yeah, that's like I've reported it back then
And you click like save changes, then it actually won't change. You have to click outside of that field once. So yeah, you can add Jen again and click somewhere else. And now you can hit save one change and then it'll press. Yeah, that's like I've reported it back then It still hasn't been picked up. But it's one of the things that you have to be aware of when getting started with Prisma Studio. Me too Anthony, me too Anthony, I don't I don't understand what our products and engineering teams are doing all day
It still hasn't been picked up. But it's one of the things that you have to be aware of when getting started with Prisma Studio. Me too Anthony, me too Anthony, I don't I don't understand what our products and engineering teams are doing all day Jason is actually going to be on the show later this month and I'm pretty excited about that. Nice. All right. Yeah, I had a huge or just like a very, very fun time when I was in history. Yeah. Cool. So now Jen, we have a database in place. And we already stored one record inside of the user table
Jason is actually going to be on the show later this month and I'm pretty excited about that. Nice. All right. Yeah, I had a huge or just like a very, very fun time when I was in history. Yeah. Cool. So now Jen, we have a database in place. And we already stored one record inside of the user table So now starts the fun part. And that's where we will read and write data in the database from the TypeScript program that we want to write from a TypeScript script. And that's by the way, the only reason why we needed the TS config file because we want to use TypeScript
So now starts the fun part. And that's where we will read and write data in the database from the TypeScript program that we want to write from a TypeScript script. And that's by the way, the only reason why we needed the TS config file because we want to use TypeScript And we just set some specific configurations for using TypeScript. But otherwise you can ignore that file. All right, you can hit control C, I guess, to stop Prisma Studio inside of your terminal. Yeah. Kill that process. And now we need a file that's called script TS
And we just set some specific configurations for using TypeScript. But otherwise you can ignore that file. All right, you can hit control C, I guess, to stop Prisma Studio inside of your terminal. Yeah. Kill that process. And now we need a file that's called script TS And you can just again just execute a command that's called touch to create this file. And then script.ts will be the name of the file as the next word. Yes, script.ts. Could also be called hello.ts or demo.ts app.ts index.ts. We just call it script here
And you can just again just execute a command that's called touch to create this file. And then script.ts will be the name of the file as the next word. Yes, script.ts. Could also be called hello.ts or demo.ts app.ts index.ts. We just call it script here And yeah, it should have been created on your file system. So in your file tree on the left, you should be able to find it. And if you open you'll see that it's empty. Yeah, so now you can quickly head back to the quick start and copy the boilerplate for that script
And yeah, it should have been created on your file system. So in your file tree on the left, you should be able to find it. And if you open you'll see that it's empty. Yeah, so now you can quickly head back to the quick start and copy the boilerplate for that script That's a little bit further down, a little bit there you go. That's the boilerplate. So a TypeScript script is just a file that gets executed from top to bottom
That's a little bit further down, a little bit there you go. That's the boilerplate. So a TypeScript script is just a file that gets executed from top to bottom And if you scroll up what this basically does at the moment, it imports Prisma Client, that's the component that we'll use to interact with the database to send queries to read and write data. The next line is consprisma equals new Prisma Client. That's where we instantiate Prisma Client
And if you scroll up what this basically does at the moment, it imports Prisma Client, that's the component that we'll use to interact with the database to send queries to read and write data. The next line is consprisma equals new Prisma Client. That's where we instantiate Prisma Client That's where we actually like create the physical instance inside of our application that lets us do this. That lets us interact with the database. The next one is a main function. We need this because we want to use the await keyword
That's where we actually like create the physical instance inside of our application that lets us do this. That lets us interact with the database. The next one is a main function. We need this because we want to use the await keyword So we need an async function here where we can do this to resolve the promises of our database queries. And then in the end, we just call the main function so that it gets executed and have some additional boilerplate code that you also don't need to really worry about
So we need an async function here where we can do this to resolve the promises of our database queries. And then in the end, we just call the main function so that it gets executed and have some additional boilerplate code that you also don't need to really worry about I'm not sure if this is just the way I was trying to do things or not, but when I was trying to do like a read query and a write query separately, they wouldn't do them separately unless I had the index file, which we don't have an index file here, we have script.ts. But not sure
I'm not sure if this is just the way I was trying to do things or not, but when I was trying to do like a read query and a write query separately, they wouldn't do them separately unless I had the index file, which we don't have an index file here, we have script.ts. But not surets. But not sure. If I had the index file and I wanted to read it, I could, or if I wanted to write it, I could, but without the index file, the read and write wouldn't work. Interesting. I think that's..
ts. But not sure. If I had the index file and I wanted to read it, I could, or if I wanted to write it, I could, but without the index file, the read and write wouldn't work. Interesting. I think that's.. I think that's... If it came down to what it was named, it probably was relevant in the context of the next app or the framework that you were using because these frameworks have conventions for how files should be named. In this case, we're not using a framework. We're just using plain typescript
I think that's... If it came down to what it was named, it probably was relevant in the context of the next app or the framework that you were using because these frameworks have conventions for how files should be named. In this case, we're not using a framework. We're just using plain typescript So we can really name the file whatever we want. It's not yet in the context of any framework. So we don't have to call it index.ts. We don't need to signal to the framework through the name of our file what the purpose of the file is. Got it. Thank you
So we can really name the file whatever we want. It's not yet in the context of any framework. So we don't have to call it index.ts. We don't need to signal to the framework through the name of our file what the purpose of the file is. Got it. Thank you Got it. Thank you. So yeah, you can already run this file, by the way. If you execute the command npm run dev, it's actually not the command. Sorry, it's actually npx because we're using plain.ts.node here, and then npx.ts-node. And now the name of the file script.ts
Got it. Thank you. So yeah, you can already run this file, by the way. If you execute the command npm run dev, it's actually not the command. Sorry, it's actually npx because we're using plain.ts.node here, and then npx.ts-node. And now the name of the file script.tsts. So this just executes your TypeScript script from top to bottom, but there is nothing in there that we would see in the console at the moment because we don't have any console lock statement
ts. So this just executes your TypeScript script from top to bottom, but there is nothing in there that we would see in the console at the moment because we don't have any console lock statement So it just executes all of these lines of code here that you see, importing Prisma, and sent you a prisma client executing an empty main function, but nothing really happens
So it just executes all of these lines of code here that you see, importing Prisma, and sent you a prisma client executing an empty main function, but nothing really happens So how about you just for our own understanding, put a console lock statement even before the definition of the main function. Yeah, and just put one there and you can just write something like hello, or we haven't executed the main function yet, or something like this
So how about you just for our own understanding, put a console lock statement even before the definition of the main function. Yeah, and just put one there and you can just write something like hello, or we haven't executed the main function yet, or something like this I don't even remember how to do a console lock, it's been so long. That is console.log. Okay, and then now you open parentheses and then you can put in a string. If you have this case, escape should, yeah, hello. What I put on, all of them. Yay, okay
I don't even remember how to do a console lock, it's been so long. That is console.log. Okay, and then now you open parentheses and then you can put in a string. If you have this case, escape should, yeah, hello. What I put on, all of them. Yay, okay Yay, okay. So if you save it and in the terminal run the same command again, then it will print this because we are just executing this script file from top to bottom. Okay. Okay
Yay, okay. So if you save it and in the terminal run the same command again, then it will print this because we are just executing this script file from top to bottom. Okay. Okay Okay. Okay. All right, so now comes the interesting part and that's where we are going to explore the Prisma client curing API to send queries to the database
Okay. Okay. All right, so now comes the interesting part and that's where we are going to explore the Prisma client curing API to send queries to the database And when I use the term API here in the context of Prisma client, it's important to distinguish it from or to this, and be graded from the term API that we have talked about before already when we were talking about a web API that's consumed by a frontend. The term API is very ambiguous
And when I use the term API here in the context of Prisma client, it's important to distinguish it from or to this, and be graded from the term API that we have talked about before already when we were talking about a web API that's consumed by a frontend. The term API is very ambiguous It only means application programming interface and that can literally be anything that allows you to interact with any kind of piece of software. And if we're talking about APIs in the context of web applications, we often call them web APIs or HTTP APIs or REST APIs or GraphQL APIs
It only means application programming interface and that can literally be anything that allows you to interact with any kind of piece of software. And if we're talking about APIs in the context of web applications, we often call them web APIs or HTTP APIs or REST APIs or GraphQL APIs These are the ways how a client, a frontend, mobile application, browser application will fetch data from the server via the HTTP API. When I talk about the Prisma client API, what I mean is the functions and methods that Prisma client exposes to send queries to the database
These are the ways how a client, a frontend, mobile application, browser application will fetch data from the server via the HTTP API. When I talk about the Prisma client API, what I mean is the functions and methods that Prisma client exposes to send queries to the database So in this case, it's more of a database API that lets me talk to a database. But that's the term API when I use it as Prisma client API. And the Prisma client API, we're going to explore inside of the main function
So in this case, it's more of a database API that lets me talk to a database. But that's the term API when I use it as Prisma client API. And the Prisma client API, we're going to explore inside of the main function And I would say that we're starting by trying to read the record from the user table that you just created inside of Prisma Studio. So you can delete this comment inside of the main function. And let's write our first Prisma client query here
And I would say that we're starting by trying to read the record from the user table that you just created inside of Prisma Studio. So you can delete this comment inside of the main function. And let's write our first Prisma client query here And we're storing the results of the query inside of a constant that we want to call users. So what you can write is const users. Const that's yeah, and then users equals. And now you can use the await keyword await. And now you can type Prisma as the next word. And now you say dot
And we're storing the results of the query inside of a constant that we want to call users. So what you can write is const users. Const that's yeah, and then users equals. And now you can use the await keyword await. And now you can type Prisma as the next word. And now you say dot And again, here's the cool part about Prisma the auto completion. So now you don't have to type a lot anymore. You basically only have to know when you have to open braces and parentheses
And again, here's the cool part about Prisma the auto completion. So now you don't have to type a lot anymore. You basically only have to know when you have to open braces and parentheses But otherwise you can let yourself be guided through the experience of composing a Prisma client query using the auto completion. And in this case, we want to retrieve all of the users that are currently stored inside of the database. So you can go Prisma dot user
But otherwise you can let yourself be guided through the experience of composing a Prisma client query using the auto completion. And in this case, we want to retrieve all of the users that are currently stored inside of the database. So you can go Prisma dot user And if you put another dot, you will have another palette of suggestions. And in this case, we want to use the find many cool because that it just fetches all of the users that are currently inside of the database
And if you put another dot, you will have another palette of suggestions. And in this case, we want to use the find many cool because that it just fetches all of the users that are currently inside of the database And maybe to just adhere to the like types of conventions, you can indent this line with one tab. So yes, perfect. And behind find many, you also have to open and close parentheses because we're calling a function here. Find many as a function
And maybe to just adhere to the like types of conventions, you can indent this line with one tab. So yes, perfect. And behind find many, you also have to open and close parentheses because we're calling a function here. Find many as a function And whenever we call a function, we have to use parentheses. All right, this line itself already is going to execute a database query against the SQLite database file that you have on your file system here, the dev DB
And whenever we call a function, we have to use parentheses. All right, this line itself already is going to execute a database query against the SQLite database file that you have on your file system here, the dev DB And it will retrieve all the user records and store it inside of the variable called inside of the constant called users. So if you execute this, you can do this. NPXT is not exactly
And it will retrieve all the user records and store it inside of the variable called inside of the constant called users. So if you execute this, you can do this. NPXT is not exactly The output in the terminal still won't change because while this code is being executed, we don't do anything with the users to actually show them on the console
The output in the terminal still won't change because while this code is being executed, we don't do anything with the users to actually show them on the console So what you can do next, you can insert a new console dot lock statement in the next line after consumers immediately after consumers, not after the breaks. Yeah, exactly in that line. And you can say console. lock. And this time inside of the parentheses, you just put users
So what you can do next, you can insert a new console dot lock statement in the next line after consumers immediately after consumers, not after the breaks. Yeah, exactly in that line. And you can say console. lock. And this time inside of the parentheses, you just put users So again, and inside of parentheses. So after after console.lock, you have to open parentheses. Oh, yeah, yeah. Okay. We just stop highlighting it. Yeah, these. That's indeed annoying about this code. All right
So again, and inside of parentheses. So after after console.lock, you have to open parentheses. Oh, yeah, yeah. Okay. We just stop highlighting it. Yeah, these. That's indeed annoying about this code. All right All right. So if you execute this again, then you'll actually see the database entry now locked to the console. Interesting. All right. How about we quickly look at what Prisma is actually doing under the hood to just put some pieces together in your head, maybe. Yeah
All right. So if you execute this again, then you'll actually see the database entry now locked to the console. Interesting. All right. How about we quickly look at what Prisma is actually doing under the hood to just put some pieces together in your head, maybe. Yeah Yeah. If you if you scroll up in the file to the to line three, where we instantiate Prisma client. And inside of the parentheses there, after a new Prisma client, the empty parentheses, if you put in curly braces there. And hit enter once. And now you hit control space again
Yeah. If you if you scroll up in the file to the to line three, where we instantiate Prisma client. And inside of the parentheses there, after a new Prisma client, the empty parentheses, if you put in curly braces there. And hit enter once. And now you hit control space again You'll see some options that you can use to configure Prisma client. And in this case, we want to use the log option. So you can say log here. Now a colon. And then you can open square brackets. And inside of the square brackets, you can start or open quotes, double quotes or single quotes
You'll see some options that you can use to configure Prisma client. And in this case, we want to use the log option. So you can say log here. Now a colon. And then you can open square brackets. And inside of the square brackets, you can start or open quotes, double quotes or single quotes Doesn't matter. And there you see the different things that you can ask Prisma client to log for you under the hood. And if you select query here, it will log the SQL queries that are being executed against database under the hood by your Prisma client instance
Doesn't matter. And there you see the different things that you can ask Prisma client to log for you under the hood. And if you select query here, it will log the SQL queries that are being executed against database under the hood by your Prisma client instance So yes, if you save the file and run it again, you now not only see the output in JSON format, but we actually see the Prisma client, the SQL query that is generated based on the types of query that you've created there. Select user. So it specifies all the individual fields, the user
So yes, if you save the file and run it again, you now not only see the output in JSON format, but we actually see the Prisma client, the SQL query that is generated based on the types of query that you've created there. Select user. So it specifies all the individual fields, the userid field, the user. email field, the user.name field from the user table. And then just like some more cryptic stuff because this is all the generated SQL code. So in a plain or more simple form, you could also write this query as select star from users and what have the same effect basically
id field, the user. email field, the user.name field from the user table. And then just like some more cryptic stuff because this is all the generated SQL code. So in a plain or more simple form, you could also write this query as select star from users and what have the same effect basically It gives you all of the tables. Interesting. Fakue, what does limit mean and where are the params in the query? We are using, okay, this gets a little bit more into the weeds. I'll just give a couple of short hints here
It gives you all of the tables. Interesting. Fakue, what does limit mean and where are the params in the query? We are using, okay, this gets a little bit more into the weeds. I'll just give a couple of short hints here The params for the SQL query are passed separately because we are using prepared statements with Prisma. Prepared statements are a concept in SQL where you can already define SQL snippets. You store them on the database server and then just pass the parameters like separately
The params for the SQL query are passed separately because we are using prepared statements with Prisma. Prepared statements are a concept in SQL where you can already define SQL snippets. You store them on the database server and then just pass the parameters like separately That's why we don't see any parameters here. And also the limit and offset, these are keywords to specify pagination, which in this case we are also not using
That's why we don't see any parameters here. And also the limit and offset, these are keywords to specify pagination, which in this case we are also not using And yeah, the like the SQL query here could be very much simplified but because it's auto generated, it looks a little bit more cryptic sometimes or includes information that's not always needed at this particular point. All right, how about we create another record in the database
And yeah, the like the SQL query here could be very much simplified but because it's auto generated, it looks a little bit more cryptic sometimes or includes information that's not always needed at this particular point. All right, how about we create another record in the database And this time I would say that we're creating a post record and we are going to do this in code now, Jen, not in business studio but in code. Okay, okay. So what you can do inside of the main function again, and I would say we do this even before, yeah, before the current line
And this time I would say that we're creating a post record and we are going to do this in code now, Jen, not in business studio but in code. Okay, okay. So what you can do inside of the main function again, and I would say we do this even before, yeah, before the current line So you can go ahead and write const again, we will store the result of this operation in a variable or inside of a constant. And let's just call it post. It's going to be a single post object equals a weight. Prisma. This time we want to create a post, not a user
So you can go ahead and write const again, we will store the result of this operation in a variable or inside of a constant. And let's just call it post. It's going to be a single post object equals a weight. Prisma. This time we want to create a post, not a user So you can select post here in the other completion. And if you had dot again, this time we don't want to retrieve or read a post, but we want to create one. And there is a method or function that's called exactly that
So you can select post here in the other completion. And if you had dot again, this time we don't want to retrieve or read a post, but we want to create one. And there is a method or function that's called exactly that Now you have to open parentheses again because it's a function that we want to call. And inside of there, we now have to provide some arguments
Now you have to open parentheses again because it's a function that we want to call. And inside of there, we now have to provide some arguments So at this point, if I'm not mistaken, TypeScript will actually yell at you because you say or like you're telling TypeScript that you want to create a post record at the database. But if you look back at the schema
So at this point, if I'm not mistaken, TypeScript will actually yell at you because you say or like you're telling TypeScript that you want to create a post record at the database. But if you look back at the schemaprisma file, actually, if you quickly open that, it's a good opportunity to talk about some of the concepts in here and scroll to the post model
prisma file, actually, if you quickly open that, it's a good opportunity to talk about some of the concepts in here and scroll to the post model How do you understand the different fields of that post model? Maybe you can explain to me what you can read and understand from these field definitions here. So how many fields first are there on this post model? Would it be, I'm not sure if it would be five or six
How do you understand the different fields of that post model? Maybe you can explain to me what you can read and understand from these field definitions here. So how many fields first are there on this post model? Would it be, I'm not sure if it would be five or six I say that because the ID is like auto created, but it's still something that's created. So it could be six. But the type we have. I'll go ahead. We do have six fields indeed on this post model. The ID does count as a field. And so does the author field, which is of type user
I say that because the ID is like auto created, but it's still something that's created. So it could be six. But the type we have. I'll go ahead. We do have six fields indeed on this post model. The ID does count as a field. And so does the author field, which is of type user But that's a special field actually because that's a relation field denotes a relation to another model. And all of the others are so called scale our types or primitive types that are stored directly in the database. So we have six fields here indeed. And each field has a name. It has a type
But that's a special field actually because that's a relation field denotes a relation to another model. And all of the others are so called scale our types or primitive types that are stored directly in the database. So we have six fields here indeed. And each field has a name. It has a type It has a type. And it has potentially some attributes. And it also potentially has a type modifier. Now what's a type modifier and what's it used for? Inside of the, or in the fields of the post model here, we only have one type modifier
It has a type. And it has potentially some attributes. And it also potentially has a type modifier. Now what's a type modifier and what's it used for? Inside of the, or in the fields of the post model here, we only have one type modifier And that's the question mark after this string on the content on the content field indeed. Can you imagine what this question mark means, semantically in the context of what we're doing? Or have any idea, it can be a wild guess
And that's the question mark after this string on the content on the content field indeed. Can you imagine what this question mark means, semantically in the context of what we're doing? Or have any idea, it can be a wild guess This actually got me kind of stuck when I was trying to make the models myself was I wasn't sure if like the title was something because the title has the string by itself
This actually got me kind of stuck when I was trying to make the models myself was I wasn't sure if like the title was something because the title has the string by itself If then content has the string because they can't be the same type of string, they have to be two different strings to be read by the database. That's that goes into the right direction already
If then content has the string because they can't be the same type of string, they have to be two different strings to be read by the database. That's that goes into the right direction already But I think this would rather be a unique attribute, how you could prevent two titles from being exactly the same or from preventing two posts to have exactly the same. Actually, if you scroll up to the user model, there is a unique attribute on the email field here
But I think this would rather be a unique attribute, how you could prevent two titles from being exactly the same or from preventing two posts to have exactly the same. Actually, if you scroll up to the user model, there is a unique attribute on the email field here And that guarantees that the database will not allow that you ever create two users with the same email. So the database is going to prevent that if you are using the at unique attribute here. The type modifier, the question mark is slightly different
And that guarantees that the database will not allow that you ever create two users with the same email. So the database is going to prevent that if you are using the at unique attribute here. The type modifier, the question mark is slightly different It is used to indicate to the database which columns need to have a value when you create a record. For example, when you created the user record, remember how you had to put in an email, but you didn't have to put in a name
It is used to indicate to the database which columns need to have a value when you create a record. For example, when you created the user record, remember how you had to put in an email, but you didn't have to put in a name That's because inside of the Prisma schema here, the email is marked as required because it doesn't have the question mark at the end when a type, when a field inside of the Prisma schema has no question mark in the end. It means it's required inside of the database
That's because inside of the Prisma schema here, the email is marked as required because it doesn't have the question mark at the end when a type, when a field inside of the Prisma schema has no question mark in the end. It means it's required inside of the database The database will ensure that whenever you create a new record that there is a value for that particular column in that record. You can never have a database record in the user table that has no email because it's required. Got it. The name is optional. That's why we put the string here
The database will ensure that whenever you create a new record that there is a value for that particular column in that record. You can never have a database record in the user table that has no email because it's required. Got it. The name is optional. That's why we put the string here The same with the post model. All of the properties, all of the fields on the post model are required except for the content. So when you create a new post, you don't have to submit and information for the content, but you have to submit values for everything else
The same with the post model. All of the properties, all of the fields on the post model are required except for the content. So when you create a new post, you don't have to submit and information for the content, but you have to submit values for everything else Actually, that's not quite true because the published field, as you see there, right below content, has the default attribute. Because the value in the database is still still required
Actually, that's not quite true because the published field, as you see there, right below content, has the default attribute. Because the value in the database is still still required But if you don't provide one yourself when creating a new post record, the database will provide it for you and will just set it to false as specified. Would it only do this as a boolean or could it do like a string default? It can also do a default string
But if you don't provide one yourself when creating a new post record, the database will provide it for you and will just set it to false as specified. Would it only do this as a boolean or could it do like a string default? It can also do a default string It can do a default integer and default for pretty much any other type except for relation fields. There you can specify a default. Oh, this is fine. Yes. All right. So if we go back into the script file now, so we have seen now that you at least need to provide a title and an author ID
It can do a default integer and default for pretty much any other type except for relation fields. There you can specify a default. Oh, this is fine. Yes. All right. So if we go back into the script file now, so we have seen now that you at least need to provide a title and an author ID Because these are the two fields on the post model that are required and that don't have a default value assigned to them. So it's understandable that TypeScript is now yelling at you and like showing these red squiggly lines because you're trying to create a new post record inside of the database
Because these are the two fields on the post model that are required and that don't have a default value assigned to them. So it's understandable that TypeScript is now yelling at you and like showing these red squiggly lines because you're trying to create a new post record inside of the database But you don't provide the content and the title. And before you spell out the title here, you should open curly braces again because you're passing the title and the author ID as an object here. So inside of this curly brace object, you can now hit control space
But you don't provide the content and the title. And before you spell out the title here, you should open curly braces again because you're passing the title and the author ID as an object here. So inside of this curly brace object, you can now hit control space And it'll show you what you can submit here. And again, the title and the author information are wrapped inside of this data object. So yes, you need to select data here. And now colon and opening braces again. And the curly ones. I'm sorry. Open curly braces and hit enter
And it'll show you what you can submit here. And again, the title and the author information are wrapped inside of this data object. So yes, you need to select data here. And now colon and opening braces again. And the curly ones. I'm sorry. Open curly braces and hit enter And now control space again. And now you can actually select the properties that you have to submit. So title, world or anything you like. Because it would have to be within strings, right? Or no? Yes, it has to be submitted as a string. That's correct. So title is still complaining
And now control space again. And now you can actually select the properties that you have to submit. So title, world or anything you like. Because it would have to be within strings, right? Or no? Yes, it has to be submitted as a string. That's correct. So title is still complaining So first you have to add a comma after the title line. And now in the next line, if you hit control space again. Yeah. Do it that way. There we go. Control space. All right. You now have two different ways how you can connect an existing user record to this post that you're about to create
So first you have to add a comma after the title line. And now in the next line, if you hit control space again. Yeah. Do it that way. There we go. Control space. All right. You now have two different ways how you can connect an existing user record to this post that you're about to create Either via the author field or the author ID field. If you do it via the author ID field, you have to know the ID of the user record that you want to connect it to. You can use this here actually because I know what the ID is
Either via the author field or the author ID field. If you do it via the author ID field, you have to know the ID of the user record that you want to connect it to. You can use this here actually because I know what the ID is It's just one because you only created a single one and auto incrementing. So the only author, the only user record that you can even connect it to is the author with ID one. And you see the types could error went away because now we specify the title and an author ID
It's just one because you only created a single one and auto incrementing. So the only author, the only user record that you can even connect it to is the author with ID one. And you see the types could error went away because now we specify the title and an author ID So the only two required fields that you didn't have to that didn't have a default value are now provided with values. So what you can do now is you can save the file and run the query and and run the script again
So the only two required fields that you didn't have to that didn't have a default value are now provided with values. So what you can do now is you can save the file and run the query and and run the script again And maybe we remove the the log now because now it's just going to clutter the console log statements. So up in the Prisma client constructor, yes. And the log option inside of Prisma client. You can just like put a comment there as well. Yes. And if you save the file and run it again
And maybe we remove the the log now because now it's just going to clutter the console log statements. So up in the Prisma client constructor, yes. And the log option inside of Prisma client. You can just like put a comment there as well. Yes. And if you save the file and run it again We will only see the output of the user find many query because we aren't actually not logging anything else. If you had command K in your terminal by the way, you can clear it. And it's and if you run the script a couple of more times, you'll see that it never will make a difference
We will only see the output of the user find many query because we aren't actually not logging anything else. If you had command K in your terminal by the way, you can clear it. And it's and if you run the script a couple of more times, you'll see that it never will make a difference We we don't see anything. But with every time that you execute the script, the Prisma.create the Prisma.post.create query will be executed. And every time you're creating the same post record all over again in the database, let's quickly validate this in in Prisma Studio
We we don't see anything. But with every time that you execute the script, the Prisma.create the Prisma.post.create query will be executed. And every time you're creating the same post record all over again in the database, let's quickly validate this in in Prisma Studio If you run NPS Prisma Studio again. And you open the post table inside there. Oh cool. Several of these posts have been created. And they all belong to this one user that you created before. So if you go to the user table inside of Prisma Studio here
If you run NPS Prisma Studio again. And you open the post table inside there. Oh cool. Several of these posts have been created. And they all belong to this one user that you created before. So if you go to the user table inside of Prisma Studio here And you click on post the four posts there, you actually can see the relation between the two. But so that it's because the the the user with ID1. So if you close this relation view again. So the the user has ID1 right
And you click on post the four posts there, you actually can see the relation between the two. But so that it's because the the the user with ID1. So if you close this relation view again. So the the user has ID1 right And in your code, when you specify the author ID for all the new posts that you're creating, you specified author ID1 right. And that's how you connected the two. That makes sense. But if I wanted to if I had a lot more in there. And I just knew the title
And in your code, when you specify the author ID for all the new posts that you're creating, you specified author ID1 right. And that's how you connected the two. That makes sense. But if I wanted to if I had a lot more in there. And I just knew the title Could I query it without the title or without the number. But if I didn't know it. You can of course querying. Yes. But here you're creating it. Right. I think we can distinguish a create query from an update query from a delete query from a read like find a query or find unique
Could I query it without the title or without the number. But if I didn't know it. You can of course querying. Yes. But here you're creating it. Right. I think we can distinguish a create query from an update query from a delete query from a read like find a query or find unique And each of these will have different kinds of values that you have to put in first to tell Prisma what exactly you're looking for or what you want to do. And when you create, then of course you don't need then you you you have to provide the value of the author that you want to connect to
And each of these will have different kinds of values that you have to put in first to tell Prisma what exactly you're looking for or what you want to do. And when you create, then of course you don't need then you you you have to provide the value of the author that you want to connect to Or alternatively, actually we can go the alternative path. If you delete the author ID line there. Just the author ID. And instead we are now using author. So if you go and author colon braces enter. Colon curly braces enter. Colon braces empty and control space for auto completion
Or alternatively, actually we can go the alternative path. If you delete the author ID line there. Just the author ID. And instead we are now using author. So if you go and author colon braces enter. Colon curly braces enter. Colon braces empty and control space for auto completion Connect because we want to connect this new post record to an existing user record. Again colon curly braces enter. And again control space. And now you can decide how do you want to connect it either by ID. That's what you already did
Connect because we want to connect this new post record to an existing user record. Again colon curly braces enter. And again control space. And now you can decide how do you want to connect it either by ID. That's what you already did But here you can also choose the email because the email is specified as unique inside of the Prisma schema. So Prisma knows that there can only be one user with a particular email. And indeed if you now choose the email that you've used before for this one user record and you run the script again
But here you can also choose the email because the email is specified as unique inside of the Prisma schema. So Prisma knows that there can only be one user with a particular email. And indeed if you now choose the email that you've used before for this one user record and you run the script again You could also you could also start Prisma Studio in a separate tab by the way. Or now just if you click on the plus inside of the local VS code. So now it has five posts. You see that it it's still connected it to this one user this time by the email
You could also you could also start Prisma Studio in a separate tab by the way. Or now just if you click on the plus inside of the local VS code. So now it has five posts. You see that it it's still connected it to this one user this time by the email If you type in by the way an email that doesn't exist, you can try that. Oh yeah. So if you just have a type on there or an empty string or yes. And you run npxt as node to run this script. Oh yeah. Okay. You can still leave this running and just hit the plus on on top of the terminal there
If you type in by the way an email that doesn't exist, you can try that. Oh yeah. So if you just have a type on there or an empty string or yes. And you run npxt as node to run this script. Oh yeah. Okay. You can still leave this running and just hit the plus on on top of the terminal there And that open yeah. No. For the down. Oh, thank you. You open a second terminal. And you can hit npxt as node script.ts. Is it batched to us? Dash to us node yes. Just script. I feel like I typed this wrong but I think it should work. So now did you save the script
And that open yeah. No. For the down. Oh, thank you. You open a second terminal. And you can hit npxt as node script.ts. Is it batched to us? Dash to us node yes. Just script. I feel like I typed this wrong but I think it should work. So now did you save the scriptts file? I thought so but why are you not saving? Okay. Okay. All right. Can you run it again? Oh no. Okay. Now it runs into an error because no user record was found for the nested connect one to many
ts file? I thought so but why are you not saving? Okay. Okay. All right. Can you run it again? Oh no. Okay. Now it runs into an error because no user record was found for the nested connect one to many But like fundamentally the issue here is I think if you scroll up maybe you also have and that more. No record was found or something. An operation failed because it depends on one or more records that were required but not found. Right
But like fundamentally the issue here is I think if you scroll up maybe you also have and that more. No record was found or something. An operation failed because it depends on one or more records that were required but not found. Right Right. A post needs an author but you provided invalid information for the author that you wanted to connect this new post to. So it didn't work
Right. A post needs an author but you provided invalid information for the author that you wanted to connect this new post to. So it didn't work So it didn't work. But we still don't see the post of the user record printed here and that's because a Prisma by default it only prints all the scalar fields of the models of the objects that it sends queries for
So it didn't work. But we still don't see the post of the user record printed here and that's because a Prisma by default it only prints all the scalar fields of the models of the objects that it sends queries for So in this case ID email and name are all scalar fields but the post relation field is not included. However you can include that and we'll do that next inside of the Prisma client query the find many query actually that we have Prisma user.find many. Bit further down. Yeah
So in this case ID email and name are all scalar fields but the post relation field is not included. However you can include that and we'll do that next inside of the Prisma client query the find many query actually that we have Prisma user.find many. Bit further down. Yeah Yeah. Bit further up inside of the main. Yes. There we go. Prisma.Juil.find many. In there you can open curly braces. Yes. Within find many or. Yes. It's within the parentheses and control space
Yeah. Bit further up inside of the main. Yes. There we go. Prisma.Juil.find many. In there you can open curly braces. Yes. Within find many or. Yes. It's within the parentheses and control space Now you have their include and that allows you to include relation fields in the same query when you're reading data. So colon braces enter. Control space. And this now shows you the options that you can include inside of the query result. And in this case we want to include the posts
Now you have their include and that allows you to include relation fields in the same query when you're reading data. So colon braces enter. Control space. And this now shows you the options that you can include inside of the query result. And in this case we want to include the posts So you can click on posts and then it's colon and true. You can just write true here. It tells Prisma that you also want to include all of the posts of each user record that you're fetching from the database. So if you run this again, NPX, TSMode script
So you can click on posts and then it's colon and true. You can just write true here. It tells Prisma that you also want to include all of the posts of each user record that you're fetching from the database. So if you run this again, NPX, TSMode script The output will change and it will now include the post key here. But it doesn't render the posts properly because that's how console.lock works. What you can do is you can switch it to console.deer.dir. And no inside, sorry, inside of your code where you currently have console.lock users
The output will change and it will now include the post key here. But it doesn't render the posts properly because that's how console.lock works. What you can do is you can switch it to console.deer.dir. And no inside, sorry, inside of your code where you currently have console.lock userslock users. After the Prisma.user.find many query, but further down, but further down. Yes. And you can switch that to console.deer.dir. And then after users inside of the parentheses, you put a comma, curly braces. And then curly braces
lock users. After the Prisma.user.find many query, but further down, but further down. Yes. And you can switch that to console.deer.dir. And then after users inside of the parentheses, you put a comma, curly braces. And then curly braces And now you type depth, depth, colon, and then just the number zero. All right, if you save this and run it again. And yeah, maybe make a bit more space for the terminal. Now it just renders a single object. Actually, sorry, sorry, instead of zero, it's now not zero, but actually now. Yes
And now you type depth, depth, colon, and then just the number zero. All right, if you save this and run it again. And yeah, maybe make a bit more space for the terminal. Now it just renders a single object. Actually, sorry, sorry, instead of zero, it's now not zero, but actually now. Yes Yes. And now if you run it again, now you should see the nested object. So that's by the way, what I initially referred to as nested objects. If you like make even more space for the terminal, if you scroll up, we have a lot of posts for this particular user already
Yes. And now if you run it again, now you should see the nested object. So that's by the way, what I initially referred to as nested objects. If you like make even more space for the terminal, if you scroll up, we have a lot of posts for this particular user already But if you scroll up to the beginning of where you ran the query, you see that all of these posts are actually nested inside of a user object, right? On the root level inside of this object, you have the fields of the user
But if you scroll up to the beginning of where you ran the query, you see that all of these posts are actually nested inside of a user object, right? On the root level inside of this object, you have the fields of the user So again, if you scroll up a little bit to the user, the entire object starts with the scalar fields of the user, ID, email, and name. But then you also include inside of the same object, you're nesting more objects in this time inside of an array. So posts has an array of more objects now
So again, if you scroll up a little bit to the user, the entire object starts with the scalar fields of the user, ID, email, and name. But then you also include inside of the same object, you're nesting more objects in this time inside of an array. So posts has an array of more objects now And that's what I referred to as nested objects in the beginning. Because in the database, you recall that these are not stored physically together. They are stored in separate tables
And that's what I referred to as nested objects in the beginning. Because in the database, you recall that these are not stored physically together. They are stored in separate tables And the only way how an application can now know which record is associated with which record in the other table is by following the reference from the foreign key, the author ID. But here inside of our JavaScript code, we now have them co-located physically co-located inside of the same object
And the only way how an application can now know which record is associated with which record in the other table is by following the reference from the foreign key, the author ID. But here inside of our JavaScript code, we now have them co-located physically co-located inside of the same object So that's kind of the different paradigm between relational databases and object-oriented programming language, where we can have nested data, whereas the flat and normalized tables always have references to each other. What you're saying makes sense
So that's kind of the different paradigm between relational databases and object-oriented programming language, where we can have nested data, whereas the flat and normalized tables always have references to each other. What you're saying makes sense I feel like I'm definitely going to need to mess with this more. And I cannot believe that it's already been over an hour and a half. Wow. Okay. Yeah. So on that note, I'm going to save this and I'll get it uploaded. To my creative repo for it
I feel like I'm definitely going to need to mess with this more. And I cannot believe that it's already been over an hour and a half. Wow. Okay. Yeah. So on that note, I'm going to save this and I'll get it uploaded. To my creative repo for it Because I feel like this is probably a good pausing point. And I absolutely love this because there are a lot of steps that I didn't do. And I don't know if it was on on the walkthroughs or what or I was just super enjoying it. Anthony says that Prisma is quite the rabbit hole
Because I feel like this is probably a good pausing point. And I absolutely love this because there are a lot of steps that I didn't do. And I don't know if it was on on the walkthroughs or what or I was just super enjoying it. Anthony says that Prisma is quite the rabbit hole They've been tumbling down it for three years now. Of course you would send this my way Anthony. Of course, me would. I am totally side tracking to see if I can find someone to raid to that look cool. So hopefully coding garden looks cool. It looks like they're doing cool things right now
They've been tumbling down it for three years now. Of course you would send this my way Anthony. Of course, me would. I am totally side tracking to see if I can find someone to raid to that look cool. So hopefully coding garden looks cool. It looks like they're doing cool things right now And any questions that you all have before we raid out. Oh yes. Yes. I agree with this. Now that I know what I was trying to do. Yeah. Like this would be way harder if I wasn't using Prisma 100% 100% agree with this Anthony. I think that you think we should have been asking
And any questions that you all have before we raid out. Oh yes. Yes. I agree with this. Now that I know what I was trying to do. Yeah. Like this would be way harder if I wasn't using Prisma 100% 100% agree with this Anthony. I think that you think we should have been asking I think we went through all the main workflows. We looked at data modeling. We looked at the migrations. How you apply the data model to your database and also at some queries. So yeah, the next step is for anybody to try it out themselves and integrate it in their applications
I think we went through all the main workflows. We looked at data modeling. We looked at the migrations. How you apply the data model to your database and also at some queries. So yeah, the next step is for anybody to try it out themselves and integrate it in their applications And yeah, if you want to follow up about the PR or about your next JS app, if you have further questions there, the things don't work, then feel free to ping me again on Twitter Gen. Or we're all just going to try to convince you to come on the show again sometime. I can also do that
And yeah, if you want to follow up about the PR or about your next JS app, if you have further questions there, the things don't work, then feel free to ping me again on Twitter Gen. Or we're all just going to try to convince you to come on the show again sometime. I can also do that I can also do that. I will be very happy to do a follow up now that we have the basics out of the way. This was very, very cool. And thank you and agreed with everyone. This was great. Thank you for being on the show today. And I'm going to get y'all graded
I can also do that. I will be very happy to do a follow up now that we have the basics out of the way. This was very, very cool. And thank you and agreed with everyone. This was great. Thank you for being on the show today. And I'm going to get y'all graded And thank you everyone for joining today and asking great questions. This was definitely, oh goodness, not the way I went about building my personal stuff. It is always good to have that. So thank you again. And goodbye, everyone. See you Thursday.
And thank you everyone for joining today and asking great questions. This was definitely, oh goodness, not the way I went about building my personal stuff. It is always good to have that. So thank you again. And goodbye, everyone. See you Thursday.