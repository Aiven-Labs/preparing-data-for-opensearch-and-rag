Hello, hello beautiful humans and welcome to another episode of Teach Gen Tech. Today we have Dan joining us and I'm excited about today. We met at Denver Startup Week, which was oh goodness, about a month ago now And y'all, I just want to let you know for especially those going into Devrol is you cannot, you can be not technical and awkwardly just walk up to people and ask questions. That's what I did and this is how Dan is on the show
And y'all, I just want to let you know for especially those going into Devrol is you cannot, you can be not technical and awkwardly just walk up to people and ask questions. That's what I did and this is how Dan is on the show So Dan, please introduce yourself and what you're going to be talking about today. Yeah, Jen, thank you so much for having me. I really appreciate the chance to chat with you today
So Dan, please introduce yourself and what you're going to be talking about today. Yeah, Jen, thank you so much for having me. I really appreciate the chance to chat with you today And I think that is good advice for Devrol, right? You just, you want to be curious and be interested in helping people. I am head of Devrol at a company called Fusionoth. We're a Denver company and what we do is we help developers add authentication into their applications
And I think that is good advice for Devrol, right? You just, you want to be curious and be interested in helping people. I am head of Devrol at a company called Fusionoth. We're a Denver company and what we do is we help developers add authentication into their applications It's undifferentiated functionality that is a little bit risky and critical to your users, but no one, I always say no one ever said, oh my god, what a great logging experience. People just want to get to the features that your application has
It's undifferentiated functionality that is a little bit risky and critical to your users, but no one, I always say no one ever said, oh my god, what a great logging experience. People just want to get to the features that your application has And so today I'm going to be talking about authentication in general. Don't worry, it won't be a fusionoth ad. We're going to talk about authentication in a historical sense and so other things too. So yeah, and good morning, homey. Thank you for joining and yeah, y'all
And so today I'm going to be talking about authentication in general. Don't worry, it won't be a fusionoth ad. We're going to talk about authentication in a historical sense and so other things too. So yeah, and good morning, homey. Thank you for joining and yeah, y'all So I also just want to say like I ended up going to a CTO luncheon during Denver start of week. I was like, I don't know if they're going to let me in, but I need food. And so I went and they did. And fusion office was there. So I ended up talking about two, a few other members of the team
So I also just want to say like I ended up going to a CTO luncheon during Denver start of week. I was like, I don't know if they're going to let me in, but I need food. And so I went and they did. And fusion office was there. So I ended up talking about two, a few other members of the team And I was like, I don't even understand what this is. I will say you guys have nice shirts. It's very soft. So they're swag and they have, you know, good, you know, coffee cups. So I will say that, but I didn't know that when I walked up to all of them
And I was like, I don't even understand what this is. I will say you guys have nice shirts. It's very soft. So they're swag and they have, you know, good, you know, coffee cups. So I will say that, but I didn't know that when I walked up to all of them Actually, real quick, I'm happy to give away a t shirt to randomly selected, uh, stream viewers if they'd be interested. Okay, cool. Great. One stipulation, they need to share the video from YouTube. And I guess the second stipulation is they need to be in the US or Canada. Yeah, shipping out
Actually, real quick, I'm happy to give away a t shirt to randomly selected, uh, stream viewers if they'd be interested. Okay, cool. Great. One stipulation, they need to share the video from YouTube. And I guess the second stipulation is they need to be in the US or Canada. Yeah, shipping out Yeah, shipping out. Yeah. The world is tough. Sorry. Yeah. So y'all share the YouTube video and tag us. So it can be me, fusion off and Dan or at least tag me so I know that you're sharing it. I can tag everybody else. And yeah, exactly homie
Yeah, shipping out. Yeah. The world is tough. Sorry. Yeah. So y'all share the YouTube video and tag us. So it can be me, fusion off and Dan or at least tag me so I know that you're sharing it. I can tag everybody else. And yeah, exactly homie I'm like authentication is not fun, but I'm like why like why do we have like, okay. And y'all please ignore my dog in the background. She doesn't know if she's coming or going and she's driving me bonkers today. She's a regular in the show. They'll go me on. Please stop
I'm like authentication is not fun, but I'm like why like why do we have like, okay. And y'all please ignore my dog in the background. She doesn't know if she's coming or going and she's driving me bonkers today. She's a regular in the show. They'll go me on. Please stop Please stop. Well, we'll see if she decides to calm down. Um, okay, she's not going to calm down. BRB. This is how you all know it's really live. Really live. Especially when my partner works from home, she's like, I don't know whose office I want to be in, but you guys shut your doors
Please stop. Well, we'll see if she decides to calm down. Um, okay, she's not going to calm down. BRB. This is how you all know it's really live. Really live. Especially when my partner works from home, she's like, I don't know whose office I want to be in, but you guys shut your doors So I want to be where the door is. Shubs. Oh, okay. And I'm actually really excited about this because I learned a lot from your presentation of like the history of authentication. And I do want to get into that
So I want to be where the door is. Shubs. Oh, okay. And I'm actually really excited about this because I learned a lot from your presentation of like the history of authentication. And I do want to get into that But when I don't necessarily understand what is authentication, please, please explain. Sure, sure
But when I don't necessarily understand what is authentication, please, please explain. Sure, sure So I think the easiest way to think about authentication is when we were all hunter gathers, everyone knew everybody else, right
So I think the easiest way to think about authentication is when we were all hunter gathers, everyone knew everybody else, right And I could immediately know if someone was like, uh, member of my tribe or a stranger because I recognize their faces and I kind of had grown up with them when we started to organize into societies and people started traveling more
And I could immediately know if someone was like, uh, member of my tribe or a stranger because I recognize their faces and I kind of had grown up with them when we started to organize into societies and people started traveling more There needed to be some way to trust people that was, um, that you didn't know personally or you didn't know to a friend or a friend or anything like that. Obviously with the internet, we have that even at a wire scale
There needed to be some way to trust people that was, um, that you didn't know personally or you didn't know to a friend or a friend or anything like that. Obviously with the internet, we have that even at a wire scale Authentication and its root is a way for someone to prove their identity to someone who doesn't know them in, uh, in, uh, the sense of a hunter gatherer. Um, and there's obviously a lot of ways to do it. But as root, it is a way to, to know someone is who they say they are basically. Okay
Authentication and its root is a way for someone to prove their identity to someone who doesn't know them in, uh, in, uh, the sense of a hunter gatherer. Um, and there's obviously a lot of ways to do it. But as root, it is a way to, to know someone is who they say they are basically. Okay Okay. And that makes, that totally makes sense. And I think of authentication, I think about like SSO, which we're going to knowledge check myself of SSO is single sign on. Correct. Yes
Okay. And that makes, that totally makes sense. And I think of authentication, I think about like SSO, which we're going to knowledge check myself of SSO is single sign on. Correct. Yes Correct. Yes. And if I understand like the example I like to use is, um, when I worked for a corporate company, you would sign into the computer and therefore the computer would sign you into all of your other taught applications, email, all of it, you didn't have to log in every single time. Yep
Correct. Yes. And if I understand like the example I like to use is, um, when I worked for a corporate company, you would sign into the computer and therefore the computer would sign you into all of your other taught applications, email, all of it, you didn't have to log in every single time. Yep Yep. Um, and then there's like Facebook and Google and GitHub that you can use those accounts to log into other products. And then we have things like VPNs and like the tokens you got to use in two factor and then I get lost
Yep. Um, and then there's like Facebook and Google and GitHub that you can use those accounts to log into other products. And then we have things like VPNs and like the tokens you got to use in two factor and then I get lost Um, and especially with like all the passwords people need and then that, especially in like the API world or cloud world, like there's also a ton of authentication that I'm just like, what if we're just going in like, if we were to know about authentication and you're talking to us like we know what we're talking about, what types of authentication are being used right now
Um, and especially with like all the passwords people need and then that, especially in like the API world or cloud world, like there's also a ton of authentication that I'm just like, what if we're just going in like, if we were to know about authentication and you're talking to us like we know what we're talking about, what types of authentication are being used right now Sure, sure
Sure, sure So kind of an easy way to think about it is, well, there's a couple of ways to think about it, right? The first is what steps do I take to prove I am who I say I am and people in authentication, like people in technology all over the place love jargon
So kind of an easy way to think about it is, well, there's a couple of ways to think about it, right? The first is what steps do I take to prove I am who I say I am and people in authentication, like people in technology all over the place love jargon And so the technical term for that is a factor on authentication. So when you hear MFA, that just means you use more than one way to prove yourself. So the three big categories that are what something you know, something you have or something you are
And so the technical term for that is a factor on authentication. So when you hear MFA, that just means you use more than one way to prove yourself. So the three big categories that are what something you know, something you have or something you are So an example, something you know is a username password, something you have might be, you can prove that you have access to a phone if it gets an SMS message that has a particular code
So an example, something you know is a username password, something you have might be, you can prove that you have access to a phone if it gets an SMS message that has a particular code And so you're proving you have access to the phone which presume or at least to the SMS, it can't receive an SMS, it could not necessarily be a phone. But and then something you are is an example of as like a fingerprint or facial recognition. So those factors are kind of the foundational level
And so you're proving you have access to the phone which presume or at least to the SMS, it can't receive an SMS, it could not necessarily be a phone. But and then something you are is an example of as like a fingerprint or facial recognition. So those factors are kind of the foundational level And then things are built on top of it like single sign on is built on top of that. And that's basically kind of a trust relationship between two or more parties
And then things are built on top of it like single sign on is built on top of that. And that's basically kind of a trust relationship between two or more parties So your computer had a trust relationship with all those applications that once you've logged in your computer, all those applications said, oh yeah, we know, right? We know that Jen has logged in. Or as you said, a lot of applications have a trust relationship with Google
So your computer had a trust relationship with all those applications that once you've logged in your computer, all those applications said, oh yeah, we know, right? We know that Jen has logged in. Or as you said, a lot of applications have a trust relationship with Google So they say, hey, go logging in Google. And if Google comes back and says your Jen Genode at food.com, we trust that. And we're going to, to you is not a dedicated user
So they say, hey, go logging in Google. And if Google comes back and says your Jen Genode at food.com, we trust that. And we're going to, to you is not a dedicated user So those are kind of, there's multiple layers of the authentication take, which is as homie said, right? It's not fun, but I found after a couple years of it, it's interesting because you start off and you say, oh, it's just an username and password, right? That's pretty easy
So those are kind of, there's multiple layers of the authentication take, which is as homie said, right? It's not fun, but I found after a couple years of it, it's interesting because you start off and you say, oh, it's just an username and password, right? That's pretty easy But you start to pill this back. And the question of how you prove someone, how you trust someone is who they say they are at scale in a way that is secure, but isn't super painful for the user. And is cost effective for the company is turned out to be really interesting problem
But you start to pill this back. And the question of how you prove someone, how you trust someone is who they say they are at scale in a way that is secure, but isn't super painful for the user. And is cost effective for the company is turned out to be really interesting problem And that's something that I'm definitely like, I'm getting way ahead of myself wanting to know about this, but like how it gets worked into like APIs and all of that because I'm like, I can't picture it. But now I want to see it like happen. And a lot of that is like skipping way ahead
And that's something that I'm definitely like, I'm getting way ahead of myself wanting to know about this, but like how it gets worked into like APIs and all of that because I'm like, I can't picture it. But now I want to see it like happen. And a lot of that is like skipping way ahead A, that's totally where my mind goes like half the time
A, that's totally where my mind goes like half the time But and luckily in like having teached on tech, I have people like you that will just come on and talk about a random topic and I'm like, cool, we can noodle on that for a while and eventually get there because I'm learning Python from like the very, very beginning and like the details of it
But and luckily in like having teached on tech, I have people like you that will just come on and talk about a random topic and I'm like, cool, we can noodle on that for a while and eventually get there because I'm learning Python from like the very, very beginning and like the details of it And then everything else I've been like, let's just figure it out as we go. We'll just have a one off call about it. And I think that's been so fun. So that's why I'm like, I need to get stuck back. I cannot do that. I need to understand security. And then how we just said agreed
And then everything else I've been like, let's just figure it out as we go. We'll just have a one off call about it. And I think that's been so fun. So that's why I'm like, I need to get stuck back. I cannot do that. I need to understand security. And then how we just said agreed Dan, I'm not sure if it will be such a monster with more understanding teach a sense. Awesome. Thank you, homey. That's awesome
Dan, I'm not sure if it will be such a monster with more understanding teach a sense. Awesome. Thank you, homey. That's awesome That's awesome. So can you go through more of like how we went through like the the tribal recognition or like small group recognition, not sure how that would be said properly to MFA? Yeah. So talking about some more of the history. Yeah. Yeah. Sure
That's awesome. So can you go through more of like how we went through like the the tribal recognition or like small group recognition, not sure how that would be said properly to MFA? Yeah. So talking about some more of the history. Yeah. Yeah. Sure Yeah. Yeah. Sure. So I mean, I did this presentation and it was not a PhD thesis. So please don't quote me if I get some days wrong, but it looked like the first form of authentication I was able to find were some clay seals that happened in the Samaritan region in about 3500 BC BCE
Yeah. Yeah. Sure. So I mean, I did this presentation and it was not a PhD thesis. So please don't quote me if I get some days wrong, but it looked like the first form of authentication I was able to find were some clay seals that happened in the Samaritan region in about 3500 BC BCE And those were basically clay seals that were rolled onto clay tablets and had a certain pattern. And then you could win the clay pad when the clay tablet dried. And you knew that whatever's on that clay tablet contract or like a list of grain or whatever was a test to buy whoever held that seal
And those were basically clay seals that were rolled onto clay tablets and had a certain pattern. And then you could win the clay pad when the clay tablet dried. And you knew that whatever's on that clay tablet contract or like a list of grain or whatever was a test to buy whoever held that seal So that's an example of that's amication by holding something right that possession that seal authenticated the user and typically that seal was handed out by the ruler. So it was just yeah
So that's an example of that's amication by holding something right that possession that seal authenticated the user and typically that seal was handed out by the ruler. So it was just yeah It makes me think of like and I didn't even think of this during the presentation that you gave, but like how it's like your idea is another form of authentication. And that's kind of and then Rivet just said anyone see Huskina Horim and maybe no they shouldn't mess with a for sure. For sure
It makes me think of like and I didn't even think of this during the presentation that you gave, but like how it's like your idea is another form of authentication. And that's kind of and then Rivet just said anyone see Huskina Horim and maybe no they shouldn't mess with a for sure. For sure For sure. For sure. You're even seals you find now it's used now is used for boring contracts right sometimes use for more more exciting things
For sure. For sure. You're even seals you find now it's used now is used for boring contracts right sometimes use for more more exciting things And I feel like even like jamangie like you had to like win your way out of it and authenticate yourself and prove that interesting that is a great like wrap around I like that rivet. All right
And I feel like even like jamangie like you had to like win your way out of it and authenticate yourself and prove that interesting that is a great like wrap around I like that rivet. All right So we're to the point where there's different types of often in like a seal or a is it up was like words words were words before that or after that, but I've been out of context y'all Dan through his presentation was talking about how different people from different areas would use like a secret word or a watch what you're talking about or no the shibbolus the shibbolus is about that one
So we're to the point where there's different types of often in like a seal or a is it up was like words words were words before that or after that, but I've been out of context y'all Dan through his presentation was talking about how different people from different areas would use like a secret word or a watch what you're talking about or no the shibbolus the shibbolus is about that one Yeah. So it's a funny story so basically or well kind of funny now, but basically the idea was that you cannot authenticate someone based on who they are and in this particular case it was the way they pronounced the word
Yeah. So it's a funny story so basically or well kind of funny now, but basically the idea was that you cannot authenticate someone based on who they are and in this particular case it was the way they pronounced the word And so there were two tribes fighting in ancient Israel and this is recorded in the Bible. And they were having a war and there was a river one side was one shot one side was one tribe's property and there was the other types property and so someone invaded him
And so there were two tribes fighting in ancient Israel and this is recorded in the Bible. And they were having a war and there was a river one side was one shot one side was one tribe's property and there was the other types property and so someone invaded him I think it was the gileadites and the f-fremites and the one side was trying to get back cross river to their side and the frameites I think discovered that the gileadites set a word differently than the frameites did and that word was shibbolus
I think it was the gileadites and the f-fremites and the one side was trying to get back cross river to their side and the frameites I think discovered that the gileadites set a word differently than the frameites did and that word was shibbolus They actually pronounce it shibbolus and so they were authenticating every soldier who was trying to cross the river and saying hey say this word and if they didn't say the word correctly they killed them and so that was an example of authentication with very high stakes and it was like an inherent quality of the particular tribe people right or their particular um the way that they pronounce those words
They actually pronounce it shibbolus and so they were authenticating every soldier who was trying to cross the river and saying hey say this word and if they didn't say the word correctly they killed them and so that was an example of authentication with very high stakes and it was like an inherent quality of the particular tribe people right or their particular um the way that they pronounce those words So authentication doesn't just and both these cases by the way are kind of group authentication right like you held the seal as um uh because you they handed to to you by the ruler or you pronounce the word a certain way we think of authentication as like a way to identify a single person because it's very common today but it can be a way to authenticate a group as well
So authentication doesn't just and both these cases by the way are kind of group authentication right like you held the seal as um uh because you they handed to to you by the ruler or you pronounce the word a certain way we think of authentication as like a way to identify a single person because it's very common today but it can be a way to authenticate a group as well And that's uh uh because I'm always like but what's next how did they move to authenticating computers from words? How did we get there
And that's uh uh because I'm always like but what's next how did they move to authenticating computers from words? How did we get there So yeah so um the early computer systems you know basically when you had access to any act in those other computer systems in the 40s and 50s the access was the authentication right there was no kind of um second layer check if you could put the cards into the card reader the punch cards then you were obviously authenticated to be there so it's worth saying that still authentication happened it just didn't happen at the computer level right there was a security guard probably outside the the building and if you got they probably checked your ID at that point right to your point about IDs but in the 60s they started to build computer systems that had remote access or more than one account and people were starting to be limited right like some students had a couple hours a week or the professors had more and people ended up starting to have um use names and passwords and 1961 I think it was the MIMS system I'd have to pull up the presentation um but they that was the first known instance of a password and it was yep in 61 it was the CTSS I'm sorry yeah they're um I we we're going through this presentation kind of quickly just so that way y'all know um on a on a high level thing because it could take the entire time but um yeah it's definitely been a very very fun thing that um you said that they the stu
So yeah so um the early computer systems you know basically when you had access to any act in those other computer systems in the 40s and 50s the access was the authentication right there was no kind of um second layer check if you could put the cards into the card reader the punch cards then you were obviously authenticated to be there so it's worth saying that still authentication happened it just didn't happen at the computer level right there was a security guard probably outside the the building and if you got they probably checked your ID at that point right to your point about IDs but in the 60s they started to build computer systems that had remote access or more than one account and people were starting to be limited right like some students had a couple hours a week or the professors had more and people ended up starting to have um use names and passwords and 1961 I think it was the MIMS system I'd have to pull up the presentation um but they that was the first known instance of a password and it was yep in 61 it was the CTSS I'm sorry yeah they're um I we we're going through this presentation kind of quickly just so that way y'all know um on a on a high level thing because it could take the entire time but um yeah it's definitely been a very very fun thing that um you said that they the stu.
. if I remember correctly the students like somebody hacked into like figured out the password so everyone could have more time to use it yeah so 61 is when the password was invented and then 62 is when the first password hack happened so actually um the one of the students again he was a PhD student he was limited four hours a week and so what he did was he found out there was a way to print out the password file and because the password file wasn't accessible because they were protecting it to some extent but they so he couldn't look at it online but he was able to actually print it out and then he shared it around because he wanted to let other people have access to the system and the funny the funny story is that 25 years later he told he apologized to think to his PhD advisor and said hey I'm sorry I was the one who did that and they didn't take his PhD away from him so thankfully um he he was able to do that but yeah so it didn't take very long from 61 when they invented the password to 62 when the password when there was the first kind of password hack that happened and and who rivets that uh that they're impressed and uh that it talked it even took a year and um yeah I mean it was it was brand new back then so um maybe they were just like what is it who knows who knows and that like definitely brings us more towards like how did it change how did authentication change when the internet launched yeah so the internet kind of opened up this whole I mean obviously in the 80s the 70s and 80s and 90s with the PC there were um you know local art networks and things like that but I think the big thing the internet brought is it brought so many systems online and I think that uh sorry online that's the wrong way to put it it brought so many systems um to be more accessible to everybody and you know a land if I still someone's password in a local area network you know I can do some damage but I have to have approximate physical access to that land right I'd be able to go into the office even if you're a multinational company with lands and lands which are kind of across all your offices you still need some kind of access to get there but the internet changed the game because now if I still someone's password and I'm in Australia or Russia or China or wherever I can still get access to their systems and their credentials if that system is on the internet so that brought in the the real need for more security right so that's bringing in more multi-factor um options and obviously I'm talking about kind of from the consumer perspective the military and business worlds were kind of were ahead of the consumer perspective um in terms of securing accounts but you know the difference between someone be able to like steal your corporate password and steal your banking password if your bank banking software is online that gets to be pretty small in terms of overall impact to the individual right both of those are really really bad events um and for I'm I feel like land and wind is both like very common knowledge at the same time I know I forget what they're called and when you're talking about land it's a local area network and for when I think of that it was a lot of like gaming like the gaming cafes where you would all have to like work together to play starcraft or something like that and um but to your point is companies would have to use it to share information as well um or printers I remember that I'm not a printers a huge thing like could the printer work right and oh my god so other resources as well as information printers oh yay thank you Josh for the raid Josh is going to be on the show tomorrow um we are actually I'm just gonna get a shout out to Joshua because he just raided us but y'all I got my book and we're gonna start doing touch script shit tomorrow it's gonna be exciting okay so and Josh I'll try to get you the um you know links and stuff not right before we stream like I did with Dan you know I'll work on that today um but thank you thank you and uh for everybody that just raided in a also joined tomorrow but this is teach gen tech today we are talking about authentication from the very beginning so this one today is going to be much more theory-based and um yay Jay's here too uh Jay said I have a VS code extension that I'm working on you should I don't know if that was uh okay yes you guys are figuring that out good job but we were just talking about how we went from somebody hacking into you um in 61 that they hacked the they printed the password to be able to use internet or computer time uh for their PhD and then how going from land really land and land went to you getting um you know have to be in somebody's bubble to get you know pass their security and then how did that move to the internet itself sure so I think what we're talking about is some of the the standards that have kind of come out since the internet um since you know I mean the internet was really started in the 60s and 70s so I'm gonna be careful like the web is really the big thing right in the 90s that's what really blew up and made it possible put all these systems online right like you know gofer was a thing FTP was a thing and there was certainly authentication in those uh protocols but um the browsers kind of really where everyone starts to worry about all the passwords they have keep track of and my password's getting stolen and other things like that so um um you know in the 90s and 2000s there were some attempts to kind of ring some of the things that had had been built for those lands and land systems some of the same concepts like single sign on right which was what you talked about at the very uh beginning you know people wanted to to let that happen inside browser applications and it used to be um this is the single sign on more data sharing but it used to be like if I wanted to let you uh sorry if you wrote an application that was say a calendar application or a reminder application and I wanted to let that application have access to my google calendar so that it could I don't actually pull in my calendar and like send me reminders about stuff I need to do like feed the dog or get a gift for my wife or whatever um I would have to just type I would type in my username password into your application and then your application would like sign in as me to google calendar and that is one you know possibly has some breakage right because if I can have changed my password then suddenly my application can't get there but much more importantly it's a huge security risk because now if anyone attacks your application and gets access to your database of all the username and passwords for google calendar uh the attacker has all that valuable information and so single sign on with the browser is a way for you to delegate that access without providing the full credentials does that make sense it does I'm a bit I told you I like I end up bouncing all over with the thoughts and ideas and concepts and the thought process that I'm also like wanting to think about or going with that popped in my head is so is using SSO more of than that's using an API compared to when you sign on inside of a program because that's just giving them access therefore it's done an API
if I remember correctly the students like somebody hacked into like figured out the password so everyone could have more time to use it yeah so 61 is when the password was invented and then 62 is when the first password hack happened so actually um the one of the students again he was a PhD student he was limited four hours a week and so what he did was he found out there was a way to print out the password file and because the password file wasn't accessible because they were protecting it to some extent but they so he couldn't look at it online but he was able to actually print it out and then he shared it around because he wanted to let other people have access to the system and the funny the funny story is that 25 years later he told he apologized to think to his PhD advisor and said hey I'm sorry I was the one who did that and they didn't take his PhD away from him so thankfully um he he was able to do that but yeah so it didn't take very long from 61 when they invented the password to 62 when the password when there was the first kind of password hack that happened and and who rivets that uh that they're impressed and uh that it talked it even took a year and um yeah I mean it was it was brand new back then so um maybe they were just like what is it who knows who knows and that like definitely brings us more towards like how did it change how did authentication change when the internet launched yeah so the internet kind of opened up this whole I mean obviously in the 80s the 70s and 80s and 90s with the PC there were um you know local art networks and things like that but I think the big thing the internet brought is it brought so many systems online and I think that uh sorry online that's the wrong way to put it it brought so many systems um to be more accessible to everybody and you know a land if I still someone's password in a local area network you know I can do some damage but I have to have approximate physical access to that land right I'd be able to go into the office even if you're a multinational company with lands and lands which are kind of across all your offices you still need some kind of access to get there but the internet changed the game because now if I still someone's password and I'm in Australia or Russia or China or wherever I can still get access to their systems and their credentials if that system is on the internet so that brought in the the real need for more security right so that's bringing in more multi-factor um options and obviously I'm talking about kind of from the consumer perspective the military and business worlds were kind of were ahead of the consumer perspective um in terms of securing accounts but you know the difference between someone be able to like steal your corporate password and steal your banking password if your bank banking software is online that gets to be pretty small in terms of overall impact to the individual right both of those are really really bad events um and for I'm I feel like land and wind is both like very common knowledge at the same time I know I forget what they're called and when you're talking about land it's a local area network and for when I think of that it was a lot of like gaming like the gaming cafes where you would all have to like work together to play starcraft or something like that and um but to your point is companies would have to use it to share information as well um or printers I remember that I'm not a printers a huge thing like could the printer work right and oh my god so other resources as well as information printers oh yay thank you Josh for the raid Josh is going to be on the show tomorrow um we are actually I'm just gonna get a shout out to Joshua because he just raided us but y'all I got my book and we're gonna start doing touch script shit tomorrow it's gonna be exciting okay so and Josh I'll try to get you the um you know links and stuff not right before we stream like I did with Dan you know I'll work on that today um but thank you thank you and uh for everybody that just raided in a also joined tomorrow but this is teach gen tech today we are talking about authentication from the very beginning so this one today is going to be much more theory-based and um yay Jay's here too uh Jay said I have a VS code extension that I'm working on you should I don't know if that was uh okay yes you guys are figuring that out good job but we were just talking about how we went from somebody hacking into you um in 61 that they hacked the they printed the password to be able to use internet or computer time uh for their PhD and then how going from land really land and land went to you getting um you know have to be in somebody's bubble to get you know pass their security and then how did that move to the internet itself sure so I think what we're talking about is some of the the standards that have kind of come out since the internet um since you know I mean the internet was really started in the 60s and 70s so I'm gonna be careful like the web is really the big thing right in the 90s that's what really blew up and made it possible put all these systems online right like you know gofer was a thing FTP was a thing and there was certainly authentication in those uh protocols but um the browsers kind of really where everyone starts to worry about all the passwords they have keep track of and my password's getting stolen and other things like that so um um you know in the 90s and 2000s there were some attempts to kind of ring some of the things that had had been built for those lands and land systems some of the same concepts like single sign on right which was what you talked about at the very uh beginning you know people wanted to to let that happen inside browser applications and it used to be um this is the single sign on more data sharing but it used to be like if I wanted to let you uh sorry if you wrote an application that was say a calendar application or a reminder application and I wanted to let that application have access to my google calendar so that it could I don't actually pull in my calendar and like send me reminders about stuff I need to do like feed the dog or get a gift for my wife or whatever um I would have to just type I would type in my username password into your application and then your application would like sign in as me to google calendar and that is one you know possibly has some breakage right because if I can have changed my password then suddenly my application can't get there but much more importantly it's a huge security risk because now if anyone attacks your application and gets access to your database of all the username and passwords for google calendar uh the attacker has all that valuable information and so single sign on with the browser is a way for you to delegate that access without providing the full credentials does that make sense it does I'm a bit I told you I like I end up bouncing all over with the thoughts and ideas and concepts and the thought process that I'm also like wanting to think about or going with that popped in my head is so is using SSO more of than that's using an API compared to when you sign on inside of a program because that's just giving them access therefore it's done an API So I'm not sure I understand your question are you can you can you phrase that or I don't get it. Sorry
So I'm not sure I understand your question are you can you can you phrase that or I don't get it. Sorry Yeah I'll work on refraising it um so in your calendar example when you had to um log into the other calendar to get to your google calendar because you physically went to you gave them your username and password that's not an API because it is using their username you gave them your username and password so they're entering it in uh where would SSO like when you'll use your google account or your google account to authenticate is that an API or is the authentication different
Yeah I'll work on refraising it um so in your calendar example when you had to um log into the other calendar to get to your google calendar because you physically went to you gave them your username and password that's not an API because it is using their username you gave them your username and password so they're entering it in uh where would SSO like when you'll use your google account or your google account to authenticate is that an API or is the authentication different Yeah so uh you know taking a little bit of a step back I remember when I first heard the word API I had no idea what it actually meant um and the common parlans these days is it's really just a way to have the structured communication between two computers
Yeah so uh you know taking a little bit of a step back I remember when I first heard the word API I had no idea what it actually meant um and the common parlans these days is it's really just a way to have the structured communication between two computers Right sometimes it's JSON sometimes it's something else usually it's over HTTP in the web world but um so I would say that it's possible and maybe I'm being overly programmerish and pedantic but it's possible for both of those to be an API um it really depends on the implementation details but um in the larger context the security thing is really what I would worry about uh rather than kind of how the actual access happens although the nice thing about standard SSO is let me say the standard SSO is definitely going to be using an API the other one the kind of the way you're presenting the username and password that's less standardized and it's kind of hard to tell what's happening there
Right sometimes it's JSON sometimes it's something else usually it's over HTTP in the web world but um so I would say that it's possible and maybe I'm being overly programmerish and pedantic but it's possible for both of those to be an API um it really depends on the implementation details but um in the larger context the security thing is really what I would worry about uh rather than kind of how the actual access happens although the nice thing about standard SSO is let me say the standard SSO is definitely going to be using an API the other one the kind of the way you're presenting the username and password that's less standardized and it's kind of hard to tell what's happening there Got it and thank you for that I know that um they're not necessarily anywhere near each other and like the same it's just like to understand it being able to ask these questions I find very very helpful so thank you for rolling with that one um so we've gotten to SSOs now and we have like you touched on earlier um multi-factor authentication and how I think that's like also where I'm stuck because I don't know what all is out there or how you implement them because I I feel like we're more caught up to where we are today but and I don't really know other than the SSO that we were talking about for authentication sure or username and password kind of thing
Got it and thank you for that I know that um they're not necessarily anywhere near each other and like the same it's just like to understand it being able to ask these questions I find very very helpful so thank you for rolling with that one um so we've gotten to SSOs now and we have like you touched on earlier um multi-factor authentication and how I think that's like also where I'm stuck because I don't know what all is out there or how you implement them because I I feel like we're more caught up to where we are today but and I don't really know other than the SSO that we were talking about for authentication sure or username and password kind of thing Yeah so I wrote this thing where I can't just try to categorize all the different kinds of authentication factors right and again share your screen really flexibly. Oh sure sure yeah yeah so uh you know and I'm sure we can paste this link in the I'm not sure how to uh paste it there
Yeah so I wrote this thing where I can't just try to categorize all the different kinds of authentication factors right and again share your screen really flexibly. Oh sure sure yeah yeah so uh you know and I'm sure we can paste this link in the I'm not sure how to uh paste it there It's the perfect I'll put it in there
It's the perfect I'll put it in there And you know this is you know just 5,000 words on authentication factors whatever if you need to go to sleep some some night this is a good it can be a useful thing but um so again kind of stepping back to where we started before authentication factors something you have something you are or something you know and uh username password is a very very common one and the reason why it's very common is it's easy to implement it's easy to understand it is uh unfortunately kind of easy to share which you know has pluses and minuses especially when you talk about the internet world right because something it's easier to share is also easy to steal um and then the way I probably think about like implementing this is you you need to think about kind of what the ramifications are if an account is compromised and I always say like if it's a recipe website it probably doesn't matter that much if it's your bank it matters a lot and so you can start to think about like the layers of security you want to put on top of your authentication process to make sure again that the person who is says their Dan is really Dan and you need to as a developer think about that those layers of security because every layer of security is more work for you and it's more work for your user typically and so you want to make sure you match those up I don't know is that because we're do you want to actually talk about like what an actual implementation of a certain factor would be or yeah I'm curious sure yeah so let's talk about let's not talk about username password let's talk about um sharing uh let's talk about a one-time code right okay and so there's um a couple of ways to get a moment in but a very common way is using SMS now a lot of people if it's a high-value account like a bank account or crypto or whatnot you probably don't want to use them SMS and the reason why is there a couple of attack vectors that are there for it but for consumer-grade application it's better to have two factors than none or two factors than just one so the way that it works is you have this you need to as developer build some kind of messaging mechanism so in this case it you're probably going to use a tool like Twilio or something like that right you're not going to build that from scratch and then you need to build a user random number generator and after the login happens with the first factor you know who the user is so therefore you can kind of look up their sorry take a step back you need to have an account system and that account needs to capture that delivery mechanism so a phone number or an email address and then when the user logs in before you allow them full access access to your system you say I'm going to send you a code you look up their account you you generate a random number you send the code to them again using Twilio or if it's an email system you're going to use like a send grid or something like that then you need to build a form that actually they can enter that code into and then once that's done you have that additional assurance of what who that person is right because they previously associated their phone number with their account and now they've just provided their password and their username which is what we call the first factor and they provide an additional factor and you can do this a couple ways you do it right login and then there's also this concept called step-up authentication and you may know this like if you're about to send someone money sometimes you'll be prompted for a password or a code that sent and that's because the developers have again modeled out the risks and they've determined that you know if you just want to go read your bank account balance that's one level of risk if you want to send money to somebody else or to somebody new then that's a different level of risk and so we're going to authenticate you again because it's a riskier operation
And you know this is you know just 5,000 words on authentication factors whatever if you need to go to sleep some some night this is a good it can be a useful thing but um so again kind of stepping back to where we started before authentication factors something you have something you are or something you know and uh username password is a very very common one and the reason why it's very common is it's easy to implement it's easy to understand it is uh unfortunately kind of easy to share which you know has pluses and minuses especially when you talk about the internet world right because something it's easier to share is also easy to steal um and then the way I probably think about like implementing this is you you need to think about kind of what the ramifications are if an account is compromised and I always say like if it's a recipe website it probably doesn't matter that much if it's your bank it matters a lot and so you can start to think about like the layers of security you want to put on top of your authentication process to make sure again that the person who is says their Dan is really Dan and you need to as a developer think about that those layers of security because every layer of security is more work for you and it's more work for your user typically and so you want to make sure you match those up I don't know is that because we're do you want to actually talk about like what an actual implementation of a certain factor would be or yeah I'm curious sure yeah so let's talk about let's not talk about username password let's talk about um sharing uh let's talk about a one-time code right okay and so there's um a couple of ways to get a moment in but a very common way is using SMS now a lot of people if it's a high-value account like a bank account or crypto or whatnot you probably don't want to use them SMS and the reason why is there a couple of attack vectors that are there for it but for consumer-grade application it's better to have two factors than none or two factors than just one so the way that it works is you have this you need to as developer build some kind of messaging mechanism so in this case it you're probably going to use a tool like Twilio or something like that right you're not going to build that from scratch and then you need to build a user random number generator and after the login happens with the first factor you know who the user is so therefore you can kind of look up their sorry take a step back you need to have an account system and that account needs to capture that delivery mechanism so a phone number or an email address and then when the user logs in before you allow them full access access to your system you say I'm going to send you a code you look up their account you you generate a random number you send the code to them again using Twilio or if it's an email system you're going to use like a send grid or something like that then you need to build a form that actually they can enter that code into and then once that's done you have that additional assurance of what who that person is right because they previously associated their phone number with their account and now they've just provided their password and their username which is what we call the first factor and they provide an additional factor and you can do this a couple ways you do it right login and then there's also this concept called step-up authentication and you may know this like if you're about to send someone money sometimes you'll be prompted for a password or a code that sent and that's because the developers have again modeled out the risks and they've determined that you know if you just want to go read your bank account balance that's one level of risk if you want to send money to somebody else or to somebody new then that's a different level of risk and so we're going to authenticate you again because it's a riskier operation How do you choose as oh gosh so many questions coming up at the same time um I'm going to ask both and then you can go with whatever direction of like next time that you're on the show I guess this is the best way to can we go through like how we would build something to authenticate like what that would look like if somebody's wanting to get into authentication and security like that's one question and then oh gosh like how do we like know where to start as like a big picture like if somebody has an idea how do you know all the different layers that go into it
How do you choose as oh gosh so many questions coming up at the same time um I'm going to ask both and then you can go with whatever direction of like next time that you're on the show I guess this is the best way to can we go through like how we would build something to authenticate like what that would look like if somebody's wanting to get into authentication and security like that's one question and then oh gosh like how do we like know where to start as like a big picture like if somebody has an idea how do you know all the different layers that go into it Sure sure let me take your first question which is you know honestly I probably wouldn't want to show someone how to build authentication like from the ground up and the reason for that is that there are a ton of great products out there um do you know if there's one but there are open source libraries as well like for Python for Ruby for Java for any language that you can think of there are libraries out there and yeah I think it'd be a disservice to your watchers to your listeners to like tell them actually go out and build your own right because I've built my own and it's so easy to make so many mistakes so what might be more interesting thing to do would be like take an open source library and integrate it with something like fusionoth or even just look at the library right and say oh these are some of the choices they've made both those would feel more responsible to me so um so okay then I guess just to ask these questions too because like if we're looking at something like fusionoth like okay now I got to think about this uh I'm building an app and I want to use like create a username and password database creation and I going to build that and then bring in somebody like fusionoth or do does fusionoth actually do that uh username and password layer read as well it's your choice right so yeah fusionoth does do username and password as well as kind of other SSOs and other functionality um I think it really depends on what you see the scope of your application being if you if you're if you're excuse me if your application is going to be one one thing right like you're building like a portfolio app or something like that excuse me uh I would not start with fusionoth I would start with a library and you know I know Django has an authentication library if you're building on Django rails has devise spring has spring security and because it's a toy application it's fine to intermingle your username password data with your other data for your application right your recipes your to-do's or whatever they are where you want to bring in something like fusionoth and again this is not fusionoth pitch pitch everyone there are other options out there and I'm happy to talk about them if you have questions all zero is one key cloak is another um but if you have a centralized authentication server it's very similar to us having a centralized database server right like there's no reason that you couldn't for every application write your own data to and from disk right you could absolutely do that and people did that in the 60s but then they realized that having a central life store of data let them um control access better it let them see interrelationships between data better and it let someone else build software that was specifically for managing data authentication is the same way right if you have two applications or three applications now suddenly you want single sign on maybe you want to be able to see correlations between how people use different applications and it's a lot easier to do if you have a centralized identity store then if you have it kind of application a manage their users application b manage their users application c manages their users does that help it does I feel like it's one of those things that um I might need a noodle on for a bit because of like it totally does make sense but I'm like what is the part that doesn't make sense sorry sorry y'all we got a hello in youtube because we're streaming there too and I'm like oh it probably goes to hi uh so what a pack how's it going um and uh rivet also um dot net has uh identity which uh they've always liked working with um I think that's but that's kind of currently where I'm stuck of like okay cool like all these libraries have something that we can use for authentication like starting there and then how you build upon it and seeing like different use cases and and again y'all this isn't necessarily like fusion off specific it's just fusion off because Dan knows fusion off um we should have other guests on from other companies find someone and we'll talk to them too um and so I think that's really where I'm stuck going from theory to practical in a lot of times like I'm like cool theory I can stick with that I got it but this one I'm really struggling with well let me let me try it very different way so so if you're starting out and you're just building one application first thing you do is don't roll your own up using an password go look for dot net core identity or again some of the other options that I've mentioned because what that will do is that will provide a battle tested way for you to implement authentication your application and yes it will be more things to learn right because you're like oh man I'm just trying to write this Python application why do I have to learn Django authentication but by doing that you're going to follow best practices and your users are going to be more secure now then the issue becomes cool so I have my data for my application and I have my user data in the same database okay it's easy to deploy it's easy to upgrade yada yada but then what happens if you're like okay my application actually is taking off and I want to add a forum and I want to help desk and I want to build a second application you have two choices there right the first choice is each of those things has its own user data store right and people if they want to sign up for application the second application they can do that if people want if if someone needs file support to get they need to sign up with the support ticket system that can work but you quickly get to the point where you have a lot of applications and somebody is going to get peeved I was going to use different word values were peeved at having to sign up especially if they're paying you money they're like why do I have to sign up for the application and also sign up for the support ticket system or more critically like what if you have an employee who's on the support ticket system and as an admin and they leave and you remove them from the support ticket system but you forget to move them from the remove them from the application now you've introduced a security risk so that is where it makes sense to start to consolidate these and again the nice thing is that in 2012 approximately that we've we've kind of collapsed authentication across different systems and managing these silos is is at the at least in terms of authenticating with a single user identity store is a is a solved problem you want to use a technology called OIDC which grew out of OAuth but OIDC was standardized in 2014 and it's just didn't make it easy for all those different systems to talk to one central data store and then if Dan leaves you you've moved in from the central data store you lock his account now he can't log into any of those systems that use the identity store so if if your users only can listen you only only have one takeaway from this it's don't roll your own use a library and then the second thing would be once you get to a certain size you're going to start to want to look at centralized UIDA in your store does that help I don't know why I feel like I I ran a little bit there it helps it helps and also given the example and then again I'm I'm great or horrible no matters which way you look at it asking and comparing it to what I've learned just so far from other situations of like working out a startup they may not have like SSO setup like the same as a corporate like a big corporate place so they're more than likely like a startup that may not allow you logging into everything probably isn't using something like OIDC they're still doing it as multiple small logins therefore it's a lot easier for somebody to keep their content because they didn't put it into the OISS system you mean it's not easy for someone else to stop sorry I said that backwards keep their access like after they leave or maybe if they switch departments yes although I will say for startups like a lot of startups I know of delegate to something like Google Google WorkSpaces or Office 365 and that can help a lot right because I'm I'm pretty sure when you leave a startup they're going to revoke your Google your Gmail access that's that kind of top on the list and so if all you have all these other apps hanging off of it that can be a good start for an essentialized identity store it's got its limits and it's really employee focused rather than customer focused but it can work you're not going to give every customer who files a support to get a Gmail account and that's your right but certainly for the employee space that's a good place to start and then um again this is for y'all that are watching today this is a theory based one so we're not doing any coding but it's also like the conceptualizing of it and then we will be like working on another project in the future so please ask questions and go through it um that does bring me to like the startup idea of um because startups are startups they're starting um they're not as well established how because I think the scalability of you know it's like one or two people that started then they add another person then you know you have 10 people 50 people 100 people and they may not have some type of SSO or OIDC like how how does the company implement that and is it difficult slash expensive to do so yeah so it can depends on um I think the first thing you need to do is need to have that pain or the decision to make that choice right and so sometimes that's driven by a large external customer who says hey you know our security people need to are asking us to make sure that you have a certain certification or you can attest to certain things right that like when an employee leaves your company they're not going to continue to have access to our data or something like that or maybe there's an incentive some kind um the other thing to think about is that it does offer some business enablement it's not all pain because if you have a central identity store um and this is maybe more for the customer side of things than the employee side of things but marketing loves that sales loves that um accounting loves that because there's kind of one place where all your customers live and you can go look in and do an audit easily and kind of see um who's using what uh when was the last time company a logged into our system uh anyway so so that's kind of the the motivational part right there's the uh the good and the bad right the pain or the the business enablement um and then I I guess how you start it really depends on where you are we've definitely had customers who come to us who have totally custom systems right they wrote their own and so from there it's really a question of identifying where the users whereas the passwords what other data do you want to pull over to the centralized identity store um if on the other hand you've used a library and there's some kind of internal data data store and it's not custom then what I'd probably look at is seeing if there's a similar um basically doing kind of a uh breaking it apart and so if if before you have your to-do's or your recipes and your user data in one database I'd probably try to break them apart into two and have the internal have the application use OIDC to to interact with that data store and then you can start to hang other peep other applications off of that data store and basically you run your identity server at the time at that time and the question then becomes well do you want to be responsive for that PII I do want to respond for maintain that data store that interfaces without being able to using that that standard OIDC or do you want to swap it out for a system again Fusion Auth Auth0 key cloak etc that we'll we'll still talk to it but by separating out those steps I think you make it a little bit easier to swap in rather than trying to change two things at once does that make sense some of it we're gonna go with some of it so I think it's really just stop me so I'm obviously passionate about this like if I say something it doesn't make sense to be like hey Dan like what on earth did you mean by whatever because uh this is the great part of your show right like yeah yeah I don't look at the world through new eyes with authentic at least respect to authentication you know kicking through leaves in autumn yes but like um you know so I need your assistance to know when I say something that is a concept that maybe doesn't make sense or I'm talking too fast or or whatnot I think it's definitely something that that is also someone hard to do as a newbie because it's like you don't know what you don't know yet so like what you're saying may makes enough sense that it's that's why I really love doing these and then having people come back on or multiple people from one industry because it's like learning what different pieces of it may connect them together more but then also may bring up different questions to put two and two together um I would say and I'm the entire time you're telling me about this I'm coming up with like real life scenarios that I'm like I don't know if this goes into it so I have another scenario to like run by you so can someone have and I think I know the answer to this like something open source and because of like a lot of startups will have like you know their own content and then they have open source it's where they have to like separate everything because they can't have it all in the same area would they only have to separate databases or would they have to separate a ton of like have private repos for like the product and things like that and then public repos for all of the open source stuff right yeah yeah so that's that's common pattern I see that people you know separate those out but at the same time you probably want one data source and you want to know like is this person logging into the public repo or the private repo and again you're not gonna want those repos to kind of have their own identity stores and GitHub is the obvious like choice for source code because you can they've done a good job of like maintaining that level of permission structure but yeah does that that does that does um and I like it at home means like this uh really helps plus one a bunch to absorb but makes sense yes and you feel the way say way how we and um using a library within a framework uh next off with next JS for example what are your thoughts it's great yeah um I say I actually that came up just the other day because there's actually a fusion arts integration for next off uh out there but they have integrations for lots of other identity providers and if you're building on next JS please use next off because one it's gonna save you a bunch of time because you want to kind of build your own username and password you will have to learn the library and that's always the trade-off when you're in software development right like you could write your own and know it intimately but then guess who's responsible for maintaining it you are um or you learn the library once and then you can use them multiple projects so yes short answer is next off would be a great choice if you're using next JS okay and that goes back to your how you mentioned earlier that like um like Python and um like Ruby or Django they all have their own security libraries or authentication libraries or more than one right like I know JavaScript has like passport and um I know even some of the like and this is a good point what homie brought up is it's not just like the languages sometimes it's the framework within the languages right I I don't know if uh you could use Django auth I doubt you could use Django auth with a flask application for example um so it's not just learning the languages libraries again in fact as far as I know there's no language that has like built into the language authentication stuff just because it's a high enough level it's usually built into a framework okay um I am sending this I y'all I just googled it so yes this is the Google because I think this is also something that I would have gotten really stuck on would be like what do you look up to started on these and knowing that it's like the language authentication library that is something that I think would be very very helpful I liked that JavaScript because a lot of what I do is JavaScript um but this makes a lot of sense on how you would get started so and then proceed through all of it um I feel like I don't know what to ask you next because I'm like this is there's a lot there sure um is there something that you think newbies should be asking about or I haven't asked about that is a good place to start or yeah I mean so I guess if you're a newbie on a team I think asking about how they made their authentication choice is an interesting thing right like what library do they pick what issues do they have with it I think that knowing some of the concepts we've talked about around like what's a fact about authentication what's multi-factor you know what what is an library versus like an author identity server identity data store are things that are useful um I guess the other thing I would say is um I you know I think there's always this desire on my part to kind of peel the layers back and like dig into like what actually happens when you do a password when you enter a username password like what are the steps just like that old interview question of you know walk me through every step of an HTTP request when I request Google
Sure sure let me take your first question which is you know honestly I probably wouldn't want to show someone how to build authentication like from the ground up and the reason for that is that there are a ton of great products out there um do you know if there's one but there are open source libraries as well like for Python for Ruby for Java for any language that you can think of there are libraries out there and yeah I think it'd be a disservice to your watchers to your listeners to like tell them actually go out and build your own right because I've built my own and it's so easy to make so many mistakes so what might be more interesting thing to do would be like take an open source library and integrate it with something like fusionoth or even just look at the library right and say oh these are some of the choices they've made both those would feel more responsible to me so um so okay then I guess just to ask these questions too because like if we're looking at something like fusionoth like okay now I got to think about this uh I'm building an app and I want to use like create a username and password database creation and I going to build that and then bring in somebody like fusionoth or do does fusionoth actually do that uh username and password layer read as well it's your choice right so yeah fusionoth does do username and password as well as kind of other SSOs and other functionality um I think it really depends on what you see the scope of your application being if you if you're if you're excuse me if your application is going to be one one thing right like you're building like a portfolio app or something like that excuse me uh I would not start with fusionoth I would start with a library and you know I know Django has an authentication library if you're building on Django rails has devise spring has spring security and because it's a toy application it's fine to intermingle your username password data with your other data for your application right your recipes your to-do's or whatever they are where you want to bring in something like fusionoth and again this is not fusionoth pitch pitch everyone there are other options out there and I'm happy to talk about them if you have questions all zero is one key cloak is another um but if you have a centralized authentication server it's very similar to us having a centralized database server right like there's no reason that you couldn't for every application write your own data to and from disk right you could absolutely do that and people did that in the 60s but then they realized that having a central life store of data let them um control access better it let them see interrelationships between data better and it let someone else build software that was specifically for managing data authentication is the same way right if you have two applications or three applications now suddenly you want single sign on maybe you want to be able to see correlations between how people use different applications and it's a lot easier to do if you have a centralized identity store then if you have it kind of application a manage their users application b manage their users application c manages their users does that help it does I feel like it's one of those things that um I might need a noodle on for a bit because of like it totally does make sense but I'm like what is the part that doesn't make sense sorry sorry y'all we got a hello in youtube because we're streaming there too and I'm like oh it probably goes to hi uh so what a pack how's it going um and uh rivet also um dot net has uh identity which uh they've always liked working with um I think that's but that's kind of currently where I'm stuck of like okay cool like all these libraries have something that we can use for authentication like starting there and then how you build upon it and seeing like different use cases and and again y'all this isn't necessarily like fusion off specific it's just fusion off because Dan knows fusion off um we should have other guests on from other companies find someone and we'll talk to them too um and so I think that's really where I'm stuck going from theory to practical in a lot of times like I'm like cool theory I can stick with that I got it but this one I'm really struggling with well let me let me try it very different way so so if you're starting out and you're just building one application first thing you do is don't roll your own up using an password go look for dot net core identity or again some of the other options that I've mentioned because what that will do is that will provide a battle tested way for you to implement authentication your application and yes it will be more things to learn right because you're like oh man I'm just trying to write this Python application why do I have to learn Django authentication but by doing that you're going to follow best practices and your users are going to be more secure now then the issue becomes cool so I have my data for my application and I have my user data in the same database okay it's easy to deploy it's easy to upgrade yada yada but then what happens if you're like okay my application actually is taking off and I want to add a forum and I want to help desk and I want to build a second application you have two choices there right the first choice is each of those things has its own user data store right and people if they want to sign up for application the second application they can do that if people want if if someone needs file support to get they need to sign up with the support ticket system that can work but you quickly get to the point where you have a lot of applications and somebody is going to get peeved I was going to use different word values were peeved at having to sign up especially if they're paying you money they're like why do I have to sign up for the application and also sign up for the support ticket system or more critically like what if you have an employee who's on the support ticket system and as an admin and they leave and you remove them from the support ticket system but you forget to move them from the remove them from the application now you've introduced a security risk so that is where it makes sense to start to consolidate these and again the nice thing is that in 2012 approximately that we've we've kind of collapsed authentication across different systems and managing these silos is is at the at least in terms of authenticating with a single user identity store is a is a solved problem you want to use a technology called OIDC which grew out of OAuth but OIDC was standardized in 2014 and it's just didn't make it easy for all those different systems to talk to one central data store and then if Dan leaves you you've moved in from the central data store you lock his account now he can't log into any of those systems that use the identity store so if if your users only can listen you only only have one takeaway from this it's don't roll your own use a library and then the second thing would be once you get to a certain size you're going to start to want to look at centralized UIDA in your store does that help I don't know why I feel like I I ran a little bit there it helps it helps and also given the example and then again I'm I'm great or horrible no matters which way you look at it asking and comparing it to what I've learned just so far from other situations of like working out a startup they may not have like SSO setup like the same as a corporate like a big corporate place so they're more than likely like a startup that may not allow you logging into everything probably isn't using something like OIDC they're still doing it as multiple small logins therefore it's a lot easier for somebody to keep their content because they didn't put it into the OISS system you mean it's not easy for someone else to stop sorry I said that backwards keep their access like after they leave or maybe if they switch departments yes although I will say for startups like a lot of startups I know of delegate to something like Google Google WorkSpaces or Office 365 and that can help a lot right because I'm I'm pretty sure when you leave a startup they're going to revoke your Google your Gmail access that's that kind of top on the list and so if all you have all these other apps hanging off of it that can be a good start for an essentialized identity store it's got its limits and it's really employee focused rather than customer focused but it can work you're not going to give every customer who files a support to get a Gmail account and that's your right but certainly for the employee space that's a good place to start and then um again this is for y'all that are watching today this is a theory based one so we're not doing any coding but it's also like the conceptualizing of it and then we will be like working on another project in the future so please ask questions and go through it um that does bring me to like the startup idea of um because startups are startups they're starting um they're not as well established how because I think the scalability of you know it's like one or two people that started then they add another person then you know you have 10 people 50 people 100 people and they may not have some type of SSO or OIDC like how how does the company implement that and is it difficult slash expensive to do so yeah so it can depends on um I think the first thing you need to do is need to have that pain or the decision to make that choice right and so sometimes that's driven by a large external customer who says hey you know our security people need to are asking us to make sure that you have a certain certification or you can attest to certain things right that like when an employee leaves your company they're not going to continue to have access to our data or something like that or maybe there's an incentive some kind um the other thing to think about is that it does offer some business enablement it's not all pain because if you have a central identity store um and this is maybe more for the customer side of things than the employee side of things but marketing loves that sales loves that um accounting loves that because there's kind of one place where all your customers live and you can go look in and do an audit easily and kind of see um who's using what uh when was the last time company a logged into our system uh anyway so so that's kind of the the motivational part right there's the uh the good and the bad right the pain or the the business enablement um and then I I guess how you start it really depends on where you are we've definitely had customers who come to us who have totally custom systems right they wrote their own and so from there it's really a question of identifying where the users whereas the passwords what other data do you want to pull over to the centralized identity store um if on the other hand you've used a library and there's some kind of internal data data store and it's not custom then what I'd probably look at is seeing if there's a similar um basically doing kind of a uh breaking it apart and so if if before you have your to-do's or your recipes and your user data in one database I'd probably try to break them apart into two and have the internal have the application use OIDC to to interact with that data store and then you can start to hang other peep other applications off of that data store and basically you run your identity server at the time at that time and the question then becomes well do you want to be responsive for that PII I do want to respond for maintain that data store that interfaces without being able to using that that standard OIDC or do you want to swap it out for a system again Fusion Auth Auth0 key cloak etc that we'll we'll still talk to it but by separating out those steps I think you make it a little bit easier to swap in rather than trying to change two things at once does that make sense some of it we're gonna go with some of it so I think it's really just stop me so I'm obviously passionate about this like if I say something it doesn't make sense to be like hey Dan like what on earth did you mean by whatever because uh this is the great part of your show right like yeah yeah I don't look at the world through new eyes with authentic at least respect to authentication you know kicking through leaves in autumn yes but like um you know so I need your assistance to know when I say something that is a concept that maybe doesn't make sense or I'm talking too fast or or whatnot I think it's definitely something that that is also someone hard to do as a newbie because it's like you don't know what you don't know yet so like what you're saying may makes enough sense that it's that's why I really love doing these and then having people come back on or multiple people from one industry because it's like learning what different pieces of it may connect them together more but then also may bring up different questions to put two and two together um I would say and I'm the entire time you're telling me about this I'm coming up with like real life scenarios that I'm like I don't know if this goes into it so I have another scenario to like run by you so can someone have and I think I know the answer to this like something open source and because of like a lot of startups will have like you know their own content and then they have open source it's where they have to like separate everything because they can't have it all in the same area would they only have to separate databases or would they have to separate a ton of like have private repos for like the product and things like that and then public repos for all of the open source stuff right yeah yeah so that's that's common pattern I see that people you know separate those out but at the same time you probably want one data source and you want to know like is this person logging into the public repo or the private repo and again you're not gonna want those repos to kind of have their own identity stores and GitHub is the obvious like choice for source code because you can they've done a good job of like maintaining that level of permission structure but yeah does that that does that does um and I like it at home means like this uh really helps plus one a bunch to absorb but makes sense yes and you feel the way say way how we and um using a library within a framework uh next off with next JS for example what are your thoughts it's great yeah um I say I actually that came up just the other day because there's actually a fusion arts integration for next off uh out there but they have integrations for lots of other identity providers and if you're building on next JS please use next off because one it's gonna save you a bunch of time because you want to kind of build your own username and password you will have to learn the library and that's always the trade-off when you're in software development right like you could write your own and know it intimately but then guess who's responsible for maintaining it you are um or you learn the library once and then you can use them multiple projects so yes short answer is next off would be a great choice if you're using next JS okay and that goes back to your how you mentioned earlier that like um like Python and um like Ruby or Django they all have their own security libraries or authentication libraries or more than one right like I know JavaScript has like passport and um I know even some of the like and this is a good point what homie brought up is it's not just like the languages sometimes it's the framework within the languages right I I don't know if uh you could use Django auth I doubt you could use Django auth with a flask application for example um so it's not just learning the languages libraries again in fact as far as I know there's no language that has like built into the language authentication stuff just because it's a high enough level it's usually built into a framework okay um I am sending this I y'all I just googled it so yes this is the Google because I think this is also something that I would have gotten really stuck on would be like what do you look up to started on these and knowing that it's like the language authentication library that is something that I think would be very very helpful I liked that JavaScript because a lot of what I do is JavaScript um but this makes a lot of sense on how you would get started so and then proceed through all of it um I feel like I don't know what to ask you next because I'm like this is there's a lot there sure um is there something that you think newbies should be asking about or I haven't asked about that is a good place to start or yeah I mean so I guess if you're a newbie on a team I think asking about how they made their authentication choice is an interesting thing right like what library do they pick what issues do they have with it I think that knowing some of the concepts we've talked about around like what's a fact about authentication what's multi-factor you know what what is an library versus like an author identity server identity data store are things that are useful um I guess the other thing I would say is um I you know I think there's always this desire on my part to kind of peel the layers back and like dig into like what actually happens when you do a password when you enter a username password like what are the steps just like that old interview question of you know walk me through every step of an HTTP request when I request Googlecom I think that can be helpful if you're wanting to nerd out but the bigger thing I would ask that users all think about is like spend the time to read about the library and how to use it rather than worrying about what it's doing on the covers because if it's like I have a known respected open source library or a product like my employer we think about all those things under the covers and so the reason for that is so you don't have to the same way you don't have to think about what happens when you request Google for a browser so does that I don't know whether that's helpful yeah yeah that does and it makes me think of um so we uh just started I say we the audience and I we just started using uh Enki which is like a um like flashcards to like learn this type of stuff and like the questions you were asking I was like we can put that on flashcards yeah and then oh go ahead oh no no please what I was just going to say homie had a question of if they understand correctly that author is trying to solve the off problem as off solution that works in most situations yeah so off zero is one of the companies that are doing this and I have a lot respect for them they started oh gosh I want to say 2011 2012 and have done a great job of especially for developers especially for the customer market really being the forefront of that we like to think we're a great competitor to off zero and we're less expensive in most cases but um yeah off zero is one of them um I think if you're on AWS a lot cognito is another one um Microsoft has their own option I think a lot of companies are realizing this is a real issue and they that um by offering this up developers again going back to the very beginning it's all about taking something that's under friendship that's risky off of developers plates and letting them focus on the features that people actually really want and so uh again author is doing a good job um I think fusion author has its own strengths I'm giggling because y'all I even said off though because like I get that it's a zero but still looks like off though well so here's the funny thing and this is like totally tangential to authentication like this and yeah I would tell all newbies like when you live in a world like you you you get immeasured and it the things that seem important in that world seem really important to you I remember when Os0 got bought by octah it was titanic for our company right it was it was a huge issue and uh not issue that's wrong word huge opportunity huge change and we thought it was huge and then I listed some podcasts and there was like a passing mention of it right because it wasn't that big and I think authentication should be that way for most developers like they shouldn't really have to care that much about it and the same is true of so many other things but I think that just it was humbling to me to realize oh this thing is that the center of my world right now and yet for most devs nine-name percent of devs they don't care and nor nor nor should they fair enough fair enough and good call out Jay uh some people call it that um folks uh may not call me out on it but I don't know I probably put some funny names like uh I want to say I always want to say uh bite and not beat and uh I'm like no no that's not it either or um I always say c i dc instead of c i c d um c i dc sounds like an awesome rock band or something but I and I think it is because of ac dc so I make them up yes please please start calling them that I mean it'll be great they'll be like shit gents like can't say anything it'll be fine it'll be fine oh yay uh homie it settled off ujnaath uh auto it's fine but Dan came to teach us and obviously is really passionate about yes and um oh uh named yes yes I like it I like it um and yes actually y'all that that's funny enough just timing on all of this um I did have a conversation with atho yeah I'm just gonna call them that now um and I was like yeah like I fusion off this coming on it's great to always get like different experiences from different companies different points of view like even people within the same company because hearing it multiple times from different people different learning styles like it's just the way we learn and they were like yeah no bro like if you we want to you you got to like prepare questions so maybe someday we'll do that if y'all want to do that like let's do it just help me come up with questions I'm not doing that by myself I don't know what questions to ask so instead we might just have more Dan instead of more cowbell we'll have more Dan I like it um and thank you all for coming coming in today you're in a store now thank you for coming in to the store and oh yeah yeah thank you so much for having me it was really fun to talk about this um and I appreciate the questions from your audience that was really great and I do look forward to coming back and maybe walking through some code doing some implementation I am excited about that I think that's going to be a lot of fun um and then y'all just as a heads up you are totally gonna get rated over to learn with Jason just because I think it's so nice when people raid into other channels even if you know no matter how many people it is it's always like really nice to do so I'm right in y'all now and we'll have Dan on again who knows when but we will keep you posted bye everyone
com I think that can be helpful if you're wanting to nerd out but the bigger thing I would ask that users all think about is like spend the time to read about the library and how to use it rather than worrying about what it's doing on the covers because if it's like I have a known respected open source library or a product like my employer we think about all those things under the covers and so the reason for that is so you don't have to the same way you don't have to think about what happens when you request Google for a browser so does that I don't know whether that's helpful yeah yeah that does and it makes me think of um so we uh just started I say we the audience and I we just started using uh Enki which is like a um like flashcards to like learn this type of stuff and like the questions you were asking I was like we can put that on flashcards yeah and then oh go ahead oh no no please what I was just going to say homie had a question of if they understand correctly that author is trying to solve the off problem as off solution that works in most situations yeah so off zero is one of the companies that are doing this and I have a lot respect for them they started oh gosh I want to say 2011 2012 and have done a great job of especially for developers especially for the customer market really being the forefront of that we like to think we're a great competitor to off zero and we're less expensive in most cases but um yeah off zero is one of them um I think if you're on AWS a lot cognito is another one um Microsoft has their own option I think a lot of companies are realizing this is a real issue and they that um by offering this up developers again going back to the very beginning it's all about taking something that's under friendship that's risky off of developers plates and letting them focus on the features that people actually really want and so uh again author is doing a good job um I think fusion author has its own strengths I'm giggling because y'all I even said off though because like I get that it's a zero but still looks like off though well so here's the funny thing and this is like totally tangential to authentication like this and yeah I would tell all newbies like when you live in a world like you you you get immeasured and it the things that seem important in that world seem really important to you I remember when Os0 got bought by octah it was titanic for our company right it was it was a huge issue and uh not issue that's wrong word huge opportunity huge change and we thought it was huge and then I listed some podcasts and there was like a passing mention of it right because it wasn't that big and I think authentication should be that way for most developers like they shouldn't really have to care that much about it and the same is true of so many other things but I think that just it was humbling to me to realize oh this thing is that the center of my world right now and yet for most devs nine-name percent of devs they don't care and nor nor nor should they fair enough fair enough and good call out Jay uh some people call it that um folks uh may not call me out on it but I don't know I probably put some funny names like uh I want to say I always want to say uh bite and not beat and uh I'm like no no that's not it either or um I always say c i dc instead of c i c d um c i dc sounds like an awesome rock band or something but I and I think it is because of ac dc so I make them up yes please please start calling them that I mean it'll be great they'll be like shit gents like can't say anything it'll be fine it'll be fine oh yay uh homie it settled off ujnaath uh auto it's fine but Dan came to teach us and obviously is really passionate about yes and um oh uh named yes yes I like it I like it um and yes actually y'all that that's funny enough just timing on all of this um I did have a conversation with atho yeah I'm just gonna call them that now um and I was like yeah like I fusion off this coming on it's great to always get like different experiences from different companies different points of view like even people within the same company because hearing it multiple times from different people different learning styles like it's just the way we learn and they were like yeah no bro like if you we want to you you got to like prepare questions so maybe someday we'll do that if y'all want to do that like let's do it just help me come up with questions I'm not doing that by myself I don't know what questions to ask so instead we might just have more Dan instead of more cowbell we'll have more Dan I like it um and thank you all for coming coming in today you're in a store now thank you for coming in to the store and oh yeah yeah thank you so much for having me it was really fun to talk about this um and I appreciate the questions from your audience that was really great and I do look forward to coming back and maybe walking through some code doing some implementation I am excited about that I think that's going to be a lot of fun um and then y'all just as a heads up you are totally gonna get rated over to learn with Jason just because I think it's so nice when people raid into other channels even if you know no matter how many people it is it's always like really nice to do so I'm right in y'all now and we'll have Dan on again who knows when but we will keep you posted bye everyone