one. Oh, see it doesn't give me the countdown and yes everyone hello this is Teach Den Tech and we have the car again and yes he like had the perfect timing for when we were at the countdown to go live and like stringy art doesn't even show the countdown What? I actually didn't even have a countdown I just did it. Yeah, just have a magical time. Exactly. That's just what it is. And for those of you who didn't catch earlier this week this is part two of integrate payments into your React app with Square
What? I actually didn't even have a countdown I just did it. Yeah, just have a magical time. Exactly. That's just what it is. And for those of you who didn't catch earlier this week this is part two of integrate payments into your React app with Square So we are doing part two today and in case anybody didn't catch part one it will be linked in the comments and also Bacari please introduce yourself for anybody that didn't see you on Wednesday. All right well I am Mr. Bacari Holmes
So we are doing part two today and in case anybody didn't catch part one it will be linked in the comments and also Bacari please introduce yourself for anybody that didn't see you on Wednesday. All right well I am Mr. Bacari Holmes Bacari Holmes. I am a developer advocate and content creator also software engineer, physicist, teacher, musician, all sorts of things
Bacari Holmes. I am a developer advocate and content creator also software engineer, physicist, teacher, musician, all sorts of things So I you know recently connected with Jen I believe it was through Twitter and it has been really awesome and we actually talked about doing this you know the session. It was originally supposed to be one session and it ended up getting stretched to two sessions because you know we'd be talking
So I you know recently connected with Jen I believe it was through Twitter and it has been really awesome and we actually talked about doing this you know the session. It was originally supposed to be one session and it ended up getting stretched to two sessions because you know we'd be talking So yeah I'm just happy to be back and to close this out and yeah. You know your comments
So yeah I'm just happy to be back and to close this out and yeah. You know your comments I would I just want to shout out to just all the guests that have been on here and because they all end up being like a two-part process of you know like they're doing one thing and then they come back to either finish it out or do something else and it's just really cool that people can get used to some of the guests on the show and learn who they could reach out about a specific topic
I would I just want to shout out to just all the guests that have been on here and because they all end up being like a two-part process of you know like they're doing one thing and then they come back to either finish it out or do something else and it's just really cool that people can get used to some of the guests on the show and learn who they could reach out about a specific topic So like for example if somebody had questions on integrating payments they are like yeah I can hit up a car
So like for example if somebody had questions on integrating payments they are like yeah I can hit up a car He probably knows what's up or if they want to look into I built like Viet and Versailles they could reach out to Anthony and um Yadda helped me with the bare basics of JavaScript back in the day and it's crazy because I'm like oh yeah actually I've got to get that so people should hit them up for so much more and I should have them back on the show since it's not a complete newbie thing anymore
He probably knows what's up or if they want to look into I built like Viet and Versailles they could reach out to Anthony and um Yadda helped me with the bare basics of JavaScript back in the day and it's crazy because I'm like oh yeah actually I've got to get that so people should hit them up for so much more and I should have them back on the show since it's not a complete newbie thing anymore I mean we're like getting there one percent of the time with all the shows but with being just slightly over a month old we have had I think this is our 12th airy live or 12th live which is exciting and we have a ton for like a ton for August so this is really cool even though everybody's on vacation or holiday in August this is exciting so all right I have to get back into what we were working on
I mean we're like getting there one percent of the time with all the shows but with being just slightly over a month old we have had I think this is our 12th airy live or 12th live which is exciting and we have a ton for like a ton for August so this is really cool even though everybody's on vacation or holiday in August this is exciting so all right I have to get back into what we were working on I have my index which we um where we left off the other day that kind of took us a bit was troubleshooting and error we were getting from starting it up and it was because I put payments or I put payment instead of payments and it took three of us troubleshooting to realize that that is what I did which didn't make me feel a lot better about being a newbie because it's like you'll have a ton of knowledge and experience and this is something that all coders run into it's not just a newbie thing it is an everyone thing right so I really appreciated that and we also decided that Anthony is going to come on the show and talk to us about documentation which is going to be dope too
I have my index which we um where we left off the other day that kind of took us a bit was troubleshooting and error we were getting from starting it up and it was because I put payments or I put payment instead of payments and it took three of us troubleshooting to realize that that is what I did which didn't make me feel a lot better about being a newbie because it's like you'll have a ton of knowledge and experience and this is something that all coders run into it's not just a newbie thing it is an everyone thing right so I really appreciated that and we also decided that Anthony is going to come on the show and talk to us about documentation which is going to be dope too Yeah I think the lesson there is that troubleshooting is not a magical process you don't waive a one and then figure out the problem it it is a trial and error many times or it is if your code is modular and it's divided into pieces testing each piece out to try to figure out where the problem is so or looking at an error that's been logged to or shown to you and then looking at the documentation and then from there going back to your code and then trying to have a better idea of what to look for so it is not magical
Yeah I think the lesson there is that troubleshooting is not a magical process you don't waive a one and then figure out the problem it it is a trial and error many times or it is if your code is modular and it's divided into pieces testing each piece out to try to figure out where the problem is so or looking at an error that's been logged to or shown to you and then looking at the documentation and then from there going back to your code and then trying to have a better idea of what to look for so it is not magical I wish it was. I do wish it was because that would make things so much easier but I am looking forward to now now the one part I don't remember from the other day of what were we doing to run and find the error it was like I thought it was like npn something but I don't quite remember
I wish it was. I do wish it was because that would make things so much easier but I am looking forward to now now the one part I don't remember from the other day of what were we doing to run and find the error it was like I thought it was like npn something but I don't quite remember So this is in the the next documentation or most applications have like an npn run or npn run something for next to run your local to run your application on your local computer you do npn run dev and that's development that's the development version of your application and this typically is you know to as you're developing as you're building features as you're building out your code you can run the development version it'll run on your local host typically
So this is in the the next documentation or most applications have like an npn run or npn run something for next to run your local to run your application on your local computer you do npn run dev and that's development that's the development version of your application and this typically is you know to as you're developing as you're building features as you're building out your code you can run the development version it'll run on your local host typically That is really cool and as something that I learned from working on doing this myself with VEET is these formats do have updates and can like change things around and something that I was running into there is they created a very random local host number not the usual like 3000 so definitely read your you know what it is saying because it doesn't always it's not always the same for everything right if I take that local host 3000 and put it into a browser we got it it's the normal next JS from the pages forward slash index JS which is under the pages folder the index
That is really cool and as something that I learned from working on doing this myself with VEET is these formats do have updates and can like change things around and something that I was running into there is they created a very random local host number not the usual like 3000 so definitely read your you know what it is saying because it doesn't always it's not always the same for everything right if I take that local host 3000 and put it into a browser we got it it's the normal next JS from the pages forward slash index JS which is under the pages folder the indexjs and if you look at the JSX which is basically HTML and javascript when you're index
js and if you look at the JSX which is basically HTML and javascript when you're indexjs file let's just just kind of take a look at what's on the screen versus what's in your code yeah okay whatever oh there we go there you go I'm like I'm gonna get that so if you if you see on the bottom there it says create next app yeah and then if you hover over if you look at your tab see what it says yeah because we got documentation um you're higher higher on the top of the page yeah welcome to your chrome tab higher right there ah that's where that text comes from your title tag and that's all part of your head tag so these are things that uh yeah barcara is dope you can change that and once you save it it should hot reload meaning once you save the um the builder detects those changes and then should rerender and save oh decline let me even talk to my friend it's supposed to be ignoring it but you know that's cool um so there you go you just made a change yay and now showing that change you didn't even have to run npm again you didn't have to run your server again it actually built into the next js packaging is that is cool hot reloading yeah and it really comes in handy when you're developing because you can just on one screen you can have your uh what you you know what you're rendering or what you're running and then on another screen you can have your code maybe you can have well you know your command line on another place and it helps your workflow so i mean lots of people have different ways that they work and you know they like to have all kinds of different colors on their command line and you know um they're git they went like to have their git status maybe there's all kinds of really cool and complicated colorful tools that you can use um we're just gonna we're gonna stick with the basics for right now all right our focus here is to build a working um next js and uh square integration so what i want what i want you to do is i actually want you to um erase in index js erase everything do you have an import at the top credit card okay everything except that from line two down so from line two down erase everything we're gonna start over okay oh wow and hit save i'm guessing yeah if you hit save then now there's gonna be a blank page yay because there's nothing to render or doing anything with okay okay so now what we are doing right now is we are importing three things and we are using the import that's uh the command and in job with script and that's recognized and react um and that that open curly brace and that credit card payment form i'm just explaining oh yeah yeah yeah that um credit card payment form and ach those are three different component components or types in the react square web payments sdk if you go to uh if you go to your web browser and google react square web payments sdk yet square i can't uh square payment sdk yay for coming up yep uh you want a good yeah there you go uh that's actually an mpm we want the gook we want the get hub oh there we go yeah there we go and um if you now click the see the link to their website this one yep yep click that yeah and there should be some documentation and so do get started there's docs up here oh oh or you can do that okay awesome so now you notice there's introduction you can go back and read read this in depth but there's getting started and then there's credit card you see how there's credit card there on the on the left hand side if you expand that it says usage so click on usage and it'll tell you like how to use credit card in the documentation and if you notice the first thing it tells you to do is to import credit card in payment form and that's what we've done and then so that means the next one i'm not like saying anything but like since we did the acah right here that's going to be under acah right down here because you got okay but we already have the payment form so all we have to do for acah is just import acah okay so that means that we need the export information as well we are going to be doing that but we're going to go that's at the bottom of the file typically or at the beginning of the function so we're going to go line by line and we're going to build out um we're going to build out our components okay our components but then components so one of the things i wanted to talk about is that components can stand on their own um in react components can be functions or they can be classes okay last is yesterday right um components also can house other components as children so in other words like you can have an out outer component like let me share my screen here yeah for sure let me switch it over there we go okay here oh you've already got it there ah i didn't realize it was already sharing so here we have an outer function called my payment form and if i click here right on the starting uh open open perenn in's dad way down here right so that means this function all of all of this stuff is inside this function okay my payment form so when this file runs it's going to um well this this is going to do this function is defined here but if i think if we go to what is it app
js file let's just just kind of take a look at what's on the screen versus what's in your code yeah okay whatever oh there we go there you go I'm like I'm gonna get that so if you if you see on the bottom there it says create next app yeah and then if you hover over if you look at your tab see what it says yeah because we got documentation um you're higher higher on the top of the page yeah welcome to your chrome tab higher right there ah that's where that text comes from your title tag and that's all part of your head tag so these are things that uh yeah barcara is dope you can change that and once you save it it should hot reload meaning once you save the um the builder detects those changes and then should rerender and save oh decline let me even talk to my friend it's supposed to be ignoring it but you know that's cool um so there you go you just made a change yay and now showing that change you didn't even have to run npm again you didn't have to run your server again it actually built into the next js packaging is that is cool hot reloading yeah and it really comes in handy when you're developing because you can just on one screen you can have your uh what you you know what you're rendering or what you're running and then on another screen you can have your code maybe you can have well you know your command line on another place and it helps your workflow so i mean lots of people have different ways that they work and you know they like to have all kinds of different colors on their command line and you know um they're git they went like to have their git status maybe there's all kinds of really cool and complicated colorful tools that you can use um we're just gonna we're gonna stick with the basics for right now all right our focus here is to build a working um next js and uh square integration so what i want what i want you to do is i actually want you to um erase in index js erase everything do you have an import at the top credit card okay everything except that from line two down so from line two down erase everything we're gonna start over okay oh wow and hit save i'm guessing yeah if you hit save then now there's gonna be a blank page yay because there's nothing to render or doing anything with okay okay so now what we are doing right now is we are importing three things and we are using the import that's uh the command and in job with script and that's recognized and react um and that that open curly brace and that credit card payment form i'm just explaining oh yeah yeah yeah that um credit card payment form and ach those are three different component components or types in the react square web payments sdk if you go to uh if you go to your web browser and google react square web payments sdk yet square i can't uh square payment sdk yay for coming up yep uh you want a good yeah there you go uh that's actually an mpm we want the gook we want the get hub oh there we go yeah there we go and um if you now click the see the link to their website this one yep yep click that yeah and there should be some documentation and so do get started there's docs up here oh oh or you can do that okay awesome so now you notice there's introduction you can go back and read read this in depth but there's getting started and then there's credit card you see how there's credit card there on the on the left hand side if you expand that it says usage so click on usage and it'll tell you like how to use credit card in the documentation and if you notice the first thing it tells you to do is to import credit card in payment form and that's what we've done and then so that means the next one i'm not like saying anything but like since we did the acah right here that's going to be under acah right down here because you got okay but we already have the payment form so all we have to do for acah is just import acah okay so that means that we need the export information as well we are going to be doing that but we're going to go that's at the bottom of the file typically or at the beginning of the function so we're going to go line by line and we're going to build out um we're going to build out our components okay our components but then components so one of the things i wanted to talk about is that components can stand on their own um in react components can be functions or they can be classes okay last is yesterday right um components also can house other components as children so in other words like you can have an out outer component like let me share my screen here yeah for sure let me switch it over there we go okay here oh you've already got it there ah i didn't realize it was already sharing so here we have an outer function called my payment form and if i click here right on the starting uh open open perenn in's dad way down here right so that means this function all of all of this stuff is inside this function okay my payment form so when this file runs it's going to um well this this is going to do this function is defined here but if i think if we go to what is it appjs so yeah we have my app and we have component and page prop page props um um that actually it's not it's not very clear but basically it's going to grab what's in index js and it's going to run it now there's some steps missing because there's some things that necks is doing behind the scenes right but um but essentially it's going to take this index js that's why it's given us this um and it's going to run this function it's going to fire it's actually going to run this whole file so first thing is going to do is go oh okay you want to import credit card payment form an ach all right i'm going to go and i'm going to grab this now remember the whole code splitting thing and the whole preloading uh pre fetching so i'm not sure when it's going to do this but it's going to do it at an opportune time that optimizes um your page load time now when your application is small doesn't make a whole lot of difference but when your application starts to scale up and be larger then it starts to make a whole lot of difference you know it's like your page loading and depending on the size your page loading in a second versus like you know four seconds and also depending on your device right we can parent that one to or i compared it to like um quick because in quick it it only loads what you need it to load exactly exactly okay and in a code splitting it um loads what you need it to load and it also determines the order that things need to load in um so that's also important okay so the first thing i want you to do is i want you to do const my payment form okay so we got i'm working on also doing it where um i get the lines right because um of like proper coding okay so const my payment form so i'm going to i just that rid of that just for clarity sake and this syntax is what's called an arrow function okay it's the same as going um function my payment form and then you know here's our parameters and then we want to pass in if we would have had a parameter here that would be called a prop but we don't have any props here but we'd say you know prop whatever okay um customer name let's say it was customer name all right this is the payment form let's say the payment form needed a customer name we could pass it in there um to my payment form but right now we don't need any uh we don't need any props okay props are just um they're just arguments or parameters to the function okay okay so um this is just another way of doing the same thing declaring this function and we're actually um you know my payment form is going to be also a variable that holds a function because we say const right just like we created variable variables before with const we say common payment my payment form and then we are it's saying it's equals or it's going to get it's going to be assigned to um this which is just an empty function at this point okay okay all right so let me get rid of that now uh what we're going to do where the first things we're going to do is we are going to do payment form and then for again for clarity sake and I'm going from out the outermost component to the innermost component so I'm starting with payment form so that's what you want to do you want to have payment form actually oh wait a minute you here I can just type it like this so this is that payment form we just imported okay and it's the open opening and closing um tag okay and um is line three is that very part at the end is that a regular bracket or is it a squiggly bracket this here yeah that's an open perenn okay cool yeah and then the close perenn's down here cool that's what I got yeah and you're going to want a you know symmetrical one like that okay so so we have the payment form all right so the next thing we're going to do we do undo um is inside your see here actually we're not going to need this that there um what you want to do is hit enter and then we're going to enter a whole bunch of stuff inside a payment form now for square for square payments they the the form that you're sending in when you have a transaction needs certain things one of the things is an application ID and you created an application before and yeah you were given an application ID so um it I what I didn't what it does is identify as the calling form with a verified application ID generated from the square dashboard so they want to control what applications are actually making these calls and the users tied to those applications yes especially when you're dealing with finances you're dealing with people's money people's identity those two things are high security risks for I'm also remembering how to get back there um so that way I can ensure I have those that information and I'm displaying my sandbox value for the world to see here and what you want to do is have application ID equals um you know open quotes and it's going to be a string which is your sandbox dash sq something something something not scrolling down I can't find it again did you put it on a on your oh I might have put it all of it but I'm not sure if I put all of it on my notepad let's see if I did all of it oh I did all of it okay yes I think I remember do I remember us doing that okay so we've got payment form and then we need to do application ID mm-hmm equals all right I am there all right awesome um and then card token response yeah this is uh sounds a little heady but I'm just kind of break this down so um the purpose of this is kind of twofold when you are making a when you want to uh have a transaction like for instance you want to charge a credit card um two things need to happen according to the square documentation and we can actually go to the square documentation uh let me see here I think I pulled it up somewhere here it is okay so you should be able to hopefully see uh the square documentation page here on web get started with web payments SDK so there's a ton of great information here um if you go down here to the overall implementation flow of an online payment option it works as follows you need two things one you need to configure the web payments SDK client library with your application to render a payment method form and add uh and to generate a payment token so um we are configuring our client library by using those react components that we just imported okay and we are importing them and then placing them inside the payment form we haven't got to that yet and that's going to uh it's going to configure it's part of the configuration um then also uh we are doing this card tokenize response received uh function and that does a few things one it does a fetch request which a fetch request is just what it sounds like you're asking someone to go fetch something it's fetch is a function and let me go back to my code so fetch is just a function here and we are saying okay we want to go we want you to go fetch some information from a database or from uh url the url in this case is api pay we haven't set that up yet but we will in a second and then its method is post there are these are the types associated with rest and http typically http is hyper types transfer protocol it's the protocol or the way of communication in the web and that's get put post delete and update i believe um the most common ones are crud or create read update delete those are the most common i feel like i need to do an episode just on that and then an episode just on protocols because like i get them but i don't get them on would you say criticals on on those and then um protocols protocols like like hdps and then i'm app pop yep there's more than that the rabbit hole goes deep the rabbit hole goes deep definitely oh but for right now all we need to worry about is post and when you're post when you're doing a post request um you are sending a body of information in along you know along uh you know on your along with your request you have a header and you have a body and that body um is in a certain format in this case is json you can hear that a lot especially if you're dealing with the way if you're gonna hear json javascript object notation it's really just a javascript object in this case it's gonna have a whole bunch of things inside the javascript object this is going to have source id that source id is the token we just read about in uh the documentation that we need to generate a token so um we are when this function card tokenizer response received which it is a function we're passing in the token and the buyer but when this fires off um when the payment form receives the results of a tokenized generation request uh the result is going to be a valid credit card or wallet token or you're getting air so the square api is going to give you one of those okay okay so if it's an error you know it'll be a helpful error that tells you hey you know credit card was invalid or you know sometimes you see those actually when you you know you uh swipe your card you know it's a pen was invalid whatever you know um something hopefully you don't get a 500 which is basically like an internal server error you can't do anything about that but hopefully if you do if you're if you're writing the code you can do something about but if you're like the customer and you make that uh you you swipe your card and you see a 500 it's like oh man I can't buy it yeah I bought another store so you want to have helpful layers um okay so we talked about methods we talked about headers in the header we're just going to say what the content type is and we say application JSON because we want the type for this request that's coming from the front end to our back end we wanted to be in JSON okay we're sending some JSON um in this body just JSON
js so yeah we have my app and we have component and page prop page props um um that actually it's not it's not very clear but basically it's going to grab what's in index js and it's going to run it now there's some steps missing because there's some things that necks is doing behind the scenes right but um but essentially it's going to take this index js that's why it's given us this um and it's going to run this function it's going to fire it's actually going to run this whole file so first thing is going to do is go oh okay you want to import credit card payment form an ach all right i'm going to go and i'm going to grab this now remember the whole code splitting thing and the whole preloading uh pre fetching so i'm not sure when it's going to do this but it's going to do it at an opportune time that optimizes um your page load time now when your application is small doesn't make a whole lot of difference but when your application starts to scale up and be larger then it starts to make a whole lot of difference you know it's like your page loading and depending on the size your page loading in a second versus like you know four seconds and also depending on your device right we can parent that one to or i compared it to like um quick because in quick it it only loads what you need it to load exactly exactly okay and in a code splitting it um loads what you need it to load and it also determines the order that things need to load in um so that's also important okay so the first thing i want you to do is i want you to do const my payment form okay so we got i'm working on also doing it where um i get the lines right because um of like proper coding okay so const my payment form so i'm going to i just that rid of that just for clarity sake and this syntax is what's called an arrow function okay it's the same as going um function my payment form and then you know here's our parameters and then we want to pass in if we would have had a parameter here that would be called a prop but we don't have any props here but we'd say you know prop whatever okay um customer name let's say it was customer name all right this is the payment form let's say the payment form needed a customer name we could pass it in there um to my payment form but right now we don't need any uh we don't need any props okay props are just um they're just arguments or parameters to the function okay okay so um this is just another way of doing the same thing declaring this function and we're actually um you know my payment form is going to be also a variable that holds a function because we say const right just like we created variable variables before with const we say common payment my payment form and then we are it's saying it's equals or it's going to get it's going to be assigned to um this which is just an empty function at this point okay okay all right so let me get rid of that now uh what we're going to do where the first things we're going to do is we are going to do payment form and then for again for clarity sake and I'm going from out the outermost component to the innermost component so I'm starting with payment form so that's what you want to do you want to have payment form actually oh wait a minute you here I can just type it like this so this is that payment form we just imported okay and it's the open opening and closing um tag okay and um is line three is that very part at the end is that a regular bracket or is it a squiggly bracket this here yeah that's an open perenn okay cool yeah and then the close perenn's down here cool that's what I got yeah and you're going to want a you know symmetrical one like that okay so so we have the payment form all right so the next thing we're going to do we do undo um is inside your see here actually we're not going to need this that there um what you want to do is hit enter and then we're going to enter a whole bunch of stuff inside a payment form now for square for square payments they the the form that you're sending in when you have a transaction needs certain things one of the things is an application ID and you created an application before and yeah you were given an application ID so um it I what I didn't what it does is identify as the calling form with a verified application ID generated from the square dashboard so they want to control what applications are actually making these calls and the users tied to those applications yes especially when you're dealing with finances you're dealing with people's money people's identity those two things are high security risks for I'm also remembering how to get back there um so that way I can ensure I have those that information and I'm displaying my sandbox value for the world to see here and what you want to do is have application ID equals um you know open quotes and it's going to be a string which is your sandbox dash sq something something something not scrolling down I can't find it again did you put it on a on your oh I might have put it all of it but I'm not sure if I put all of it on my notepad let's see if I did all of it oh I did all of it okay yes I think I remember do I remember us doing that okay so we've got payment form and then we need to do application ID mm-hmm equals all right I am there all right awesome um and then card token response yeah this is uh sounds a little heady but I'm just kind of break this down so um the purpose of this is kind of twofold when you are making a when you want to uh have a transaction like for instance you want to charge a credit card um two things need to happen according to the square documentation and we can actually go to the square documentation uh let me see here I think I pulled it up somewhere here it is okay so you should be able to hopefully see uh the square documentation page here on web get started with web payments SDK so there's a ton of great information here um if you go down here to the overall implementation flow of an online payment option it works as follows you need two things one you need to configure the web payments SDK client library with your application to render a payment method form and add uh and to generate a payment token so um we are configuring our client library by using those react components that we just imported okay and we are importing them and then placing them inside the payment form we haven't got to that yet and that's going to uh it's going to configure it's part of the configuration um then also uh we are doing this card tokenize response received uh function and that does a few things one it does a fetch request which a fetch request is just what it sounds like you're asking someone to go fetch something it's fetch is a function and let me go back to my code so fetch is just a function here and we are saying okay we want to go we want you to go fetch some information from a database or from uh url the url in this case is api pay we haven't set that up yet but we will in a second and then its method is post there are these are the types associated with rest and http typically http is hyper types transfer protocol it's the protocol or the way of communication in the web and that's get put post delete and update i believe um the most common ones are crud or create read update delete those are the most common i feel like i need to do an episode just on that and then an episode just on protocols because like i get them but i don't get them on would you say criticals on on those and then um protocols protocols like like hdps and then i'm app pop yep there's more than that the rabbit hole goes deep the rabbit hole goes deep definitely oh but for right now all we need to worry about is post and when you're post when you're doing a post request um you are sending a body of information in along you know along uh you know on your along with your request you have a header and you have a body and that body um is in a certain format in this case is json you can hear that a lot especially if you're dealing with the way if you're gonna hear json javascript object notation it's really just a javascript object in this case it's gonna have a whole bunch of things inside the javascript object this is going to have source id that source id is the token we just read about in uh the documentation that we need to generate a token so um we are when this function card tokenizer response received which it is a function we're passing in the token and the buyer but when this fires off um when the payment form receives the results of a tokenized generation request uh the result is going to be a valid credit card or wallet token or you're getting air so the square api is going to give you one of those okay okay so if it's an error you know it'll be a helpful error that tells you hey you know credit card was invalid or you know sometimes you see those actually when you you know you uh swipe your card you know it's a pen was invalid whatever you know um something hopefully you don't get a 500 which is basically like an internal server error you can't do anything about that but hopefully if you do if you're if you're writing the code you can do something about but if you're like the customer and you make that uh you you swipe your card and you see a 500 it's like oh man I can't buy it yeah I bought another store so you want to have helpful layers um okay so we talked about methods we talked about headers in the header we're just going to say what the content type is and we say application JSON because we want the type for this request that's coming from the front end to our back end we wanted to be in JSON okay we're sending some JSON um in this body just JSONStringify what this does is oh look if you hover over it it tells you what it does um it converts a JavaScript value to JSON the JSON string so it's still JSON but it's in a string because you know the web like strings yeah things in quotes um i um oddly because my mom was joining yesterday uh she was talking about it and I don't know if you know this but she said back in the day she heard that string instead of being like something in quotes meant like multiple multiple files working together was a string of files kind of thing yes and that's so was it called string and is that still called string you know what I don't have to look into the like the origins of like string I know strings have been around a long time um but you know yes there are there there can be a string of files and um you can like process them you know one by one or process them in a batch um but yes they are so a string of file so the word string still means the same thing but it could be like a string of files it could be a string of characters and in the case of the string we're talking about it's a string of characters because every character has an index okay the index zero so index zero of let's say your application ID index zero of application ID would give you the s okay index one would give you the a okay so they're like an array really because they're stored like an array in memory I'm gonna say I think I understand what you're saying but I don't see what you're saying but I think it'll click later on okay I wish I had a whiteboard I would just draw some boxes and each box would be a memory slot and then I would put s in the first box and then a in the next box and then and then I would label the first box zero okay in order to access that memory you need a way to do that and in strings they use numbers so you say like application ID and then like if you did here I'll just for now let's say we did application ID and then zero right so what that is going to do it's going to say okay look at the string application ID and get the zero with character okay which is s so that's going to return that would return yes that would give you s okay you wanted application ID one that would give you a so just go zero one two three four five all the way to the end and you could also say you know application ID got length it has a length property that you can access I can't remember if there's that's a function or if it's just like but that would give you the length like how many characters long this is okay so just just some things about strings and about like accessing strings and kind of we're not manipulating them yet but just just some stuff about strings and that is actually across languages okay that's in Python that's in Java script that's in Java that's in C++ C sharp like all these languages that I've dealt with all of them have a way of dealing with strings and all of them their stored as arrays in some cases they are well I'm not going to get into that but we don't need to get into that okay um as a total side note um after writing this all out it looks like awake and fetch are um underlined for me and I'm wondering is that just because we're not too what it's going to be using because right now it says parsing error missing semicolon for awake and for a wait oh oh that's why me and dyslexia like this is going to be oh my gosh oh hey what do you know it's itself all right so um I'm not sure how far down the rabbit hole you want to go basically a wait in async they go together okay so there are different so JavaScript is an asynchronous language meaning JavaScript doesn't just execute first line second line third line fourth line fifth line doesn't execute like that um there are ways that you can introduce um things to control uh what when functions are called or when you know this line is this line is executed you can actually like for instance you can go to a database you know maybe you're going to a database and you want to wait until that database returns with a value before you continue your execution does that make sense so in this case this car tokenized response received right we want it to uh we want it to set our value or to do this alert we wanted to do that after uh we have fetched this data from after we've gotten a response from the database or from our back yet that makes sense okay so you don't want it before that right you want it to be able to process if there's an error you want it to return that error and give you good information um so uh this is kind of getting into a restful API um some of my I think it might be coming on and doing rest with you um so you some of this is going to be like I was saying like this brings up together a whole bunch of different um uh you know uh different like yeah no like there's a they all interconnect at some way or another and concepts that's yes like there's so much out there in the world yeah it makes this show really fun because yeah at the moment i'm just kind of like scraping the surface of everything instead of diving in deep and a big reason i'm doing that is because i feel like so many newbies are asked well what do you want to do with it like what do you want to learn do you want to be back end or front end or full stack or like figuring all that out and i'm like i don't even know you don't know enough to make that decision yet yeah yeah so um i'm excited to for this month that we i was able to focus on a lot more of java scripts so that way i feel like i have a bit of an understanding before i at least see examples of python um now one day trying to understand graph ql i'm not sure if i'll ever get there but for today figuring out web payments yeah so do you have this whole function here yes okay and are you you have the await here the await response so again there's one async here inside this bracket and it's saying okay this is going to be an asynchronous this is going to be an asynchronous operation and i want you to wait on this fetch request going to api slash pay and then i also want you to await the response dot json so you know once this response happens and then converting it to json right there's what's called a promise and i'm not going to get into what promises are but basically i i want you to wait for this to complete and then i want you to execute the rest of this json dot stringify which we already saw it's taking json and turning it into a json string basically putting quotes around it so it could be you know parsed by you know the web parser um and then this alert have you ever seen something pop up on your in a little box on your uh web browser that's an alert so what we what we want to do is we want to actually alert the response um and it's it's going to be in json and we'll go through it and look look at you know when we get the response what it says assuming you know we get a successful one okay and then the last thing we want here inside of our payment form is our location id and this just identifies the location of the merchant that is taking the payment and that's from the debt uh square application dashboard and location step oh oh i can't hear you i'm mute of myself because i was drinking water i didn't want to be hearing me drink water okay now i was just going to say um i really i'm glad that the other day i copy and paste it all three because i was like i don't remember how to get there and now i understand why you're supposed to take notes on this stuff i'll get there i am excited for Anthony to come on the show and teach me that yeah sure all right so i'm seeing how that's done um curiosity on the note on component for taking credit card payments that one is inside of curly brackets this is actually a comment oh and because jxx is not html and it's not javascript necessarily it's both of them put together um instead of just doing that where you would take a comment you put a comment there that's how you do a comment by the way in javascript yeah um you actually would say okay this is javascript right here so it knows how to parse it and then you put the component inside of there so it doesn't think that this is uh you know some jxx or html okay and then why on line 31 do we have a bracket because this this closes out this component uh okay these remember how i showed you there were arguments that go to this function yeah say customer seller and those things are properties of the function uh huh well these things uh they're much more long and drawn out but these are properties of this component okay they're essentially properties being passed into the component application id card tokenized response received that whole function alert actually i think that's inside of card tokenized response received it is and then location id so there's those three there's those three properties application id this function and uh this alert now in javascript yes you can pass functions as you can pass functions to other functions those are called callback functions make sense i'm looking at the documentation that's why i'm staring at the other screen is to see if i can like follow along if i were like just looking at the documentation mm-hmm okay i'm seeing where we're at now i see where we're at and then good job looking at the docs i'm learning i'm working on it okay i thought i had it and it's like close but not close oh that's why because i was looking at card payments but not payment form and payment form it's going to be different than card payment because we're going to do card payment next yes right okay yes so payment form needs to be there i think for all of the payment types so they all need the payment form then the payment type goes there in addition to the payment form it comes up you know after it before but you know essentially like here with credit card all we have to do and the cool thing that i wanted to show you all you have to do because we imported it because this third party library is we just do credit card and then close we close it out and then boom we have a credit card payment so i guess where i'm stuck if i'm like looking at the documentation is i remember when you were showing us and looking at web payments it said that it needed um the payment form but i'm not seeing how the payment forms are added on their documentation on squares documentation yeah okay so remember square has just a bear SDK they give they give an example but it's an it's just an html in plain job of script okay it's not it's not specific to react it's not specific to python or anything it's just um it's just an example with index index index and i'm sorry index html which with html and java script that you can use in any of those environments and then they actually squares also published extra tutorials on like react index and on you know these different platforms or these different frameworks got it so that's why the credit card or card payment is showing but not payment form is because payment form is much more universal for all payment forms yeah all types of payment yep okay and you'll see either payment form i think it's payment form on the documentation but you won't see like um components because components are specific to react okay and this third party library has taken what square has done and then has housed them all in components so it's made a payment form component it's made a credit card component and it's made a payment uh uh a ch component it's made uh uh after paid component so there's a if you're already developing and reacting you're making components this makes it so much easier to implement because you just import it right you impiem install it and then you import it and then you can just use those components to add payments to your existing react app uh makes sense it does make sense i think i'm gonna it's gonna pick me a hot minute to get there of like fully fully understanding it but it definitely does make sense now how to implement it later on you know i will get there yeah so you're you're getting an aduce to square you're getting to get to introduce to some job of script promises you're getting introduced to like restful apis it's like a whole it's a lot of stuff it's a lot of stuff at once but i feel like um i will say i feel very fortunate getting introduced to all of it at once because that's kind of how my brain works is just you know being able to take in all the information to know okay that's how what i'm learning right now will connect to xyz hmm hmm so um and then really quick for the account charge you did you just put in random things right there yes i just i was trying to be funny you know how people usually say john do yeah just put john don't get you i get you i just wanted to make driving and happily like whatever you say that but yeah so uh a ch for a direct debit you do need an account holder you need to redirect uri and you need a transaction id so i just like made up you know five for the two one and just example dot com which oh look at this moot woot is in the house what up what up i don't know if i just say it's real name i'll just call a moot woot um you said if you didn't use a wrapper oh you want to put that one on the screen because that's really germane to what we're talking about wait what do you want to put moot woots oh thank you screen i was like wait what are we talking to you you said if you didn't use the wrapper that's the uh not the wrapper not me but uh dad joe um if you didn't use the wrapper uh that's the third party library that we're importing using to import uh our components um said you would need to code up a way to delay rendering react because the square JavaScript loads a sink in the browser okay um and he's typing he's typing yeah the react square web payments sdk library yeah yep yep okay okay exactly it's definitely a lot to learn um something that maybe a bit interesting of um every time that i've created the account holder name and then redirect to uri it's creating a single quote instead of a double quote and you mean by default yeah yeah um i think it's i think i believe it's convention but i the convention i was using was double quotes um so that you this just stick with double quotes okay i just wanted to know if it was like something i needed to be concerned about or if it's just like you know because i've been called about you can also change a lot of the structure of what defaults to do so i just want to make sense it wasn't like a code issue yeah um what i what i like to do is i like to have my outer is this right my brain is my brain dying i usually i think i have my outer um so let's say you have like quotes and within those quotes you need another quote right um i usually like to have my outer quotes be double and then like if i have to have an escape character then like then it could be single but i like to have the outer ones double and the inner ones you know single like john don't i guess i could have escaped that um anyways yeah anyways it's just it's just convention but okay double very cool yay then if i bring up my local host again oh okay now i got to like show everybody because this is cool i might be getting skipping ahead but look look at that oh i'm so happy i knocked up over okay so let's uh yes that's cool uh one of the things you're gonna need is you're gonna need i think you're gonna need values but i think i remember what they are because i've done this to do it done this so many times you can just click on chase oh okay yes it's just you chase bank okay uh and i think it's user underscore good and this is on the documentation so i'm not like revealing anything you know super secret and i think it's past good for the capital p a just uh lowercase p a s s underscore good print take your passwords never all right let's let's do you know savings counterhouse more savings okay all right continue in its success all right yeah see that what does that say see this one says uh john doe i didn't actually name mine john doe but it just uses the default of what the of that account right yes that's what remember we actually passed in as a prop to account holder yeah okay i'm sorry it's the a c h the account holder name was john doe so it returned you know john doe even though like yours for example says john don't oh that is a good point because like look i'm named my account holder high that is very interesting let's open up your um we're gonna have to do some troubleshooting here well i'm wondering if it's because the square account is to john doe that's what i'm wondering if that's why or not the square account but the uh square api that but the credit card chase chase account is to john doe look for your alert function call hmm that's the same thing i mean so it should be alerting let's look at your um your uh developer tools and look at what is happening now exactly now we have a puzzle now he's with me okay um inspect and then i don't fully understand what all of these are for so okay would i go to console let's go to console let's just see if anything was logged in the console so uncheck run time last error loss no message port um actually i've run into this one before uh hold on missus right closed before it's plugins your extensions turn left i don't know if that's causing the other one but that is what causes that error okay so we can try the we can try to go through again after having eliminated that one thing let's see what happens okay let's move it down user user good and then past good underscore it good uh-huh nits close now um just try checking okay then i'm gonna do uh nope still john doe go john doe that is interesting let's look at the um the um CLI so this is your on server side um moot was it was going to say go to the network tab and turn on recording of requests oh okay cool network tab i was just thinking about the network tab was like we go to network tab or we could go to your server side but yeah that's um um no we don't want to eat we don't need to invert it um there's uh looks like there's a record but oh yep i think it's recording now i guess you're you're recording i guess we'll find out uh so what we want to do is do another request okay there you go i don't know if it's recording though your filter should change from js to you uh oh it's under should i change my filter then to fetch yeah yeah okay there we go fetch sweet um the last time i did that stuff was with um michiko uh that built quick because he was showing me like load times it was so cool yeah those never continue because i was saying for checking i'm doing savings again yep and then stop oh interesting i didn't see a fetch request and i'm actually seeing an error on your server side like in your public client error successfully unhandled rejection error aborted connection reset exception socket oh you know what's happening what i just realized we have api slash pay but we haven't built the backend oh because i got excited to see it yeah yeah yeah so um you know using that content it works yep so i will learn that i will learn that follow directions and don't get too excited to skip ahead i mean we could set it up so it runs without the back end but you know it's we might as well just set the back end up yes i dig it do you have time because we're right at the hour mark and i have another half hour before i need to go do anything so i feel like we can do this we can do this we can do it fast all right so what you want to do is i'm going to go to pay js remember we um here we go set up that file yes it's in a it's in api api there you go and then pay js there we go all right so what we want to do is we want to import client okay can you see my screen can you see well let me go back to your screen okay all right so we make this big yeah thank you we're going to import client from square okay and we need that to create an instance of a client okay remember you're talking about object oriented right so client is the class and then you know we we want to create an object an instance of that class remember your imports are in your external imports are in quotes yes you're going to end the import random uuid from crypto and i mean without getting too deep in the weeds i have a comment about it but it's basically going to generate a random and unique number up to a certain percentage okay that's gonna be fun yeah because me and crypto we're not even there yet and that's like what Anthony um who is hanging out with us the other day um what he does and when i first met him he was just like don't even look at it yet just don't worry about trying not to understand all that now this is this isn't like cryptocurrency this is cryptography this is a a branch of i guess cyber security so it's it's going to be used to generate a number that has a key that is attached to the block of information that you get from the front end okay yeah so i got my imports gone and then the next one is the bigant dot prototype dot two json and then you want to do function and then return this to string this is going to allow you to string a five big bigant basically long numbers it's just something that we have to uh i was like goot i actually went on stack overflow and looked this up and um it was just like kind of a rabbit hole but i was just like okay i just need to just include it because you know if i want to have long numbers for instance a long account number then um and i want to be able to convert to string and then need this and there are different types of events and there's like what's called a bigant which is one of the types of events integers when i say int okay cool okay and then the next thing is creating this instance of payments a p i i'm sorry the instance of client and calling it payments a p i so you want to do const payments a p i and then do client and then in new client as a parameter you want to pass in a object uh with two key value payers one access token and then process dot env dot square access token now that remember that square access token we created that last time or we right right we didn't create it we got it from the square dashboard and we created the env dot local right yep we put it on in that in that file okay cool so this should work this should you know since it's in the root folder it should find it can you move your mouse a little bit oh sorry i like that um you for your way of teaching this uh taken it off your screen because it's like getting me used to seeing what you've written and getting used to writing it myself but then being able to look for my own errors right which is really annoying it's a scaffolding it's a scaffolding technique because some people learn visually some people learn by hearing some people learn by you know tactile the actually typing um and this allows multiple modalities when someone is learning because i'm actually explaining as i'm going through but i'm you're also seeing it and then you're also typing it so it's like three of the four main modalities oh geez that's uh yeah because I I definitely do better by hearing but then being able to see it and type it myself you're right i'm like oh okay cool i have something to compare it to as well which makes it a lot easier to see oh did i get that right which granted i didn't see that i typed uh await as away right at least that one was a little easier to find yeah and as you as you do this more and you kind of get used to some of the JavaScript conventions we like oh this is a async await you know like i've seen it a bunch of times so when i see like an async i'm like oh okay i know what that is but you know it just takes like doing it over and over and over again you start to get used to those things and you start to write them yourself when you're writing applications now i put some console logs in here they're not necessary they were like for troubleshooting purposes okay i'm just getting a parsing error for new with a comma like in front of new for new client oh can you show your screen please there we go right here you're missing an equal sign oh my god where equals your payment api and then the closed braces now let me take a second to explain what's happening here this is actually um called um object destructuring and it's a very very complicated term but basically what it's going to do is this it's going to go into uh client it's going to see if it can find a key payments api and it's going to save um what you're creating into a variable called payments api okay so it's going to see if there's something matching the same thing with client from square it's going to look look look in the square library or the square uh uh in-pm registry or whatever and see if there's something called client and then it's going to create a variable called client and save it in there and now you can use it in this file good it okay that's what that notation is it's object destructuring okay so that made sense and i'm just taking a look oh okay this is going to be something that i just got to learn how to see like i was staring at the new client thing before asking you and you're like you're missing your equals and i'm like dude i've been staring at this why did i register that i'm missing the equals i'm gonna learn it's gonna have oh i'm like missing stuff it's really annoying but you know i'm not the only one that does it and learning from other people that are dyslexic it's gonna be good yay yay um it's like taking a minute yeah so this notice there's an export here an export default so um there has to be a default export from your JavaScript file in the next in the react uh ecosystem so this one um specifically says this function is going to be your default export um and it's also gonna be an async function so there's that async order again so this is the wait yeah there's gonna be another await that pairs with that at least one that pairs with that async now the first one is we have an if check if the request method is post remember our front end it was the post request that means like a post request could be like you know you're sending information to a database and you want that database to save it but you have to send the the information that you want it to save so in the body of that post request would be the information that you want um that you want and it could be you know it has to be stringified but we did that stringification json dot stringify but this request dot method um this this standard rq um this is being passed into the handler request and the response so there's a request to uh HTTP request and there's an HTTP response so it's going to take your request and it's going to look at the method on your request which we sent in the fetch request and we remember we named it post if we go back to index js and we go here to this fetch here's our method we call the post okay we call it post so it's gonna look at that object and look at the method um the method key and see if it's post okay and so yeah that's the first thing and then why are there three equals for um require method post so yeah there's um single equals in javascript is assignment that's when you're assigning one value to another value in memory okay double equals is when you're checking to see if two things are the same but if they aren't the same type it's going to change the type of one of those things to match the other and i think it's the second to match the first i believe that's how it is might be the other way around but um uh it's basically it has uh type conversion um triple equals means it compares their value and it compares their type and they have to be both equal in order for that to be true so double equals their type doesn't have to be the same so like one can be an integer and one can be a string you can compare uh like for instance uh let's see here like let's say if i just wanted to do if uh six equals whoops equals fix all right that would come back false because yes they're both sixes but this is a string six and this is the number six or an integer okay if i did this double equals that would be true i'm getting it not getting it because then it's going to change like it would change the six to a string or change this to a number okay so in memory it would be going oh hey this is what i see those are equal true it's okay that if check is true oh that's what that triple equals mean it's it's uh the deep equals where um it doesn't do any type conversion doesn't convert uh the type it just compares them as they are to see if they're exactly equal i'm missing something so i'm trying to find what i'm missing oh okay because you said that i don't need the consul log right no you know oh and then do i need oh i need i need rest status though and rest that the two rest status yes those are very important so um what our r e s is remember there's requests and response so this is going to say uh assuming everything is happy and you get a good response it's going to return 200 and then uh j sonify the results and return the result which is this very what's stored in this variable from create payment and i i wanted to mention that remember there was two things you had to do you had to initiate a payment and you had to generate a token you also need a back end to actually process that token and that's what this back end that simple back end uh code is doing is processing that token that we got from the front end so um you know that's just to have a square API works they want to make sure double triple check and you know if uh initiate a credit card payment for instance um it checks the credit card and makes sure it's valid right and make sure any other information associated is valid and then it sends once it gets you know it gets a success and it generates a token and it sends it to the back end or wherever back end you know you want to send it to um uh and then you know that back end it needs to process the tokens you have to make some logic to process the token i get it in theory i think some of this is still the you know i'll get there i will understand the words you're saying um a token really is just uh it's just a long number and it's this token means this was a valid um this was a valid square uh transaction that just happened um it's like if if you buy something at a store sorry i got a um for my export default async function handler it says parsing error identifier handler has already been kind of moved so i can see oh you can you can go ahead and share your screen okay let me manifest another like comma yeah so parsing error identifier handler has already been declared 1530 oh up here oh because this was already here so i can delete this one right yep because this one was already here yep yeah you can only have one default okay voila and then am i done do i get a test it yes you do yay that is your reward and it it it is making a lot of sense um like looking at it i feel like i could at least figure my way rewit now i don't think i'll remember exactly how to reset it up by myself but i would at least be like okay cool i think i can read enough of it um which it is definitely getting easier as i have these oh and mootwood i know that i've been very excited about learning all this right now how's uh filming they just released a new video i saw pop up on my phone uh square oh i should check it out then yeah they just they're on their youtube channel all right i'm gonna do checking just to see if it works and glad to hear that it was great okay uh i didn't get any pop up okay let's go back unauthorized okay let's read that authentication error okay trying to make it bigger to read it all yeah hgtp header of your request was incorrect or expired the header value is expected to be in the format bearer token without quotation marks where the token is so i just need to call it bearer token instead of token oh okay i'll definitely have to check out that mootwood i can um um maybe i'll watch it to see if i can replicate this yes uh he he did he just say he i can't see the comments but did he just say he has a youtube channel where he walks through uh building a next react app uh react what payments sdk yeah it's yes he just said uh we should check the enve file and how you're importing the access token when uh initialize it is where moot sdk so that would be my enve file i named it square access token they're you're missing a c c it says access this is gonna drive me freaking bonkers like i'm looking at it welcome to software development um make sure you save the file there you go yeah all right so it's when i need to rerun that and unless it ran rerun oh yeah okay yep there we go oh yeah every time i see that use of good cast good i always think of uh Joey or uh the Hulk oh that's funny are Joey on friends okay do we have it please work continue okay huh uh oh it's up this unauthorized authentication or bear app or bear token um k-e dot js file yeah it's so that you see your back end me me me square access token is access token i got my season my s's at least this time okay okay create payment amount money just for kicks um let's go back to uh we're gonna have it our config file which isn't api no next good thing okay yeah and that's put in uh you know what i had before the env as a key above react strict mode true you're gonna put in env c uh with a colon and then open brace that one yep okay and you're gonna need a comma after the brace the last brace goodness gracious you need to tell amri i keep telling her that um do in lives right now she's gonna keep calling we'll talk later okay uh enb closed brackets comma yep and then just in there you're gonna put in square access token in the brackets yep uh i'm trying to and my putting it where it has the token information or am i putting it just the file name um what we're gonna try we're gonna try to put the token in um in state that actual numbers yes it's a long string should be okay and since this is just me doing some um oh it says oh that we may just have needed to restart the the server oh so i remember correctly then i can just do uh favor spot just in case all right and then do you need to restart or server so uh please please oh never checking continue
Stringify what this does is oh look if you hover over it it tells you what it does um it converts a JavaScript value to JSON the JSON string so it's still JSON but it's in a string because you know the web like strings yeah things in quotes um i um oddly because my mom was joining yesterday uh she was talking about it and I don't know if you know this but she said back in the day she heard that string instead of being like something in quotes meant like multiple multiple files working together was a string of files kind of thing yes and that's so was it called string and is that still called string you know what I don't have to look into the like the origins of like string I know strings have been around a long time um but you know yes there are there there can be a string of files and um you can like process them you know one by one or process them in a batch um but yes they are so a string of file so the word string still means the same thing but it could be like a string of files it could be a string of characters and in the case of the string we're talking about it's a string of characters because every character has an index okay the index zero so index zero of let's say your application ID index zero of application ID would give you the s okay index one would give you the a okay so they're like an array really because they're stored like an array in memory I'm gonna say I think I understand what you're saying but I don't see what you're saying but I think it'll click later on okay I wish I had a whiteboard I would just draw some boxes and each box would be a memory slot and then I would put s in the first box and then a in the next box and then and then I would label the first box zero okay in order to access that memory you need a way to do that and in strings they use numbers so you say like application ID and then like if you did here I'll just for now let's say we did application ID and then zero right so what that is going to do it's going to say okay look at the string application ID and get the zero with character okay which is s so that's going to return that would return yes that would give you s okay you wanted application ID one that would give you a so just go zero one two three four five all the way to the end and you could also say you know application ID got length it has a length property that you can access I can't remember if there's that's a function or if it's just like but that would give you the length like how many characters long this is okay so just just some things about strings and about like accessing strings and kind of we're not manipulating them yet but just just some stuff about strings and that is actually across languages okay that's in Python that's in Java script that's in Java that's in C++ C sharp like all these languages that I've dealt with all of them have a way of dealing with strings and all of them their stored as arrays in some cases they are well I'm not going to get into that but we don't need to get into that okay um as a total side note um after writing this all out it looks like awake and fetch are um underlined for me and I'm wondering is that just because we're not too what it's going to be using because right now it says parsing error missing semicolon for awake and for a wait oh oh that's why me and dyslexia like this is going to be oh my gosh oh hey what do you know it's itself all right so um I'm not sure how far down the rabbit hole you want to go basically a wait in async they go together okay so there are different so JavaScript is an asynchronous language meaning JavaScript doesn't just execute first line second line third line fourth line fifth line doesn't execute like that um there are ways that you can introduce um things to control uh what when functions are called or when you know this line is this line is executed you can actually like for instance you can go to a database you know maybe you're going to a database and you want to wait until that database returns with a value before you continue your execution does that make sense so in this case this car tokenized response received right we want it to uh we want it to set our value or to do this alert we wanted to do that after uh we have fetched this data from after we've gotten a response from the database or from our back yet that makes sense okay so you don't want it before that right you want it to be able to process if there's an error you want it to return that error and give you good information um so uh this is kind of getting into a restful API um some of my I think it might be coming on and doing rest with you um so you some of this is going to be like I was saying like this brings up together a whole bunch of different um uh you know uh different like yeah no like there's a they all interconnect at some way or another and concepts that's yes like there's so much out there in the world yeah it makes this show really fun because yeah at the moment i'm just kind of like scraping the surface of everything instead of diving in deep and a big reason i'm doing that is because i feel like so many newbies are asked well what do you want to do with it like what do you want to learn do you want to be back end or front end or full stack or like figuring all that out and i'm like i don't even know you don't know enough to make that decision yet yeah yeah so um i'm excited to for this month that we i was able to focus on a lot more of java scripts so that way i feel like i have a bit of an understanding before i at least see examples of python um now one day trying to understand graph ql i'm not sure if i'll ever get there but for today figuring out web payments yeah so do you have this whole function here yes okay and are you you have the await here the await response so again there's one async here inside this bracket and it's saying okay this is going to be an asynchronous this is going to be an asynchronous operation and i want you to wait on this fetch request going to api slash pay and then i also want you to await the response dot json so you know once this response happens and then converting it to json right there's what's called a promise and i'm not going to get into what promises are but basically i i want you to wait for this to complete and then i want you to execute the rest of this json dot stringify which we already saw it's taking json and turning it into a json string basically putting quotes around it so it could be you know parsed by you know the web parser um and then this alert have you ever seen something pop up on your in a little box on your uh web browser that's an alert so what we what we want to do is we want to actually alert the response um and it's it's going to be in json and we'll go through it and look look at you know when we get the response what it says assuming you know we get a successful one okay and then the last thing we want here inside of our payment form is our location id and this just identifies the location of the merchant that is taking the payment and that's from the debt uh square application dashboard and location step oh oh i can't hear you i'm mute of myself because i was drinking water i didn't want to be hearing me drink water okay now i was just going to say um i really i'm glad that the other day i copy and paste it all three because i was like i don't remember how to get there and now i understand why you're supposed to take notes on this stuff i'll get there i am excited for Anthony to come on the show and teach me that yeah sure all right so i'm seeing how that's done um curiosity on the note on component for taking credit card payments that one is inside of curly brackets this is actually a comment oh and because jxx is not html and it's not javascript necessarily it's both of them put together um instead of just doing that where you would take a comment you put a comment there that's how you do a comment by the way in javascript yeah um you actually would say okay this is javascript right here so it knows how to parse it and then you put the component inside of there so it doesn't think that this is uh you know some jxx or html okay and then why on line 31 do we have a bracket because this this closes out this component uh okay these remember how i showed you there were arguments that go to this function yeah say customer seller and those things are properties of the function uh huh well these things uh they're much more long and drawn out but these are properties of this component okay they're essentially properties being passed into the component application id card tokenized response received that whole function alert actually i think that's inside of card tokenized response received it is and then location id so there's those three there's those three properties application id this function and uh this alert now in javascript yes you can pass functions as you can pass functions to other functions those are called callback functions make sense i'm looking at the documentation that's why i'm staring at the other screen is to see if i can like follow along if i were like just looking at the documentation mm-hmm okay i'm seeing where we're at now i see where we're at and then good job looking at the docs i'm learning i'm working on it okay i thought i had it and it's like close but not close oh that's why because i was looking at card payments but not payment form and payment form it's going to be different than card payment because we're going to do card payment next yes right okay yes so payment form needs to be there i think for all of the payment types so they all need the payment form then the payment type goes there in addition to the payment form it comes up you know after it before but you know essentially like here with credit card all we have to do and the cool thing that i wanted to show you all you have to do because we imported it because this third party library is we just do credit card and then close we close it out and then boom we have a credit card payment so i guess where i'm stuck if i'm like looking at the documentation is i remember when you were showing us and looking at web payments it said that it needed um the payment form but i'm not seeing how the payment forms are added on their documentation on squares documentation yeah okay so remember square has just a bear SDK they give they give an example but it's an it's just an html in plain job of script okay it's not it's not specific to react it's not specific to python or anything it's just um it's just an example with index index index and i'm sorry index html which with html and java script that you can use in any of those environments and then they actually squares also published extra tutorials on like react index and on you know these different platforms or these different frameworks got it so that's why the credit card or card payment is showing but not payment form is because payment form is much more universal for all payment forms yeah all types of payment yep okay and you'll see either payment form i think it's payment form on the documentation but you won't see like um components because components are specific to react okay and this third party library has taken what square has done and then has housed them all in components so it's made a payment form component it's made a credit card component and it's made a payment uh uh a ch component it's made uh uh after paid component so there's a if you're already developing and reacting you're making components this makes it so much easier to implement because you just import it right you impiem install it and then you import it and then you can just use those components to add payments to your existing react app uh makes sense it does make sense i think i'm gonna it's gonna pick me a hot minute to get there of like fully fully understanding it but it definitely does make sense now how to implement it later on you know i will get there yeah so you're you're getting an aduce to square you're getting to get to introduce to some job of script promises you're getting introduced to like restful apis it's like a whole it's a lot of stuff it's a lot of stuff at once but i feel like um i will say i feel very fortunate getting introduced to all of it at once because that's kind of how my brain works is just you know being able to take in all the information to know okay that's how what i'm learning right now will connect to xyz hmm hmm so um and then really quick for the account charge you did you just put in random things right there yes i just i was trying to be funny you know how people usually say john do yeah just put john don't get you i get you i just wanted to make driving and happily like whatever you say that but yeah so uh a ch for a direct debit you do need an account holder you need to redirect uri and you need a transaction id so i just like made up you know five for the two one and just example dot com which oh look at this moot woot is in the house what up what up i don't know if i just say it's real name i'll just call a moot woot um you said if you didn't use a wrapper oh you want to put that one on the screen because that's really germane to what we're talking about wait what do you want to put moot woots oh thank you screen i was like wait what are we talking to you you said if you didn't use the wrapper that's the uh not the wrapper not me but uh dad joe um if you didn't use the wrapper uh that's the third party library that we're importing using to import uh our components um said you would need to code up a way to delay rendering react because the square JavaScript loads a sink in the browser okay um and he's typing he's typing yeah the react square web payments sdk library yeah yep yep okay okay exactly it's definitely a lot to learn um something that maybe a bit interesting of um every time that i've created the account holder name and then redirect to uri it's creating a single quote instead of a double quote and you mean by default yeah yeah um i think it's i think i believe it's convention but i the convention i was using was double quotes um so that you this just stick with double quotes okay i just wanted to know if it was like something i needed to be concerned about or if it's just like you know because i've been called about you can also change a lot of the structure of what defaults to do so i just want to make sense it wasn't like a code issue yeah um what i what i like to do is i like to have my outer is this right my brain is my brain dying i usually i think i have my outer um so let's say you have like quotes and within those quotes you need another quote right um i usually like to have my outer quotes be double and then like if i have to have an escape character then like then it could be single but i like to have the outer ones double and the inner ones you know single like john don't i guess i could have escaped that um anyways yeah anyways it's just it's just convention but okay double very cool yay then if i bring up my local host again oh okay now i got to like show everybody because this is cool i might be getting skipping ahead but look look at that oh i'm so happy i knocked up over okay so let's uh yes that's cool uh one of the things you're gonna need is you're gonna need i think you're gonna need values but i think i remember what they are because i've done this to do it done this so many times you can just click on chase oh okay yes it's just you chase bank okay uh and i think it's user underscore good and this is on the documentation so i'm not like revealing anything you know super secret and i think it's past good for the capital p a just uh lowercase p a s s underscore good print take your passwords never all right let's let's do you know savings counterhouse more savings okay all right continue in its success all right yeah see that what does that say see this one says uh john doe i didn't actually name mine john doe but it just uses the default of what the of that account right yes that's what remember we actually passed in as a prop to account holder yeah okay i'm sorry it's the a c h the account holder name was john doe so it returned you know john doe even though like yours for example says john don't oh that is a good point because like look i'm named my account holder high that is very interesting let's open up your um we're gonna have to do some troubleshooting here well i'm wondering if it's because the square account is to john doe that's what i'm wondering if that's why or not the square account but the uh square api that but the credit card chase chase account is to john doe look for your alert function call hmm that's the same thing i mean so it should be alerting let's look at your um your uh developer tools and look at what is happening now exactly now we have a puzzle now he's with me okay um inspect and then i don't fully understand what all of these are for so okay would i go to console let's go to console let's just see if anything was logged in the console so uncheck run time last error loss no message port um actually i've run into this one before uh hold on missus right closed before it's plugins your extensions turn left i don't know if that's causing the other one but that is what causes that error okay so we can try the we can try to go through again after having eliminated that one thing let's see what happens okay let's move it down user user good and then past good underscore it good uh-huh nits close now um just try checking okay then i'm gonna do uh nope still john doe go john doe that is interesting let's look at the um the um CLI so this is your on server side um moot was it was going to say go to the network tab and turn on recording of requests oh okay cool network tab i was just thinking about the network tab was like we go to network tab or we could go to your server side but yeah that's um um no we don't want to eat we don't need to invert it um there's uh looks like there's a record but oh yep i think it's recording now i guess you're you're recording i guess we'll find out uh so what we want to do is do another request okay there you go i don't know if it's recording though your filter should change from js to you uh oh it's under should i change my filter then to fetch yeah yeah okay there we go fetch sweet um the last time i did that stuff was with um michiko uh that built quick because he was showing me like load times it was so cool yeah those never continue because i was saying for checking i'm doing savings again yep and then stop oh interesting i didn't see a fetch request and i'm actually seeing an error on your server side like in your public client error successfully unhandled rejection error aborted connection reset exception socket oh you know what's happening what i just realized we have api slash pay but we haven't built the backend oh because i got excited to see it yeah yeah yeah so um you know using that content it works yep so i will learn that i will learn that follow directions and don't get too excited to skip ahead i mean we could set it up so it runs without the back end but you know it's we might as well just set the back end up yes i dig it do you have time because we're right at the hour mark and i have another half hour before i need to go do anything so i feel like we can do this we can do this we can do it fast all right so what you want to do is i'm going to go to pay js remember we um here we go set up that file yes it's in a it's in api api there you go and then pay js there we go all right so what we want to do is we want to import client okay can you see my screen can you see well let me go back to your screen okay all right so we make this big yeah thank you we're going to import client from square okay and we need that to create an instance of a client okay remember you're talking about object oriented right so client is the class and then you know we we want to create an object an instance of that class remember your imports are in your external imports are in quotes yes you're going to end the import random uuid from crypto and i mean without getting too deep in the weeds i have a comment about it but it's basically going to generate a random and unique number up to a certain percentage okay that's gonna be fun yeah because me and crypto we're not even there yet and that's like what Anthony um who is hanging out with us the other day um what he does and when i first met him he was just like don't even look at it yet just don't worry about trying not to understand all that now this is this isn't like cryptocurrency this is cryptography this is a a branch of i guess cyber security so it's it's going to be used to generate a number that has a key that is attached to the block of information that you get from the front end okay yeah so i got my imports gone and then the next one is the bigant dot prototype dot two json and then you want to do function and then return this to string this is going to allow you to string a five big bigant basically long numbers it's just something that we have to uh i was like goot i actually went on stack overflow and looked this up and um it was just like kind of a rabbit hole but i was just like okay i just need to just include it because you know if i want to have long numbers for instance a long account number then um and i want to be able to convert to string and then need this and there are different types of events and there's like what's called a bigant which is one of the types of events integers when i say int okay cool okay and then the next thing is creating this instance of payments a p i i'm sorry the instance of client and calling it payments a p i so you want to do const payments a p i and then do client and then in new client as a parameter you want to pass in a object uh with two key value payers one access token and then process dot env dot square access token now that remember that square access token we created that last time or we right right we didn't create it we got it from the square dashboard and we created the env dot local right yep we put it on in that in that file okay cool so this should work this should you know since it's in the root folder it should find it can you move your mouse a little bit oh sorry i like that um you for your way of teaching this uh taken it off your screen because it's like getting me used to seeing what you've written and getting used to writing it myself but then being able to look for my own errors right which is really annoying it's a scaffolding it's a scaffolding technique because some people learn visually some people learn by hearing some people learn by you know tactile the actually typing um and this allows multiple modalities when someone is learning because i'm actually explaining as i'm going through but i'm you're also seeing it and then you're also typing it so it's like three of the four main modalities oh geez that's uh yeah because I I definitely do better by hearing but then being able to see it and type it myself you're right i'm like oh okay cool i have something to compare it to as well which makes it a lot easier to see oh did i get that right which granted i didn't see that i typed uh await as away right at least that one was a little easier to find yeah and as you as you do this more and you kind of get used to some of the JavaScript conventions we like oh this is a async await you know like i've seen it a bunch of times so when i see like an async i'm like oh okay i know what that is but you know it just takes like doing it over and over and over again you start to get used to those things and you start to write them yourself when you're writing applications now i put some console logs in here they're not necessary they were like for troubleshooting purposes okay i'm just getting a parsing error for new with a comma like in front of new for new client oh can you show your screen please there we go right here you're missing an equal sign oh my god where equals your payment api and then the closed braces now let me take a second to explain what's happening here this is actually um called um object destructuring and it's a very very complicated term but basically what it's going to do is this it's going to go into uh client it's going to see if it can find a key payments api and it's going to save um what you're creating into a variable called payments api okay so it's going to see if there's something matching the same thing with client from square it's going to look look look in the square library or the square uh uh in-pm registry or whatever and see if there's something called client and then it's going to create a variable called client and save it in there and now you can use it in this file good it okay that's what that notation is it's object destructuring okay so that made sense and i'm just taking a look oh okay this is going to be something that i just got to learn how to see like i was staring at the new client thing before asking you and you're like you're missing your equals and i'm like dude i've been staring at this why did i register that i'm missing the equals i'm gonna learn it's gonna have oh i'm like missing stuff it's really annoying but you know i'm not the only one that does it and learning from other people that are dyslexic it's gonna be good yay yay um it's like taking a minute yeah so this notice there's an export here an export default so um there has to be a default export from your JavaScript file in the next in the react uh ecosystem so this one um specifically says this function is going to be your default export um and it's also gonna be an async function so there's that async order again so this is the wait yeah there's gonna be another await that pairs with that at least one that pairs with that async now the first one is we have an if check if the request method is post remember our front end it was the post request that means like a post request could be like you know you're sending information to a database and you want that database to save it but you have to send the the information that you want it to save so in the body of that post request would be the information that you want um that you want and it could be you know it has to be stringified but we did that stringification json dot stringify but this request dot method um this this standard rq um this is being passed into the handler request and the response so there's a request to uh HTTP request and there's an HTTP response so it's going to take your request and it's going to look at the method on your request which we sent in the fetch request and we remember we named it post if we go back to index js and we go here to this fetch here's our method we call the post okay we call it post so it's gonna look at that object and look at the method um the method key and see if it's post okay and so yeah that's the first thing and then why are there three equals for um require method post so yeah there's um single equals in javascript is assignment that's when you're assigning one value to another value in memory okay double equals is when you're checking to see if two things are the same but if they aren't the same type it's going to change the type of one of those things to match the other and i think it's the second to match the first i believe that's how it is might be the other way around but um uh it's basically it has uh type conversion um triple equals means it compares their value and it compares their type and they have to be both equal in order for that to be true so double equals their type doesn't have to be the same so like one can be an integer and one can be a string you can compare uh like for instance uh let's see here like let's say if i just wanted to do if uh six equals whoops equals fix all right that would come back false because yes they're both sixes but this is a string six and this is the number six or an integer okay if i did this double equals that would be true i'm getting it not getting it because then it's going to change like it would change the six to a string or change this to a number okay so in memory it would be going oh hey this is what i see those are equal true it's okay that if check is true oh that's what that triple equals mean it's it's uh the deep equals where um it doesn't do any type conversion doesn't convert uh the type it just compares them as they are to see if they're exactly equal i'm missing something so i'm trying to find what i'm missing oh okay because you said that i don't need the consul log right no you know oh and then do i need oh i need i need rest status though and rest that the two rest status yes those are very important so um what our r e s is remember there's requests and response so this is going to say uh assuming everything is happy and you get a good response it's going to return 200 and then uh j sonify the results and return the result which is this very what's stored in this variable from create payment and i i wanted to mention that remember there was two things you had to do you had to initiate a payment and you had to generate a token you also need a back end to actually process that token and that's what this back end that simple back end uh code is doing is processing that token that we got from the front end so um you know that's just to have a square API works they want to make sure double triple check and you know if uh initiate a credit card payment for instance um it checks the credit card and makes sure it's valid right and make sure any other information associated is valid and then it sends once it gets you know it gets a success and it generates a token and it sends it to the back end or wherever back end you know you want to send it to um uh and then you know that back end it needs to process the tokens you have to make some logic to process the token i get it in theory i think some of this is still the you know i'll get there i will understand the words you're saying um a token really is just uh it's just a long number and it's this token means this was a valid um this was a valid square uh transaction that just happened um it's like if if you buy something at a store sorry i got a um for my export default async function handler it says parsing error identifier handler has already been kind of moved so i can see oh you can you can go ahead and share your screen okay let me manifest another like comma yeah so parsing error identifier handler has already been declared 1530 oh up here oh because this was already here so i can delete this one right yep because this one was already here yep yeah you can only have one default okay voila and then am i done do i get a test it yes you do yay that is your reward and it it it is making a lot of sense um like looking at it i feel like i could at least figure my way rewit now i don't think i'll remember exactly how to reset it up by myself but i would at least be like okay cool i think i can read enough of it um which it is definitely getting easier as i have these oh and mootwood i know that i've been very excited about learning all this right now how's uh filming they just released a new video i saw pop up on my phone uh square oh i should check it out then yeah they just they're on their youtube channel all right i'm gonna do checking just to see if it works and glad to hear that it was great okay uh i didn't get any pop up okay let's go back unauthorized okay let's read that authentication error okay trying to make it bigger to read it all yeah hgtp header of your request was incorrect or expired the header value is expected to be in the format bearer token without quotation marks where the token is so i just need to call it bearer token instead of token oh okay i'll definitely have to check out that mootwood i can um um maybe i'll watch it to see if i can replicate this yes uh he he did he just say he i can't see the comments but did he just say he has a youtube channel where he walks through uh building a next react app uh react what payments sdk yeah it's yes he just said uh we should check the enve file and how you're importing the access token when uh initialize it is where moot sdk so that would be my enve file i named it square access token they're you're missing a c c it says access this is gonna drive me freaking bonkers like i'm looking at it welcome to software development um make sure you save the file there you go yeah all right so it's when i need to rerun that and unless it ran rerun oh yeah okay yep there we go oh yeah every time i see that use of good cast good i always think of uh Joey or uh the Hulk oh that's funny are Joey on friends okay do we have it please work continue okay huh uh oh it's up this unauthorized authentication or bear app or bear token um k-e dot js file yeah it's so that you see your back end me me me square access token is access token i got my season my s's at least this time okay okay create payment amount money just for kicks um let's go back to uh we're gonna have it our config file which isn't api no next good thing okay yeah and that's put in uh you know what i had before the env as a key above react strict mode true you're gonna put in env c uh with a colon and then open brace that one yep okay and you're gonna need a comma after the brace the last brace goodness gracious you need to tell amri i keep telling her that um do in lives right now she's gonna keep calling we'll talk later okay uh enb closed brackets comma yep and then just in there you're gonna put in square access token in the brackets yep uh i'm trying to and my putting it where it has the token information or am i putting it just the file name um what we're gonna try we're gonna try to put the token in um in state that actual numbers yes it's a long string should be okay and since this is just me doing some um oh it says oh that we may just have needed to restart the the server oh so i remember correctly then i can just do uh favor spot just in case all right and then do you need to restart or server so uh please please oh never checking continue It really likes the bearer token. Okay, so incorrect or expired. Yeah, I'm going to need to jump off here in a second. Okay. Not right now, but just. Yeah, no, you're good. I was going to say. I believe so. I'm just going to put that on my phone. I'm going to need to buy a new one
It really likes the bearer token. Okay, so incorrect or expired. Yeah, I'm going to need to jump off here in a second. Okay. Not right now, but just. Yeah, no, you're good. I was going to say. I believe so. I'm just going to put that on my phone. I'm going to need to buy a new one You know, that's not really good. But we'll move on. He asked. Am I using the sandbox token that matches the application ID that I have set in my payment form? Yeah, well, I mean, we can go back in on your dashboard. Just make sure that that's those things match up
You know, that's not really good. But we'll move on. He asked. Am I using the sandbox token that matches the application ID that I have set in my payment form? Yeah, well, I mean, we can go back in on your dashboard. Just make sure that that's those things match up And then we'll go back to the screen. I'm going to put that on my camera correctly. It was really hard to get back to the screen that showed like the sandboxes. Oh, apparently not because it's developer. square. com forward slash apps. Okay. And
And then we'll go back to the screen. I'm going to put that on my camera correctly. It was really hard to get back to the screen that showed like the sandboxes. Oh, apparently not because it's developer. square. com forward slash apps. Okay. And Okay. And. I need to sandbox token that matches my application ID. Yeah, I want to go to open. On this one. Yeah. So yeah, then scroll down. So this is sandbox. And there's your access token right there. Okay. So. Well, you guys can see this one. Because I'm learning
Okay. And. I need to sandbox token that matches my application ID. Yeah, I want to go to open. On this one. Yeah. So yeah, then scroll down. So this is sandbox. And there's your access token right there. Okay. So. Well, you guys can see this one. Because I'm learning But I know that you're normally not going to do this because. It's not what you're supposed to do. Nobody needs to know this stuff. Okay. Save. Okay. Okay. Wait. There we go. All right. Yes. Okay. Knowing me, it was a copy and paste error or something
But I know that you're normally not going to do this because. It's not what you're supposed to do. Nobody needs to know this stuff. Okay. Save. Okay. Okay. Wait. There we go. All right. Yes. Okay. Knowing me, it was a copy and paste error or something Oh, the credentials you provided were incorrect. Okay. User. underscore. Good. Pass. underscore. Good. Close. Never checking. Continue. Continue. Same here. Okay. Well. This does make it tricky. Yeah, it does. And this is a little frustrating. Yes. Yes
Oh, the credentials you provided were incorrect. Okay. User. underscore. Good. Pass. underscore. Good. Close. Never checking. Continue. Continue. Same here. Okay. Well. This does make it tricky. Yeah, it does. And this is a little frustrating. Yes. Yes Yes. Yes. And I would say, you know, a little bit about why we learn. And you know, going and looking for the errors. And I think that's why we're going to have to do this. And I think that's why we're going to have to do this. I mean, at this point, I feel like
Yes. Yes. And I would say, you know, a little bit about why we learn. And you know, going and looking for the errors. And I think that's why we're going to have to do this. And I think that's why we're going to have to do this. I mean, at this point, I feel like I have a good idea of what's going on. And maybe. Yeah, I'll double check my application ID before the doubt. I'm going to put this server really quick. Application ID is in my index file. Yeah. All right. Right here. And paste it. Yeah. Then we changed. And. And. And. And. I'm curious
I have a good idea of what's going on. And maybe. Yeah, I'll double check my application ID before the doubt. I'm going to put this server really quick. Application ID is in my index file. Yeah. All right. Right here. And paste it. Yeah. Then we changed. And. And. And. And. I'm curious And. I'm curious. I'm going to do an ending. Just to be sure. Hey. Continue. Chase. These are underscore. Good. Time. Yay. Yay. Yeah. Yeah. So we're getting a successful. Generation of the token. It looks like. But it's actually the processing of that token on the back end
And. I'm curious. I'm going to do an ending. Just to be sure. Hey. Continue. Chase. These are underscore. Good. Time. Yay. Yay. Yeah. Yeah. So we're getting a successful. Generation of the token. It looks like. But it's actually the processing of that token on the back end Where it's where we are getting some trouble. Did they have a temporary credit card I could use? Yeah. Yeah. Yeah. So we can try credit card. Let's just see if that. So what? Go to the. Yeah. Go to there. And you want to. Go. I can't remember exactly where it is. But. You go through here
Where it's where we are getting some trouble. Did they have a temporary credit card I could use? Yeah. Yeah. Yeah. So we can try credit card. Let's just see if that. So what? Go to the. Yeah. Go to there. And you want to. Go. I can't remember exactly where it is. But. You go through here You're probably. I'm going to. I'm going to. It was like 411111111111111111. I actually. Think. Oh. Whatever you want. But those ones. Okay. Oh. In that card number. All right. Let's do it in a calculator just to make sure it's not caching. And I think that can just be something greater than today
You're probably. I'm going to. I'm going to. It was like 411111111111111111. I actually. Think. Oh. Whatever you want. But those ones. Okay. Oh. In that card number. All right. Let's do it in a calculator just to make sure it's not caching. And I think that can just be something greater than today 1111460. Okay. That has to be a valid zip code. Okay. Okay. Well, didn't do anything. Is your server running? Yes. Okay. Not in sandbox. It can be whatever. Oh, in phrase zip code. But it's not even registering that we're doing anything. Okay. Yeah. I'm going to need to
1111460. Okay. That has to be a valid zip code. Okay. Okay. Well, didn't do anything. Is your server running? Yes. Okay. Not in sandbox. It can be whatever. Oh, in phrase zip code. But it's not even registering that we're doing anything. Okay. Yeah. I'm going to need to I'm going to need to jump off here. Yeah, for sure. I'll leave you hanging. But let's go. We can come back to this and, you know, finish. Finish out the last flourish. I'm clearing this air. Essentially. I'm going to work on trying to figure it out. Now I'm like
I'm going to need to jump off here. Yeah, for sure. I'll leave you hanging. But let's go. We can come back to this and, you know, finish. Finish out the last flourish. I'm clearing this air. Essentially. I'm going to work on trying to figure it out. Now I'm like Now I'm like. Maybe this is what I'm going to do for my first thing to do it on my own. And I'm going to do it. I'm going to go ahead and, you know, go ahead and do it. You know, It gets really confusing. Not understanding it all. But, yeah, Mewwood is going to be on the show too
Now I'm like. Maybe this is what I'm going to do for my first thing to do it on my own. And I'm going to do it. I'm going to go ahead and, you know, go ahead and do it. You know, It gets really confusing. Not understanding it all. But, yeah, Mewwood is going to be on the show too So, hopefully we get a figure out by then. Yeah. You can send me the stack trace. You know, from your command line. You can also. Just get that the main error message and Google that. You'll come up with some like different stack overflow. Examples of people doing authorization or bear token
So, hopefully we get a figure out by then. Yeah. You can send me the stack trace. You know, from your command line. You can also. Just get that the main error message and Google that. You'll come up with some like different stack overflow. Examples of people doing authorization or bear token And then, you know, you know, you know, you know, if people have run into those same issues before. And what they, you know, they had to do checking, like checking the environment, environment, local file. Checking your application ID. You know, checking where it's stored. All those things. Cool
And then, you know, you know, you know, you know, if people have run into those same issues before. And what they, you know, they had to do checking, like checking the environment, environment, local file. Checking your application ID. You know, checking where it's stored. All those things. Cool Cool. Cool. And yes, I do. Thank you for giving me the Slack URL. Because I need to. I like to have it. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. So many Slack's. I don't know how the everybody keeps up with all of the Slack's. In discord. And for
Cool. Cool. And yes, I do. Thank you for giving me the Slack URL. Because I need to. I like to have it. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. So many Slack's. I don't know how the everybody keeps up with all of the Slack's. In discord. And for And for. And Twitter. I LinkedIn. They multiply. They are. Well, thank you so much. I appreciate you both for tuning in. And I'll be nice through this. And. I'll post if I could figure it out. I don't know. Okay. Yeah. Okay. See ya.
And for. And Twitter. I LinkedIn. They multiply. They are. Well, thank you so much. I appreciate you both for tuning in. And I'll be nice through this. And. I'll post if I could figure it out. I don't know. Okay. Yeah. Okay. See ya.