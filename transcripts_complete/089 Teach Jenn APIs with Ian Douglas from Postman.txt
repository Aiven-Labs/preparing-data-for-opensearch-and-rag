a so-d of Teach Gen Tech. And today Ian is teaching me about APIs, because he's also from Postman. And that's about the intro you got from me as Jan your host. Ian, who are you and what are we learning about today? Hello everybody. I'm Ian. I'm a senior developer advocate at Postman Postman's an application that folks use to test APIs, like use APIs and build APIs as well. It's been around for, gosh, like a decade. We got like 20 million plus people using the software. And yeah, I get to do fun stuff like build workshops and teach people how to use Postman effectively
Postman's an application that folks use to test APIs, like use APIs and build APIs as well. It's been around for, gosh, like a decade. We got like 20 million plus people using the software. And yeah, I get to do fun stuff like build workshops and teach people how to use Postman effectively But also educate people on what the heck is an API in the first place and what kinds of different APIs are out there and things like that. Just to help on the education side of it, just to help make everybody a little bit better at what they do. Yay
But also educate people on what the heck is an API in the first place and what kinds of different APIs are out there and things like that. Just to help on the education side of it, just to help make everybody a little bit better at what they do. Yay Yay. And I love that because this is a big reason y'all that we are doing this dream today. Because for those who don't know, about two years ago, I was working for an API design spec company. Wait, API? Yeah, spec design company. That is a good way of saying it
Yay. And I love that because this is a big reason y'all that we are doing this dream today. Because for those who don't know, about two years ago, I was working for an API design spec company. Wait, API? Yeah, spec design company. That is a good way of saying it It is, I worked for a company named Stoplight and they make it. It's pretty easy to build an API with them. And I could build APIs with them, which is great. And it built documentation, which is awesome. And I have on the show, we've built APIs. Great
It is, I worked for a company named Stoplight and they make it. It's pretty easy to build an API with them. And I could build APIs with them, which is great. And it built documentation, which is awesome. And I have on the show, we've built APIs. Great Great. And I am also one of the co-organizers of the Denver API Meetup. It's actually where in the first met. And yeah, if you ask me at the parts of an API and what an API actually is and what it stands for and anything about the actual API itself, um, is what I got
Great. And I am also one of the co-organizers of the Denver API Meetup. It's actually where in the first met. And yeah, if you ask me at the parts of an API and what an API actually is and what it stands for and anything about the actual API itself, um, is what I got So I'm very excited that we are going to the basics, back to the basics, relearning it and really working towards growing our vocabulary and remembering what each of these mean. At least that's my own goal. So my hopes is other people will be able to understand it as well. And yeah, awesome
So I'm very excited that we are going to the basics, back to the basics, relearning it and really working towards growing our vocabulary and remembering what each of these mean. At least that's my own goal. So my hopes is other people will be able to understand it as well. And yeah, awesome And yeah, awesome. Well, I'm excited about our intro. I always get nervous about the intro. So I don't know why. I'm always like, I'm going to butcher them every single time. It's all good. It's all good. It's your stream. You could do what you want
And yeah, awesome. Well, I'm excited about our intro. I always get nervous about the intro. So I don't know why. I'm always like, I'm going to butcher them every single time. It's all good. It's all good. It's your stream. You could do what you want You be new, you know? That is what I, I try to work on doing. That is what I work on doing. But for some reason, it's like every time I'm like, that excitement. And then I'm like, oh, yeah, we're just, we're streaming. It's so big deal
You be new, you know? That is what I, I try to work on doing. That is what I work on doing. But for some reason, it's like every time I'm like, that excitement. And then I'm like, oh, yeah, we're just, we're streaming. It's so big deal It's so big deal. But it happens every time after I think I have like 80 screens now. So for anybody, it still happens. It still happens. All right
It's so big deal. But it happens every time after I think I have like 80 screens now. So for anybody, it still happens. It still happens. All right All right. So Ian, what is an API? What the heck is an API? So the letters API, when we talk about like, what's the, you know, if we look at this up in like a tech dictionary, what is API? I actually stand for, stands for application programming interface, which is a whole bunch of like syllables
All right. So Ian, what is an API? What the heck is an API? So the letters API, when we talk about like, what's the, you know, if we look at this up in like a tech dictionary, what is API? I actually stand for, stands for application programming interface, which is a whole bunch of like syllables What does that even mean? Like what's an application programming interface? When you think of interfaces, you could think of like plugs. When you think of programming, a lot of people are like, oh, no, this has to do with code. Like they suddenly get a little bit scared
What does that even mean? Like what's an application programming interface? When you think of interfaces, you could think of like plugs. When you think of programming, a lot of people are like, oh, no, this has to do with code. Like they suddenly get a little bit scared I think to explain as simply as possible was an API. I want to use a word abstraction. Have you ever heard abstraction? Like when it comes to programming or anything like that? Or like how to abstract an idea, abstract painting? I was like painting, painting just reminds
I think to explain as simply as possible was an API. I want to use a word abstraction. Have you ever heard abstraction? Like when it comes to programming or anything like that? Or like how to abstract an idea, abstract painting? I was like painting, painting just reminds So the idea of like an abstract painting is like it, you know, it kind of looks like a thing. But when we talk about abstraction, the example that I like to give is when, when my kids were little, we go up to the room and it'd be like, okay, well, let's take these clothes out of the laundry basket
So the idea of like an abstract painting is like it, you know, it kind of looks like a thing. But when we talk about abstraction, the example that I like to give is when, when my kids were little, we go up to the room and it'd be like, okay, well, let's take these clothes out of the laundry basket Let's fold them. Let's put them away. Let's pick up your toys, put them in a bin, put the bin in the cubby on the wall. Let's pick these books up off the floor, put them back in the bookshelf. And we call that cleaning your room. And so now when I tell you, go clean your room
Let's fold them. Let's put them away. Let's pick up your toys, put them in a bin, put the bin in the cubby on the wall. Let's pick these books up off the floor, put them back in the bookshelf. And we call that cleaning your room. And so now when I tell you, go clean your room I expect you to fold your laundry, put it away, put the toys in the bin, put the bin in the cubby, pick up the books off the floor, put them on the bookshelf. So I'm abstracting that instruction to my kids saying go clean your room. And hopefully they remember not always
I expect you to fold your laundry, put it away, put the toys in the bin, put the bin in the cubby, pick up the books off the floor, put them on the bookshelf. So I'm abstracting that instruction to my kids saying go clean your room. And hopefully they remember not always But you know, if I had like a list on the wall of like, you know, to clean your room, do the following things. That's basically what we call abstraction. When you want to use like the blender in your kitchen, there's a button on there to say, you know, blend, change the speed, blah, blah, blah
But you know, if I had like a list on the wall of like, you know, to clean your room, do the following things. That's basically what we call abstraction. When you want to use like the blender in your kitchen, there's a button on there to say, you know, blend, change the speed, blah, blah, blah That's also kind of an interface to how the blender actually works, how fast is it running? You know, is it pulsing? Is it just blending at super high speed? What speed is it blending at? It's an abstraction. It's not you in there like turning the motor
That's also kind of an interface to how the blender actually works, how fast is it running? You know, is it pulsing? Is it just blending at super high speed? What speed is it blending at? It's an abstraction. It's not you in there like turning the motor You're pushing a button to have something else do that thing for you. And so there's there's a lot of this kind of idea of abstraction all around us. When it comes to something, yeah, would you say abstraction is like what to do, but not necessarily how to do it? It could be. It could be. Yep
You're pushing a button to have something else do that thing for you. And so there's there's a lot of this kind of idea of abstraction all around us. When it comes to something, yeah, would you say abstraction is like what to do, but not necessarily how to do it? It could be. It could be. Yep It could be. Yep. Normally when normally when we talk about APIs though, we're basically saying, I want you to go do this thing. How you actually do it? That's up to you. You know, we'll get into a little bit of that. Okay. Cool
It could be. Yep. Normally when normally when we talk about APIs though, we're basically saying, I want you to go do this thing. How you actually do it? That's up to you. You know, we'll get into a little bit of that. Okay. Cool Okay. Cool. So when the when we talk about programming and APIs, there are two kinds of different APIs
Okay. Cool. So when the when we talk about programming and APIs, there are two kinds of different APIs So the first kind of API when we get into coding is what is my programming languages API
So the first kind of API when we get into coding is what is my programming languages API So if you work in Python or JavaScript or Ruby, C sharp, you know, even Java C++ and C like all the lower level languages, we're still kind of abstracting what we want that programming language to tell the computer to do
So if you work in Python or JavaScript or Ruby, C sharp, you know, even Java C++ and C like all the lower level languages, we're still kind of abstracting what we want that programming language to tell the computer to do So no matter what programming language you're writing your code in, you're basically giving the computer an instruction like go print the words, hello world in my terminal
So no matter what programming language you're writing your code in, you're basically giving the computer an instruction like go print the words, hello world in my terminal That's abstracting all the way down to machine level of the binary ones and zeros that actually tell the CPU and your computer like actually go do these things to send the instruction to video card to like print this thing out on the screen that says hello world
That's abstracting all the way down to machine level of the binary ones and zeros that actually tell the CPU and your computer like actually go do these things to send the instruction to video card to like print this thing out on the screen that says hello world And so we like we're not we're not down at the hardware level like turning the electricity on and off these wires for the ones in the zeros. The CPU does that. The CPU gets machine level code, which comes from the programming language level code
And so we like we're not we're not down at the hardware level like turning the electricity on and off these wires for the ones in the zeros. The CPU does that. The CPU gets machine level code, which comes from the programming language level code And then these programming languages are all kind of written in one another too. So for example, C++ is written in C and assembly
And then these programming languages are all kind of written in one another too. So for example, C++ is written in C and assembly Assembly, you know, goes down into the machine code of like how the C++ works, right? But then C and C++ are used to write languages like Python and Ruby and JavaScript
Assembly, you know, goes down into the machine code of like how the C++ works, right? But then C and C++ are used to write languages like Python and Ruby and JavaScript And so we, you know, we call JavaScript and Python, for example, we call those high level languages because we're not necessarily getting into all the nitty gritty of like go allocate this chunk of memory to make an array of strings
And so we, you know, we call JavaScript and Python, for example, we call those high level languages because we're not necessarily getting into all the nitty gritty of like go allocate this chunk of memory to make an array of strings We just say we want an array of strings and Python kind of tells the interpreter like, okay, these are the actual instructions to actually go do
We just say we want an array of strings and Python kind of tells the interpreter like, okay, these are the actual instructions to actually go do And so when we talk about APIs, we could be talking about what is our programming language API, which is still just an abstraction of, hey, I need an array of strings
And so when we talk about APIs, we could be talking about what is our programming language API, which is still just an abstraction of, hey, I need an array of strings That the programming language then knows, oh, I need to go allocate memory in a particular way and do a particular kind of thing in order to actually make that happen for you
That the programming language then knows, oh, I need to go allocate memory in a particular way and do a particular kind of thing in order to actually make that happen for you So when, when we get into, so that's, that's the primary thing that we talk about when we're coding, when we talk about APIs, but there's another kind of API and that's, that's where kind of postman comes in
So when, when we get into, so that's, that's the primary thing that we talk about when we're coding, when we talk about APIs, but there's another kind of API and that's, that's where kind of postman comes in And that's where I've spent a lot of my career is, you know, when we talk about, how do we get information or send information somewhere else? So for example, there are a lot of APIs out there to do things like, oh, go get the weather
And that's where I've spent a lot of my career is, you know, when we talk about, how do we get information or send information somewhere else? So for example, there are a lot of APIs out there to do things like, oh, go get the weather I've got an API that I can hit a button and it makes these, makes these lights behind me blink, you know, that's all done over APIs. And it's still just an abstraction of go make these lights blink or go get the weather in Denver. Or, you know, go find a dad joke or whatever
I've got an API that I can hit a button and it makes these, makes these lights behind me blink, you know, that's all done over APIs. And it's still just an abstraction of go make these lights blink or go get the weather in Denver. Or, you know, go find a dad joke or whatever Like there's lots of these APIs. Really quick. Everyone, like we just need to pause for a second and just look at Ian's lights because like that is the level I want to get to someday
Like there's lots of these APIs. Really quick. Everyone, like we just need to pause for a second and just look at Ian's lights because like that is the level I want to get to someday Like that is the goal of someday being able to get really cool lights like Ian's heat, like literally, since he's in my first, like, he's been on the show before quite some time ago. I think we ended up talking about Python versus JavaScript. Maybe because it was, it was when I first started that
Like that is the goal of someday being able to get really cool lights like Ian's heat, like literally, since he's in my first, like, he's been on the show before quite some time ago. I think we ended up talking about Python versus JavaScript. Maybe because it was, it was when I first started that And so ever since that, I'm like, you know, one day I want to get my light game up and you mentioned it. So it's perfect time to say so. All Ian's fault. I'm glad I can be a bad influence when it comes to, you know, visual, visual purchases
And so ever since that, I'm like, you know, one day I want to get my light game up and you mentioned it. So it's perfect time to say so. All Ian's fault. I'm glad I can be a bad influence when it comes to, you know, visual, visual purchases So, so even even the idea of like sending and receiving information, to other computers, other servers somewhere, that's still an abstraction of those instructions where I say, hey, I want to get the weather in Denver
So, so even even the idea of like sending and receiving information, to other computers, other servers somewhere, that's still an abstraction of those instructions where I say, hey, I want to get the weather in Denver There's still a list of software instructions somewhere, whether that's running on my computer or some other computer out on the internet somewhere, where I'm saying like, hey, go get me the weather for Denver. Something out there is following a list of instructions to go look up that information
There's still a list of software instructions somewhere, whether that's running on my computer or some other computer out on the internet somewhere, where I'm saying like, hey, go get me the weather for Denver. Something out there is following a list of instructions to go look up that information Some other computers actually reading sensor data and storing that somehow. All I'm doing is I'm doing an abstraction of go get the weather or go make these lights blink or whatever
Some other computers actually reading sensor data and storing that somehow. All I'm doing is I'm doing an abstraction of go get the weather or go make these lights blink or whatever Like when I hit a button on my little thing that says go blink my lights, that's a whole list of instructions and some of those instructions are, well, how many lights are there on the wall? Let me make a list of all of those
Like when I hit a button on my little thing that says go blink my lights, that's a whole list of instructions and some of those instructions are, well, how many lights are there on the wall? Let me make a list of all of those Let me go pick a random color for each of those, set the lights, send that packet of light instructions to all the panels. And then repeat all of that over and over several times. So it looks like this random flashing kind of pattern
Let me go pick a random color for each of those, set the lights, send that packet of light instructions to all the panels. And then repeat all of that over and over several times. So it looks like this random flashing kind of pattern It's all just an abstraction where I'm not in there, you know, running that, you know, with 50 times or whatever for each of the lights that I have on the wall. And doing that 50 times or however many times I want to make these lights blink
It's all just an abstraction where I'm not in there, you know, running that, you know, with 50 times or whatever for each of the lights that I have on the wall. And doing that 50 times or however many times I want to make these lights blink And so the idea of abstraction is you're, you're coming up with a high level instruction to do a bunch of low level instructions. Do I like that? And then those instructions are also being interpreted as software kind of like we talked about
And so the idea of abstraction is you're, you're coming up with a high level instruction to do a bunch of low level instructions. Do I like that? And then those instructions are also being interpreted as software kind of like we talked about So, you know, if if I'm running a little raspberry pie with a temperature sensor and I say, you know, what's the temperature in my workshop right now, that's still running a list of low level instructions of go read the hardware, go interpret that information into a temperature, send that temperature back to however Ian's calling it
So, you know, if if I'm running a little raspberry pie with a temperature sensor and I say, you know, what's the temperature in my workshop right now, that's still running a list of low level instructions of go read the hardware, go interpret that information into a temperature, send that temperature back to however Ian's calling it And then Ian gets just a number of its 68.2 degrees. I didn't know you could do that. And that is really cool because I, when I get back from this work trip next week, I should be coming back with raspberry pie to build it to do something. And I've never done it. So I'm very excited
And then Ian gets just a number of its 68.2 degrees. I didn't know you could do that. And that is really cool because I, when I get back from this work trip next week, I should be coming back with raspberry pie to build it to do something. And I've never done it. So I'm very excited And I'm probably going, I'm going to do it like that's pretty obvious. I'm excited. So that's a cool, another idea that you can do with the raspberry pie. Yay. So, so, so strictly speaking, the letters of API stand for application programming interface
And I'm probably going, I'm going to do it like that's pretty obvious. I'm excited. So that's a cool, another idea that you can do with the raspberry pie. Yay. So, so, so strictly speaking, the letters of API stand for application programming interface I like to think of it as like the A is kind of the abstraction of programming and interaction. So, but I want to be careful like the proper terminology for API is application programming interface
I like to think of it as like the A is kind of the abstraction of programming and interaction. So, but I want to be careful like the proper terminology for API is application programming interface But I sometimes think of it as like the A is abstracting things P were still programming things, but you know, the word interface sometimes sounds a little weird
But I sometimes think of it as like the A is abstracting things P were still programming things, but you know, the word interface sometimes sounds a little weird And so we can think about like how are we interacting with with something, but we're, we're abstracting it in a way that's sort of high level that we can just say, hey, go clean your room
And so we can think about like how are we interacting with with something, but we're, we're abstracting it in a way that's sort of high level that we can just say, hey, go clean your room And you know, hopefully my kid is going to follow all the instructions where the computers are, you know, generally a lot better at following the list of instructions that we give it
And you know, hopefully my kid is going to follow all the instructions where the computers are, you know, generally a lot better at following the list of instructions that we give it And so we're going to spend most of today talking about like how do we access and send information to an API where that's not necessarily like code that I'm running on my computer. And so we're going to talk about like how, how do we send stuff over the internet and so on
And so we're going to spend most of today talking about like how do we access and send information to an API where that's not necessarily like code that I'm running on my computer. And so we're going to talk about like how, how do we send stuff over the internet and so on What did you say the I was like an interaction interaction. Yeah, I like that. That's why I put it down here, you know, it's not going to. But the proper. So I want to be, I want to make sure everybody's walking away with good terminology here. It's application programming interface
What did you say the I was like an interaction interaction. Yeah, I like that. That's why I put it down here, you know, it's not going to. But the proper. So I want to be, I want to make sure everybody's walking away with good terminology here. It's application programming interface But I like to think me personally, I like to think of the A is abstraction just because that helps me realize like, oh, I'm taking a really high level instruction and, you know, somebody else's handling the low level instructions for that
But I like to think me personally, I like to think of the A is abstraction just because that helps me realize like, oh, I'm taking a really high level instruction and, you know, somebody else's handling the low level instructions for that So we're going to spend most of our session today talking about, you know, how do we communicate with these APIs. What does that actually mean because it's a little bit different from like writing Python and then writing the Python interpreter
So we're going to spend most of our session today talking about, you know, how do we communicate with these APIs. What does that actually mean because it's a little bit different from like writing Python and then writing the Python interpreter When we talk about APIs, there are different ways that we can send that information over the internet to actually go communicate with these servers to do different kinds of things. Yes, and we're going to kind of break that down bit by bit
When we talk about APIs, there are different ways that we can send that information over the internet to actually go communicate with these servers to do different kinds of things. Yes, and we're going to kind of break that down bit by bit Really quick, y'all, something that is also really good to know is that Ian used to be a instructor at Tori, Tori is. That's what it was called, right? I always forget. Are you still there at all doing anything or. I'm, I'm mentor for the students
Really quick, y'all, something that is also really good to know is that Ian used to be a instructor at Tori, Tori is. That's what it was called, right? I always forget. Are you still there at all doing anything or. I'm, I'm mentor for the students I still help a lot with career development and like interview preparation and things like that resume reviews. That sort of thing
I still help a lot with career development and like interview preparation and things like that resume reviews. That sort of thing That sort of thing. And that's something that Ian is amazing at and really helped me realize a huge missing part on mine, which y'all for those who may not realize I was job hunting for a very, very, very, very, very long time over a year before I got my job at Ivan
That sort of thing. And that's something that Ian is amazing at and really helped me realize a huge missing part on mine, which y'all for those who may not realize I was job hunting for a very, very, very, very, very long time over a year before I got my job at Ivan And this was Ian caught the mistake that really helped. So I'm posting an Ian's Twitter. Yeah, like you can there's so much to go to go follow him on. On Twitch, you can do a shadow. Yeah, I try to use the same username, Ian Douglas 736. Okay
And this was Ian caught the mistake that really helped. So I'm posting an Ian's Twitter. Yeah, like you can there's so much to go to go follow him on. On Twitch, you can do a shadow. Yeah, I try to use the same username, Ian Douglas 736. Okay Okay. Twitch, kick, LinkedIn, Twitter, like all those platforms, Instagram, all kind of stuff. So Sundays, I live stream about like career preparation, interview preparation, Tuesdays, like Tuesday night, I tend to do like life coding of some kind
Okay. Twitch, kick, LinkedIn, Twitter, like all those platforms, Instagram, all kind of stuff. So Sundays, I live stream about like career preparation, interview preparation, Tuesdays, like Tuesday night, I tend to do like life coding of some kind I'm going to be building up chatbots and so on, which use a lot of APIs. And then Thursdays, I tend to get a little more crafty lately. I've been getting into like airbrushing and stuff like that. So I've got like some cool 3D printed dragons that I'm airbrushing. So I'll be doing that on Thursday
I'm going to be building up chatbots and so on, which use a lot of APIs. And then Thursdays, I tend to get a little more crafty lately. I've been getting into like airbrushing and stuff like that. So I've got like some cool 3D printed dragons that I'm airbrushing. So I'll be doing that on Thursday So I do, I do kind of a variety of things. But it tends to stay around like a technical nature. Yeah. Okay, let's see if you remember. Do you remember the mistake that my resume had? I'm trying to remember if it was how the PDF file was generated that it wasn't like pulling the text in properly
So I do, I do kind of a variety of things. But it tends to stay around like a technical nature. Yeah. Okay, let's see if you remember. Do you remember the mistake that my resume had? I'm trying to remember if it was how the PDF file was generated that it wasn't like pulling the text in properly That was it. Remember off it. Was it? Yeah. So basically, all what happened is I generated my resume with Canva. It looked gorgeous. I exported it into a PDF. It still looked gorgeous. It was fine
That was it. Remember off it. Was it? Yeah. So basically, all what happened is I generated my resume with Canva. It looked gorgeous. I exported it into a PDF. It still looked gorgeous. It was fine It was fine. But when Ian got it, he just went to like copy and paste something and there was spacing between all of them. And like, like, and it wasn't necessarily like a space between every single letter. It was like half of the word
It was fine. But when Ian got it, he just went to like copy and paste something and there was spacing between all of them. And like, like, and it wasn't necessarily like a space between every single letter. It was like half of the word So it would be like if we're talking about APIs, it would be app. And then a space and then the L and then a space and then Ication. And it wasn't something that was obvious. Just looking at it
So it would be like if we're talking about APIs, it would be app. And then a space and then the L and then a space and then Ication. And it wasn't something that was obvious. Just looking at it Just looking at it. It was something that he found copy and pasting it and something that I guess happens to a lot of people. So I catch it. I catch it from a lot of a lot of folks that asked for resume reviews
Just looking at it. It was something that he found copy and pasting it and something that I guess happens to a lot of people. So I catch it. I catch it from a lot of a lot of folks that asked for resume reviews Like, well, that's one of the first things that I look at is like what made that PDF file. And then we can kind of debug from there. Yes, Lex. Yes
Like, well, that's one of the first things that I look at is like what made that PDF file. And then we can kind of debug from there. Yes, Lex. Yes Yes, Lex. Yes. I would say at least for this reference, I know how I had to and even when I was trying to copy and paste everything from Canva, it wouldn't go into my Google sheet very well. So I actually rewrote the most boring looking resume ever
Yes, Lex. Yes. I would say at least for this reference, I know how I had to and even when I was trying to copy and paste everything from Canva, it wouldn't go into my Google sheet very well. So I actually rewrote the most boring looking resume ever But I was like, you know what? If it's readable, it's there. Well, the thing the thing with resumes is it's got to get past three things
But I was like, you know what? If it's readable, it's there. Well, the thing the thing with resumes is it's got to get past three things The first one is the automated, you know, applicant tracking system, which is actually what's scraping all the words and putting that in the database so that when the HR people say we're looking for a JavaScript programmer that your resume is going to pop up
The first one is the automated, you know, applicant tracking system, which is actually what's scraping all the words and putting that in the database so that when the HR people say we're looking for a JavaScript programmer that your resume is going to pop up The second thing that it has to pass is the HR person has to look at and go, okay, I can actually read this. It's organized well. And then it goes to a hiring manager or a technical manager in my case for doing programming and so on
The second thing that it has to pass is the HR person has to look at and go, okay, I can actually read this. It's organized well. And then it goes to a hiring manager or a technical manager in my case for doing programming and so on Of, you know, do they find what they're looking for quickly and easily as well? So generally the resume is about like what's the value I bring to the company
Of, you know, do they find what they're looking for quickly and easily as well? So generally the resume is about like what's the value I bring to the company But you've got to present it in a way that's going to get past the applicant tracking system as well as HR as well as the hiring manager in order to get that phone call. That's a whole other screen we can do on career prep
But you've got to present it in a way that's going to get past the applicant tracking system as well as HR as well as the hiring manager in order to get that phone call. That's a whole other screen we can do on career prep But that's that's the kind of stuff that I do on Sundays is help people understand like how to build resumes, what goes into a resume, how to talk about the value you bring. And 3D printing on Thursdays and then Tuesdays, I do coding
But that's that's the kind of stuff that I do on Sundays is help people understand like how to build resumes, what goes into a resume, how to talk about the value you bring. And 3D printing on Thursdays and then Tuesdays, I do coding So later tonight I'll be I'll be doing some live coding and working on some chatbot stuff. Yeah, and lots of cool stuff. Yeah, I do I try to dabble in all the things. What I mean, for me, it's like I want to go learn something and then teach it to somebody else
So later tonight I'll be I'll be doing some live coding and working on some chatbot stuff. Yeah, and lots of cool stuff. Yeah, I do I try to dabble in all the things. What I mean, for me, it's like I want to go learn something and then teach it to somebody else I get more satisfaction of the fact that I'm teaching you about APIs now you're going to go do something cool with APIs than the fact that I know how to do something with an API. I get a kick out of like teaching that to other people and watching them go succeed. That's what drives me
I get more satisfaction of the fact that I'm teaching you about APIs now you're going to go do something cool with APIs than the fact that I know how to do something with an API. I get a kick out of like teaching that to other people and watching them go succeed. That's what drives me That's my intrinsic motivation. So, you know, if I can fumble around with air brushing somebody picks up a tip that they never thought about before and then they go do something cool with air brushing. It's like sweet. No, I had like a tiny little piece to play in that
That's my intrinsic motivation. So, you know, if I can fumble around with air brushing somebody picks up a tip that they never thought about before and then they go do something cool with air brushing. It's like sweet. No, I had like a tiny little piece to play in that Yes, yes, the cool lights you've got behind you now. It's like I had a little part to play in like you did
Yes, yes, the cool lights you've got behind you now. It's like I had a little part to play in like you did You did like in complimented my lights when I turned them on because you know, of course I was running late and I was like, yeah, I almost forgot to tell you that you influenced my light purchase. So that is exciting. Yes. Okay, so let's get into APIs. So this, this is a lot of what postman does
You did like in complimented my lights when I turned them on because you know, of course I was running late and I was like, yeah, I almost forgot to tell you that you influenced my light purchase. So that is exciting. Yes. Okay, so let's get into APIs. So this, this is a lot of what postman does This is a lot of like the workshops that I do, a lot of the conference talks and going to meetups like the API meetup in Denver and just helping educate people on like what are the different kinds of APIs and then how do we communicate with those
This is a lot of like the workshops that I do, a lot of the conference talks and going to meetups like the API meetup in Denver and just helping educate people on like what are the different kinds of APIs and then how do we communicate with those So what I'd like to do is I want to talk about kind of the most popular type of API, but there are different kinds of APIs about and these are really how do we communicate with these other servers on the internet. That postman, we talk a lot about how API is kind of run the world
So what I'd like to do is I want to talk about kind of the most popular type of API, but there are different kinds of APIs about and these are really how do we communicate with these other servers on the internet. That postman, we talk a lot about how API is kind of run the world When you think about what's happening on your phone, like my mobile phone, for example, like every app on here is connecting over the internet to go get information. So whether I'm like looking at the weather, pulling up my calendar, checking my email
When you think about what's happening on your phone, like my mobile phone, for example, like every app on here is connecting over the internet to go get information. So whether I'm like looking at the weather, pulling up my calendar, checking my email So I'm making like API calls to some server somewhere to like send and retrieve data. And so there's there's this the most popular type of API that we talk about is called rest and rest was actually developed back in like the 2000 era
So I'm making like API calls to some server somewhere to like send and retrieve data. And so there's there's this the most popular type of API that we talk about is called rest and rest was actually developed back in like the 2000 era To back up a little bit, a lot of how we communicate over the internet, if you ever look at the browser address bar, you'll see like HTTP or HTTPS more more recently, you're going to see HTTPS everywhere where the S just means it's secured. But HTTP stands for hypertext transport protocol
To back up a little bit, a lot of how we communicate over the internet, if you ever look at the browser address bar, you'll see like HTTP or HTTPS more more recently, you're going to see HTTPS everywhere where the S just means it's secured. But HTTP stands for hypertext transport protocol And we kind of have to talk about this a tiny bit before we get into rest. So hypertext transfer protocol. And this is basically how do we how do we send, you know, these blocks of text information for like a web page. And that's HTTP
And we kind of have to talk about this a tiny bit before we get into rest. So hypertext transfer protocol. And this is basically how do we how do we send, you know, these blocks of text information for like a web page. And that's HTTP And that's HTTP. With HTTP somebody came up with the idea of okay, well, how are we going to send and receive that information to where it's not like a web page in a browser, but can I just get the computers to talk over HTTP. And so somebody came up with the idea of rest
And that's HTTP. With HTTP somebody came up with the idea of okay, well, how are we going to send and receive that information to where it's not like a web page in a browser, but can I just get the computers to talk over HTTP. And so somebody came up with the idea of rest And the and the reason is with HTTP the way that the protocol is made. And it's kind of this communication protocol. It doesn't like when I when I contact a web server saying hey go get me, you know, e and Douglas calm as a website. That server doesn't remember who I am
And the and the reason is with HTTP the way that the protocol is made. And it's kind of this communication protocol. It doesn't like when I when I contact a web server saying hey go get me, you know, e and Douglas calm as a website. That server doesn't remember who I am Like these cookies and things like that to say like hey, this is who I this is who I was last time. This is who I am again. But inherently within HTTP there's no recognition. And so we call that a stateless protocol because it doesn't remember the state of who you are
Like these cookies and things like that to say like hey, this is who I this is who I was last time. This is who I am again. But inherently within HTTP there's no recognition. And so we call that a stateless protocol because it doesn't remember the state of who you are And so like for example, if you if you wrote some code that connected to a database, you authenticate to that database. And then that connection stays open. And as long as that connection stays open, you can do all kinds of things back and forth with your database because it knows who you are
And so like for example, if you if you wrote some code that connected to a database, you authenticate to that database. And then that connection stays open. And as long as that connection stays open, you can do all kinds of things back and forth with your database because it knows who you are But with HTTP it's stateless because every time you connect to it, you say this is who I am. This is the information I want to use you that information and then you close that connection
But with HTTP it's stateless because every time you connect to it, you say this is who I am. This is the information I want to use you that information and then you close that connection Well, the next time you want to talk to that server, you got to go through this whole like magic handshake all over again of high I'm Ian. This is these are my credentials. Can I please have this information and then it hangs up again
Well, the next time you want to talk to that server, you got to go through this whole like magic handshake all over again of high I'm Ian. This is these are my credentials. Can I please have this information and then it hangs up again And so the idea of coming up with rest rest actually stands for a representational state transfer. So the RE is represent representational. And then the S is state and then T is transfer. And this is to kind of make kind of like a state full sort of feeling because of HTTP is stateless. Okay
And so the idea of coming up with rest rest actually stands for a representational state transfer. So the RE is represent representational. And then the S is state and then T is transfer. And this is to kind of make kind of like a state full sort of feeling because of HTTP is stateless. Okay Okay. And you said earlier for HTTP it's stateless what? It's a stateless protocol which which basically means it doesn't remember from one connection to the next who you are because you're just coming from some IP address
Okay. And you said earlier for HTTP it's stateless what? It's a stateless protocol which which basically means it doesn't remember from one connection to the next who you are because you're just coming from some IP address It doesn't know who you are like there's no there's no inherent trust in the protocol itself. The protocol is pretty dumb. It's like making a phone call and I call and I say, you know, like maybe I know your phone number. So I call and say hi Jen. I'm Ian. I'm this developer from Postman
It doesn't know who you are like there's no there's no inherent trust in the protocol itself. The protocol is pretty dumb. It's like making a phone call and I call and I say, you know, like maybe I know your phone number. So I call and say hi Jen. I'm Ian. I'm this developer from Postman I got a question for you. Can you give me some information? Okay, cool and we hang up. The next time I call. So imagine like way way back in the day. I don't know if you're old enough to not remember a caller. Yes, I do. I do
I got a question for you. Can you give me some information? Okay, cool and we hang up. The next time I call. So imagine like way way back in the day. I don't know if you're old enough to not remember a caller. Yes, I do. I do Yes, I do. I do. We're back in the day the phone would bring in you just pick up the phone because you didn't know who was it was calling. Or as my family would say, hi, thank you for calling the genoc residence
Yes, I do. I do. We're back in the day the phone would bring in you just pick up the phone because you didn't know who was it was calling. Or as my family would say, hi, thank you for calling the genoc residence How may I help you? Yeah, that is how my parents told me to answer the phone when I was like six. Right, but that's that's but that's also kind of how these protocols work. Like the server is going to answer and then there's this little like handshake chit chat back and forth of this is who I am
How may I help you? Yeah, that is how my parents told me to answer the phone when I was like six. Right, but that's that's but that's also kind of how these protocols work. Like the server is going to answer and then there's this little like handshake chit chat back and forth of this is who I am This is who I am. Here in my credentials. Okay, I accept those credentials like there's this whole back and forth thing at a really low level. And so back in the day, there was no caller ID you just call and I would have to explain all over again. Hi, Jen. I'm Ian. I'm this developer from Postman
This is who I am. Here in my credentials. Okay, I accept those credentials like there's this whole back and forth thing at a really low level. And so back in the day, there was no caller ID you just call and I would have to explain all over again. Hi, Jen. I'm Ian. I'm this developer from Postman Now you as a human you'd be like, oh, yeah, I remember you you just called me a minute ago. Right, but but the computers are dumb. HTTP is kind of dumb in that sense
Now you as a human you'd be like, oh, yeah, I remember you you just called me a minute ago. Right, but but the computers are dumb. HTTP is kind of dumb in that sense It doesn't remember who you are because there's there's no there's no kind of like a caller ID kind of thing of like you're just coming in from an IP address. And so it doesn't remember who you are. And so that's why we call it a stateless protocol
It doesn't remember who you are because there's there's no there's no kind of like a caller ID kind of thing of like you're just coming in from an IP address. And so it doesn't remember who you are. And so that's why we call it a stateless protocol And so then we've got to go through this whole handshake every time I connect saying this is who I am and you know you check my credentials and say, okay, you're you're allowed to ask me, you know, for certain kinds of information I can say cool
And so then we've got to go through this whole handshake every time I connect saying this is who I am and you know you check my credentials and say, okay, you're you're allowed to ask me, you know, for certain kinds of information I can say cool What's your favorite color and you tell me that number like, all right, cool got that written it down. Thank you. And we hang up and then I have to call you back. But by the way, what's your favorite, you know, boy band or something from the 90s and you tell me that okay, cool
What's your favorite color and you tell me that number like, all right, cool got that written it down. Thank you. And we hang up and then I have to call you back. But by the way, what's your favorite, you know, boy band or something from the 90s and you tell me that okay, cool And we hang up and I call you back and what's your favorite food and you tell me that and okay, cool. And then we hang up. But every time I call you, I have to go through the whole high I'm Ian, I work at Postman. We've got to do that handshake every single time
And we hang up and I call you back and what's your favorite food and you tell me that and okay, cool. And then we hang up. But every time I call you, I have to go through the whole high I'm Ian, I work at Postman. We've got to do that handshake every single time To kind of mimic the state of, you know, this is this is who I am and so on. So HTTP is kind of a dumb protocol. It doesn't remember this state
To kind of mimic the state of, you know, this is this is who I am and so on. So HTTP is kind of a dumb protocol. It doesn't remember this state And so the idea of rest is we wanted to kind of add a layer of state on top of HTTP where we can kind of pretend that we know what you're talking about what it is you're trying to do. So when when we fetch a web page, for example, you've got like the domain name like Google.com
And so the idea of rest is we wanted to kind of add a layer of state on top of HTTP where we can kind of pretend that we know what you're talking about what it is you're trying to do. So when when we fetch a web page, for example, you've got like the domain name like Google.comcom. But then you've got the path after that like slash something slash something dot HTML or whatever. And the rest of that path is what we call the resource. And that resource is something that we're trying to interact with
com. But then you've got the path after that like slash something slash something dot HTML or whatever. And the rest of that path is what we call the resource. And that resource is something that we're trying to interact with And so the idea with rest is we use that path where you might have like an ID value of I want to go get, you know, user number 15 or I want to go get the weather for Denver. And so those components are going to be part of the overall URL that we're trying to interact with
And so the idea with rest is we use that path where you might have like an ID value of I want to go get, you know, user number 15 or I want to go get the weather for Denver. And so those components are going to be part of the overall URL that we're trying to interact with And so the idea of rest is that we're we're using a combination of that path as this is the resource that I want to interact with to kind of mimic a state of hey, you know who I am and but under the hood, we still have to go through this whole handshake of high I'm Ian, I work at Postman, you know, here's my credentials and all this kind of stuff
And so the idea of rest is that we're we're using a combination of that path as this is the resource that I want to interact with to kind of mimic a state of hey, you know who I am and but under the hood, we still have to go through this whole handshake of high I'm Ian, I work at Postman, you know, here's my credentials and all this kind of stuff Really quick something that is that wow words, Jen words. I'm going to write it out because I don't know how to verbalize. No worries, no worries. And then good tag. I can write my own domain name. So you were talking about how it calls this resource
Really quick something that is that wow words, Jen words. I'm going to write it out because I don't know how to verbalize. No worries, no worries. And then good tag. I can write my own domain name. So you were talking about how it calls this resource And the reason I'm showing both of these y'all is again, if you haven't caught on, I was taught from shared hosting world. There was not as much out there in the world as there I thought that I found out there is and that has caused me to go, wait, you're saying this, but is this the same
And the reason I'm showing both of these y'all is again, if you haven't caught on, I was taught from shared hosting world. There was not as much out there in the world as there I thought that I found out there is and that has caused me to go, wait, you're saying this, but is this the same Because from what I understand is the forward slash blog in this example, that would be the resource and that is could be a folder or a file within. Within the server, yeah, within the server, where blog dot could be the same thing or it's specifically a subdomain that could point to anything
Because from what I understand is the forward slash blog in this example, that would be the resource and that is could be a folder or a file within. Within the server, yeah, within the server, where blog dot could be the same thing or it's specifically a subdomain that could point to anything So the blog dot is what we call a sub domain on your teach gen tech.com domain name so teach and tech.com is your domain name. The dot com is what we call a top level domain. And so we kind of break them out right to left. So dot com is the top level domain
So the blog dot is what we call a sub domain on your teach gen tech.com domain name so teach and tech.com is your domain name. The dot com is what we call a top level domain. And so we kind of break them out right to left. So dot com is the top level domain And then it's your domain after that, which is teach gen tech and then anything be, you know, to the left of that becomes a sub domain. That's a whole other thing we can do that. Yeah, that will be that will be important to kind of go through with with the API's, but the slash blog is the resource
And then it's your domain after that, which is teach gen tech and then anything be, you know, to the left of that becomes a sub domain. That's a whole other thing we can do that. Yeah, that will be that will be important to kind of go through with with the API's, but the slash blog is the resource But when you call just blog dot teach gen tech.com, that's still asking the server like, hey, I want to get a resource at this path. In this case, it would just be slash at the end. And so you're just saying like, hey, I need to go get the resource found at blog. teach gen.com slash
But when you call just blog dot teach gen tech.com, that's still asking the server like, hey, I want to get a resource at this path. In this case, it would just be slash at the end. And so you're just saying like, hey, I need to go get the resource found at blog. teach gen.com slashcom slash. And then it's up to the server to try to figure out is that a resource I can even give you, you know, or do I give you a 404 error or do I have to ask you for credentials, you know, things like that. So when we
com slash. And then it's up to the server to try to figure out is that a resource I can even give you, you know, or do I give you a 404 error or do I have to ask you for credentials, you know, things like that. So when we So when we. So the resource that you're interacting with on the on the first line teach gen tech.com slash blog slash blog is the resource. So it's a my random notes area. No worries. So it's using. So it's using it's using that path as this is the resource that I want to interact with
So when we. So the resource that you're interacting with on the on the first line teach gen tech.com slash blog slash blog is the resource. So it's a my random notes area. No worries. So it's using. So it's using it's using that path as this is the resource that I want to interact with Now, when you pull this up in a browser. Excuse me. When you when you put this in the address bar of your browser, the browser saying, okay, I need to go fetch this. And so HTTP has a number of methods that it can operate on, which is how it's sort of sending and receiving information
Now, when you pull this up in a browser. Excuse me. When you when you put this in the address bar of your browser, the browser saying, okay, I need to go fetch this. And so HTTP has a number of methods that it can operate on, which is how it's sort of sending and receiving information And when we connect to a server saying go go fetch this resource. We're saying, I want to go get this resource. And so there's an HTTP method called get
And when we connect to a server saying go go fetch this resource. We're saying, I want to go get this resource. And so there's an HTTP method called get And so when if we were to actually look at the low level, like what actually gets transferred to the server, the first word that gets transmitted is the word get. And we say, I want to get teach gen tech.com slash blog. And so we've got these HTTP methods
And so when if we were to actually look at the low level, like what actually gets transferred to the server, the first word that gets transmitted is the word get. And we say, I want to get teach gen tech.com slash blog. And so we've got these HTTP methods And we're going to talk about five of them. There are five most common ones. There are others, but they're not going to be there. They're very, they're not as readily used by people who do programming. There are a lot of different ones out there
And we're going to talk about five of them. There are five most common ones. There are others, but they're not going to be there. They're very, they're not as readily used by people who do programming. There are a lot of different ones out there But we're just going to talk about the five most common ones. And be by far the most common one that we're going to interact with is just a get where I'm saying I want to get some information
But we're just going to talk about the five most common ones. And be by far the most common one that we're going to interact with is just a get where I'm saying I want to get some information So for the longest time since HTTP was created, get was the very first method in the HTTP protocol of I want to get some information from the server. Okay. And so we use this for what we call fetching of data. So get fetch, you know, it's all kind of the same thing
So for the longest time since HTTP was created, get was the very first method in the HTTP protocol of I want to get some information from the server. Okay. And so we use this for what we call fetching of data. So get fetch, you know, it's all kind of the same thing Like you're going to gather something. So we use the word get the second one that was created back in the day was post, which is basically I want to I want to send some information to the server. And so get is where we're fetching information post is where we're sending information
Like you're going to gather something. So we use the word get the second one that was created back in the day was post, which is basically I want to I want to send some information to the server. And so get is where we're fetching information post is where we're sending information In early HTTP days, if you had like a form that you were filling out, like on a webpage where you're filling in all the different fields and you click a submit button, that was being sent over a post operation
In early HTTP days, if you had like a form that you were filling out, like on a webpage where you're filling in all the different fields and you click a submit button, that was being sent over a post operation So the browser kind of behind the scenes knows how to do a post, but when you type an address, like a like a URL in the address bar, that's only ever going to do a get. So browsers were kind of dumb. They could only do it get in a post
So the browser kind of behind the scenes knows how to do a post, but when you type an address, like a like a URL in the address bar, that's only ever going to do a get. So browsers were kind of dumb. They could only do it get in a post Once we started getting into JavaScript, then JavaScript had access to some of these other methods that we're going to talk about and sort of what they're used for
Once we started getting into JavaScript, then JavaScript had access to some of these other methods that we're going to talk about and sort of what they're used for But this is where the rest and the rest full API kind of adopted these HTTP methods saying, I want to use these methods on these resources. So now I don't need a browser to do this stuff anymore
But this is where the rest and the rest full API kind of adopted these HTTP methods saying, I want to use these methods on these resources. So now I don't need a browser to do this stuff anymore I want to use a combination of the HTTP method and the path of the resource that you're trying to interact with. So in this case, slash blog, I want to get slash blog. And we could make that an API call to say go get that information
I want to use a combination of the HTTP method and the path of the resource that you're trying to interact with. So in this case, slash blog, I want to get slash blog. And we could make that an API call to say go get that information If you have if you've used WordPress, like a very default installation of WordPress as a blog engine, when you make a blog post, it would have like slash blog slash one. And that number one is like your blog article number one
If you have if you've used WordPress, like a very default installation of WordPress as a blog engine, when you make a blog post, it would have like slash blog slash one. And that number one is like your blog article number one Well, when you pull that up on a browser and you send that to the server, the server is like, okay, I need to go fetch blog article number one. And it returns all of the HTML and so on
Well, when you pull that up on a browser and you send that to the server, the server is like, okay, I need to go fetch blog article number one. And it returns all of the HTML and so on But when we call that sort of resource from an API, we're saying, hey, I just want you to go get whatever the data is there for resource number one from blog. And so rest is using that path of slash blog slash one as the state of this is the resource that I want to go interact with
But when we call that sort of resource from an API, we're saying, hey, I just want you to go get whatever the data is there for resource number one from blog. And so rest is using that path of slash blog slash one as the state of this is the resource that I want to go interact with And then it looks at the HTTP method for how we want to interact with that thing. Do I want to get it? Do I want to post, you know, a slash blog? Do I want to, you know, delete that blog entry? So there's all these other methods that we're going to talk about
And then it looks at the HTTP method for how we want to interact with that thing. Do I want to get it? Do I want to post, you know, a slash blog? Do I want to, you know, delete that blog entry? So there's all these other methods that we're going to talk about But they will interact with the path of your URL. What, you know,iem and b nyt co weet this. be a proper way of saying it is you it would find a resource to interact with via the domain path. So I would change two words in here
But they will interact with the path of your URL. What, you know,iem and b nyt co weet this. be a proper way of saying it is you it would find a resource to interact with via the domain path. So I would change two words in here I would change the word find to be we want to identify the resource because finding implies that we're trying to get something but we might be trying to manipulate what's already there. So we're just we're using that path to identify the resource that we want to interact with
I would change the word find to be we want to identify the resource because finding implies that we're trying to get something but we might be trying to manipulate what's already there. So we're just we're using that path to identify the resource that we want to interact with And then I would change the word domain to be um URI. So there's URL which is everything the protocol the domain name and the path. But when we talk about just the path of slash blog slash one that's what we call the URI. It's a universal resource identifier where URL is universal resource locator
And then I would change the word domain to be um URI. So there's URL which is everything the protocol the domain name and the path. But when we talk about just the path of slash blog slash one that's what we call the URI. It's a universal resource identifier where URL is universal resource locator The identifier is so just I would just write in the URI. Yeah. Um but I am going to put you know a universal resource identifier. We are instead of locator locates. That makes sense because I'm uh okay cool cool cool thank you. So yep no problem
The identifier is so just I would just write in the URI. Yeah. Um but I am going to put you know a universal resource identifier. We are instead of locator locates. That makes sense because I'm uh okay cool cool cool thank you. So yep no problem So yep no problem. So the so rest is it was a very rigid set of rules like this is this is exactly how we're going to make this sort of rest API thing happen. It has to follow these exact rules. Well as soon as you tell a programmer you have to follow these rules
So yep no problem. So the so rest is it was a very rigid set of rules like this is this is exactly how we're going to make this sort of rest API thing happen. It has to follow these exact rules. Well as soon as you tell a programmer you have to follow these rules Every program is like uh I want a little bit of wiggle room. I want to kind of do it my way. Um and so people are like well do we have to do it exactly that way? Like can we have a little bit of flexibility here? And so around 2005 somebody actually proposed well let's just call this rest full
Every program is like uh I want a little bit of wiggle room. I want to kind of do it my way. Um and so people are like well do we have to do it exactly that way? Like can we have a little bit of flexibility here? And so around 2005 somebody actually proposed well let's just call this rest full So it's not it's not strict rest. It's a restful API. So it's still kind of following the theme of using these HTTP methods as well as the the URI path to identify our resource in order to interact with that resource
So it's not it's not strict rest. It's a restful API. So it's still kind of following the theme of using these HTTP methods as well as the the URI path to identify our resource in order to interact with that resource But we're not holding very super rigidly to this set of rules that was proposed around the 2000 year. 2005-ish
But we're not holding very super rigidly to this set of rules that was proposed around the 2000 year. 2005-ish And I am writing down dates and for everyone watching a big reason why I'm also writing down dates is again I'm learning things out of context and trying to understand things with other contexts I know and part of when I worked at stoplight it was like learning about like open API and things like that
And I am writing down dates and for everyone watching a big reason why I'm also writing down dates is again I'm learning things out of context and trying to understand things with other contexts I know and part of when I worked at stoplight it was like learning about like open API and things like that I don't want to go down that rabbit hole but that is why I'm like okay eventually I'm going to have a timeline and connect all of these things at some points. Okay so uh 2005-ish we wanted some flexibility and that flexibility is where we came up with restful API
I don't want to go down that rabbit hole but that is why I'm like okay eventually I'm going to have a timeline and connect all of these things at some points. Okay so uh 2005-ish we wanted some flexibility and that flexibility is where we came up with restful API So in modern days today when you hear somebody talk about a rest API they really mean they're doing it restful. Very very few places are actually very rigidly holding to the original rest API specification. Everybody's kind of doing restful
So in modern days today when you hear somebody talk about a rest API they really mean they're doing it restful. Very very few places are actually very rigidly holding to the original rest API specification. Everybody's kind of doing restful I used to joke at one job that I used to call our API are insomnia API because it wasn't very restful
I used to joke at one job that I used to call our API are insomnia API because it wasn't very restful I was thinking you're trying to conform to even even a restful idea of what an API was but we were like really mangling it at the time and so I joked internally that we were calling it our insomnia API it wasn't restful
I was thinking you're trying to conform to even even a restful idea of what an API was but we were like really mangling it at the time and so I joked internally that we were calling it our insomnia API it wasn't restful So this is where the idea of restful came about and because of this flexibility it made this kind of API access between servers extremely popular and to this day by far if you're interacting with an API where you're like sending a retreating data over the internet chances are really really good it's going to be a restful API
So this is where the idea of restful came about and because of this flexibility it made this kind of API access between servers extremely popular and to this day by far if you're interacting with an API where you're like sending a retreating data over the internet chances are really really good it's going to be a restful API Cool. Okay so I want to recap really quick because I feel like I'm getting it but at the same time I'm like wait a minute what so when we were talking about rest APIs they were only using HTTP protocol or HTTP protocol is saying protocol twice like ATM machine
Cool. Okay so I want to recap really quick because I feel like I'm getting it but at the same time I'm like wait a minute what so when we were talking about rest APIs they were only using HTTP protocol or HTTP protocol is saying protocol twice like ATM machine But for some reason it makes sense saying that is a protocol so because it was like hey if we just do it based off this regular protocol it's stateless meaning that it's never going to remember anything we have to reauthenticate every time it's going to take forever in a day and there's not enough it's going to take forever so we're not going to do it
But for some reason it makes sense saying that is a protocol so because it was like hey if we just do it based off this regular protocol it's stateless meaning that it's never going to remember anything we have to reauthenticate every time it's going to take forever in a day and there's not enough it's going to take forever so we're not going to do it So then they were like yo let's make representational state transfer and so it still is it still using it still uses HTTP but instead of it having to reauthenticate every time it is identifying the resource it wants to interact with
So then they were like yo let's make representational state transfer and so it still is it still using it still uses HTTP but instead of it having to reauthenticate every time it is identifying the resource it wants to interact with No it still has it still has to do that handshake every time it connects. Okay
No it still has it still has to do that handshake every time it connects. Okay The idea of state is really like what is it that we're trying to manipulate so when we think of like I want Python or JavaScript or whatever to to manipulate or connect to a database and interact with that database you authenticate one time and you just have you've got that open pipe to the database and you can just manipulate whatever you want as long as you're allowed to with the idea of HTTP is that you because by its very nature it makes a connection you send like I send a request you send me a response and then we hang up
The idea of state is really like what is it that we're trying to manipulate so when we think of like I want Python or JavaScript or whatever to to manipulate or connect to a database and interact with that database you authenticate one time and you just have you've got that open pipe to the database and you can just manipulate whatever you want as long as you're allowed to with the idea of HTTP is that you because by its very nature it makes a connection you send like I send a request you send me a response and then we hang up The next time I connect we've got to you know you've got to make sure that I'm still allowed because I'm just showing up from some IP address you don't necessarily know who I am. Right
The next time I connect we've got to you know you've got to make sure that I'm still allowed because I'm just showing up from some IP address you don't necessarily know who I am. Right And this is why this is why we came up with things like cookies and stuff like that so even on a web page for example when you say I want to go get this web page when you make that request it's actually sending all of the cookies for that site to the server saying by the way these are all the cookies that you told me to save last time that may indicate to you who I am and so that's why when you log in at say Amazon to do some shopping and then you close your browser and tomorrow you go back to Amazon Amazon still remembers who you are the dumb HTTP protocol just says like hi I need the home page for Amazon by the way here's all my cookies Amazon looks at those cookies and goes oh it's Jen Jen's back to do more shopping for more cool lights and and it sort of it kind of remembers who you are it doesn't remember it's because we're sending that information to say this is who I am and so there's still an authentication but the idea with rest is that your your identity like rest is using the HTTP method plus the path in order to mimic a state of this is the resource that I want to interact with and this is how I want to interact with it so the the the HTTP methods are how we want to interact with the resource yeah yeah yeah I feel like it's starting to make sense but at the same time I'm like something is still missing but that is okay this is I've learned it's taken me a while to learn that it doesn't need to click right away it clicks enough so I can continue but it's okay if it doesn't like quite stick yeah yeah you know what we're gonna go from stateless to rest you know intellectually and learning okay so so HTTP is always stateless no matter what rest is kind of like the next layer up where we're trying to mimic some idea of state and what it is we're trying to interact with by using that path as well as the HTTP method to kind of combine those two things as far as like this is how I want to interact with this resource and then restful is basically you know we wanted some flexibility there where it wasn't this rigid set of rules that we had to follow very explicitly we wanted a little bit of flexibility on you know there's have to be slash blog slash one could it be slash blog slash hello world you know can we still go find that as our identifier like does it have to be a rigid integer identifier does the path have to you know etc and so the idea of rest was a very rigid set of rules were restful we as programmers kind of rebelled a little bit and we're like no dude we want some flexibility here and that's where we came up with restful so we don't have to follow those rules exactly but we still kind of stay with the theme of we're going to use those HTTP methods to interact with a resource but we've got a little more flexibility as far as like how we do that and the status codes that come back that indicate whether it was successful or not and so on and so on and so on would you say being able to use a string then so that way it's like blog slash in yep and so so nowadays when you set up WordPress it'll typically come up with like a URL friendly version of whatever title of your blog post is so you don't see slash blog slash one yeah slash blog slash welcome dash to dash my dash blog exclamation point there's something and and when you when you tell the server hey I want this resource it looks at that title and it tries to figure out okay which one does this actually match in the database and then it goes and retrieves that for you we're just going to say teach shen tech API so teach gen tech API as my example today yeah it's good all right okay cool thank you so that was that was where we kind of came up with the idea of restful as we just wanted a little more flexibility on how we how we use these htb methods and paths to do a thing but we still like even even in 2023 we still just talk about them as rest APIs but if you hear restful they're we basically mean the same thing very very few places are actually very rigidly holding on to rest and saying no this is a proper rest API those those you know those kinds of companies are very pedantic about it and so on but very few companies are actually very strictly conforming to rest pretty much everybody that does a rest API is really doing a restful API words that's good to know following the following the theme of it but you know every but it's good to know but it's also bad because that means every company has a slightly different way of building a rest API and so how how you might interact with one rest API rest API which is a restful API is going to be slightly different as far as how do we authenticate how do we like what's the path of that resource because every company is going to be a little bit different in how they implement it it can add to a little bit of confusion to people who are trying to build or or rather consume APIs in the first place as an end user of hey I want to go get the weather well is it slash you know whether slash Denver or is it slash weather slash 642 because that's the city code for Denver like you know because it's not strictly rest you know and so every company wants to do it slightly differently it may not even be slash weather you know it could be you know several path levels deep or whatever to to basically interact with that API and so it's it's good and bad it's good for the for the company and for the programmers of the company because they have flexibility in getting to do what they want to do it's bad for the end users because now every rest API looks and feels a little bit different and they're you know it's all kind of okay I've got the you know I've got a method and I've got a path but aside from that like how I actually interact and authenticate and you know what kind of protocol am I using like it made it very very different um the other the other downside is with rest APIs the server doesn't sometimes it doesn't have a lot of control over what the what the end user is trying to do so for example if I said hey server I want to send you some information like I want to do a post operation on this resource and the server comes back and says okay I got you fam what you got send me whatever data you want to send and I start sending like terabytes of data the server has no way of saying like hold up hold up hold up that's way too much data you can't send me that much data it has to wait until the whole thing finishes before the server can respond say nope I can't handle all that data he sent me sorry you just spent all that time transferring all that data I came in handling so okay you say that and again for anyone joining us for the first time today I uh Ian is from postman and understands APIs very very well and I have been had teach shantak streaming for almost a year now and I am definitely piecing things together and as you're saying uh with the pulling information off the server no matter how large it is I started working at Ivan which is a data infrastructure company about two months ago and we part of my new role is learning about postgres and which is a database it's a relational database which I don't quite know what that means but I will someday anyway when they do a query on a database is that technically using an API because it doesn't since it's just going to pull no matter how large of an amount or is it only an API if a web like something else is pulling the querying it from the outside great great question so at the very beginning of the session we talked about the idea of abstraction so when you're interacting with a with a database you're still abstracting the instructions of storing and retrieving data so technically that is using some kind of API you've got some sort of language and protocol of this is how we're going to send and receive information from one another so that's still that's still using a type of API it's not the same kind of like restful API like you don't connect to a database with a get or a post your it's it's going to have its own communication protocol that's not HTTP um interesting yeah it's starting to click um really quick just to I am putting this down here in my like other nodes for rest API downfalls of all companies do it different and you said that it's with security and what else for things like authentication and uh authentication thank you and like how they how they basically build the API like everybody builds their API slightly differently some people um you know do you have like query parameters that's where you have like the question mark on the URL oh yeah you know where you've got the parameters there some people want those things in headers where you're sending the headers instead of parameters somewhat both um you know how do you send that API key is it a query parameters that header um how do you indicate what kind of content you want to get back do you want to get it in JSON format do you want it in XML format do you want plain text format like can you even tell the server how you're going to get that data back or does the server is the server rigid that it can only give you back one kind of data so if you if you connect with server and say give me the weather information in XML format and it says sorry I can only do JSON you know now you've got kind of this miscommunication so every company's doing things slightly differently which ends up confusing people who are new to interacting with APIs and then you said that the other uh rest API is when you do call something there's no way of stopping the data limit because it's just going to load everything that you ask so so a good analogy would be like hey Jen you know I call you on the phone and be like hey Jen can I read you a story real quick can I read you a story sure all right um well prints jenoa and luca are now nothing more than appendages of the bond apart family I warn you that if you don't tell me we're going to have war if you still allow yourself to condone all the infamines all the atrocities of this antichrist on my word I believe he is an antichrist I will not recognize it's war and peace right you're not going to sit and like wait for me to read the entire story of war and peace you'd be like hey man like it's lunchtime I got to go the server has no way of interrupting a client when the client says hey can I send you some data the server's like yeah okay go ahead and send it it has to wait for the client to send all of that data to go dude you just made me sit through war and peace like I thought you were going to read like a poem that your kid wrote like and so the server has no way of interrupting with with typical rest API it has to wait for the server for the client to send everything to the server for the server then to say like hey all that time and effort you just spent sending me all that data I just dropped it on the floor I can't deal with all of that I can't even right it's got no way of like stopping that interaction you know in these are kinds of drawbacks that servers have and it's you know partly from HTTP and it's partly from you know just how we how we build software but so they're they're they're benefits and disadvantages to all these different kinds of APIs that we're going to talk about today so like I said the most popular kind of API is a restful API which is typically I call like I call Jen and I say hey Jen I got one question for you what's your favorite food and you tell me your favorite food is pizza cool thanks and I hang up the phone and the next time hey Jen what's your favorite topping to put on a pizza cheese okay cool and then I hang up the phone and then I call hi Jen I'm a postman we go through this whole authentication what kind of cheese do you like to put on your pizza I don't know I just like gluten-free cheese pizza okay that's not the response you were looking for no all right cool and I hang up and I call back again you know hi I'm Ian from postman Jen what's gluten-free mean you know and then you know you you have that I mean that's a whole other conversation and we have so the the idea with a rest API is it's a single transaction I make a request you send me a response and then we say bye bye and the next time we got to jump through all those authentication hoops every single time and so with a restful API you connect to the server you make a single request you get a single response and then you hang up so when we talk about like how do we load a web page so you imagine you go to something like like a Pinterest page and you say okay I want to go get Pinterest
And this is why this is why we came up with things like cookies and stuff like that so even on a web page for example when you say I want to go get this web page when you make that request it's actually sending all of the cookies for that site to the server saying by the way these are all the cookies that you told me to save last time that may indicate to you who I am and so that's why when you log in at say Amazon to do some shopping and then you close your browser and tomorrow you go back to Amazon Amazon still remembers who you are the dumb HTTP protocol just says like hi I need the home page for Amazon by the way here's all my cookies Amazon looks at those cookies and goes oh it's Jen Jen's back to do more shopping for more cool lights and and it sort of it kind of remembers who you are it doesn't remember it's because we're sending that information to say this is who I am and so there's still an authentication but the idea with rest is that your your identity like rest is using the HTTP method plus the path in order to mimic a state of this is the resource that I want to interact with and this is how I want to interact with it so the the the HTTP methods are how we want to interact with the resource yeah yeah yeah I feel like it's starting to make sense but at the same time I'm like something is still missing but that is okay this is I've learned it's taken me a while to learn that it doesn't need to click right away it clicks enough so I can continue but it's okay if it doesn't like quite stick yeah yeah you know what we're gonna go from stateless to rest you know intellectually and learning okay so so HTTP is always stateless no matter what rest is kind of like the next layer up where we're trying to mimic some idea of state and what it is we're trying to interact with by using that path as well as the HTTP method to kind of combine those two things as far as like this is how I want to interact with this resource and then restful is basically you know we wanted some flexibility there where it wasn't this rigid set of rules that we had to follow very explicitly we wanted a little bit of flexibility on you know there's have to be slash blog slash one could it be slash blog slash hello world you know can we still go find that as our identifier like does it have to be a rigid integer identifier does the path have to you know etc and so the idea of rest was a very rigid set of rules were restful we as programmers kind of rebelled a little bit and we're like no dude we want some flexibility here and that's where we came up with restful so we don't have to follow those rules exactly but we still kind of stay with the theme of we're going to use those HTTP methods to interact with a resource but we've got a little more flexibility as far as like how we do that and the status codes that come back that indicate whether it was successful or not and so on and so on and so on would you say being able to use a string then so that way it's like blog slash in yep and so so nowadays when you set up WordPress it'll typically come up with like a URL friendly version of whatever title of your blog post is so you don't see slash blog slash one yeah slash blog slash welcome dash to dash my dash blog exclamation point there's something and and when you when you tell the server hey I want this resource it looks at that title and it tries to figure out okay which one does this actually match in the database and then it goes and retrieves that for you we're just going to say teach shen tech API so teach gen tech API as my example today yeah it's good all right okay cool thank you so that was that was where we kind of came up with the idea of restful as we just wanted a little more flexibility on how we how we use these htb methods and paths to do a thing but we still like even even in 2023 we still just talk about them as rest APIs but if you hear restful they're we basically mean the same thing very very few places are actually very rigidly holding on to rest and saying no this is a proper rest API those those you know those kinds of companies are very pedantic about it and so on but very few companies are actually very strictly conforming to rest pretty much everybody that does a rest API is really doing a restful API words that's good to know following the following the theme of it but you know every but it's good to know but it's also bad because that means every company has a slightly different way of building a rest API and so how how you might interact with one rest API rest API which is a restful API is going to be slightly different as far as how do we authenticate how do we like what's the path of that resource because every company is going to be a little bit different in how they implement it it can add to a little bit of confusion to people who are trying to build or or rather consume APIs in the first place as an end user of hey I want to go get the weather well is it slash you know whether slash Denver or is it slash weather slash 642 because that's the city code for Denver like you know because it's not strictly rest you know and so every company wants to do it slightly differently it may not even be slash weather you know it could be you know several path levels deep or whatever to to basically interact with that API and so it's it's good and bad it's good for the for the company and for the programmers of the company because they have flexibility in getting to do what they want to do it's bad for the end users because now every rest API looks and feels a little bit different and they're you know it's all kind of okay I've got the you know I've got a method and I've got a path but aside from that like how I actually interact and authenticate and you know what kind of protocol am I using like it made it very very different um the other the other downside is with rest APIs the server doesn't sometimes it doesn't have a lot of control over what the what the end user is trying to do so for example if I said hey server I want to send you some information like I want to do a post operation on this resource and the server comes back and says okay I got you fam what you got send me whatever data you want to send and I start sending like terabytes of data the server has no way of saying like hold up hold up hold up that's way too much data you can't send me that much data it has to wait until the whole thing finishes before the server can respond say nope I can't handle all that data he sent me sorry you just spent all that time transferring all that data I came in handling so okay you say that and again for anyone joining us for the first time today I uh Ian is from postman and understands APIs very very well and I have been had teach shantak streaming for almost a year now and I am definitely piecing things together and as you're saying uh with the pulling information off the server no matter how large it is I started working at Ivan which is a data infrastructure company about two months ago and we part of my new role is learning about postgres and which is a database it's a relational database which I don't quite know what that means but I will someday anyway when they do a query on a database is that technically using an API because it doesn't since it's just going to pull no matter how large of an amount or is it only an API if a web like something else is pulling the querying it from the outside great great question so at the very beginning of the session we talked about the idea of abstraction so when you're interacting with a with a database you're still abstracting the instructions of storing and retrieving data so technically that is using some kind of API you've got some sort of language and protocol of this is how we're going to send and receive information from one another so that's still that's still using a type of API it's not the same kind of like restful API like you don't connect to a database with a get or a post your it's it's going to have its own communication protocol that's not HTTP um interesting yeah it's starting to click um really quick just to I am putting this down here in my like other nodes for rest API downfalls of all companies do it different and you said that it's with security and what else for things like authentication and uh authentication thank you and like how they how they basically build the API like everybody builds their API slightly differently some people um you know do you have like query parameters that's where you have like the question mark on the URL oh yeah you know where you've got the parameters there some people want those things in headers where you're sending the headers instead of parameters somewhat both um you know how do you send that API key is it a query parameters that header um how do you indicate what kind of content you want to get back do you want to get it in JSON format do you want it in XML format do you want plain text format like can you even tell the server how you're going to get that data back or does the server is the server rigid that it can only give you back one kind of data so if you if you connect with server and say give me the weather information in XML format and it says sorry I can only do JSON you know now you've got kind of this miscommunication so every company's doing things slightly differently which ends up confusing people who are new to interacting with APIs and then you said that the other uh rest API is when you do call something there's no way of stopping the data limit because it's just going to load everything that you ask so so a good analogy would be like hey Jen you know I call you on the phone and be like hey Jen can I read you a story real quick can I read you a story sure all right um well prints jenoa and luca are now nothing more than appendages of the bond apart family I warn you that if you don't tell me we're going to have war if you still allow yourself to condone all the infamines all the atrocities of this antichrist on my word I believe he is an antichrist I will not recognize it's war and peace right you're not going to sit and like wait for me to read the entire story of war and peace you'd be like hey man like it's lunchtime I got to go the server has no way of interrupting a client when the client says hey can I send you some data the server's like yeah okay go ahead and send it it has to wait for the client to send all of that data to go dude you just made me sit through war and peace like I thought you were going to read like a poem that your kid wrote like and so the server has no way of interrupting with with typical rest API it has to wait for the server for the client to send everything to the server for the server then to say like hey all that time and effort you just spent sending me all that data I just dropped it on the floor I can't deal with all of that I can't even right it's got no way of like stopping that interaction you know in these are kinds of drawbacks that servers have and it's you know partly from HTTP and it's partly from you know just how we how we build software but so they're they're they're benefits and disadvantages to all these different kinds of APIs that we're going to talk about today so like I said the most popular kind of API is a restful API which is typically I call like I call Jen and I say hey Jen I got one question for you what's your favorite food and you tell me your favorite food is pizza cool thanks and I hang up the phone and the next time hey Jen what's your favorite topping to put on a pizza cheese okay cool and then I hang up the phone and then I call hi Jen I'm a postman we go through this whole authentication what kind of cheese do you like to put on your pizza I don't know I just like gluten-free cheese pizza okay that's not the response you were looking for no all right cool and I hang up and I call back again you know hi I'm Ian from postman Jen what's gluten-free mean you know and then you know you you have that I mean that's a whole other conversation and we have so the the idea with a rest API is it's a single transaction I make a request you send me a response and then we say bye bye and the next time we got to jump through all those authentication hoops every single time and so with a restful API you connect to the server you make a single request you get a single response and then you hang up so when we talk about like how do we load a web page so you imagine you go to something like like a Pinterest page and you say okay I want to go get Pinterestcom well what the server sends you back is just the HTML of the page it doesn't send you anything but the HTML what your browser has to do then is interpret everything in that HTML to say okay well there's this CSS you know style sheet I have to go fetch there's some JavaScript I have to go fetch I've got all of these images of all the coolest crafts and whatever the people are putting on Pinterest it has to go back to the server every single time hi I'm Ian from Postman can I please have this image cool thank you click call back again hi I'm Ian from Postman can I have this image cool thanks that would take forever hi I'm Ian from Postman can I please have you know this that well the browsers are pretty good at setting multiple requests at a time but each one of those is an individual request go and hi I'm Ian can I please have this resource because rest is a single transaction of I want a single here's my single request I want a single response and then we hang up so it's it's inefficient if you want multiple pieces of information and so most rest APIs when they work on HTTP they're using HTTP version one or version 1
com well what the server sends you back is just the HTML of the page it doesn't send you anything but the HTML what your browser has to do then is interpret everything in that HTML to say okay well there's this CSS you know style sheet I have to go fetch there's some JavaScript I have to go fetch I've got all of these images of all the coolest crafts and whatever the people are putting on Pinterest it has to go back to the server every single time hi I'm Ian from Postman can I please have this image cool thank you click call back again hi I'm Ian from Postman can I have this image cool thanks that would take forever hi I'm Ian from Postman can I please have you know this that well the browsers are pretty good at setting multiple requests at a time but each one of those is an individual request go and hi I'm Ian can I please have this resource because rest is a single transaction of I want a single here's my single request I want a single response and then we hang up so it's it's inefficient if you want multiple pieces of information and so most rest APIs when they work on HTTP they're using HTTP version one or version 11 is more common and version one is the single transaction of single request single response request and then the single okay and that makes sense yep so that was all fine and good and for most APIs that's all we need like hey go get me the weather in Denver go fetch my latest list of new emails go get my you know the newest things on my Twitter timeline go get you know whatever we're making a single request we get a single response of data and then our software interacts with that but if we for a single request and a single response can that request have like how you are asking about pizza of like hey what's your favorite crust what's your favorite topping what's your favorite cheese those are all different requests instead of one request with subrequest sometimes with APIs the developers let's just take in a whole structure of you know what the user actually wants and we'll try to figure out some way of packaging all that up and sending it all back but that's kind of moving away from the idea of rest which is I want to interact with a single resource so that would be like you know I want to go register as a user and pull up my profile page and send you a profile image like I'm trying to do a bunch of instructions all at the same time and that that generally kind of moves drastically away from the idea of a restful API where it's like I'm interacting in a single way with a single resource now even in the case of like our pizza example here I'm asking for a lot of information about pizza so that might be where we put in query parameters like I want to interact with gen
1 is more common and version one is the single transaction of single request single response request and then the single okay and that makes sense yep so that was all fine and good and for most APIs that's all we need like hey go get me the weather in Denver go fetch my latest list of new emails go get my you know the newest things on my Twitter timeline go get you know whatever we're making a single request we get a single response of data and then our software interacts with that but if we for a single request and a single response can that request have like how you are asking about pizza of like hey what's your favorite crust what's your favorite topping what's your favorite cheese those are all different requests instead of one request with subrequest sometimes with APIs the developers let's just take in a whole structure of you know what the user actually wants and we'll try to figure out some way of packaging all that up and sending it all back but that's kind of moving away from the idea of rest which is I want to interact with a single resource so that would be like you know I want to go register as a user and pull up my profile page and send you a profile image like I'm trying to do a bunch of instructions all at the same time and that that generally kind of moves drastically away from the idea of a restful API where it's like I'm interacting in a single way with a single resource now even in the case of like our pizza example here I'm asking for a lot of information about pizza so that might be where we put in query parameters like I want to interact with gencom slash favorite pizza and then I start sending in query parameters of favorite crust favorite cheese favorite top query parameters would be like the subrequest that I'm quality maybe yeah or or just you know while you're while you're fulfilling my request to go get favorite pizza details I specifically want these details or something like that and so that's where sometimes we'll get into query parameters on you know instead of going and getting every pizza you know topping out there I want to get just you know send me 10 at a time and we can get into like pagination and things like that where I could say like just give me like however many pizza deals you got just give me five pizza deals at a time and if I want more than five I'll ask for the next five pizza deals kind of things so that's where we get into query parameters where we can kind of filter things down a little bit but again it's up to the programmers for what we want to build and how we want to build that API interaction and does that strictly follow you know kind of our best practices and industry norms and again this is where it's good and bad because for the programmer it gives us all the flexibility to do that we want but it's bad for the end users because now that pizza API acts drastically different from some weather API where you're also trying to say go get me the weather for the following cities maybe they do it completely differently so there there are a lot of good and bad things about using a restful API in this sense so yeah there are ways that we can ask for more than you know one bit of information at a time but that also kind of drifts away from sort of what what the intention was behind building an API around interacting with a single resource at a time so I just said just like the request of what is your favorite pizza that would be a one request but then in the query it could be the five most recent responses you know favorite crust or like favorite topping yeah so some APIs will allow you to interact in a way that says like filter the results in some way or like you know go get me go get me all the authors that you have in your library sort them alphabetically and just give me the first 10 authors or something like that like you can you can sometimes interact with APIs if the API developer has actually built those kinds of controls is that they may not have you know are those type of controls in those filters those are always after they call the information or request it's part it's part of the request it's part of the request because again when I connect to you and say hi Jen I'm Ian from Postman I would like this information that's all I'm allowed to say I have to then wait for your response and go okay cool thank you and I hang up whether that response was actually valid or not I had to make my request all in one shot and so that's where you would send the path and the query parameters and the headers and cookies and things like that you send all of that as your request and then you wait for a response to come back so some people could be like okay I think I get it I'm good it'll it'll it'll probably get more clear like as as we talk about it a little bit more as we go cool so this this was all fine and good if we had a single request and we expect a single response and that's the end of it but we started to realize as an industry it's like well that's a little bit limiting what if we want to ask for multiple things and so this is partly where HTTP 2 came into play where in the new version of HTTP 2 well it's not I mean it's not really that new it's actually been out for a number of years now but with HTTP 2 we can actually make a connection to the server and say I want the following list of resources and then we get a response back which encapsulates all of those responses so I can say I can make a single request go and give me give me Pinterest
com slash favorite pizza and then I start sending in query parameters of favorite crust favorite cheese favorite top query parameters would be like the subrequest that I'm quality maybe yeah or or just you know while you're while you're fulfilling my request to go get favorite pizza details I specifically want these details or something like that and so that's where sometimes we'll get into query parameters on you know instead of going and getting every pizza you know topping out there I want to get just you know send me 10 at a time and we can get into like pagination and things like that where I could say like just give me like however many pizza deals you got just give me five pizza deals at a time and if I want more than five I'll ask for the next five pizza deals kind of things so that's where we get into query parameters where we can kind of filter things down a little bit but again it's up to the programmers for what we want to build and how we want to build that API interaction and does that strictly follow you know kind of our best practices and industry norms and again this is where it's good and bad because for the programmer it gives us all the flexibility to do that we want but it's bad for the end users because now that pizza API acts drastically different from some weather API where you're also trying to say go get me the weather for the following cities maybe they do it completely differently so there there are a lot of good and bad things about using a restful API in this sense so yeah there are ways that we can ask for more than you know one bit of information at a time but that also kind of drifts away from sort of what what the intention was behind building an API around interacting with a single resource at a time so I just said just like the request of what is your favorite pizza that would be a one request but then in the query it could be the five most recent responses you know favorite crust or like favorite topping yeah so some APIs will allow you to interact in a way that says like filter the results in some way or like you know go get me go get me all the authors that you have in your library sort them alphabetically and just give me the first 10 authors or something like that like you can you can sometimes interact with APIs if the API developer has actually built those kinds of controls is that they may not have you know are those type of controls in those filters those are always after they call the information or request it's part it's part of the request it's part of the request because again when I connect to you and say hi Jen I'm Ian from Postman I would like this information that's all I'm allowed to say I have to then wait for your response and go okay cool thank you and I hang up whether that response was actually valid or not I had to make my request all in one shot and so that's where you would send the path and the query parameters and the headers and cookies and things like that you send all of that as your request and then you wait for a response to come back so some people could be like okay I think I get it I'm good it'll it'll it'll probably get more clear like as as we talk about it a little bit more as we go cool so this this was all fine and good if we had a single request and we expect a single response and that's the end of it but we started to realize as an industry it's like well that's a little bit limiting what if we want to ask for multiple things and so this is partly where HTTP 2 came into play where in the new version of HTTP 2 well it's not I mean it's not really that new it's actually been out for a number of years now but with HTTP 2 we can actually make a connection to the server and say I want the following list of resources and then we get a response back which encapsulates all of those responses so I can say I can make a single request go and give me give me Pinterestcom's homepage and it gives me back that HTML now my browser can go through and I can break out okay I need the CSS page this CSS page these 10 JavaScript script files the ads and you know all of the images and then it can reconnect to the server and say here's a list of things that I want you to give me back and now the server can send all of those things back in a single response and so that that was one workaround instead of saying you know can I get a list of trusts and pizzas and whatever HTTP 2 now will allow for here's a bunch of things I want you to give me and and it comes back but that's still a single request of I want I want this information and a single response of here's a package of that information so HTTP 2 will allow you to request multiple resources but it's still a single request for all of those resources and a single response of all of those resources okay I think that makes sense enough and what up be one mind I'm trying to reply to people while you're talking so I'm not interrupting because I'm like also like really want to learn this one watching I'm watching twitch kind of on the side as well so folks have questions about APIs like feel free to drop that stuff in twitch chat I'm not sure what other platforms you're streaming on other than twitch just twitch now I just stream on twitch and then I upload to youtube which surprisingly doing that gets more youtube views because it's a video and not a stream um well but it hangs out longer and people can watch asynchronously they can watch at their own pace and so on right really quick y'all the Ian is also very very technical we are going through the basics right now but if you're like hey I have a question that's a little higher than what we're doing right now you know this isn't a troubleshooting stream I do have to say that but a lot of times it is something we can help out and figure out and thank you uh uh uh hi uh for the follow I appreciate it and okay so we are so folks have questions feel free to drop it in chat we'll we'll try to address like API questions as well I've got kind of a list of things that I want to work through but if it's part of that then you know I'm happy to jump around and answer stuff too yay thank you so yeah so so hdb2 will allow us to request multiple resources and get a response back with multiple sort of resources in that single response but hdb2 also allowed for what we call streaming requesting requests and streaming responses and that's where we're going to talk about a little bit different kind of API here in a minute okay let me go back because something just clicked as you were saying that that I'm like okay my brain's not ready to move on when we were talking about multiple resources it's like talking about how over here we're talking about resource so does that mean like instead of having to only call this resource it could call forward slash blog forward slash pizza forward slash like different areas it doesn't have to be one specific area it's going to be a different structure of that request but yeah it's basically sending a single payload to the server saying hey Jen I've got the following questions for you what's your favorite number what's your favorite food what's your favorite sports team what's your favorite boy band what's your favorite pizza give me all that information back and you're gonna go grab all that information say here's my response my favorite number is blah blah blah my favorite food is blah blah and you're gonna give me all of that back as a single response and then I say cool thanks and then we hang up because that's the typical restful kind of approach is we make a single request we get a single response and then we close that connection now that single request over htdp2 can say I want to get a whole bunch of things and that way I only have to do that magic authentication handshake one time I can request a whole bunch of things the server can process whether I'm allowed to actually get those things and then send them back as a single response kind of all bundled up of like here's this collective response to all of those things that you requested I know this is very simplified but for my visualization I'm gonna say v1 is forward slash blogs and that's the only place I can get content and v2 could be blogs and images and CSS and JavaScript I'm gonna say pizza
com's homepage and it gives me back that HTML now my browser can go through and I can break out okay I need the CSS page this CSS page these 10 JavaScript script files the ads and you know all of the images and then it can reconnect to the server and say here's a list of things that I want you to give me back and now the server can send all of those things back in a single response and so that that was one workaround instead of saying you know can I get a list of trusts and pizzas and whatever HTTP 2 now will allow for here's a bunch of things I want you to give me and and it comes back but that's still a single request of I want I want this information and a single response of here's a package of that information so HTTP 2 will allow you to request multiple resources but it's still a single request for all of those resources and a single response of all of those resources okay I think that makes sense enough and what up be one mind I'm trying to reply to people while you're talking so I'm not interrupting because I'm like also like really want to learn this one watching I'm watching twitch kind of on the side as well so folks have questions about APIs like feel free to drop that stuff in twitch chat I'm not sure what other platforms you're streaming on other than twitch just twitch now I just stream on twitch and then I upload to youtube which surprisingly doing that gets more youtube views because it's a video and not a stream um well but it hangs out longer and people can watch asynchronously they can watch at their own pace and so on right really quick y'all the Ian is also very very technical we are going through the basics right now but if you're like hey I have a question that's a little higher than what we're doing right now you know this isn't a troubleshooting stream I do have to say that but a lot of times it is something we can help out and figure out and thank you uh uh uh hi uh for the follow I appreciate it and okay so we are so folks have questions feel free to drop it in chat we'll we'll try to address like API questions as well I've got kind of a list of things that I want to work through but if it's part of that then you know I'm happy to jump around and answer stuff too yay thank you so yeah so so hdb2 will allow us to request multiple resources and get a response back with multiple sort of resources in that single response but hdb2 also allowed for what we call streaming requesting requests and streaming responses and that's where we're going to talk about a little bit different kind of API here in a minute okay let me go back because something just clicked as you were saying that that I'm like okay my brain's not ready to move on when we were talking about multiple resources it's like talking about how over here we're talking about resource so does that mean like instead of having to only call this resource it could call forward slash blog forward slash pizza forward slash like different areas it doesn't have to be one specific area it's going to be a different structure of that request but yeah it's basically sending a single payload to the server saying hey Jen I've got the following questions for you what's your favorite number what's your favorite food what's your favorite sports team what's your favorite boy band what's your favorite pizza give me all that information back and you're gonna go grab all that information say here's my response my favorite number is blah blah blah my favorite food is blah blah and you're gonna give me all of that back as a single response and then I say cool thanks and then we hang up because that's the typical restful kind of approach is we make a single request we get a single response and then we close that connection now that single request over htdp2 can say I want to get a whole bunch of things and that way I only have to do that magic authentication handshake one time I can request a whole bunch of things the server can process whether I'm allowed to actually get those things and then send them back as a single response kind of all bundled up of like here's this collective response to all of those things that you requested I know this is very simplified but for my visualization I'm gonna say v1 is forward slash blogs and that's the only place I can get content and v2 could be blogs and images and CSS and JavaScript I'm gonna say pizzatsx right like it could do whatever the what it wants to do it could be you know yay dot js okay cool that gives me yep you got the idea there yeah thank you so we so we realized like hey this htdp2 like that actually opens up a whole other thing that we can do because htdp2 also gave us some flexibility about um do we have to hang up after we get that response back like can we just hold this connection open you know a little longer so I can I can call you up and say hey Jen what's your what's your favorite phone number or your favorite number and you tell me that number and say hey well I got you on the phone what's your favorite color and you tell me that and say hey well I got you on the phone you know and so on or we could do something where it's like um sorry I need to take this yeah go ahead never mind I missed I missed the call if they call back I have to take I have to take that call that worries so there's um there's some flexibility in htdp2 that says like hey once I get that response back from you we don't have to hang up like we can stay on the phone for a little while longer and this is where we come up with the idea of um having things that we call like web hooks or web sockets if you've heard of web hooked and web sockets these are using htdp2 to basically say hey I want to hold this connection open for a little while so that we can kind of interact more long term and generally what's happening over like a web hook or a web socket is I make a request to you saying my request is I want to hold this connection open so that the server can stream back information to me about things that happen so uh for example if you're on say discord right you can set up a web hook for discord saying hey if something happens can you interact with my discord on my behalf um so for example on my twitch chat um there's a way that you can interact with my twitch chat that will actually post your twitch comment on my discord community over a web hook and so I have I have a python script running on my computer that basically watches my twitch chat and when something particular happens something very specific my python script says hey I want to I want to use this connection that I that I'm holding open to discord so that I can say hey discord can you put this in my discord community and I make an API call and it shows up in my discord community um and then you know I hold that connection open so it's it's kind of like I call Gen and one time I say hi Gen it's Ian from Postman here my credentials and you're like okay cool we can we can chat and now I can say can you go do this thing while I get you on the phone and we hold that connection open for a long period of time not indefinite not a forever kind of connection like yeah internet interruptions happens sometimes the server will say like hey you can hold this connection open for like an hour or a couple of hours but then we got to close it up because I need you to reauthenticate because your your authentication is only good for a certain amount of time and so after a certain amount of time we might as well just hang up the connection because you're going to have to reauthenticate anyway so it's really you know there there can be some sort of communication protocol communication between the client and the server to determine how long that connection is going to stay open but it's pretty much it's going to stay open you know for these webhooks this allows for what we call server side events or server side push where the server wants to push information to you to say hey this thing happened for example if you hang out on Twitter um and you know you you load up the home page of Twitter and it starts loading your timeline or whatever if you just stay on that page long enough you'll notice after a little while up at the very top it's going to be like hey there's 50 new tweets and you can click on that and it shows all of those tweets is because there's a there's a web socket connection that stays open that's saying like while you while you're browsing that timeline I'm going to like the server is actually going to push that information to your client saying by the way there's another tweet there's more recent tweets there's other things that we want to push to you as an event that has happened that we want to alert you to and so it allows for the streaming of data from the server and so we can make a single request to the server saying like hey let me know if like anything happens that you want to alert me about like notification systems uh like on Facebook for example if you're on Facebook and you see that little notification bell if I tag you in a post on Facebook that thing automatically kind of blipsons like hey Ian tagged you in a post that's all happening over a web socket or a web book is that what event streaming is yeah that's exciting uh so and it's basically kind of like the server pushes information the server is pushing information to the client yeah so the client so it's still doing like a single request to the server saying hey I want to like hold this connection open for a little while and sometimes like kind of under the hood there's like this little like are you still there sort of keep alive uh ping as we call it there's like a keep alive or like a heartbeat of like I'm still connected I'm still connected I'm still connected uh the kind of goes back and forth so the client and server know that they can still communicate but it allows the server then to keep sending information back to you uh because when you think about what happens like when I'm on my computer here I've got firewall software on my computer I've got firewall software on my wifi I've got firewall software on my router and so nobody on the internet can push information directly to my computer because it can't get through three different layers of firewalls but if my computer initiates a connection and holds that connection open then whatever I've connected to can send information back to me and so you kind of think about like you know I'm drilling a hole in in the dam or whatever to you know purposely let a certain amount of certain kind of information in and so that's basically how web sockets work is I'm saying over the web I want to hold this socket connection if you if you know about TCP is basically sockets it's it's how it's it's a really low level of of how this how the internet actually like connects and communicates but we'll put that on my one date yeah so it's using something called sockets and that's where we get the idea of a web socket is your web page is making a socket connection to say like I want to hold this this HTTP connection open to be able to get information back from the server well as long as I've got that connection open the server can push information to me I don't have to otherwise what would normally happen in a in an older restful API is I would call you up and say hey Jen is there anything for my notification feed you need to alert me about and you say no okay cool and then we hang up but then I've got to connect again like every minute and go hey Jen it's in from postman do you have any notifications for me no okay cool and we hang up in a minute later you know or seconds later that makes it for a lot of traffic for me to have to initiate that connection just to get no response and then have to close that connection so it's a very chatty kind of way of of what we call polling and so the idea with web sockets is I hey I'm just going to hold this connection open specifically for this notification feed so anytime there's a notification you can just push that back to me and my software is going to say oh hey something came in from the server and now we can interact with the UI to actually make that notification bell light up does this so when we go to the web hook and web socket it's no longer part of restful or it is like it's not restful anymore yeah it's now what we call it's now what we call an asynchronous API because things are happening asynchronously things are happening things are happening on the server asynchronous to what I might be interacting with on Facebook or Twitter or Instagram whatever but when the server says like hey you get some new notification that's getting pushed down to my you know mobile device or my web browser to where it can like little paying or send a notification or whatever to say hey Jen liked that new airbrush dragon photo that you post on Instagram or something like that yeah and so that's that's how these things happen so this is all part of asynchronous APIs which are different from restful APIs because now things can happen asynchronously because I'm not polling polling POL I'm not polling you for that information you're able to asynchronously send me that information because we're holding that connection open okay and polling like say that spell that one more time POL not polling POL I'm polling POL because you're checking or you're okay yeah so in in the old restful times I would have to make a connection do all the authentication magic handshake just to say do you have anything new for my notification feed and you say no and I hang up and then you know responsible software developers would wait a few seconds and then connect again and say how about now and no okay cool and we hang up and then I call back a few seconds later how about now no okay cool so like you know let me call you up and say hey Jen can you bake me some cookies and you say sure and then I hang up and I call back and say chocolate chip please and you say sure and we hang up but then I call you back every 30 seconds going are the cookies done or the cookies done or the cookies done or the cookies done or the cookies done that gets very repetitive and very chatty wouldn't it be better if we could just say like hey Jen can you make me some cookies I'd like chocolate chip and you say yeah okay I'll let you know when they're done and I just sit on the phone and I wait and then you say hey cookies are finished I'm like sweet send them over and you send me those cookies that's a that's a better interaction it's a lot less chatter over the internet because I'm not constantly calling you to say are the cookies done or the cookies done or the cookies done or the cookies done we've kind of we're holding this thing open to now where asynchronously you can tell me hey Ian alert the cookies are finished and now now I get freshly baked chocolate chip cookies yum yay subtle hint to make me just kidding just kidding right I was like you were saying that and I was like I think I'm gonna go make some oatmeal cookies when we get done now uh that's delicious oatmeal raisin actually no maybe oatmeal cram oh that's what I'm gonna make oatmeal cranberry probably gonna make them now raisins cranberry raisins no they're um regular cranberries just regular they're frozen so I got defrosted but um so anyway so that's how asynchronous APIs came to be is because we wanted a way of saying do like there's got to be a better way than like constantly pinging the server asking for for this over and over and over again so we come up with this idea now there are downsides to that too because servers the way that TCP works they can only have 65,000 ish connections at a time and so imagine if you're Facebook and you've got a you know what a couple of billion users on your platform every server can only have 65,000 connections maximum that's a lot of servers that you can have to spin up to allow all these connections from all these users who maybe on multiple devices I might have multiple browsers open I might have a mobile phone and it's tablet and maybe a smart TV all connecting to Facebook so maybe me as an individual user I've got like 30 of these web socket connections myself multiply that by billions of users right and so TCP only allows for 65,000 ish connections and so we needed a way of so that's the downside to web sockets is you're basically holding open one of those connections for a long period of time where with restful APIs as soon as I get that information I shut down that that connection between me and the server and now somebody else can connect to the server instead so think of it like an actual phone line where I call you on the phone nobody else can call you until we hang up our phone call then there's no call waiting there's yeah there's no there's no idea of call waiting here kids these days they don't know what they missed they're missing out on what that little beep in the background was or even back in the day we didn't even have call waiting to get that beep you just get a busy signal right so TCP was only 65,000 connections per server did you say server yeah and so go ahead so I go ahead no you add I was like TCP I should look into that one time yeah so the idea with the idea with web sockets and web hooks then is you're holding that connection open long-term so the the benefit of rest is that as soon as that connection or as soon as that communication is finished you close that connection which frees up a connection for somebody else where asynchronous you're holding that connection open which blocks somebody else from using that connection and there are there are advanced ways that we're like emitting that and like rotating things around but at the end of the day there are these limitations that are happening because of asynchronous so there's like like I said there's there's advantages and disadvantages to all of these technologies okay cool yay if I'm through a lot already and I'm kind of excited that I'm also still so far following along so that's exciting that's good so okay these these are the two like these are the two most popular kinds of APIs rest by far is like a huge portion of the API market when you're interacting with APIs it's probably going to be a restful API but more and more we're seeing a lot more of these web hooks and and web sockets and whatever using this asynchronous API pattern of you know let's hold that connection open a little bit longer so that you can send me data or I can stream data to you and so it's holding that connection open a little bit longer so that we can stream data back and forth which is a different different sort of mechanism than what rest was meant to be a single transaction so even though HTTP 2 is like here's a bunch of things I want you can send me back a bunch of things it's still like one transaction and rest will still hang up at the end of that with a synchronous it's the same thing if I make that web socket connection I have to authenticate but we're going to hold that connection open for a period of time but if that connection ever closes I've got to reauthenticate again the next time I call because it's still using HTTP at the end of the day so it HTTP is stateless it's kind of dumb so I have to do that authentication every time no matter what and you know the people working on HTTP protocol they're trying to find better ways and different ways of authentication and how do we handle these things to make that a little bit easier make it less chatty over the internet are there other sort of ways of doing this so they're actually already working on an HTTP 3 even though HTTP 2 has only been out for a couple of years and isn't fully adopted they're already working on HTTP 3 because they realize like hey even with the cool stuff that we introduced in version 2 we can still do even better and that's kind of the nice thing about tech is there's always something new to like go and learn and explore and see how things are being built and done yes I will say that is like one of my favorite things as I will never learn run out of topics for teach gen tech ever so I want to I do want to back up a little bit so that we can talk about kind of these HTTP methods because we really only talked about get and post so get was fetching data post is sending data but there are a couple of different ways that we wanted to interact with with data and and so this can even come into play a little bit with asynchronous API calls as well for how we want to interact with the resources that we do because like I said at the end of the day these are all happening over HTTP and so we have access to these HTTP methods to interact with the the resources that we're trying to access so we have get and post and I want to talk about three more so we have delete which says I want to I want you to actually destroy some kind of resource and again you want to make sure you've got good authentication in place because you want to make sure that person's allowed to delete that blog post or they're allowed to delete that image or something like that that's not scary at all that's scary at all even a little but there are you know there are security concerns around authentication and also what we call authorization so off authentication is who are you authorization is what are you allowed to do I could do a whole thing just on off sometime but so we have authentication and authorization and so if you ever hear somebody say off like just a UTH is like well which like are you talking authentication or are you talking authorization because there are two different things authentication is who are you okay who what can you do authorization is your permission basically is like what are you permitted to do and typically you would do authentication and then authorization so now that I know who you are you know what are you allowed to do so with the delete operation it's exactly what it sounds like you're trying to delete or destroy some kind of content or resource and so you have to make sure that you're properly authenticating like who the person is that's trying to to delete something and so I won't nothing nothing more really needs to be said on that one the other two are a little bit analogous but they are meant to be a little bit different one is called put and another is called patch both of these are meant to change a resource in some varying amount so a post is I want to go create a brand new blog post and when you create that blog post it would come back and say okay we've created post number five when you do a put operation you're basically saying like hey remember that blog post number five I actually want to change everything about it except for the ID value I want to change the title I want to change the body I want to change like everything that you're storing about that thing so typically a put is saying I want to keep the ID the same but I want to change everything else about it where a patch is like I just want to change the title of the blog post I just want a tweak part of that resource where a put is like I want to keep the ID the same but I want to change everything about that thing other than the ID so for example a post operation could be I want to create a workout fit so certain kind of pants certain shirt you know and so on maybe I'm going for a really corporate job and so I've got really nice slacks and a button down shirt maybe I wear a tie so I don't work at corporate entities because I hate wearing a tie um and so you know maybe I go work that corporate job for a little while and I'm like okay I'm going to change my job I'm going to go hang out on eans stream and find out how to build a resume and then I need to change everything about what I'm calling my workout fit to now I'm working at a startup so I can wear jeans and a hoodie so I want to change everything about it but I still want to call it workout fit so I'm you know the ID of this outfit is the same but all of the content of that outfit is different because I'm changing everything about it and so a put operation is I want to change everything but the ID stays the same where with a patch a patch is like I want to change I want to change the sweater you know maybe it's not quite startup it's not quite corporate but you know kind of this large-ish kind of company maybe they're not really into hoodies so maybe I'll wear like a button-down shirt but I'm still gonna wear jeans I'm still gonna wear my sneakers but maybe I'm gonna wear like a polo shirt or something instead of a hoodie so put we're still gonna call it a workout fit but we're changing everything about that outfit new shirt new pants new shoes new belt everything is different so put is changing everything but the ID okay me me me me me and hi Ramon uh I don't want to forget to say hi I hope we're still co-working tomorrow Ramon I really enjoy those okay so put is change everything about the output but the but the name of the now it's important to differentiate here that when when we're when we're calling it work outfit we're using that as the ID of the resource and that it's not just part of the resource itself like when when we would talk about a blog title for example or like a blog post the title is part of the blog post you know that gets stored in the database but when we're talking here like I need to I need to go sort all of my outfits or something so outfit number one is my workout fit so every time I interact with outfit number one it's always gonna be my workout fit that kind of thing but maybe the name of it is like you know maybe that like the actual words work outfit is actually part of the resource itself so I just want to be clear here that when we're saying I'm gonna go create an outfit I'm calling it my workout fit and then when I do a put on that resource I'm changing everything about it but I'm still referring to it as the same identifier um it's just for the analogy of it we're calling it a workout fit but the actual text of workout fit could be part of what we're storing in a database okay and pop a smurf hello hello haven't seen you for a bit I know my streams have an inconsistent update all resource attributes or fields based on the ID so so the put is saying I want to change everything about that workout fit the shirt the pants the belt the shoes like everything about it is changing except for the identifier where the patch is saying okay well now now that I'm in my my jeans and my you know band t-shirt and my hoodie uh maybe a patch is like okay you know company would prefer that I didn't wear you know Marvel character t-shirts in a hoodie so I'm gonna just change my shirt but I'm still wearing my sneakers or my flip flops I'm still gonna wear my blue jeans maybe wearing the the beanie or the ball cap is still okay but they want me to change my shirt so I'm only gonna change part of my outfit and that's where we would do a patch operation now some people will use put and patch interoperably and they'll say like oh either one is fine they're both changing some amount of data because nothing really would stop you from a patch to say I want to change my pants and my belt and my shoes and my shirt and whatever I wear on my head nothing would stop a patch operation from actually changing everything in there and then effectively it is a put where a put in its nature was meant to be we really do want to change all of the attributes except the ID where the patch is like oh we only want to tweak some of it but nothing would stop a patch from changing all of those attributes um I put it in more gen terms of changing the lipstick color because that is what's gonna like actually register where if it's changing the shirt then I'm like is it a formal shirt or is it an un for like how is that not in the outfit reference yeah so kind of the analogy I was using is like you know if my original workout fit was like corporate where I'm like wearing a suit high where you know my next job I'm I'm still calling it workout fit but now I'm working at a start-up so I'm gonna go to jeans and a hoodie you know and like a beanie or something but then maybe I need to change it again because they don't want me to wear a hoodie and a beanie but I'm still you know it's still okay to wear jeans and sneakers but they want like a button down shirt instead so that would be a patch operation where you're you're changing part of your outfit but not changing everything about it I like what you said pop a smurf me chase which works out because I am using blue
tsx right like it could do whatever the what it wants to do it could be you know yay dot js okay cool that gives me yep you got the idea there yeah thank you so we so we realized like hey this htdp2 like that actually opens up a whole other thing that we can do because htdp2 also gave us some flexibility about um do we have to hang up after we get that response back like can we just hold this connection open you know a little longer so I can I can call you up and say hey Jen what's your what's your favorite phone number or your favorite number and you tell me that number and say hey well I got you on the phone what's your favorite color and you tell me that and say hey well I got you on the phone you know and so on or we could do something where it's like um sorry I need to take this yeah go ahead never mind I missed I missed the call if they call back I have to take I have to take that call that worries so there's um there's some flexibility in htdp2 that says like hey once I get that response back from you we don't have to hang up like we can stay on the phone for a little while longer and this is where we come up with the idea of um having things that we call like web hooks or web sockets if you've heard of web hooked and web sockets these are using htdp2 to basically say hey I want to hold this connection open for a little while so that we can kind of interact more long term and generally what's happening over like a web hook or a web socket is I make a request to you saying my request is I want to hold this connection open so that the server can stream back information to me about things that happen so uh for example if you're on say discord right you can set up a web hook for discord saying hey if something happens can you interact with my discord on my behalf um so for example on my twitch chat um there's a way that you can interact with my twitch chat that will actually post your twitch comment on my discord community over a web hook and so I have I have a python script running on my computer that basically watches my twitch chat and when something particular happens something very specific my python script says hey I want to I want to use this connection that I that I'm holding open to discord so that I can say hey discord can you put this in my discord community and I make an API call and it shows up in my discord community um and then you know I hold that connection open so it's it's kind of like I call Gen and one time I say hi Gen it's Ian from Postman here my credentials and you're like okay cool we can we can chat and now I can say can you go do this thing while I get you on the phone and we hold that connection open for a long period of time not indefinite not a forever kind of connection like yeah internet interruptions happens sometimes the server will say like hey you can hold this connection open for like an hour or a couple of hours but then we got to close it up because I need you to reauthenticate because your your authentication is only good for a certain amount of time and so after a certain amount of time we might as well just hang up the connection because you're going to have to reauthenticate anyway so it's really you know there there can be some sort of communication protocol communication between the client and the server to determine how long that connection is going to stay open but it's pretty much it's going to stay open you know for these webhooks this allows for what we call server side events or server side push where the server wants to push information to you to say hey this thing happened for example if you hang out on Twitter um and you know you you load up the home page of Twitter and it starts loading your timeline or whatever if you just stay on that page long enough you'll notice after a little while up at the very top it's going to be like hey there's 50 new tweets and you can click on that and it shows all of those tweets is because there's a there's a web socket connection that stays open that's saying like while you while you're browsing that timeline I'm going to like the server is actually going to push that information to your client saying by the way there's another tweet there's more recent tweets there's other things that we want to push to you as an event that has happened that we want to alert you to and so it allows for the streaming of data from the server and so we can make a single request to the server saying like hey let me know if like anything happens that you want to alert me about like notification systems uh like on Facebook for example if you're on Facebook and you see that little notification bell if I tag you in a post on Facebook that thing automatically kind of blipsons like hey Ian tagged you in a post that's all happening over a web socket or a web book is that what event streaming is yeah that's exciting uh so and it's basically kind of like the server pushes information the server is pushing information to the client yeah so the client so it's still doing like a single request to the server saying hey I want to like hold this connection open for a little while and sometimes like kind of under the hood there's like this little like are you still there sort of keep alive uh ping as we call it there's like a keep alive or like a heartbeat of like I'm still connected I'm still connected I'm still connected uh the kind of goes back and forth so the client and server know that they can still communicate but it allows the server then to keep sending information back to you uh because when you think about what happens like when I'm on my computer here I've got firewall software on my computer I've got firewall software on my wifi I've got firewall software on my router and so nobody on the internet can push information directly to my computer because it can't get through three different layers of firewalls but if my computer initiates a connection and holds that connection open then whatever I've connected to can send information back to me and so you kind of think about like you know I'm drilling a hole in in the dam or whatever to you know purposely let a certain amount of certain kind of information in and so that's basically how web sockets work is I'm saying over the web I want to hold this socket connection if you if you know about TCP is basically sockets it's it's how it's it's a really low level of of how this how the internet actually like connects and communicates but we'll put that on my one date yeah so it's using something called sockets and that's where we get the idea of a web socket is your web page is making a socket connection to say like I want to hold this this HTTP connection open to be able to get information back from the server well as long as I've got that connection open the server can push information to me I don't have to otherwise what would normally happen in a in an older restful API is I would call you up and say hey Jen is there anything for my notification feed you need to alert me about and you say no okay cool and then we hang up but then I've got to connect again like every minute and go hey Jen it's in from postman do you have any notifications for me no okay cool and we hang up in a minute later you know or seconds later that makes it for a lot of traffic for me to have to initiate that connection just to get no response and then have to close that connection so it's a very chatty kind of way of of what we call polling and so the idea with web sockets is I hey I'm just going to hold this connection open specifically for this notification feed so anytime there's a notification you can just push that back to me and my software is going to say oh hey something came in from the server and now we can interact with the UI to actually make that notification bell light up does this so when we go to the web hook and web socket it's no longer part of restful or it is like it's not restful anymore yeah it's now what we call it's now what we call an asynchronous API because things are happening asynchronously things are happening things are happening on the server asynchronous to what I might be interacting with on Facebook or Twitter or Instagram whatever but when the server says like hey you get some new notification that's getting pushed down to my you know mobile device or my web browser to where it can like little paying or send a notification or whatever to say hey Jen liked that new airbrush dragon photo that you post on Instagram or something like that yeah and so that's that's how these things happen so this is all part of asynchronous APIs which are different from restful APIs because now things can happen asynchronously because I'm not polling polling POL I'm not polling you for that information you're able to asynchronously send me that information because we're holding that connection open okay and polling like say that spell that one more time POL not polling POL I'm polling POL because you're checking or you're okay yeah so in in the old restful times I would have to make a connection do all the authentication magic handshake just to say do you have anything new for my notification feed and you say no and I hang up and then you know responsible software developers would wait a few seconds and then connect again and say how about now and no okay cool and we hang up and then I call back a few seconds later how about now no okay cool so like you know let me call you up and say hey Jen can you bake me some cookies and you say sure and then I hang up and I call back and say chocolate chip please and you say sure and we hang up but then I call you back every 30 seconds going are the cookies done or the cookies done or the cookies done or the cookies done or the cookies done that gets very repetitive and very chatty wouldn't it be better if we could just say like hey Jen can you make me some cookies I'd like chocolate chip and you say yeah okay I'll let you know when they're done and I just sit on the phone and I wait and then you say hey cookies are finished I'm like sweet send them over and you send me those cookies that's a that's a better interaction it's a lot less chatter over the internet because I'm not constantly calling you to say are the cookies done or the cookies done or the cookies done or the cookies done we've kind of we're holding this thing open to now where asynchronously you can tell me hey Ian alert the cookies are finished and now now I get freshly baked chocolate chip cookies yum yay subtle hint to make me just kidding just kidding right I was like you were saying that and I was like I think I'm gonna go make some oatmeal cookies when we get done now uh that's delicious oatmeal raisin actually no maybe oatmeal cram oh that's what I'm gonna make oatmeal cranberry probably gonna make them now raisins cranberry raisins no they're um regular cranberries just regular they're frozen so I got defrosted but um so anyway so that's how asynchronous APIs came to be is because we wanted a way of saying do like there's got to be a better way than like constantly pinging the server asking for for this over and over and over again so we come up with this idea now there are downsides to that too because servers the way that TCP works they can only have 65,000 ish connections at a time and so imagine if you're Facebook and you've got a you know what a couple of billion users on your platform every server can only have 65,000 connections maximum that's a lot of servers that you can have to spin up to allow all these connections from all these users who maybe on multiple devices I might have multiple browsers open I might have a mobile phone and it's tablet and maybe a smart TV all connecting to Facebook so maybe me as an individual user I've got like 30 of these web socket connections myself multiply that by billions of users right and so TCP only allows for 65,000 ish connections and so we needed a way of so that's the downside to web sockets is you're basically holding open one of those connections for a long period of time where with restful APIs as soon as I get that information I shut down that that connection between me and the server and now somebody else can connect to the server instead so think of it like an actual phone line where I call you on the phone nobody else can call you until we hang up our phone call then there's no call waiting there's yeah there's no there's no idea of call waiting here kids these days they don't know what they missed they're missing out on what that little beep in the background was or even back in the day we didn't even have call waiting to get that beep you just get a busy signal right so TCP was only 65,000 connections per server did you say server yeah and so go ahead so I go ahead no you add I was like TCP I should look into that one time yeah so the idea with the idea with web sockets and web hooks then is you're holding that connection open long-term so the the benefit of rest is that as soon as that connection or as soon as that communication is finished you close that connection which frees up a connection for somebody else where asynchronous you're holding that connection open which blocks somebody else from using that connection and there are there are advanced ways that we're like emitting that and like rotating things around but at the end of the day there are these limitations that are happening because of asynchronous so there's like like I said there's there's advantages and disadvantages to all of these technologies okay cool yay if I'm through a lot already and I'm kind of excited that I'm also still so far following along so that's exciting that's good so okay these these are the two like these are the two most popular kinds of APIs rest by far is like a huge portion of the API market when you're interacting with APIs it's probably going to be a restful API but more and more we're seeing a lot more of these web hooks and and web sockets and whatever using this asynchronous API pattern of you know let's hold that connection open a little bit longer so that you can send me data or I can stream data to you and so it's holding that connection open a little bit longer so that we can stream data back and forth which is a different different sort of mechanism than what rest was meant to be a single transaction so even though HTTP 2 is like here's a bunch of things I want you can send me back a bunch of things it's still like one transaction and rest will still hang up at the end of that with a synchronous it's the same thing if I make that web socket connection I have to authenticate but we're going to hold that connection open for a period of time but if that connection ever closes I've got to reauthenticate again the next time I call because it's still using HTTP at the end of the day so it HTTP is stateless it's kind of dumb so I have to do that authentication every time no matter what and you know the people working on HTTP protocol they're trying to find better ways and different ways of authentication and how do we handle these things to make that a little bit easier make it less chatty over the internet are there other sort of ways of doing this so they're actually already working on an HTTP 3 even though HTTP 2 has only been out for a couple of years and isn't fully adopted they're already working on HTTP 3 because they realize like hey even with the cool stuff that we introduced in version 2 we can still do even better and that's kind of the nice thing about tech is there's always something new to like go and learn and explore and see how things are being built and done yes I will say that is like one of my favorite things as I will never learn run out of topics for teach gen tech ever so I want to I do want to back up a little bit so that we can talk about kind of these HTTP methods because we really only talked about get and post so get was fetching data post is sending data but there are a couple of different ways that we wanted to interact with with data and and so this can even come into play a little bit with asynchronous API calls as well for how we want to interact with the resources that we do because like I said at the end of the day these are all happening over HTTP and so we have access to these HTTP methods to interact with the the resources that we're trying to access so we have get and post and I want to talk about three more so we have delete which says I want to I want you to actually destroy some kind of resource and again you want to make sure you've got good authentication in place because you want to make sure that person's allowed to delete that blog post or they're allowed to delete that image or something like that that's not scary at all that's scary at all even a little but there are you know there are security concerns around authentication and also what we call authorization so off authentication is who are you authorization is what are you allowed to do I could do a whole thing just on off sometime but so we have authentication and authorization and so if you ever hear somebody say off like just a UTH is like well which like are you talking authentication or are you talking authorization because there are two different things authentication is who are you okay who what can you do authorization is your permission basically is like what are you permitted to do and typically you would do authentication and then authorization so now that I know who you are you know what are you allowed to do so with the delete operation it's exactly what it sounds like you're trying to delete or destroy some kind of content or resource and so you have to make sure that you're properly authenticating like who the person is that's trying to to delete something and so I won't nothing nothing more really needs to be said on that one the other two are a little bit analogous but they are meant to be a little bit different one is called put and another is called patch both of these are meant to change a resource in some varying amount so a post is I want to go create a brand new blog post and when you create that blog post it would come back and say okay we've created post number five when you do a put operation you're basically saying like hey remember that blog post number five I actually want to change everything about it except for the ID value I want to change the title I want to change the body I want to change like everything that you're storing about that thing so typically a put is saying I want to keep the ID the same but I want to change everything else about it where a patch is like I just want to change the title of the blog post I just want a tweak part of that resource where a put is like I want to keep the ID the same but I want to change everything about that thing other than the ID so for example a post operation could be I want to create a workout fit so certain kind of pants certain shirt you know and so on maybe I'm going for a really corporate job and so I've got really nice slacks and a button down shirt maybe I wear a tie so I don't work at corporate entities because I hate wearing a tie um and so you know maybe I go work that corporate job for a little while and I'm like okay I'm going to change my job I'm going to go hang out on eans stream and find out how to build a resume and then I need to change everything about what I'm calling my workout fit to now I'm working at a startup so I can wear jeans and a hoodie so I want to change everything about it but I still want to call it workout fit so I'm you know the ID of this outfit is the same but all of the content of that outfit is different because I'm changing everything about it and so a put operation is I want to change everything but the ID stays the same where with a patch a patch is like I want to change I want to change the sweater you know maybe it's not quite startup it's not quite corporate but you know kind of this large-ish kind of company maybe they're not really into hoodies so maybe I'll wear like a button-down shirt but I'm still gonna wear jeans I'm still gonna wear my sneakers but maybe I'm gonna wear like a polo shirt or something instead of a hoodie so put we're still gonna call it a workout fit but we're changing everything about that outfit new shirt new pants new shoes new belt everything is different so put is changing everything but the ID okay me me me me me and hi Ramon uh I don't want to forget to say hi I hope we're still co-working tomorrow Ramon I really enjoy those okay so put is change everything about the output but the but the name of the now it's important to differentiate here that when when we're when we're calling it work outfit we're using that as the ID of the resource and that it's not just part of the resource itself like when when we would talk about a blog title for example or like a blog post the title is part of the blog post you know that gets stored in the database but when we're talking here like I need to I need to go sort all of my outfits or something so outfit number one is my workout fit so every time I interact with outfit number one it's always gonna be my workout fit that kind of thing but maybe the name of it is like you know maybe that like the actual words work outfit is actually part of the resource itself so I just want to be clear here that when we're saying I'm gonna go create an outfit I'm calling it my workout fit and then when I do a put on that resource I'm changing everything about it but I'm still referring to it as the same identifier um it's just for the analogy of it we're calling it a workout fit but the actual text of workout fit could be part of what we're storing in a database okay and pop a smurf hello hello haven't seen you for a bit I know my streams have an inconsistent update all resource attributes or fields based on the ID so so the put is saying I want to change everything about that workout fit the shirt the pants the belt the shoes like everything about it is changing except for the identifier where the patch is saying okay well now now that I'm in my my jeans and my you know band t-shirt and my hoodie uh maybe a patch is like okay you know company would prefer that I didn't wear you know Marvel character t-shirts in a hoodie so I'm gonna just change my shirt but I'm still wearing my sneakers or my flip flops I'm still gonna wear my blue jeans maybe wearing the the beanie or the ball cap is still okay but they want me to change my shirt so I'm only gonna change part of my outfit and that's where we would do a patch operation now some people will use put and patch interoperably and they'll say like oh either one is fine they're both changing some amount of data because nothing really would stop you from a patch to say I want to change my pants and my belt and my shoes and my shirt and whatever I wear on my head nothing would stop a patch operation from actually changing everything in there and then effectively it is a put where a put in its nature was meant to be we really do want to change all of the attributes except the ID where the patch is like oh we only want to tweak some of it but nothing would stop a patch from changing all of those attributes um I put it in more gen terms of changing the lipstick color because that is what's gonna like actually register where if it's changing the shirt then I'm like is it a formal shirt or is it an un for like how is that not in the outfit reference yeah so kind of the analogy I was using is like you know if my original workout fit was like corporate where I'm like wearing a suit high where you know my next job I'm I'm still calling it workout fit but now I'm working at a start-up so I'm gonna go to jeans and a hoodie you know and like a beanie or something but then maybe I need to change it again because they don't want me to wear a hoodie and a beanie but I'm still you know it's still okay to wear jeans and sneakers but they want like a button down shirt instead so that would be a patch operation where you're you're changing part of your outfit but not changing everything about it I like what you said pop a smurf me chase which works out because I am using blue It's not quite smurf blue, but hey, we're close. So this is making a lot of sense and I love that Ramon is here was here because that was the first API that I built on stream. Nice. Way back in the day, we did it. If Ramon's here, hopefully he'll correct me. I believe we did it on ExpressJS
It's not quite smurf blue, but hey, we're close. So this is making a lot of sense and I love that Ramon is here was here because that was the first API that I built on stream. Nice. Way back in the day, we did it. If Ramon's here, hopefully he'll correct me. I believe we did it on ExpressJS Wait, why am I suddenly, is Express a thing for some reason I haven't said ExpressJS in a really long time. Express is the backend framework for nodeJS that actually builds out an API in JavaScript. Okay. Why did I forget that? That's a thing because I, yeah, I haven't used that term in a while
Wait, why am I suddenly, is Express a thing for some reason I haven't said ExpressJS in a really long time. Express is the backend framework for nodeJS that actually builds out an API in JavaScript. Okay. Why did I forget that? That's a thing because I, yeah, I haven't used that term in a while All right, cool. This. So a post sends and creates. A post a post a post is meant to create a resource. So with a post operation, with a post operation, you're not going to send an ID. It's up to the server to assign an ID. It's very, very atypical
All right, cool. This. So a post sends and creates. A post a post a post is meant to create a resource. So with a post operation, with a post operation, you're not going to send an ID. It's up to the server to assign an ID. It's very, very atypical It's not a typical thing for you to try to create something and give it an identifier at the same time. Because that identifier might already exist
It's not a typical thing for you to try to create something and give it an identifier at the same time. Because that identifier might already exist And so if I was connecting to an API to say, go store this blog post, I would say, here's the title, here's the content, here's other metadata about it. And then it would be up to the server to tell me, okay, that's blog post number 12
And so if I was connecting to an API to say, go store this blog post, I would say, here's the title, here's the content, here's other metadata about it. And then it would be up to the server to tell me, okay, that's blog post number 12 And then I can interact with blog post number 12 with a putter, a patch to say I want to update the title or I would need to fix a title in the content or something like that. Or you know what, I want to like delete that one completely
And then I can interact with blog post number 12 with a putter, a patch to say I want to update the title or I would need to fix a title in the content or something like that. Or you know what, I want to like delete that one completely And I just delete blog 12 where you're creating everything but the ID. And so you're creating something and the ID is assigned to you. And then I would say on the post, yeah, create a content and get an ID. Because that's a typical thing that would happen with an API
And I just delete blog 12 where you're creating everything but the ID. And so you're creating something and the ID is assigned to you. And then I would say on the post, yeah, create a content and get an ID. Because that's a typical thing that would happen with an API You're going to create something and you're going to get an ID back. But you get an ID back with your Git or just like, post. With a post, with a post. Okay, cool. And I'm just going to say create content and receive ID. I'm like, if I use the word Git, I'm going to get confused
You're going to create something and you're going to get an ID back. But you get an ID back with your Git or just like, post. With a post, with a post. Okay, cool. And I'm just going to say create content and receive ID. I'm like, if I use the word Git, I'm going to get confused So with a Git operation now, we've got two additional ways of doing a Git where we can say, go get me all my blog posts or give me a paginated list on my blog post or I want to get blog post number 12
So with a Git operation now, we've got two additional ways of doing a Git where we can say, go get me all my blog posts or give me a paginated list on my blog post or I want to get blog post number 12 So with a Git, depending on the path, you can say slash blog and that'll get all your blogs or you can say slash blog slash 12. And that'll give you just that one resource
So with a Git, depending on the path, you can say slash blog and that'll get all your blogs or you can say slash blog slash 12. And that'll give you just that one resource So depending on what you're telling the server you want to get, it's up to the server to determine and up to the API to determine
So depending on what you're telling the server you want to get, it's up to the server to determine and up to the API to determine Am I giving you back one thing? Am I supposed to give you back a list of things? And so along with kind of this idea of rest and what a restful API is, if you're calling a resource without an identifier, you're generally asking for a list of things to come back
Am I giving you back one thing? Am I supposed to give you back a list of things? And so along with kind of this idea of rest and what a restful API is, if you're calling a resource without an identifier, you're generally asking for a list of things to come back So if I say go get slash blog, I'm typically going to be asking for a list of blog posts where if I say go get slash blog slash 12, I want just that one blog post. So if I had a library and I do get slash books, I should get a list of books
So if I say go get slash blog, I'm typically going to be asking for a list of blog posts where if I say go get slash blog slash 12, I want just that one blog post. So if I had a library and I do get slash books, I should get a list of books But if I say get slash books slash 12, I should get just book number 12. So with rest, if you provide an ID, you're getting one thing or you're interacting with one thing
But if I say get slash books slash 12, I should get just book number 12. So with rest, if you provide an ID, you're getting one thing or you're interacting with one thing If you're interacting with a resource where it's just kind of the name of the resource and not a specific one of those resources, then you're generally saying, I want to go get all of them or I want to create a new one of them
If you're interacting with a resource where it's just kind of the name of the resource and not a specific one of those resources, then you're generally saying, I want to go get all of them or I want to create a new one of them So with a get in a post, you would call slash blogs where a get is going to get you all the blog posts doing a post to slash blogs would create a new post. But if you give it an ID value, then you're saying I want to interact with that one specific ID. Man, pls
So with a get in a post, you would call slash blogs where a get is going to get you all the blog posts doing a post to slash blogs would create a new post. But if you give it an ID value, then you're saying I want to interact with that one specific ID. Man, pls Man, pls. Popstar from our Fal fragile breast sweats andして some web frameworks will send patch rather than put. But if they do, you probably don't need to worry about it. Yeah, I agree
Man, pls. Popstar from our Fal fragile breast sweats andして some web frameworks will send patch rather than put. But if they do, you probably don't need to worry about it. Yeah, I agree Yeah, I agree. So again with with patch, like there's nothing stopping a patch from updating all those attributes, but a Nvidia has generally met than the ID. Oh goodness. Okay. What y'all are saying makes sense is just also at the same time. I'm just like, okay, I'm gonna get there
Yeah, I agree. So again with with patch, like there's nothing stopping a patch from updating all those attributes, but a Nvidia has generally met than the ID. Oh goodness. Okay. What y'all are saying makes sense is just also at the same time. I'm just like, okay, I'm gonna get there I will get there. So let's wrap up with this. Let's go. I'm gonna share my screen. If you want to activate my screen. What I'll do is I'll show you in Postman because I work at Postman for those that don't know me. And Postman is just a way that we can kind of interact with an API
I will get there. So let's wrap up with this. Let's go. I'm gonna share my screen. If you want to activate my screen. What I'll do is I'll show you in Postman because I work at Postman for those that don't know me. And Postman is just a way that we can kind of interact with an API So this API is just something I've got local and it's a little to-do list application. And so I've got this endpoint called slash notes, which is just my to-do list. And inside the body here, I'm gonna have a title with some content and whether that thing is completed or not
So this API is just something I've got local and it's a little to-do list application. And so I've got this endpoint called slash notes, which is just my to-do list. And inside the body here, I'm gonna have a title with some content and whether that thing is completed or not So this is the information that I'm sending. So when I do a post operation to slash notes with a restful API, I'm saying, I want to go create one of this kind of resource. So notes is a type of resource on my API. So I'm saying, I want to go create a note. Okay
So this is the information that I'm sending. So when I do a post operation to slash notes with a restful API, I'm saying, I want to go create one of this kind of resource. So notes is a type of resource on my API. So I'm saying, I want to go create a note. Okay Okay. And so when you do a post to a resource name, I'm not saying I want to go post to notes six because that's not valid because I can't create number six. It's up to the software or the API or whatever to assign that ID
Okay. And so when you do a post to a resource name, I'm not saying I want to go post to notes six because that's not valid because I can't create number six. It's up to the software or the API or whatever to assign that ID So I'm gonna say, okay, I want to go walk my dog and I'm gonna send that over to the server. And the response that I get back here says, okay, I gave that ID number one. It was for user number one and here's all the content and whatever
So I'm gonna say, okay, I want to go walk my dog and I'm gonna send that over to the server. And the response that I get back here says, okay, I gave that ID number one. It was for user number one and here's all the content and whatever So the server is giving me a little bit more context about what it created on my behalf. And so it assigned an ID value back to me here. Okay. So now I can use that ID value for all of these other methods. I can patch it. I can delete it
So the server is giving me a little bit more context about what it created on my behalf. And so it assigned an ID value back to me here. Okay. So now I can use that ID value for all of these other methods. I can patch it. I can delete it I can delete it. I can fetch one of them where I can say go get all of my notes. So when we were talking about getting and post on slash notes, this is where I would say, I want to go get slash notes. Now I should get back a list of all of my notes
I can delete it. I can fetch one of them where I can say go get all of my notes. So when we were talking about getting and post on slash notes, this is where I would say, I want to go get slash notes. Now I should get back a list of all of my notes So if I send this over, we see this comes back as an array of objects here. If you understand JSON, the square bracket means you're getting back a list of something. And so when I say go get slash notes, it's saying, oh, you want a list of things
So if I send this over, we see this comes back as an array of objects here. If you understand JSON, the square bracket means you're getting back a list of something. And so when I say go get slash notes, it's saying, oh, you want a list of things Even though I've only got one thing in here, it's still giving me a list of all of the notes that I have on the system right now. That actually might cause us to go on to a tangent yet at the same time. I feel like it's a little important
Even though I've only got one thing in here, it's still giving me a list of all of the notes that I have on the system right now. That actually might cause us to go on to a tangent yet at the same time. I feel like it's a little important I can get what at least conceptually of like when somebody says an XML or regular text, I'm like, cool, XML, I can visualize it at least enough because you can open it in Excel
I can get what at least conceptually of like when somebody says an XML or regular text, I'm like, cool, XML, I can visualize it at least enough because you can open it in Excel So it does do some things like it's a little easier to visualize where when somebody says JSON, I'm like, or YAML, I'm like, those are things, yeah, those are things. Those do exist. I know they do and I know they go to APIs other than that, I have no idea what they are. That's a whole other topic
So it does do some things like it's a little easier to visualize where when somebody says JSON, I'm like, or YAML, I'm like, those are things, yeah, those are things. Those do exist. I know they do and I know they go to APIs other than that, I have no idea what they are. That's a whole other topic Oh, but Nana's. I'll give you like the five, I'll give you like a 30 second intro. So JSON, do you know what JSON stands for? Isn't it JavaScript? Object notation. Yeah. And so this would be a way of defining an object in JavaScript. Basically saying, I've got an object
Oh, but Nana's. I'll give you like the five, I'll give you like a 30 second intro. So JSON, do you know what JSON stands for? Isn't it JavaScript? Object notation. Yeah. And so this would be a way of defining an object in JavaScript. Basically saying, I've got an object That's what the curly braces are sort of wrapping an inside of that. I have an attribute called data and inside of that, like that, that attributes value is an array. That array is an array of JavaScript objects. And that object has an attribute called ID, user ID, title, content, and so on
That's what the curly braces are sort of wrapping an inside of that. I have an attribute called data and inside of that, like that, that attributes value is an array. That array is an array of JavaScript objects. And that object has an attribute called ID, user ID, title, content, and so on And so JSON is just a way of structuring data that you can pull it into JavaScript. And actually, now you've got actual JavaScript objects. So it's just a text representation of what a JavaScript object is under the hood
And so JSON is just a way of structuring data that you can pull it into JavaScript. And actually, now you've got actual JavaScript objects. So it's just a text representation of what a JavaScript object is under the hood But we as a community, we kind of adopted that going, oh, that's actually really easy to read compared to XML and compared to other things that were a lot more verbose
But we as a community, we kind of adopted that going, oh, that's actually really easy to read compared to XML and compared to other things that were a lot more verbose JSON is a much more compact amount of data that we send at the expense of losing identification around, well, this field can only be an integer. This field can only be a string, or this field could be a string-oriented. JSON doesn't have the idea of data types
JSON is a much more compact amount of data that we send at the expense of losing identification around, well, this field can only be an integer. This field can only be a string, or this field could be a string-oriented. JSON doesn't have the idea of data types And so you can't say, oh, this field has to be an integer where XML can define those kinds of things. I'm literally writing to like ask, so Josh Goldberg who wrote a learning type script comes on my show every other week
And so you can't say, oh, this field has to be an integer where XML can define those kinds of things. I'm literally writing to like ask, so Josh Goldberg who wrote a learning type script comes on my show every other week And I'm literally writing, ask about JSON versus type scripts and you you just said it. JSON does not assign data types. Yeah. Well, type script and JSON are two different things. So they are
And I'm literally writing, ask about JSON versus type scripts and you you just said it. JSON does not assign data types. Yeah. Well, type script and JSON are two different things. So they are So they are. Yeah, JSON is just a way of yeah, JSON is just a way of expressing an object modeled in just text that we can that we as humans can read
So they are. Yeah, JSON is just a way of yeah, JSON is just a way of expressing an object modeled in just text that we can that we as humans can read And so now, so the idea that we're kind of coming to here in postman was when we do a get or a post on just the name of the resource, when we do a post we're saying I want to create one of those resources when we do a get on that resource name, we're typically in a restful API, we're saying I want to go get a list of all of those resources
And so now, so the idea that we're kind of coming to here in postman was when we do a get or a post on just the name of the resource, when we do a post we're saying I want to create one of those resources when we do a get on that resource name, we're typically in a restful API, we're saying I want to go get a list of all of those resources So now that I got I know that I've got an ID of one, now I can go in and I can change I can fetch that one. I can say go get note number one. And when I send this over, it kind of looks like the last payload that we got, but this is only a single object
So now that I got I know that I've got an ID of one, now I can go in and I can change I can fetch that one. I can say go get note number one. And when I send this over, it kind of looks like the last payload that we got, but this is only a single object It's not an array of these objects because I said I want to go get that one resource. So if we give it an ID as part of that path, what rest is saying is I want to go get that one resource. And then it gives me back that one resource
It's not an array of these objects because I said I want to go get that one resource. So if we give it an ID as part of that path, what rest is saying is I want to go get that one resource. And then it gives me back that one resource Same thing I can do a patch where I can say, okay, well, I want to change this up. I can't change the ID that's invalid, but maybe maybe instead of saying walk the dog, I want to change the title to say I want to feed the dog and maybe I have completed that
Same thing I can do a patch where I can say, okay, well, I want to change this up. I can't change the ID that's invalid, but maybe maybe instead of saying walk the dog, I want to change the title to say I want to feed the dog and maybe I have completed that So I can change that value to true and I can send that over. I can't change that. I wasn't trying to change that. Okay, something broke on my software, but if I were to go back and fetch that one, it would have changed the title to like feed the dog and completed would have been true
So I can change that value to true and I can send that over. I can't change that. I wasn't trying to change that. Okay, something broke on my software, but if I were to go back and fetch that one, it would have changed the title to like feed the dog and completed would have been true So I've got a bug in my software apparently, though, I'll go fix. But the patch, because we're giving the patch an ID value, it's saying I want to go change this one resource. Now it's not a typical restful endpoint
So I've got a bug in my software apparently, though, I'll go fix. But the patch, because we're giving the patch an ID value, it's saying I want to go change this one resource. Now it's not a typical restful endpoint Say I want to go patch all of the things that would typically be an invalid kind of instruction because I wouldn't necessarily have access to say go change everything in the database to go change all of the titles because you wouldn't want to change all the titles to one thing
Say I want to go patch all of the things that would typically be an invalid kind of instruction because I wouldn't necessarily have access to say go change everything in the database to go change all of the titles because you wouldn't want to change all the titles to one thing You wouldn't want to change the completed status to all be false. You would want to go through those methodically and say go get a list of all those resources and then iterate over that and change the flags or change the titles appropriately. And then I can go in and I can delete that one note
You wouldn't want to change the completed status to all be false. You would want to go through those methodically and say go get a list of all those resources and then iterate over that and change the flags or change the titles appropriately. And then I can go in and I can delete that one note So this comes back with nothing, but the status code here of 204 basically indicates that worked, but it had nothing more to tell me about that. So now if I try to go get all of my notes, it comes back as an empty list because I said I want to go delete that one resource
So this comes back with nothing, but the status code here of 204 basically indicates that worked, but it had nothing more to tell me about that. So now if I try to go get all of my notes, it comes back as an empty list because I said I want to go delete that one resource So when I do a getter a post on the resource name only, I'm saying I either want to create that resource or I want to get a list of all of those resources. But if I give it an ID value, like slash one, I'm saying go get me that one resource
So when I do a getter a post on the resource name only, I'm saying I either want to create that resource or I want to get a list of all of those resources. But if I give it an ID value, like slash one, I'm saying go get me that one resource Now if I try to go fetch this, I get a 404, well, again, with a software, I need to be able to tell it to send me back a 404, but typically this would come back with a 404 saying I don't have that resource
Now if I try to go fetch this, I get a 404, well, again, with a software, I need to be able to tell it to send me back a 404, but typically this would come back with a 404 saying I don't have that resource Or if I'm not authorized to see it, I might still give back a 404 going, I don't know what you're talking about, dude. Where if I say, oh, you're not allowed to see resource number one, it's like, oh, there is a resource number one
Or if I'm not authorized to see it, I might still give back a 404 going, I don't know what you're talking about, dude. Where if I say, oh, you're not allowed to see resource number one, it's like, oh, there is a resource number one Let me try and hack into your system because I know that there's something there because you just told me I'm not allowed to access it
Let me try and hack into your system because I know that there's something there because you just told me I'm not allowed to access it So a better security way of writing an API, if somebody tries to access something they're not authorized to, is to give them back a 404 saying, I don't know what you're talking about. That doesn't exist here
So a better security way of writing an API, if somebody tries to access something they're not authorized to, is to give them back a 404 saying, I don't know what you're talking about. That doesn't exist here And then I'm less likely to try to break in and say, well, you know, I'm sure there must be an ID of one. So yeah, there's security implications about how to build APIs and so on
And then I'm less likely to try to break in and say, well, you know, I'm sure there must be an ID of one. So yeah, there's security implications about how to build APIs and so on But I wanted to kind of show like these, these are those five methods you've got to get the put in the patch, like we said, are kind of analogous. And then we've got the delete
But I wanted to kind of show like these, these are those five methods you've got to get the put in the patch, like we said, are kind of analogous. And then we've got the delete But in this case, I wanted to show the difference between fetching one of something or just saying fetch all of something. There is a little bit of a different flavor on this. And this is where, you know, everybody that writes an API does it a little bit differently
But in this case, I wanted to show the difference between fetching one of something or just saying fetch all of something. There is a little bit of a different flavor on this. And this is where, you know, everybody that writes an API does it a little bit differently Here's a dad joke API where I can just call this API and it's going to go fetch a single dad joke. But I'm not saying which dad joke to get. I'm just saying go get me a dad joke
Here's a dad joke API where I can just call this API and it's going to go fetch a single dad joke. But I'm not saying which dad joke to get. I'm just saying go get me a dad joke And so in this case, I'm, you know, this, this might be better where I had like go get jokes, you know, sample, you know, where I pass in like a size of one or something like that
And so in this case, I'm, you know, this, this might be better where I had like go get jokes, you know, sample, you know, where I pass in like a size of one or something like that Like that might be a better restful path where I'm saying, this is what I want to go get as opposed to just go call the domain name because now it's up to the software to go, oh, you're hitting the domain name. You only want one joke. So it's, it's not as flexible
Like that might be a better restful path where I'm saying, this is what I want to go get as opposed to just go call the domain name because now it's up to the software to go, oh, you're hitting the domain name. You only want one joke. So it's, it's not as flexible But this would be a way of, you know, a different way of writing a restful API where I do a get operation on this endpoint and I get one joke coming back
But this would be a way of, you know, a different way of writing a restful API where I do a get operation on this endpoint and I get one joke coming back But a better restful path would be something like I want to go get a joke's resource and I want to get a sample of that and that sample size is going to be like one joke or maybe I want to get back five dad jokes or something. That would be a better way of structuring that restful path
But a better restful path would be something like I want to go get a joke's resource and I want to get a sample of that and that sample size is going to be like one joke or maybe I want to get back five dad jokes or something. That would be a better way of structuring that restful path But again, this is where as programmers, we wanted the flexibility of being able to write these APIs anyway that we wanted to. But for the end users, like, well, but my expectation, if I call that endpoint, I should have gotten back like a whole bunch of stuff
But again, this is where as programmers, we wanted the flexibility of being able to write these APIs anyway that we wanted to. But for the end users, like, well, but my expectation, if I call that endpoint, I should have gotten back like a whole bunch of stuff And so it can create confusion for people that are trying to actually go use APIs for like, how do I use your API? Because yours is going to be different from their API and it's going to be different from their API because we don't rigidly follow restful practices on how these things should work
And so it can create confusion for people that are trying to actually go use APIs for like, how do I use your API? Because yours is going to be different from their API and it's going to be different from their API because we don't rigidly follow restful practices on how these things should work So yeah, anyway, postman will also work with asynchronous APIs. You can open up web sockets and watch data transfer back and forth and so on and so on. Really quick, y'all. I'm going to be right back. I need to use my inhaler really quick. Yep, no worries
So yeah, anyway, postman will also work with asynchronous APIs. You can open up web sockets and watch data transfer back and forth and so on and so on. Really quick, y'all. I'm going to be right back. I need to use my inhaler really quick. Yep, no worries Yep, no worries. If anybody's got questions about APIs or anything like that, feel free to drop it. So yeah, Bob Smith, I've been working at Postman for a little over a year. I started last January and I have a blast on the developer relations team over there
Yep, no worries. If anybody's got questions about APIs or anything like that, feel free to drop it. So yeah, Bob Smith, I've been working at Postman for a little over a year. I started last January and I have a blast on the developer relations team over there So I get to do all kinds of really fun workshops and tech conferences and videos and blog posts and all kinds of content around API education. And I actually met Jen at a local Denver area API meetup. And we got chatting. She's like, I would love to learn more about APIs
So I get to do all kinds of really fun workshops and tech conferences and videos and blog posts and all kinds of content around API education. And I actually met Jen at a local Denver area API meetup. And we got chatting. She's like, I would love to learn more about APIs I'm like, why don't I come on your stream and we'll chat about APIs? So we kind of coordinated a little bit on what we're going to talk about. And there's like so much more we could get into with different kinds of APIs and so on. But yeah, good to see everybody
I'm like, why don't I come on your stream and we'll chat about APIs? So we kind of coordinated a little bit on what we're going to talk about. And there's like so much more we could get into with different kinds of APIs and so on. But yeah, good to see everybody So at the very beginning of the session, we were talking about like how APIs kind of run the world right now. Like there's so many things that we control over APIs. Like pretty much everything on your phone is going to be communicating over these kinds of APIs
So at the very beginning of the session, we were talking about like how APIs kind of run the world right now. Like there's so many things that we control over APIs. Like pretty much everything on your phone is going to be communicating over these kinds of APIs Maybe not forgetting dad jokes, but for like fetching the weather and things like that. These all interact over APIs like all these lights I have in the background
Maybe not forgetting dad jokes, but for like fetching the weather and things like that. These all interact over APIs like all these lights I have in the background Those all connect with an API where I make an API call saying go get the identifier for each one of those individual light panels and then go set all these random lights
Those all connect with an API where I make an API call saying go get the identifier for each one of those individual light panels and then go set all these random lights So I can hit a button and it makes them all blink and flash because you know, softwares fast to actually go interact with those APIs to go make all those lights appear to blink when really it's just sending random patterns of like turn this light on or off
So I can hit a button and it makes them all blink and flash because you know, softwares fast to actually go interact with those APIs to go make all those lights appear to blink when really it's just sending random patterns of like turn this light on or off And if it's on, set it to this random color and then you know, wait half a second and do it again. And then do that like a bunch of times. And so we can we use these APIs to interact with a lot of different things in the world
And if it's on, set it to this random color and then you know, wait half a second and do it again. And then do that like a bunch of times. And so we can we use these APIs to interact with a lot of different things in the world So like your smartwatch, your phone, those are all using APIs for things like banking, email, calendars, notification events, all those are happening over APIs. And thank you
So like your smartwatch, your phone, those are all using APIs for things like banking, email, calendars, notification events, all those are happening over APIs. And thank you And thank you. I will say this is a perk of, you know, when you have another streamer on your show, they just can like handle themselves if you disappear for some reason
And thank you. I will say this is a perk of, you know, when you have another streamer on your show, they just can like handle themselves if you disappear for some reason I will say I am very, very surprised that after like 80 plus streams, that is the first time I've had any asthma issues on stream. But it was because I started like choking on something which made me cough, which made my asthma and I was like, I'm not going to be alone. So thank you
I will say I am very, very surprised that after like 80 plus streams, that is the first time I've had any asthma issues on stream. But it was because I started like choking on something which made me cough, which made my asthma and I was like, I'm not going to be alone. So thank you So thank you. I thought I was just getting you really worked up about APIs. That's all the yeah. Well, I am really excited about APIs because it was something that is very difficult for people to explain. I see. In in in very basic terms. This is a lot of tech in general
So thank you. I thought I was just getting you really worked up about APIs. That's all the yeah. Well, I am really excited about APIs because it was something that is very difficult for people to explain. I see. In in in very basic terms. This is a lot of tech in general Is it's difficult to explain the high level? And I know especially for those who are very, very technical, which I get because you're like, I don't know like you just do the thing
Is it's difficult to explain the high level? And I know especially for those who are very, very technical, which I get because you're like, I don't know like you just do the thing And this is why I do really appreciate you coming on the show because it's like for myself at least if I don't understand all the things that the theory behind it, it makes it really difficult for me to actually implement what I'm doing
And this is why I do really appreciate you coming on the show because it's like for myself at least if I don't understand all the things that the theory behind it, it makes it really difficult for me to actually implement what I'm doing Where other people are just like, oh, this works with this cool. Yeah, or it tends to be like, go do this, go do this, go do this, and it magically works. But you don't understand the why
Where other people are just like, oh, this works with this cool. Yeah, or it tends to be like, go do this, go do this, go do this, and it magically works. But you don't understand the why Like how is that actually working? So that's why I wanted to kind of go into like HTTP and talk about these different kinds of protocols like B1Mine said, you know, coming back to modern web, I thought all APIs were rest APIs
Like how is that actually working? So that's why I wanted to kind of go into like HTTP and talk about these different kinds of protocols like B1Mine said, you know, coming back to modern web, I thought all APIs were rest APIs I mean, most of them are like most of the APIs that you interact with are going to be restful APIs
I mean, most of them are like most of the APIs that you interact with are going to be restful APIs But we're seeing a bigger shift into the asynchronous APIs where we're getting into web hooks and web sockets because we can have more of that interactive kind of thing where there's less chatter over the internet of constantly like, hey, Jen or those cookies done yet, are they done yet
But we're seeing a bigger shift into the asynchronous APIs where we're getting into web hooks and web sockets because we can have more of that interactive kind of thing where there's less chatter over the internet of constantly like, hey, Jen or those cookies done yet, are they done yet Are they done yet? How about now? You know, I'm still waiting for those cookies
Are they done yet? How about now? You know, I'm still waiting for those cookies Like I don't have to pull the server over and over and over again, waiting for a response that says, you know, some task that I gave it is finished. And so we're starting to see a lot more asynchronous APIs happening
Like I don't have to pull the server over and over and over again, waiting for a response that says, you know, some task that I gave it is finished. And so we're starting to see a lot more asynchronous APIs happening And they've actually been supported for a number of years in browsers to actually connect over HTTP 2 for web socket connections. That's actually been around for a while. We can build rest APIs on HTTP 2, but it's less common. Rest is still kind of in the 1
And they've actually been supported for a number of years in browsers to actually connect over HTTP 2 for web socket connections. That's actually been around for a while. We can build rest APIs on HTTP 2, but it's less common. Rest is still kind of in the 11 version of HTTP where it's like single request, single response. Because that was kind of the nature of rest. It was meant to be, hey, I want to interact in a single way with a single response or single request and I get a single response, telling me whether it worked or not
1 version of HTTP where it's like single request, single response. Because that was kind of the nature of rest. It was meant to be, hey, I want to interact in a single way with a single response or single request and I get a single response, telling me whether it worked or not And that's all I need. So I don't know if rest is ever actually going to move to HTTP 2. There aren't any real strong advantages to moving rest to HTTP
And that's all I need. So I don't know if rest is ever actually going to move to HTTP 2. There aren't any real strong advantages to moving rest to HTTP I mean, there are some things about the protocol that would make it a little bit faster, but there's not like a big like, oh, yeah, if we move to HTTP 2, rest is going to be like a gazillion times better
I mean, there are some things about the protocol that would make it a little bit faster, but there's not like a big like, oh, yeah, if we move to HTTP 2, rest is going to be like a gazillion times better Because it would mean changing a lot about what rest is and it would actually shift more into what we're already doing with asynchronous APIs
Because it would mean changing a lot about what rest is and it would actually shift more into what we're already doing with asynchronous APIs So I'm a feeling that rest APIs are going to kind of linger on like older versions of HTTP for a while where all the asynchronous stuff and the more performance types of APIs are getting in HTTP 2 and starting development on HTTP 3
So I'm a feeling that rest APIs are going to kind of linger on like older versions of HTTP for a while where all the asynchronous stuff and the more performance types of APIs are getting in HTTP 2 and starting development on HTTP 3 But yeah, going back to like what we talked about at the very beginning of the stream, gosh, it has been two hours. Yeah, I was like, I'm ready notes to bug you about later. Yeah, in other words, is the whole idea of abstraction, like we use APIs to abstract like, hey, I need to go do a thing
But yeah, going back to like what we talked about at the very beginning of the stream, gosh, it has been two hours. Yeah, I was like, I'm ready notes to bug you about later. Yeah, in other words, is the whole idea of abstraction, like we use APIs to abstract like, hey, I need to go do a thing I need to go perform some kind of operation. It's not like I know all the different steps to go store that blog post in the database. So I just need to go tell a server like, hey, here's some details about a blog post. Can you store that please? And the server is like, yeah, I got you fam
I need to go perform some kind of operation. It's not like I know all the different steps to go store that blog post in the database. So I just need to go tell a server like, hey, here's some details about a blog post. Can you store that please? And the server is like, yeah, I got you fam Like no problem. We got that handled. And it's the kind of the same thing when we write code in JavaScript or Python. We're just saying, like, hey, I need an array of strings. We're not in there manually manipulating the memory and like telling the CPU how to talk to the RAM
Like no problem. We got that handled. And it's the kind of the same thing when we write code in JavaScript or Python. We're just saying, like, hey, I need an array of strings. We're not in there manually manipulating the memory and like telling the CPU how to talk to the RAM Like it's all abstraction at the end of the day, whether we're talking to an API, you know, like a like a weather API or a dad joke API or whether we're using our programming languages API, it's all an abstraction for I want to go do a thing and something else knows kind of the underlying instructions of how to actually make that happen and then return back a success or a failure
Like it's all abstraction at the end of the day, whether we're talking to an API, you know, like a like a weather API or a dad joke API or whether we're using our programming languages API, it's all an abstraction for I want to go do a thing and something else knows kind of the underlying instructions of how to actually make that happen and then return back a success or a failure Oh my goodness. Me and my coffee. I will say like just future things I'm curious about
Oh my goodness. Me and my coffee. I will say like just future things I'm curious about Of course, is like digging in deeper to this and something that I know that I'll be working on and a big reason y'all that I timing just happened to be really great of I since I've been learning Postgres is I'm going to need to set it up on my website and that's going to involve working with something like Prisma, which will then need an API to be able to do all of that
Of course, is like digging in deeper to this and something that I know that I'll be working on and a big reason y'all that I timing just happened to be really great of I since I've been learning Postgres is I'm going to need to set it up on my website and that's going to involve working with something like Prisma, which will then need an API to be able to do all of that So this is a great timing as well as really starting to understand where we use APIs is something that I'm very, very grateful for because I like I know that they connect everything but actually being able to see them in action is something new to me in the future
So this is a great timing as well as really starting to understand where we use APIs is something that I'm very, very grateful for because I like I know that they connect everything but actually being able to see them in action is something new to me in the future And this is something that I completely forgot about until you are the very end. Soap versus rest. Because all that's what I hear a lot about, which is interesting because it's you also said asyncronous, which cool. Event streaming because that seems to be all the rage
And this is something that I completely forgot about until you are the very end. Soap versus rest. Because all that's what I hear a lot about, which is interesting because it's you also said asyncronous, which cool. Event streaming because that seems to be all the rage And I'm like okay cool, which events streaming is just asyncronous, right? It tends to be yeah. Okay. Jason and XML in more detail. And TCP, which none of the any or all of these might be a you questions or just in general, I need to find somebody to talk to me about them
And I'm like okay cool, which events streaming is just asyncronous, right? It tends to be yeah. Okay. Jason and XML in more detail. And TCP, which none of the any or all of these might be a you questions or just in general, I need to find somebody to talk to me about them Those are so so I can cover soap and in 30 seconds or less. Oh, yay. So soap actually stands for simple object access protocol. So you're still interacting with a single resource. So you're saying I want to go manipulate a simple object
Those are so so I can cover soap and in 30 seconds or less. Oh, yay. So soap actually stands for simple object access protocol. So you're still interacting with a single resource. So you're saying I want to go manipulate a simple object So you're you're interacting with an object, but they wanted to call it like out, you know, we're going to call it this simple protocol. And so it's a simple object access protocol. And when it was created, it was pretty much primarily only using XML. XML looks alike like HTML
So you're you're interacting with an object, but they wanted to call it like out, you know, we're going to call it this simple protocol. And so it's a simple object access protocol. And when it was created, it was pretty much primarily only using XML. XML looks alike like HTML It's still a markup language where XML is a very verbose structure of the data where you're defining fields and what data types they can have. And if it's a number, what range can that number be? And but it made it very, very verbose
It's still a markup language where XML is a very verbose structure of the data where you're defining fields and what data types they can have. And if it's a number, what range can that number be? And but it made it very, very verbose And so even sending back like, you know, here's my to-do list with, you know, go walk the dog and and so on. And whether it's completed or not might be 10 times as much content actually being transferred back. Well, back in the day, when soap started like soap has been around for quite a while
And so even sending back like, you know, here's my to-do list with, you know, go walk the dog and and so on. And whether it's completed or not might be 10 times as much content actually being transferred back. Well, back in the day, when soap started like soap has been around for quite a while It started in sometime in the late 90s. I want to say like 97, 98 maybe, where rest, rest kind of came into play like shortly after that because people are like, surely we can do better than soap
It started in sometime in the late 90s. I want to say like 97, 98 maybe, where rest, rest kind of came into play like shortly after that because people are like, surely we can do better than soap And but soap is still around like even Salesforce, folks that are familiar with with Salesforce, even Salesforce APIs were on soap for the longest time
And but soap is still around like even Salesforce, folks that are familiar with with Salesforce, even Salesforce APIs were on soap for the longest time But but doing things over over XML because it was so much information, so much content, what we didn't have back in the day was a way to compress that data before we transferred it to a server where now browsers, if you ever look at the user agent string of like what identifies your browser, you'll see the letters GZ or GZip
But but doing things over over XML because it was so much information, so much content, what we didn't have back in the day was a way to compress that data before we transferred it to a server where now browsers, if you ever look at the user agent string of like what identifies your browser, you'll see the letters GZ or GZip And that's basically saying like, hey, while we're talking like, while we got this communication channel open, by the way, I can compress this data. Can you also compress data when you send it back? And so it actually crunches that data down a little bit in transit
And that's basically saying like, hey, while we're talking like, while we got this communication channel open, by the way, I can compress this data. Can you also compress data when you send it back? And so it actually crunches that data down a little bit in transit And so we're not sending these massive gluts of text anymore. They do get compressed, but XML compressed is still larger than compressed JSON because JSON just takes up less room overall
And so we're not sending these massive gluts of text anymore. They do get compressed, but XML compressed is still larger than compressed JSON because JSON just takes up less room overall And so XML is still a very verbose way of explaining things, it kind of over explains things, but there are there are benefits to it as well like the data typing of this field can only be an integer from one to 10. And this field has to be a Boolean and it can only be true false
And so XML is still a very verbose way of explaining things, it kind of over explains things, but there are there are benefits to it as well like the data typing of this field can only be an integer from one to 10. And this field has to be a Boolean and it can only be true false And if it's not set, we're going to default it to false and things like like XML is a very descriptive kind of markdown where JSON's just like, here's a field, it's set to false. Hope that's good with you
And if it's not set, we're going to default it to false and things like like XML is a very descriptive kind of markdown where JSON's just like, here's a field, it's set to false. Hope that's good with you And then it's up to the server to actually validate that what the user sent over actually validates properly of like, wait, you sent me a one, it's supposed to be a Boolean, am I supposed to interpret that as a true like a one or a zero? Or did you accidentally send me an integer
And then it's up to the server to actually validate that what the user sent over actually validates properly of like, wait, you sent me a one, it's supposed to be a Boolean, am I supposed to interpret that as a true like a one or a zero? Or did you accidentally send me an integer And so there there ends up being a lot more confusion about actually sending the right kinds of data over JSON
And so there there ends up being a lot more confusion about actually sending the right kinds of data over JSON There are binary versions of JSON called Bson, it's a binary structure of that. And then there are other mechanisms that can use like binary payloads of data in different kinds of APIs that actually maintain that data type. But soap back in the day was just XML and it was very, very verbose
There are binary versions of JSON called Bson, it's a binary structure of that. And then there are other mechanisms that can use like binary payloads of data in different kinds of APIs that actually maintain that data type. But soap back in the day was just XML and it was very, very verbose And so a lot of people just once once rest kind of came out, they're like, okay, we don't need to use soap anymore. And so it's so quickly fell off by 2005, like very few APIs were soap anymore. And then it still took like another decade for most of the other soap APIs to go away
And so a lot of people just once once rest kind of came out, they're like, okay, we don't need to use soap anymore. And so it's so quickly fell off by 2005, like very few APIs were soap anymore. And then it still took like another decade for most of the other soap APIs to go away But they're still out there. And they still use XML. But soap was one of the first ways of actually interacting over the internet because the internet was still relatively new back then. You know, the internet really only came around like 93, 94 as far as like a public internet
But they're still out there. And they still use XML. But soap was one of the first ways of actually interacting over the internet because the internet was still relatively new back then. You know, the internet really only came around like 93, 94 as far as like a public internet Because that's kind of when HTML started being invented was around 93, 94. And then soap kind of came in to play around like, hey, can we just get the computers to talk where it's not everything has to happen through a browser. And so that's where soap kind of came to be. And then soap
Because that's kind of when HTML started being invented was around 93, 94. And then soap kind of came in to play around like, hey, can we just get the computers to talk where it's not everything has to happen through a browser. And so that's where soap kind of came to be. And then soap And then soap. Interesting. You know, got kind of overtaken by rest. Rest is now still very, very dominant. But we're starting to see like web hooks and web sockets kind of like catch up a little bit, but not nearly as much
And then soap. Interesting. You know, got kind of overtaken by rest. Rest is now still very, very dominant. But we're starting to see like web hooks and web sockets kind of like catch up a little bit, but not nearly as much And then we're seeing other kinds of APIs that are like GRPC and so on that are more performance. They're faster. That's a whole other. That's that's we're getting more that's more getting into like performance tuning of like I need the fastest possible way of like sending this data
And then we're seeing other kinds of APIs that are like GRPC and so on that are more performance. They're faster. That's a whole other. That's that's we're getting more that's more getting into like performance tuning of like I need the fastest possible way of like sending this data Yeah, I wrote it down. That is something that I'm I'm ready. So I just double wrote it whatever. But GRPC and like finding out more about that and like events streaming and those things specifically would be interesting to learn about
Yeah, I wrote it down. That is something that I'm I'm ready. So I just double wrote it whatever. But GRPC and like finding out more about that and like events streaming and those things specifically would be interesting to learn about More I think those are also more of my own curiosity because companies I've worked for use those terms a lot and I never understood them. That has driven a lot of my curiosity
More I think those are also more of my own curiosity because companies I've worked for use those terms a lot and I never understood them. That has driven a lot of my curiosity Yeah, knowing how to interact with web hooks is actually a really cool part of being in programming these days because it does get into that event driven architecture and the event driven kind of internet of hey a thing happened
Yeah, knowing how to interact with web hooks is actually a really cool part of being in programming these days because it does get into that event driven architecture and the event driven kind of internet of hey a thing happened I'm going to let you know where you don't have to call me and find out if those cookies are done. I'm going to let you know when the cookies are finished baking
I'm going to let you know where you don't have to call me and find out if those cookies are done. I'm going to let you know when the cookies are finished baking And so it allows for a lot more flexibility and power around like you know when things actually happen you get notified instead of having to go request you know whether something is finished or not. So it just it it allows for a lot more kind of cool things to happen on the internet
And so it allows for a lot more flexibility and power around like you know when things actually happen you get notified instead of having to go request you know whether something is finished or not. So it just it it allows for a lot more kind of cool things to happen on the internet But like we said you know there are disadvantages too of like holding those connections open and that means maybe other people can't connect to that server. So now as the as the service as Facebook or Twitter now I need even more servers
But like we said you know there are disadvantages too of like holding those connections open and that means maybe other people can't connect to that server. So now as the as the service as Facebook or Twitter now I need even more servers Jesus more electricity and more resources from the planet and you know there's a whole other soapbox that's the whole other soapbox we can get into
Jesus more electricity and more resources from the planet and you know there's a whole other soapbox that's the whole other soapbox we can get into But yeah there's there is a there's a ton that goes into it that a lot of people don't really understand like how the internet actually works and how these things communicate. But the starting point is like the internet kind of runs on APIs and knowing how these things actually work is good
But yeah there's there is a there's a ton that goes into it that a lot of people don't really understand like how the internet actually works and how these things communicate. But the starting point is like the internet kind of runs on APIs and knowing how these things actually work is good And I think from here we could start to go down a lower level and start getting into like how are these things actually transmitting over the wires and like how does that actually route around the internet
And I think from here we could start to go down a lower level and start getting into like how are these things actually transmitting over the wires and like how does that actually route around the internet What if my ISP goes down or what if whatever it connects to goes down is there's still a way that I can get that data if something breaks the internet you know. That's a big thing that I'm definitely looking forward to as well. So y'all I just gave Ian a shout out on the channel
What if my ISP goes down or what if whatever it connects to goes down is there's still a way that I can get that data if something breaks the internet you know. That's a big thing that I'm definitely looking forward to as well. So y'all I just gave Ian a shout out on the channel Go make sure you follow his Twitch as well. And thank you Ron for the follow. I appreciate it. We definitely have gone through a lot. I'm kind of like I'm totally wrapping things up. Sometimes I'm a little awkward about it and I say that because I'm starting to get mushy brain
Go make sure you follow his Twitch as well. And thank you Ron for the follow. I appreciate it. We definitely have gone through a lot. I'm kind of like I'm totally wrapping things up. Sometimes I'm a little awkward about it and I say that because I'm starting to get mushy brain Where I'm like you're saying things and I'm curious but they're not computing as well. And this is what I like to call it mushy brain or I'm just like have my saturation whatever you want to call it. Everyone go bug Ian to be back on the show because there is a lot
Where I'm like you're saying things and I'm curious but they're not computing as well. And this is what I like to call it mushy brain or I'm just like have my saturation whatever you want to call it. Everyone go bug Ian to be back on the show because there is a lot You don't have to bug me to come on this show. Yay. And then also make sure to go hit him up on Twitter and LinkedIn especially for anyone looking for work. Like I honestly especially in the tech field. Ian is so good at resumes and helping with job searches and teaching about all of this
You don't have to bug me to come on this show. Yay. And then also make sure to go hit him up on Twitter and LinkedIn especially for anyone looking for work. Like I honestly especially in the tech field. Ian is so good at resumes and helping with job searches and teaching about all of this And you're going to ask really interesting questions or when it doesn't click he's very kind about it. I say that as coming from someone that did do that. So and thank you again Ian. Anything you want to say before we say I go raid them to somebody. Oh, Vita is saying links. Links
And you're going to ask really interesting questions or when it doesn't click he's very kind about it. I say that as coming from someone that did do that. So and thank you again Ian. Anything you want to say before we say I go raid them to somebody. Oh, Vita is saying links. Links Links. Yeah, I'll drop some links. So I tend to use eindougles 736 on all the platforms. So like Twitter, Twitch, kick Instagram, link tree. I use the same username on all of those. Everything. Yeah. Yeah, except my YouTube channel. My YouTube channel is just eindougles
Links. Yeah, I'll drop some links. So I tend to use eindougles 736 on all the platforms. So like Twitter, Twitch, kick Instagram, link tree. I use the same username on all of those. Everything. Yeah. Yeah, except my YouTube channel. My YouTube channel is just eindougles And I've got a lot of like free videos. I'm going to eindougles.lc as a website and it'll kind of branch you off on all the different things that I do. Like the live stream and the 3D printing stuff and you know all that kind of stuff that's all through there. The tech interview
And I've got a lot of like free videos. I'm going to eindougles.lc as a website and it'll kind of branch you off on all the different things that I do. Like the live stream and the 3D printing stuff and you know all that kind of stuff that's all through there. The tech interview The tech interview.guide, all my career advice. It's all free. I've got newsletters you can sign up for on there, all that kind of stuff. So go check out eindougles.lc. Yeah. And you can go find me on all the different platforms from there. But yeah, it's all free. So there's no paywalls
The tech interview.guide, all my career advice. It's all free. I've got newsletters you can sign up for on there, all that kind of stuff. So go check out eindougles.lc. Yeah. And you can go find me on all the different platforms from there. But yeah, it's all free. So there's no paywalls The only thing you would ever need to register for is like the newsletters. If you want to get tech newsletters about like how to get ready for interviews and why we ask the kinds of questions that we do in interviews. I kind of approach her from a hiring manager's mind
The only thing you would ever need to register for is like the newsletters. If you want to get tech newsletters about like how to get ready for interviews and why we ask the kinds of questions that we do in interviews. I kind of approach her from a hiring manager's mind But yeah, I'll be streaming in about five hours. I'm going to do some some life coding tonight. Using API is we're going to be building some chatbot stuff. So if you're free to drop by the live stream, if you want to hang out and nerd out some more
But yeah, I'll be streaming in about five hours. I'm going to do some some life coding tonight. Using API is we're going to be building some chatbot stuff. So if you're free to drop by the live stream, if you want to hang out and nerd out some more If you got questions about other stuff, I love taking questions on the chat. So. Yes. And definitely again, y'all follow both of us. I go through mostly like new tech as I'm learning and developing. I bring everyone with me
If you got questions about other stuff, I love taking questions on the chat. So. Yes. And definitely again, y'all follow both of us. I go through mostly like new tech as I'm learning and developing. I bring everyone with me It's not always with a guest, even though sometimes I like it more with guests, because then it's like they are, you know, they can help coach me through it where when I'm streaming by myself, I get stuck and then I get really frustrated
It's not always with a guest, even though sometimes I like it more with guests, because then it's like they are, you know, they can help coach me through it where when I'm streaming by myself, I get stuck and then I get really frustrated But luckily, there's been some amazing people in the crowd when I've been learning Postgres. So thank you everyone. And let's go raid Chris. See, I'm griffing really dope human always. I believe he might be working on something new. It always takes a few minutes for the raid to go through
But luckily, there's been some amazing people in the crowd when I've been learning Postgres. So thank you everyone. And let's go raid Chris. See, I'm griffing really dope human always. I believe he might be working on something new. It always takes a few minutes for the raid to go through So thank you again, everyone. And this video will be posted later this week on YouTube and we'll be shared out too. Bye. Yeah.
So thank you again, everyone. And this video will be posted later this week on YouTube and we'll be shared out too. Bye. Yeah.