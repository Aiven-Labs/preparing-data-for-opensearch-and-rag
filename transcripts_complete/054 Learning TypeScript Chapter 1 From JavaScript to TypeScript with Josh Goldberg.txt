Hello, hello beautiful humans. Welcome to the official official official start of learning typescripts. See if I can put it in the frame. Yay! We have Josh who's the author of this lovely boy. Hi. Going through this with us every other Friday-ish. Friday-ish-ish-ish. We're going to laugh Very excited. And we also have resources for those who are joining along with us. We help if I copy and paste it already. Have the website and also what I am my favorite part that I just found but is also my new favorite part of it's very organized. I think that's why I like it so much
Very excited. And we also have resources for those who are joining along with us. We help if I copy and paste it already. Have the website and also what I am my favorite part that I just found but is also my new favorite part of it's very organized. I think that's why I like it so much Now I'm like oh this makes sense. So I will be adding this in as well. But before we get started even though I got really excited about both of those, who are you Josh and what's typescripts? Who am I what am I doing here? What is love? Hi. Yes. Love is when you you really like something
Now I'm like oh this makes sense. So I will be adding this in as well. But before we get started even though I got really excited about both of those, who are you Josh and what's typescripts? Who am I what am I doing here? What is love? Hi. Yes. Love is when you you really like something Speaking of which I really like typescript. TypeScript is a cool language. It is a super-settaged JavaScript
Speaking of which I really like typescript. TypeScript is a cool language. It is a super-settaged JavaScript It adds types meaning the ability for you to say what your code is supposed to do or look like and then it will let you know if you mess it up and gives a lot of really nice developer tooling. I have done a lot in the type of type script ecosystem. I give and talks
It adds types meaning the ability for you to say what your code is supposed to do or look like and then it will let you know if you mess it up and gives a lot of really nice developer tooling. I have done a lot in the type of type script ecosystem. I give and talks I give and talks. I wrote the learning type of book. Sometimes I contribute to typescript itself once in a while. But most notably and mostly I work on typeScript aslates. The tooling that lets you run ESLates or prettier on typescript
I give and talks. I wrote the learning type of book. Sometimes I contribute to typescript itself once in a while. But most notably and mostly I work on typeScript aslates. The tooling that lets you run ESLates or prettier on typescript So although you may not have used or heard of these things, if you're an enterprise, if you're a company that uses typeScript you almost certainly use something that I work on. Yay. Not let me know how I can help
So although you may not have used or heard of these things, if you're an enterprise, if you're a company that uses typeScript you almost certainly use something that I work on. Yay. Not let me know how I can help And for those who may be super-noobs, which I say that with a lot of love because I still consider myself a super-noob
And for those who may be super-noobs, which I say that with a lot of love because I still consider myself a super-noob And yet it's you know like we're all learning together is I feel like a few things to break down is VS code is a code editor or an IDE which I'm like what's an IDE? Yeah I'm trying to think what an IDE is. What is it? I can say it but let me know. Google in it so you can say it. Sure
And yet it's you know like we're all learning together is I feel like a few things to break down is VS code is a code editor or an IDE which I'm like what's an IDE? Yeah I'm trying to think what an IDE is. What is it? I can say it but let me know. Google in it so you can say it. Sure Sure. Integrated developer environment. Let me know how it's wrong. You are 100% right. And so an IDE the way I think about it is it basically lets you see what you're working on. So you can like run it locally before it goes out to the world
Sure. Integrated developer environment. Let me know how it's wrong. You are 100% right. And so an IDE the way I think about it is it basically lets you see what you're working on. So you can like run it locally before it goes out to the world And that is probably the best breakdown for some of what we're talking today. If you're wondering what like the subscript or more about JavaScript, I do have videos on that. Hit me up. Let me know and I can give you those. Today we are starting through the book and working our way through it
And that is probably the best breakdown for some of what we're talking today. If you're wondering what like the subscript or more about JavaScript, I do have videos on that. Hit me up. Let me know and I can give you those. Today we are starting through the book and working our way through it So I will share my handy dandy screen. I don't know why but ever since I started this stream it makes me think of Blue's Clues. The handy dandy reading chair. I was just thinking that. Used to watch that when I was a kid. That's a great show. Oh, classic. And I like male song. Male
So I will share my handy dandy screen. I don't know why but ever since I started this stream it makes me think of Blue's Clues. The handy dandy reading chair. I was just thinking that. Used to watch that when I was a kid. That's a great show. Oh, classic. And I like male song. Male Male. Anyway, these are the things that I bring up and also have talked about in dnd. So I'm just you know a millennial nerd. So for those joining us we've got TypeScript learning TypeScript in the website itself
Male. Anyway, these are the things that I bring up and also have talked about in dnd. So I'm just you know a millennial nerd. So for those joining us we've got TypeScript learning TypeScript in the website itself If you're wanting to go through this yourself for a book we'll go be posting the resources there to buy the book as well as your digital copy. I personally really like the digital copy because I can have the computer read out loud to me. But then also I can show you guys things
If you're wanting to go through this yourself for a book we'll go be posting the resources there to buy the book as well as your digital copy. I personally really like the digital copy because I can have the computer read out loud to me. But then also I can show you guys things It makes it a lot easier because I don't think I don't know. You can tell me Josh do you think people can read it if I just go like this? I think they can and I think they want. Yeah, so we like the digital version
It makes it a lot easier because I don't think I don't know. You can tell me Josh do you think people can read it if I just go like this? I think they can and I think they want. Yeah, so we like the digital version All right, so the way we're going to be doing this is going through the digital version of it together and not reading word for word because that would be really annoying. But we are going to be talking about it overall. What they mean? Kind of like a faster pace of it
All right, so the way we're going to be doing this is going through the digital version of it together and not reading word for word because that would be really annoying. But we are going to be talking about it overall. What they mean? Kind of like a faster pace of it So that way you have an auditory version of it with the book itself and maybe have watching live or asking questions. You know where you can ask these questions. If you're watching the video on demand or live with us. So let's get started
So that way you have an auditory version of it with the book itself and maybe have watching live or asking questions. You know where you can ask these questions. If you're watching the video on demand or live with us. So let's get started And this book is broken down into four, four, four sections. I'm scrolling down because I don't remember the last section. I honestly also keep forgetting which isn't embarrassing. But yeah, four sections or parts and a total of like 15 chapters, I think. Yes, yes. Okay, we're feeling good
And this book is broken down into four, four, four sections. I'm scrolling down because I don't remember the last section. I honestly also keep forgetting which isn't embarrassing. But yeah, four sections or parts and a total of like 15 chapters, I think. Yes, yes. Okay, we're feeling good So we have we're going to go backwards because this is where I am in the table of contents. So it after and we may not go all the way to part four just as a heads up y'all. This is a series we are going through the majority of the book
So we have we're going to go backwards because this is where I am in the table of contents. So it after and we may not go all the way to part four just as a heads up y'all. This is a series we are going through the majority of the book Maybe not extra credit though because those are more of experiences for us as individuals to go through and research. But you know, we got to get the understanding up until that point. And scrolling keeps scrolling. Part three is usage
Maybe not extra credit though because those are more of experiences for us as individuals to go through and research. But you know, we got to get the understanding up until that point. And scrolling keeps scrolling. Part three is usage So how are we going to use it? Is that kind of what we're going with? I'm guessing that's what we're going with. Yeah, parts, everything before that are about the language features like how it works, why it does things. This is more of how you can use the language effectively
So how are we going to use it? Is that kind of what we're going with? I'm guessing that's what we're going with. Yeah, parts, everything before that are about the language features like how it works, why it does things. This is more of how you can use the language effectively Like you were talking about IDEs before. IDEs give you a lot of really nice tools that make it easier to develop. They can assist you. They can like show you every place a certain thing is used or they can help you rename something and then all the places that's used are also renamed
Like you were talking about IDEs before. IDEs give you a lot of really nice tools that make it easier to develop. They can assist you. They can like show you every place a certain thing is used or they can help you rename something and then all the places that's used are also renamed So this goes over for example, how to use TypeScript and IDE to help yourself. Which I think is really useful and you don't need that to know the TypeScript language but it's so nice as a TypeScript programmer. Agreed. Agreed
So this goes over for example, how to use TypeScript and IDE to help yourself. Which I think is really useful and you don't need that to know the TypeScript language but it's so nice as a TypeScript programmer. Agreed. Agreed Agreed. Agreed. And I think that's going to be really handy because after like before that is features and then I believe yeah concepts and features, that's probably where we're spending is going to take the longest time because getting the understanding of it to be able then to use it
Agreed. Agreed. And I think that's going to be really handy because after like before that is features and then I believe yeah concepts and features, that's probably where we're spending is going to take the longest time because getting the understanding of it to be able then to use it So yes, we are chapter one. Have a quick I guess I could read chapter one, but the the table of contents, but the quick way I understood it because y'all I definitely I need to listen to things to read it. It's how I learn best
So yes, we are chapter one. Have a quick I guess I could read chapter one, but the the table of contents, but the quick way I understood it because y'all I definitely I need to listen to things to read it. It's how I learn best So I've already listened to the the chapter and going through it it made me just think okay here's the history of it. Here's what TypeScript is and here's what we're going to be doing in the future. So it's the perfect setup of the book. That's normally what a first chapter is
So I've already listened to the the chapter and going through it it made me just think okay here's the history of it. Here's what TypeScript is and here's what we're going to be doing in the future. So it's the perfect setup of the book. That's normally what a first chapter is And as we keep going you know the Type System unions and literals. That's the fun stuff. Okay I'm glad because I'm not there yet so I'm stoked that we're going to be learning about that and objects. I will tell y'all let's see what chapter is this that I'm not looking forward to. Chapter eight
And as we keep going you know the Type System unions and literals. That's the fun stuff. Okay I'm glad because I'm not there yet so I'm stoked that we're going to be learning about that and objects. I will tell y'all let's see what chapter is this that I'm not looking forward to. Chapter eight Chapter eight. Chapter eight and I am not looking. You can completely skip chapter eight if you never use classes in JavaScript and don't want to learn them for this. Totally fine
Chapter eight. Chapter eight and I am not looking. You can completely skip chapter eight if you never use classes in JavaScript and don't want to learn them for this. Totally fine Totally fine. TypeScript doesn't have an opinion on whether you use classes or functions or whatever as long as you're writing some code TypeScript to look at it. So if you hate classes ignore them. I think it's honestly like it just hasn't clicked yet
Totally fine. TypeScript doesn't have an opinion on whether you use classes or functions or whatever as long as you're writing some code TypeScript to look at it. So if you hate classes ignore them. I think it's honestly like it just hasn't clicked yet So maybe by the time we get chapter eight it'll click and y'all beautiful humans watching can let us know if we should do it or not because if it's up to me I might want to skip it but it's key. Go in. Yay and y'all can read the preface preface preface. We still don't know how to say. Yeah
So maybe by the time we get chapter eight it'll click and y'all beautiful humans watching can let us know if we should do it or not because if it's up to me I might want to skip it but it's key. Go in. Yay and y'all can read the preface preface preface. We still don't know how to say. Yeah Yeah. The last we need to we were this was a huge thing we weren't sure of how to do so we're skipping this. We're skipping right through it. You think yourself go get the book. I do think navigating this book is smart
Yeah. The last we need to we were this was a huge thing we weren't sure of how to do so we're skipping this. We're skipping right through it. You think yourself go get the book. I do think navigating this book is smart Oh look we could have gone right here to should have remembered that me dang a done whatever and yay. Okay. Come on. So every chapter starts off with a haiku and ends with a pun before you ask. I'm very happy
Oh look we could have gone right here to should have remembered that me dang a done whatever and yay. Okay. Come on. So every chapter starts off with a haiku and ends with a pun before you ask. I'm very happy I'm very happy. And I say before you ask to imply what you were going to ask but really this is me bragging. I'm really excited that they let me do that. What's your favorite haiku? Which chapter? Oh I don't know. I think I think the one at the very end brought me a lot of joy. The last chapter
I'm very happy. And I say before you ask to imply what you were going to ask but really this is me bragging. I'm really excited that they let me do that. What's your favorite haiku? Which chapter? Oh I don't know. I think I think the one at the very end brought me a lot of joy. The last chapter The last chapter. So that's something to look forward to. Chapter 15. Okay. But actually I also really like this one. I don't even know if I know how to read a haiku properly. Like with with like the right pauses and cadence. I don't know that there is a right way
The last chapter. So that's something to look forward to. Chapter 15. Okay. But actually I also really like this one. I don't even know if I know how to read a haiku properly. Like with with like the right pauses and cadence. I don't know that there is a right way I don't know I'm not a a poetry person but JavaScript today supports browsers decades past beauty of the web. Done. That was the entire video we are done. We know what we're doing. K-bye. Perfect. All right. So and not reality because that would be very very confusing
I don't know I'm not a a poetry person but JavaScript today supports browsers decades past beauty of the web. Done. That was the entire video we are done. We know what we're doing. K-bye. Perfect. All right. So and not reality because that would be very very confusing How would you describe in like a quick overview of what like the history of JavaScript and how TypeScript was created? Sure. JavaScript was created quickly and it was never intended to be the ubiquitous everyone user for everything language that it is today
How would you describe in like a quick overview of what like the history of JavaScript and how TypeScript was created? Sure. JavaScript was created quickly and it was never intended to be the ubiquitous everyone user for everything language that it is today Also JavaScript because it is the language used in web browsers for web pages which need to always work forever and ever the same way. It's a very inflexible language in that way. You can't break JavaScript. You can't break the one
Also JavaScript because it is the language used in web browsers for web pages which need to always work forever and ever the same way. It's a very inflexible language in that way. You can't break JavaScript. You can't break the one So for example, there are two null or undefined values in JavaScript null and undefined and thousands upon thousands of developers myself included would really like it if we just had one because it's confusing and have two
So for example, there are two null or undefined values in JavaScript null and undefined and thousands upon thousands of developers myself included would really like it if we just had one because it's confusing and have two Other languages might have been able to fix that mistake in some new version JavaScript. So the beauty of the web is that you can always look at old web pages
Other languages might have been able to fix that mistake in some new version JavaScript. So the beauty of the web is that you can always look at old web pages You can go to the like 1990s whatever space jam websites and it'll work but that also means that although we can add a lot of great stuff to JavaScript which has happened we can't change the things that are already there in a breaking way
You can go to the like 1990s whatever space jam websites and it'll work but that also means that although we can add a lot of great stuff to JavaScript which has happened we can't change the things that are already there in a breaking way Does that feel reasonable to you and match your expectation? Yeah that does make sense and skipping ahead because to start and the entire reason we decided to do this series is Josh came on the show and we went through one of the exercises which will be a part that we'll talk about later today
Does that feel reasonable to you and match your expectation? Yeah that does make sense and skipping ahead because to start and the entire reason we decided to do this series is Josh came on the show and we went through one of the exercises which will be a part that we'll talk about later today I love how you can actually change something everywhere and that was something that I thought was really cool in the fact of as I've been working on more projects. I'm finding the difficulty of not knowing everywhere I'd put something. Yes. Oh yeah
I love how you can actually change something everywhere and that was something that I thought was really cool in the fact of as I've been working on more projects. I'm finding the difficulty of not knowing everywhere I'd put something. Yes. Oh yeah Yes. Oh yeah. You made something and then you can never touch it again because any little push will just collapse the whole thing
Yes. Oh yeah. You made something and then you can never touch it again because any little push will just collapse the whole thing That's a very good segue into some of the pitfalls of vanilla JavaScript which is actually kind of a bad term because vanilla is a legitimate good flavor on its own but people say vanilla JavaScript can mean just the plain
That's a very good segue into some of the pitfalls of vanilla JavaScript which is actually kind of a bad term because vanilla is a legitimate good flavor on its own but people say vanilla JavaScript can mean just the plain When you just have JavaScript you don't have anything else you can do whatever you want you can yolo it but then it's really hard to change stuff later on and there's no way for example in vanilla plain JavaScript to tell JavaScript what something is supposed to look like
When you just have JavaScript you don't have anything else you can do whatever you want you can yolo it but then it's really hard to change stuff later on and there's no way for example in vanilla plain JavaScript to tell JavaScript what something is supposed to look like You can't say that this function takes in a string and a number or whatever and then later on if you pass it something else have anything tell you know you did it wrong. That just doesn't exist which is real bad when you have like thousands upon thousands of lines of code. Very true
You can't say that this function takes in a string and a number or whatever and then later on if you pass it something else have anything tell you know you did it wrong. That just doesn't exist which is real bad when you have like thousands upon thousands of lines of code. Very true Very true and now the this next part what did you mean by like loose documentation
Very true and now the this next part what did you mean by like loose documentation Yeah so there's nothing in the language itself to say this is a string that's a number so people have added one in sort of they've added what's called JS doc which comes from Java doc and I like to joke if there's one thing we should know about things from about JS doc is that it comes from Java which is an insult insulting it right now but these are these kind of semi-formal lies comments syntax these like a way to write comments indicating that like okay this one parameter is a string or this other parameter is some shape thing we're going to call painting but there's nothing that enforces you doing those rights there's no like one exact syntax like some people who have two spaces are four or whatever in certain places so it's very elucous it's very kind of hand wavy and y'all as a as we're going through this as a heads up on every other Friday that Josh and I aren't learning typescripts Laura and I are working on Python because that's Laura and I had started on Mondays to do Python and then we realized that it's just way more fun to bullshit and just like get all of the random learning things out so that's what Mondays became and I say that because a big part of understanding JavaScript for me was learning Python because as I'm learning something else and how it works and comparing it to something I'm like oh so when you're talking about you know how loose it is I'm like doesn't necessarily make sense but as you're explaining it you have to put like in at least what I've learned so far in Python like there's certain parts where you have to put that it is a string or it is a you know an integer or something like that and it makes you it's very concrete where now that I'm thinking about it I'm like oh I guess I guess when you declare something it can be a lot more open yeah I like that strategy of bouncing the two languages off each other yeah yeah it's definitely something where you and I talked about this a bit last week yeah a lot of people and I don't suggest this for everybody to go back and forth between languages it does get confusing it's also something that I do it on certain days like it would be very difficult to do it all in the same day or studying at the same time but I associate a lot of it with people so like for example I know Josh is TypeScript days I talk to Josh it's going to be TypeScript when I talk to Laura she understands her main language is Python she's also very much she's been a math professor very much about like learning and learning techniques so I mostly do it all that with her so it's very different of who like I just associate people with topics not to lie but that's it helps having that structure in a specific day that I talk to people too seal makes sense now this was something that I found really interesting and yes y'all I highlighted it it made me very very happy to highlight it um of JavaScript is four things so a program in language and I'm not like reading reading these um because I want to talk about them the programming language makes sense to me because it's a language you use to create things now you're talking about TypeScript right yeah yes TypeScript is for cool cool yes yeah and then a type checker and I'm wondering if like this example would work outside of programming to kind of like conceptualize it a bit easier of instead of like if you have a bunch of apples they could be named anything like you have gala apple or a um foodie apple but if you call something a clementine apple a type checker might say clementine is in an apple that's not an apple that is something else but it's not an apple and so when we talk about type checker for TypeScript is that kind of what it's doing is saying yes this is yeah it takes a look at for example your labels and it shows you the ones that yells at you about the ones that are incorrect where if you call something a clementine apple or a blue apple or something oh my hi home homey go there uh yeah apple scripts um that's a good one i like it i like it homie i like it homie and hello homie um all right and then a compiler which i'm not looking at the definitions they're on my other screen so that's why i'm like over here um a compiler is where they always get mixed up with compilers and i don't know why but it compiles all of the content and then spits it back out as JavaScript yes i personally i don't know how many of you folks listening or you gen or like this but i personally like knowing where words come from because i remember things visually and i remember things when there are stories so for me a compiler i visually see as like a compilation cd or set of books like on the old whose lines anyway sketches when they're selling calculations or like when you compile a bunch of books together into a series so a compiler takes an original thing and compiles it into something new in this case we oftentimes have a smaller output in not a bigger but that's just this one particular compiler texture so we could say that a compiler we are making a composite of type learning typescript the book because we are doing a series on it yeah that works let's go over there whatever whatever gets the impression across that it's taking something and creating a new thing from it okay homie said facts they like gen need to know what the words mean yes yes and then language service this one i don't have a good guess on so i'm reading it a program that uses the type checker to tell editor such as vs code how to provide helpful utilities to developers like that probably makes sense to people that know like languages and things but what it's a service think of it let's say a programming language is description of your apple pie recipe concept warning food for for those who are into or the the apple pie is describing a programming language the type checker will look at your recipe and say no you don't need clementines everything else is good the compiler takes your recipe in terms of an actual apple pie and the language service is the server who brings you that apple pie it's it's something that helps you use the thing it's the thing that like when you start typing and c o n will suggest oh did you mean console and if so did you mean console dot log and so on of your editor does that kind of help i'm guessing no no i'm angry look it totally is um for myself it's a bit of you know y'all on teach gentech we talk about a lot of really random things and one of those are i've also seen a high level glance of go and i remember a lot of tabs to be able to auto complete that's why i was just like yes thinking about things um it was like taking me a second to like conceptualize but so language for service is a fancy way of saying the official way probably not just fancy the official way of saying if you hit tab it'll auto complete and give you the option auto complete yes exactly auto complete find all references rename all that stuff is language service okay i never knew it how to name like that that is probably a big reason that i was like oh okay and now um and what up Travis um what like when you're talking to somebody that is just getting into this you talk about oh i can i can do the check mark now yay um you talk about the type script playground in here for people that may already know JavaScript that are we'll say like employed developers i'm gonna use that as a term only because some people like you know you have to have a verified school i don't know how to say that properly do it in real life professional yeah i'm not actually employed myself yeah then the what i don't know what the term would be um you know people that actually know the cutting languages more than me um would you say do we need on type script playground is going to be better than doing something like um you know vscode or something that people are used to using on a regular basis i would not say that so i note i like what the link bedrock way i just said arose by any other name and because that implies that there are thorns in development which is true when we have bugs i say whatever is most comfortable for you is totally fine i personally use vscode and then sometimes dip into the type script playground for quick things they're honestly vscode and the type script playground actually use a lot of the same components to show you like editing and type script they it's called monoco the text editor that they both use monoco's open stores is extracted from vscode so i just suggest the playground because it's a really easy website for people to visit you don't have to set anything out it just works but if you already have vscode locally you used to it sure yeah it's all the same sweet type script as gloves i like this she analogies i'm reading the chats uh-huh yeah do it because that's a bit see i like having other streamers on because if i'm not paying attention to the chats sometimes they just get really ignored so um i definitely appreciate and then i am just looking up the playground so well this is not the playground what i post first this is just a type script to be able to get it script wow i can spell i can spell i promise spell or type and then this is almost damn the screen playground yay and bedrock says type script helps remove those thorns or at least gives you gloves to work on so does it hurt as much oh i like that reference and um oh using playground as uh quickly think through a type of an isolation interesting interesting i feel like we're gonna get more into types as we go because like i get it but i don't get it like i think that's the hard part is i'm like i understand what you're saying yet at the same time i can't visualize it and that is why we're doing this so that way if other people are like me hopefully this will help start getting it all right so i am scrolling through this a bit more because of that will be going through different things to be able to show later on i do want to say thank you for your first figure one one is about Lizzo yeah i don't know if i can say this enough i think i would cry or pass out there are two people that like i think i would melt like literally just like melt if i ever met and that is Lizzo and Arlen Hamilton and i'm like if i met either one of them i'm pretty sure that i would just just like combust or melt or like cry probably all of the above and so i was very excited about it being Lizzo anyway so freedom through restriction um what yeah um this was this was something that took me a little bit to feel comfortable about when i first got into typescript typescript actually restricts you a little bit but in a good way it's like the little gutters when you're bowling on the side or so little training wheels on a bicycle typescript will let you know when you've messed up because it also allows you to describe what you're trying to do so if you want to change a bunch of stuff and you like let's say you have 10 five 10 things you got to get through and you only change one of them it'll let you know about the other nine of them so although it restricts you that allows you to make big changes because you have these guardrails these little training wheels on that will let you know about the things that are broken when you change something freedom through restriction okay all of that made sense i just started thinking about types again and i'm like i'm gonna keep scrolling we're gonna get to that i don't know if it just clicked or not or if i just and i'm just not gonna confuse myself more so precise documentation that one is just giving us an example of how it's actually saying that this is going to be a string so therefore it has to be a string yeah we don't i don't cover that exact syntax it's using for a little bit but yes the theory yes the the syntax was showing that you can describe that let's say if you want to call something a painter like a particular object anything that you want to call painter has to have these three things finished or whatever so if you were to say that a place is supposed to receive a painter and then you pass in like a number or something type skip would yell at you or if you pass in an object that doesn't have those three properties or if they does what they look different type skip would yell at you which is good because it stopped you from messing up okay and that makes sense and i can see how it would by default build stronger developer tooling and hey yay it's the tabs that's not probably the proper way of saying it but the tabs the language services the tabs yeah the tabs whatever works i mean we all have different slightly inaccurate terms like there's no one specific correct term for any of this stuff so if i call it the tabs in my head you can call it the tabs in your head too no change there yes the tabs the tabs and we will be going through a lot of this as instead of just these theory pieces we're just going through theory to start a because that's how we do a lot of the show anyway and because knowing a bit of the theory can help us practice the hands on so we will be doing both and what up Jay and bedrock said that documentation in your code instead of having to go look at the docs site yeah i dig it dig it okay and coding syntax compiling syntax see if i can read y'all compiling syntax this one i got nothing what what is compiling syntax do you remember what a compiler is it takes something and makes something else yes exactly so now we're talking about it for your syntax we take in your typescript source code the text we call it sometimes the syntax and it outputs your JavaScript syntax so in the photo of the playground typescript on the left JavaScript on the right the compiler took the left and created the stuff on the right so can you reverse compile can you take a JavaScript file and make it a typescript file you can kind of guess and actually the open source project i spend the second most amount of time on is a project that does that but it's quite difficult because you lose information when you go from typescript to JavaScript typescript to document all these things which then mysteriously disappear when it becomes JavaScript because their typescript not JavaScript so trying to guess at those things is quite difficult and you're not always going to get as good it's like if you annotate into like in the side margins of your book and then you try to create a new book from it you can only guess what you would have written in the side margins of the book and that makes sense and oh and for those who may not know what bedrock is yeah bedrock uses typescript yeah i was getting there i was very slowly getting their travels um so Travis was on the show oh goodness it's been a few months now um but it was really cool because i Travis was showing us how we can build things in html and then we can build things in css or with bedrock it puts the two together instead of having to guess and make them uh make changes in multiple places it was really cool but that actually makes sense on typescript too weird when stuff starts to click it's like this really cool and yet really confusing how it it works are you gonna come back on the show like i feel like we could do it again i'm just not i don't i don't think i've really talked uh done too much css since then it's been mostly typescript javascript and python yay i am excited about that uh okay so we got getting started locally which this is definitely a good walkthrough and again y'all highly highly suggest getting the digital book so you can just copy and paste things okay don't do it the way i'm trying to do it though um and running everything local which will be showing through as we're going through things but editor features of creating a tsconfig
Yeah so there's nothing in the language itself to say this is a string that's a number so people have added one in sort of they've added what's called JS doc which comes from Java doc and I like to joke if there's one thing we should know about things from about JS doc is that it comes from Java which is an insult insulting it right now but these are these kind of semi-formal lies comments syntax these like a way to write comments indicating that like okay this one parameter is a string or this other parameter is some shape thing we're going to call painting but there's nothing that enforces you doing those rights there's no like one exact syntax like some people who have two spaces are four or whatever in certain places so it's very elucous it's very kind of hand wavy and y'all as a as we're going through this as a heads up on every other Friday that Josh and I aren't learning typescripts Laura and I are working on Python because that's Laura and I had started on Mondays to do Python and then we realized that it's just way more fun to bullshit and just like get all of the random learning things out so that's what Mondays became and I say that because a big part of understanding JavaScript for me was learning Python because as I'm learning something else and how it works and comparing it to something I'm like oh so when you're talking about you know how loose it is I'm like doesn't necessarily make sense but as you're explaining it you have to put like in at least what I've learned so far in Python like there's certain parts where you have to put that it is a string or it is a you know an integer or something like that and it makes you it's very concrete where now that I'm thinking about it I'm like oh I guess I guess when you declare something it can be a lot more open yeah I like that strategy of bouncing the two languages off each other yeah yeah it's definitely something where you and I talked about this a bit last week yeah a lot of people and I don't suggest this for everybody to go back and forth between languages it does get confusing it's also something that I do it on certain days like it would be very difficult to do it all in the same day or studying at the same time but I associate a lot of it with people so like for example I know Josh is TypeScript days I talk to Josh it's going to be TypeScript when I talk to Laura she understands her main language is Python she's also very much she's been a math professor very much about like learning and learning techniques so I mostly do it all that with her so it's very different of who like I just associate people with topics not to lie but that's it helps having that structure in a specific day that I talk to people too seal makes sense now this was something that I found really interesting and yes y'all I highlighted it it made me very very happy to highlight it um of JavaScript is four things so a program in language and I'm not like reading reading these um because I want to talk about them the programming language makes sense to me because it's a language you use to create things now you're talking about TypeScript right yeah yes TypeScript is for cool cool yes yeah and then a type checker and I'm wondering if like this example would work outside of programming to kind of like conceptualize it a bit easier of instead of like if you have a bunch of apples they could be named anything like you have gala apple or a um foodie apple but if you call something a clementine apple a type checker might say clementine is in an apple that's not an apple that is something else but it's not an apple and so when we talk about type checker for TypeScript is that kind of what it's doing is saying yes this is yeah it takes a look at for example your labels and it shows you the ones that yells at you about the ones that are incorrect where if you call something a clementine apple or a blue apple or something oh my hi home homey go there uh yeah apple scripts um that's a good one i like it i like it homie i like it homie and hello homie um all right and then a compiler which i'm not looking at the definitions they're on my other screen so that's why i'm like over here um a compiler is where they always get mixed up with compilers and i don't know why but it compiles all of the content and then spits it back out as JavaScript yes i personally i don't know how many of you folks listening or you gen or like this but i personally like knowing where words come from because i remember things visually and i remember things when there are stories so for me a compiler i visually see as like a compilation cd or set of books like on the old whose lines anyway sketches when they're selling calculations or like when you compile a bunch of books together into a series so a compiler takes an original thing and compiles it into something new in this case we oftentimes have a smaller output in not a bigger but that's just this one particular compiler texture so we could say that a compiler we are making a composite of type learning typescript the book because we are doing a series on it yeah that works let's go over there whatever whatever gets the impression across that it's taking something and creating a new thing from it okay homie said facts they like gen need to know what the words mean yes yes and then language service this one i don't have a good guess on so i'm reading it a program that uses the type checker to tell editor such as vs code how to provide helpful utilities to developers like that probably makes sense to people that know like languages and things but what it's a service think of it let's say a programming language is description of your apple pie recipe concept warning food for for those who are into or the the apple pie is describing a programming language the type checker will look at your recipe and say no you don't need clementines everything else is good the compiler takes your recipe in terms of an actual apple pie and the language service is the server who brings you that apple pie it's it's something that helps you use the thing it's the thing that like when you start typing and c o n will suggest oh did you mean console and if so did you mean console dot log and so on of your editor does that kind of help i'm guessing no no i'm angry look it totally is um for myself it's a bit of you know y'all on teach gentech we talk about a lot of really random things and one of those are i've also seen a high level glance of go and i remember a lot of tabs to be able to auto complete that's why i was just like yes thinking about things um it was like taking me a second to like conceptualize but so language for service is a fancy way of saying the official way probably not just fancy the official way of saying if you hit tab it'll auto complete and give you the option auto complete yes exactly auto complete find all references rename all that stuff is language service okay i never knew it how to name like that that is probably a big reason that i was like oh okay and now um and what up Travis um what like when you're talking to somebody that is just getting into this you talk about oh i can i can do the check mark now yay um you talk about the type script playground in here for people that may already know JavaScript that are we'll say like employed developers i'm gonna use that as a term only because some people like you know you have to have a verified school i don't know how to say that properly do it in real life professional yeah i'm not actually employed myself yeah then the what i don't know what the term would be um you know people that actually know the cutting languages more than me um would you say do we need on type script playground is going to be better than doing something like um you know vscode or something that people are used to using on a regular basis i would not say that so i note i like what the link bedrock way i just said arose by any other name and because that implies that there are thorns in development which is true when we have bugs i say whatever is most comfortable for you is totally fine i personally use vscode and then sometimes dip into the type script playground for quick things they're honestly vscode and the type script playground actually use a lot of the same components to show you like editing and type script they it's called monoco the text editor that they both use monoco's open stores is extracted from vscode so i just suggest the playground because it's a really easy website for people to visit you don't have to set anything out it just works but if you already have vscode locally you used to it sure yeah it's all the same sweet type script as gloves i like this she analogies i'm reading the chats uh-huh yeah do it because that's a bit see i like having other streamers on because if i'm not paying attention to the chats sometimes they just get really ignored so um i definitely appreciate and then i am just looking up the playground so well this is not the playground what i post first this is just a type script to be able to get it script wow i can spell i can spell i promise spell or type and then this is almost damn the screen playground yay and bedrock says type script helps remove those thorns or at least gives you gloves to work on so does it hurt as much oh i like that reference and um oh using playground as uh quickly think through a type of an isolation interesting interesting i feel like we're gonna get more into types as we go because like i get it but i don't get it like i think that's the hard part is i'm like i understand what you're saying yet at the same time i can't visualize it and that is why we're doing this so that way if other people are like me hopefully this will help start getting it all right so i am scrolling through this a bit more because of that will be going through different things to be able to show later on i do want to say thank you for your first figure one one is about Lizzo yeah i don't know if i can say this enough i think i would cry or pass out there are two people that like i think i would melt like literally just like melt if i ever met and that is Lizzo and Arlen Hamilton and i'm like if i met either one of them i'm pretty sure that i would just just like combust or melt or like cry probably all of the above and so i was very excited about it being Lizzo anyway so freedom through restriction um what yeah um this was this was something that took me a little bit to feel comfortable about when i first got into typescript typescript actually restricts you a little bit but in a good way it's like the little gutters when you're bowling on the side or so little training wheels on a bicycle typescript will let you know when you've messed up because it also allows you to describe what you're trying to do so if you want to change a bunch of stuff and you like let's say you have 10 five 10 things you got to get through and you only change one of them it'll let you know about the other nine of them so although it restricts you that allows you to make big changes because you have these guardrails these little training wheels on that will let you know about the things that are broken when you change something freedom through restriction okay all of that made sense i just started thinking about types again and i'm like i'm gonna keep scrolling we're gonna get to that i don't know if it just clicked or not or if i just and i'm just not gonna confuse myself more so precise documentation that one is just giving us an example of how it's actually saying that this is going to be a string so therefore it has to be a string yeah we don't i don't cover that exact syntax it's using for a little bit but yes the theory yes the the syntax was showing that you can describe that let's say if you want to call something a painter like a particular object anything that you want to call painter has to have these three things finished or whatever so if you were to say that a place is supposed to receive a painter and then you pass in like a number or something type skip would yell at you or if you pass in an object that doesn't have those three properties or if they does what they look different type skip would yell at you which is good because it stopped you from messing up okay and that makes sense and i can see how it would by default build stronger developer tooling and hey yay it's the tabs that's not probably the proper way of saying it but the tabs the language services the tabs yeah the tabs whatever works i mean we all have different slightly inaccurate terms like there's no one specific correct term for any of this stuff so if i call it the tabs in my head you can call it the tabs in your head too no change there yes the tabs the tabs and we will be going through a lot of this as instead of just these theory pieces we're just going through theory to start a because that's how we do a lot of the show anyway and because knowing a bit of the theory can help us practice the hands on so we will be doing both and what up Jay and bedrock said that documentation in your code instead of having to go look at the docs site yeah i dig it dig it okay and coding syntax compiling syntax see if i can read y'all compiling syntax this one i got nothing what what is compiling syntax do you remember what a compiler is it takes something and makes something else yes exactly so now we're talking about it for your syntax we take in your typescript source code the text we call it sometimes the syntax and it outputs your JavaScript syntax so in the photo of the playground typescript on the left JavaScript on the right the compiler took the left and created the stuff on the right so can you reverse compile can you take a JavaScript file and make it a typescript file you can kind of guess and actually the open source project i spend the second most amount of time on is a project that does that but it's quite difficult because you lose information when you go from typescript to JavaScript typescript to document all these things which then mysteriously disappear when it becomes JavaScript because their typescript not JavaScript so trying to guess at those things is quite difficult and you're not always going to get as good it's like if you annotate into like in the side margins of your book and then you try to create a new book from it you can only guess what you would have written in the side margins of the book and that makes sense and oh and for those who may not know what bedrock is yeah bedrock uses typescript yeah i was getting there i was very slowly getting their travels um so Travis was on the show oh goodness it's been a few months now um but it was really cool because i Travis was showing us how we can build things in html and then we can build things in css or with bedrock it puts the two together instead of having to guess and make them uh make changes in multiple places it was really cool but that actually makes sense on typescript too weird when stuff starts to click it's like this really cool and yet really confusing how it it works are you gonna come back on the show like i feel like we could do it again i'm just not i don't i don't think i've really talked uh done too much css since then it's been mostly typescript javascript and python yay i am excited about that uh okay so we got getting started locally which this is definitely a good walkthrough and again y'all highly highly suggest getting the digital book so you can just copy and paste things okay don't do it the way i'm trying to do it though um and running everything local which will be showing through as we're going through things but editor features of creating a tsconfigjson say what yes that every programming language tool whatever has a config file or any one that can take any different config options configuration options and the typescript one is called tsconfig so for typescript configuration so we don't need to cover what's in a tsconfig now that's actually one of the much later chapters typescript is super configurable because people use javascript in a lot of weird and wacky ways but if there is a tsconfig file typescript will look at it for your settings yay okay so i feel like i appreciate that you put this in here um i think you feel like other people would be like why are you saying this but it is really helpful to again know what your guardrails are and what it is and what it is not so what typescript is not how would you explain that i would say typescript doesn't have opinions it's only about correctness not about doing it a right way oftentimes there was no one right way for a thing so like typescript won't stop you from doing bad patterns like copying pasting the same function 20 times instead of reusing it that's fine like it's typesafe it's correct it's just you know humans might hate your code typescript also won't enforce using whatever class-based object oriented programming versus functional versus just a whole bunch of random stuff like that's as long as it's typesafe as long as you don't mess up your types typescript doesn't care what it is which is why i sang earlier that you can totally skip the class of chapter if you never use them all right so if i'm thinking about typescript it's like kind of like grammarly grammarly will tell you if the language the structure is wrong but it's not gonna tell you if it's not I don't know spelt wrong or something like that or used wrong i would say typescript is like grammily or like the spell check and google docs a word it'll tell you whether you spelled your words right and if the grammar is correct and grammarly will even give you like phrasing suggestions like oh you might want to remove these words but if you're writing an op-ed an essay about how i don't know the i'm gonna make a sports analogy here i never do if the hell the red socks are better than the Yankees like it's not gonna tell you yes they are or know they aren't like you might be totally wrong in your opinions but as long as your sentences are well structured and the words are spelled correctly it's okay i don't know if someone's gonna get upset about what i just said about the baseball teams i couldn't think of anything more good that's not crucial it works it works and Travis it came up with um grammarly is great example because you can also tell grammarly to ignore things and i like that because i think that's a good way of going back to it too because it's like you can it'll tell you something's wrong but it's not gonna stop you from running it so you know you can say that the red socks are bad but it's not gonna prevent them from playing i just thought of it better now i i i i hate using sports analogies they're not appropriate because i was like trying um yeah like sports balls so although although the chargers like if anybody wants to know i'm a chargers fan because Tyler's from San Diego he's a diehard chargers fan so um they're playing on Sunday yay but facts that's actually a laptop's favorite sports team the chargers i ask for one thing anybody i'm gonna go ask him now what's the laptop's favorite sports
json say what yes that every programming language tool whatever has a config file or any one that can take any different config options configuration options and the typescript one is called tsconfig so for typescript configuration so we don't need to cover what's in a tsconfig now that's actually one of the much later chapters typescript is super configurable because people use javascript in a lot of weird and wacky ways but if there is a tsconfig file typescript will look at it for your settings yay okay so i feel like i appreciate that you put this in here um i think you feel like other people would be like why are you saying this but it is really helpful to again know what your guardrails are and what it is and what it is not so what typescript is not how would you explain that i would say typescript doesn't have opinions it's only about correctness not about doing it a right way oftentimes there was no one right way for a thing so like typescript won't stop you from doing bad patterns like copying pasting the same function 20 times instead of reusing it that's fine like it's typesafe it's correct it's just you know humans might hate your code typescript also won't enforce using whatever class-based object oriented programming versus functional versus just a whole bunch of random stuff like that's as long as it's typesafe as long as you don't mess up your types typescript doesn't care what it is which is why i sang earlier that you can totally skip the class of chapter if you never use them all right so if i'm thinking about typescript it's like kind of like grammarly grammarly will tell you if the language the structure is wrong but it's not gonna tell you if it's not I don't know spelt wrong or something like that or used wrong i would say typescript is like grammily or like the spell check and google docs a word it'll tell you whether you spelled your words right and if the grammar is correct and grammarly will even give you like phrasing suggestions like oh you might want to remove these words but if you're writing an op-ed an essay about how i don't know the i'm gonna make a sports analogy here i never do if the hell the red socks are better than the Yankees like it's not gonna tell you yes they are or know they aren't like you might be totally wrong in your opinions but as long as your sentences are well structured and the words are spelled correctly it's okay i don't know if someone's gonna get upset about what i just said about the baseball teams i couldn't think of anything more good that's not crucial it works it works and Travis it came up with um grammarly is great example because you can also tell grammarly to ignore things and i like that because i think that's a good way of going back to it too because it's like you can it'll tell you something's wrong but it's not gonna stop you from running it so you know you can say that the red socks are bad but it's not gonna prevent them from playing i just thought of it better now i i i i hate using sports analogies they're not appropriate because i was like trying um yeah like sports balls so although although the chargers like if anybody wants to know i'm a chargers fan because Tyler's from San Diego he's a diehard chargers fan so um they're playing on Sunday yay but facts that's actually a laptop's favorite sports team the chargers i ask for one thing anybody i'm gonna go ask him now what's the laptop's favorite sports yeah he he probably won't know i like know the answer and it's gonna be really exciting thanks for helping me with getting some points i appreciate it there you go um the analogies thinking of is you might describe a recipe like we were talking about apples before um the grammarly words felt like however they can tell you what the recipe is well structured if it like contains real ingredients but it's not gonna tell you that like oh your recipe is terrible and this is gonna taste bad there's no way for it to know that so oh oh okay since we were talking about apples earlier and typescript will tell you that a clementine is not an apple it's not gonna prevent you from putting clementines in the pie yes where you got we made it and which actually might be good i don't know i'm never tried that i think they would be too watery because it's like you can't has anybody tried dried like orange chips are those a thing can you have them as a thing because i don't think bars will have them for like mocktails and cocktails oh yeah i see you match traitor johos and yes j um i feel that's how he feels too and he's like he's gonna no matter where we move Tyler will always love the chargers which i love the chargers yay bolt up he doesn't like it when we went to a broncos game because i live in denver y'all i promise i'm almost done with these stories but it was a broncos chargers game and i kept wanting to like be like see it whatever time i saw a chargers person to be like bolt up and tellers like please don't i don't need us to get in the fight with someone because they hear you being a chargers fan really loud okay i'm anyway back to actually type script uh extension to java scripts how does it not do that sure this is a really important delineation distinction for the most part and there are unfortunately a couple of asterisks there type script does not add new runtime syntax javascript lets you define things like variables functions arrays whatever type script just for the most part puts type annotations around those you create a function in javascript and then you type script to say that the function takes in a string in a number or something like that so a lot of time people will ask oh can we add something to type script that's a runtime feature like a new way to write a function and for the most part no like type script does not change javascript its goal is to be a superset that just adds type stuff and that's because if we add new runtime things in type script and then later on the javascript language also adds an equivalent to that thing now you've got competing versions and one will not be compatible to the other so that's that would be really bad unfortunately very early on type script add it up you runtime things uh javascript extensions which i cover at the end of the book for the most part people try to avoid them so i don't meet to cover them until the end of the book we don't need to learn them for a while but just know that although they never do this anymore and for the most part do this early on there are a couple things that were just so gosh darn useful that day um and then javascript just said example is lowercase private in type script versus official uh capital private fields so this is actually a really interesting one type script so this is classes not trying not to explain needing to understand classes too well but you can each instance like thing like if there's an apple class each individual apple can have some private members that no one else can access there's a way in type script to describe to describe that in the type system that isn't a runtime thing like it's not reflected in the runtime javascript and later on many years ago and that recently javascript added a syntax like a hashtag syntax to describe that something is only available to itself no one else is allowed to see or touch it um but fortunately the type script syntax is just in the type system it's just i'm saying that this is the way it is it doesn't actually exist in the output javascript so that one that one is we're safe it were allowed to use that it's not an extension to javascript even though it does a similar thing to a later on javascript feature everything you're saying makes sense i will say something that again is one of those things that i'm like i feel like i should know what this means i kind of know what it means in runtime but please remind me uh or in in context of what runtime is like it means how long it takes to run i'm guessing that's you know runtime but like when a browser like could you what runtime
yeah he he probably won't know i like know the answer and it's gonna be really exciting thanks for helping me with getting some points i appreciate it there you go um the analogies thinking of is you might describe a recipe like we were talking about apples before um the grammarly words felt like however they can tell you what the recipe is well structured if it like contains real ingredients but it's not gonna tell you that like oh your recipe is terrible and this is gonna taste bad there's no way for it to know that so oh oh okay since we were talking about apples earlier and typescript will tell you that a clementine is not an apple it's not gonna prevent you from putting clementines in the pie yes where you got we made it and which actually might be good i don't know i'm never tried that i think they would be too watery because it's like you can't has anybody tried dried like orange chips are those a thing can you have them as a thing because i don't think bars will have them for like mocktails and cocktails oh yeah i see you match traitor johos and yes j um i feel that's how he feels too and he's like he's gonna no matter where we move Tyler will always love the chargers which i love the chargers yay bolt up he doesn't like it when we went to a broncos game because i live in denver y'all i promise i'm almost done with these stories but it was a broncos chargers game and i kept wanting to like be like see it whatever time i saw a chargers person to be like bolt up and tellers like please don't i don't need us to get in the fight with someone because they hear you being a chargers fan really loud okay i'm anyway back to actually type script uh extension to java scripts how does it not do that sure this is a really important delineation distinction for the most part and there are unfortunately a couple of asterisks there type script does not add new runtime syntax javascript lets you define things like variables functions arrays whatever type script just for the most part puts type annotations around those you create a function in javascript and then you type script to say that the function takes in a string in a number or something like that so a lot of time people will ask oh can we add something to type script that's a runtime feature like a new way to write a function and for the most part no like type script does not change javascript its goal is to be a superset that just adds type stuff and that's because if we add new runtime things in type script and then later on the javascript language also adds an equivalent to that thing now you've got competing versions and one will not be compatible to the other so that's that would be really bad unfortunately very early on type script add it up you runtime things uh javascript extensions which i cover at the end of the book for the most part people try to avoid them so i don't meet to cover them until the end of the book we don't need to learn them for a while but just know that although they never do this anymore and for the most part do this early on there are a couple things that were just so gosh darn useful that day um and then javascript just said example is lowercase private in type script versus official uh capital private fields so this is actually a really interesting one type script so this is classes not trying not to explain needing to understand classes too well but you can each instance like thing like if there's an apple class each individual apple can have some private members that no one else can access there's a way in type script to describe to describe that in the type system that isn't a runtime thing like it's not reflected in the runtime javascript and later on many years ago and that recently javascript added a syntax like a hashtag syntax to describe that something is only available to itself no one else is allowed to see or touch it um but fortunately the type script syntax is just in the type system it's just i'm saying that this is the way it is it doesn't actually exist in the output javascript so that one that one is we're safe it were allowed to use that it's not an extension to javascript even though it does a similar thing to a later on javascript feature everything you're saying makes sense i will say something that again is one of those things that i'm like i feel like i should know what this means i kind of know what it means in runtime but please remind me uh or in in context of what runtime is like it means how long it takes to run i'm guessing that's you know runtime but like when a browser like could you what runtime runtime is an unfortunate word because it means two things it means what you just said like how long does it take something to run for the literal time but it also means like stuff that gets executed in the browser um could you do me a favor and actually open the type script playground
runtime is an unfortunate word because it means two things it means what you just said like how long does it take something to run for the literal time but it also means like stuff that gets executed in the browser um could you do me a favor and actually open the type script playground uh so we can see it because i think it's really easy to show it visually uh while describing um yeah so if you could like let's say create a variable just say like let let value equals true or something like that and just delete everything else yay cool like i don't remember is this yeah like i didn't yeah in python it's a capital T and i'd always trip people up going back and forth yeah yeah all right cool so on the left is the source type script on the right is the upper javascript you can ignore that you strict string that's just like a safety measure it's a whole other shabang we don't need to worry about it so really they're basically the same thing let value equals true it becomes a value equals true but if you were to put and next to the word value just to the right of it between it and the equal sign type in colon space boolean yay so now we have a difference now on the left in the typescript code you have created a variable which is all javascript and in typescript land the typesystem you have said this variable is only ever going to be a boolean that colon boolean exists only in the typescript understanding of the when you output javascript when you compile uh to javascript which is what you get on the right anything that is only in the type system gets removed notice no colon boolean so that's what i mean by type system code versus runtime code like it's getting what i don't get it but i don't get it but i mean it makes sense and thank you uh will is over on youtube and says uh fair runtime question so thank you um i feel like it's something that again it needs to be noodled on and um actually i'm uh and then Travis just said runtime code means the code that the browser actually sees and so so Travis how are you on classes because and y'all i am particularly annoyed at classes because before teach gen tech was created um there was a course on linkedin uh about javascript and it had classes and i could not conceptualize classes i got so stuck and i was like i'm never gonna learn how to go because i hate classes because it's just not clicking so it's like one of those things that i like even as you said josh a lot of people have said this to me that they don't like don't really need a no-class like you can get around without using classes and i'm like but i couldn't figure it out now i want to know what it is because it stumped me so um yeah well does uh you know keep going and that also makes sense why slower than javascript and finished evolving yeah javascript is still evolving tich script is still evolving none of this is sedentary they're all changing over time fun facts uh the tich script repository is one of the most active repositories on github lots of features and bug fixes and performance and presents it's not like the most but it's definitely like upper rational on of activity all right all right and uh javascript had to me thank you javas Travis typically uh writes functional styles so no classes but depending on the code they might still need to use it i need i feel like there are a few things that we really need on the show so if anybody knows anyone is so we're gonna say classes is one but two protocols all the protocols all the protocols all the protocols that's a confusing life anyway so we are to the summary of chapter one a yo yes we got a brief history of how we went from vanilla got some typescript in the world pros and cons of both and also how typescript tells you if you have clementine trying to call an apple a clementine apple and we'll still let you cook with clementines but it will at least warn you that a clementine is not an apple and if you do not get that reference please go back about 40 minutes and it'll make more sense um and the advantages of typescripts and i do see how if i'm i'm gonna work on sticking with this apple reference all each of our um of our video so that way hopefully you know it sticks and makes sense for us of if we are talking about you know uh is it Fuji or Fiji apples
uh so we can see it because i think it's really easy to show it visually uh while describing um yeah so if you could like let's say create a variable just say like let let value equals true or something like that and just delete everything else yay cool like i don't remember is this yeah like i didn't yeah in python it's a capital T and i'd always trip people up going back and forth yeah yeah all right cool so on the left is the source type script on the right is the upper javascript you can ignore that you strict string that's just like a safety measure it's a whole other shabang we don't need to worry about it so really they're basically the same thing let value equals true it becomes a value equals true but if you were to put and next to the word value just to the right of it between it and the equal sign type in colon space boolean yay so now we have a difference now on the left in the typescript code you have created a variable which is all javascript and in typescript land the typesystem you have said this variable is only ever going to be a boolean that colon boolean exists only in the typescript understanding of the when you output javascript when you compile uh to javascript which is what you get on the right anything that is only in the type system gets removed notice no colon boolean so that's what i mean by type system code versus runtime code like it's getting what i don't get it but i don't get it but i mean it makes sense and thank you uh will is over on youtube and says uh fair runtime question so thank you um i feel like it's something that again it needs to be noodled on and um actually i'm uh and then Travis just said runtime code means the code that the browser actually sees and so so Travis how are you on classes because and y'all i am particularly annoyed at classes because before teach gen tech was created um there was a course on linkedin uh about javascript and it had classes and i could not conceptualize classes i got so stuck and i was like i'm never gonna learn how to go because i hate classes because it's just not clicking so it's like one of those things that i like even as you said josh a lot of people have said this to me that they don't like don't really need a no-class like you can get around without using classes and i'm like but i couldn't figure it out now i want to know what it is because it stumped me so um yeah well does uh you know keep going and that also makes sense why slower than javascript and finished evolving yeah javascript is still evolving tich script is still evolving none of this is sedentary they're all changing over time fun facts uh the tich script repository is one of the most active repositories on github lots of features and bug fixes and performance and presents it's not like the most but it's definitely like upper rational on of activity all right all right and uh javascript had to me thank you javas Travis typically uh writes functional styles so no classes but depending on the code they might still need to use it i need i feel like there are a few things that we really need on the show so if anybody knows anyone is so we're gonna say classes is one but two protocols all the protocols all the protocols all the protocols that's a confusing life anyway so we are to the summary of chapter one a yo yes we got a brief history of how we went from vanilla got some typescript in the world pros and cons of both and also how typescript tells you if you have clementine trying to call an apple a clementine apple and we'll still let you cook with clementines but it will at least warn you that a clementine is not an apple and if you do not get that reference please go back about 40 minutes and it'll make more sense um and the advantages of typescripts and i do see how if i'm i'm gonna work on sticking with this apple reference all each of our um of our video so that way hopefully you know it sticks and makes sense for us of if we are talking about you know uh is it Fuji or Fiji apples Fiji apples
Fiji apples Fiji I think yeah Fiji apples we're talking about Fiji apples and we have a bunch of Fiji apples in so many different um areas in our code one of the things typescript does do is if i wanted to change it from uh Fiji apple to uh granny apple granny granny granny smith apples yeah i don't even know all my apples i just it's what popped in my head um we could do that with typescripts and it'll change all of them oh right delicious and you gotta go apple if possible apple picking is a lovely activity and this is why i think at least i and perhaps also bedrock are real up to date and gal apples see i really like uh pink lady those those are fine apple great species whatever um i like i knew mac and tosh was an apple because that's why it's called apple but like has anybody eaten a mac and tosh apple is that actually a real thing like is yeah oh wait i was i'm lathe them i'm from lathe them shout out upstate in york you're drawing your Albany then you want great for apples there we get all sorts of apples green red all the colors so to his springs oh my god neighbors well yes so as you know no this is perfect as you join our live stream of typescript you will learn about apples and also more about upstate in york i've never actually been to new york it's a very weird thing to say like people go to you know the states to see new york and i'm like i've never been i don't know why the city is mine but the state is beautiful yes i'm gonna pause us because we've already gone through so much but there is something really cool that i want to go through on and then let me copy and paste this really quick is there are different projects practices projects yeah projects that we can go through that i'm giving up this as homework y'all and we'll go through it next time we meet up so in two weeks of the type of nature i do like that you have punny things it does make it a lot more amusing so although sometimes i stare at them and i'm like how am i gonna say this fret for everyone we're gonna do the chapter one assignment assignment is the word i was looking for assignment it is a project an assignment of homework so go test this out comment on the youtube's if you get stuck and i will be sharing that and on monday we will get the link to everything and also see how everybody's doing as a homework check and i what is in two weeks two weeks is black friday what was that already is it is it i think it is that that makes sense yeah yeah because that 14 plus 11 is 25 yeah are we are we meeting on that day i mean i'm down but i just want to check like i don't know i don't think i should take on things giving weekend let's say i don't think i can make that okay okay so it might be a little bit before we meet again or we'll just figure out another day for us to do this um and yeah yes thank you thank you uh cocoa for um even after working in typescript it for a while it's always good to brush the desktop yes yes and typescript is um having different people try to explain it i've heard so many different versions and ways and luckily the way josh explains things let's me ask a lot of different questions and also try to come up with apple analogies that joshy fall along with so it works really well and thank you for that because i get lost if i don't have an analogy to go with so and anyone have questions for josh before we end chapter one today and if you want to get the book we will have links on monday ish of where you can get the digital book to follow along with us also where to get the real book and yes i am talking up the book a lot because josh is spending a lot of time with us so and i like it's books like these that i don't learn very well by just reading them um but it's i like having physical books because then i can i can do this in right oh no the book just kidding that's great that's a good way to learn sorry bro it's not your book it's my book now bought it got it everybody go buy your book because i like being able to write and keep notes such as i will be adding in a compiler and a language service because um of apples and all of that so that is why uh wait plus books on your shelf uh self makes it look like you know how to read yes this is true i actually don't have a lot of books in the house like we only have like a handful of books and it's because and i used to have so many books and it's because i don't read i listened to audiobooks you want me to listen to an audiobook on double or triple time i got you i've i've read a lot of books this year in podcasts but this is a cool books and i this is my favorite one for the year 2022 version right here yay yay i appreciate you saying that yeah i appreciate you going through this because it's it's no seriously learning a language or learning uh type script is something that i think has bad rap because i think it's hard for people to conceptualize and if we can make it so that way people can understand it and conceptualize it and can you use it it's well worth it because it is a tool that a lot of us could really use absolutely thank you everyone and we will see you in a few weeks will announce when and next week you will have the information on the youtube's of how to use it all uh jay just said don't worry uh type script push types will make type script more approachable i don't know if i understand you need it sorry i like making types get more approachable that's good um i will say so jay is uh jian homie are the ones oh i will show you guys this josh you're getting stuck on a stream for a little longer that's okay i want to see you uh it's what we were talking about earlier the project that i'll be asking you questions about um java script is talking about adding more types of work oh nice they're adding in the ability so they're talking about it even if it does happen which is not certain it'll take several several years but they're adding in the ability for you to put in little annotations in your javascript they're equivalent to comments but with a nicer syntax dedicated to describing types looking very similar to how typescript does things uh that would be it would just be super convenient but it doesn't it's not adding in a type system it's letting you run your own typescript system type systems such as typescript it's just making it easier to annotate your code for typesystems interesting and jay i don't know if you were here earlier when i was comparing it to typescript is like how python makes you say that it's like a string is how i can was conceptualizing it earlier but all right oh no come back run add to string there we go so y'all get hub community standards come hang out with us over here uh j and tomi created this i technically am hanging out here and doing stuff to you i say that because it's still going over my head so uh what we're doing is when you start a new repo there are certain things that you need to make it accessible for the community and get hub shows us what those community standards are one of which is a code of conduct and j made the fancy code of conduct and donated his code to our project to be able to show it but that's cool and we're a step in the right direction but it still makes a lot of it confusing for everything else so if we go into the get hub community standards this scroll down love that image thank you thank you this is why they keep me around is that i like graphics is these are what a community standards require is your description you read me your code of conduct contributing license security policy issue templates pull request templates repository admins accept content reports and yet there's it doesn't show you the health of all of it just by looking at it it like shows you just this bar and it doesn't really always give you access to where you can find all these or examples and that's what we're building and we are using typescript to do it and also j and homie please add in anything else that i am missing because j was doing some really really cool things and i wasn't 100% understanding them the other day but we were doing some full stuff on Tuesday's stream so come hang out with us and do that when we have j and homie on the stream again i love how everybody is like overlap like yeah or my stream start to overlap with each other they'll flows together blends in like a nice it's played of indian food all the flavors seeping in together are you gotten me really hungry for this whole stream because all the apple stuff you're welcome yay and yes yes um and i would say okay so homie said this about j all else to say about homie because homie's my homie huh okay yes yes i um homie has a real name but i still call him homie guys it's fun uh and j just said um they have no idea what they're doing in typescript they just pretend to do things while furiously searching for things yes and this is what we did the other day yet there is a huge difference of knowing the concepts of programming in general versus like just learning a new language and there's a lot of leveling there so that's why we have teach gentec so that way we're gonna do all this stuff together and because you cannot rush oh i just thought of this the other day of what i was trying to say consistency you cannot rush consistency consistency takes time that's why i was yay i finally got to say it out loud i'm excited well beautiful humans you know where to set us up oh yes sorry i've got i've got one more thing to add i'm going to do this after ever chapter there's one part from the chapter that's very important that you missed why did the string and the number break up they weren't each other's types yep they weren't each other's types i had to think about it because i'm like i read this i read this i read this one i read it yes yes now for next times you all have to figure it out today i got it but next time you have to yay bye everyone
Fiji I think yeah Fiji apples we're talking about Fiji apples and we have a bunch of Fiji apples in so many different um areas in our code one of the things typescript does do is if i wanted to change it from uh Fiji apple to uh granny apple granny granny granny smith apples yeah i don't even know all my apples i just it's what popped in my head um we could do that with typescripts and it'll change all of them oh right delicious and you gotta go apple if possible apple picking is a lovely activity and this is why i think at least i and perhaps also bedrock are real up to date and gal apples see i really like uh pink lady those those are fine apple great species whatever um i like i knew mac and tosh was an apple because that's why it's called apple but like has anybody eaten a mac and tosh apple is that actually a real thing like is yeah oh wait i was i'm lathe them i'm from lathe them shout out upstate in york you're drawing your Albany then you want great for apples there we get all sorts of apples green red all the colors so to his springs oh my god neighbors well yes so as you know no this is perfect as you join our live stream of typescript you will learn about apples and also more about upstate in york i've never actually been to new york it's a very weird thing to say like people go to you know the states to see new york and i'm like i've never been i don't know why the city is mine but the state is beautiful yes i'm gonna pause us because we've already gone through so much but there is something really cool that i want to go through on and then let me copy and paste this really quick is there are different projects practices projects yeah projects that we can go through that i'm giving up this as homework y'all and we'll go through it next time we meet up so in two weeks of the type of nature i do like that you have punny things it does make it a lot more amusing so although sometimes i stare at them and i'm like how am i gonna say this fret for everyone we're gonna do the chapter one assignment assignment is the word i was looking for assignment it is a project an assignment of homework so go test this out comment on the youtube's if you get stuck and i will be sharing that and on monday we will get the link to everything and also see how everybody's doing as a homework check and i what is in two weeks two weeks is black friday what was that already is it is it i think it is that that makes sense yeah yeah because that 14 plus 11 is 25 yeah are we are we meeting on that day i mean i'm down but i just want to check like i don't know i don't think i should take on things giving weekend let's say i don't think i can make that okay okay so it might be a little bit before we meet again or we'll just figure out another day for us to do this um and yeah yes thank you thank you uh cocoa for um even after working in typescript it for a while it's always good to brush the desktop yes yes and typescript is um having different people try to explain it i've heard so many different versions and ways and luckily the way josh explains things let's me ask a lot of different questions and also try to come up with apple analogies that joshy fall along with so it works really well and thank you for that because i get lost if i don't have an analogy to go with so and anyone have questions for josh before we end chapter one today and if you want to get the book we will have links on monday ish of where you can get the digital book to follow along with us also where to get the real book and yes i am talking up the book a lot because josh is spending a lot of time with us so and i like it's books like these that i don't learn very well by just reading them um but it's i like having physical books because then i can i can do this in right oh no the book just kidding that's great that's a good way to learn sorry bro it's not your book it's my book now bought it got it everybody go buy your book because i like being able to write and keep notes such as i will be adding in a compiler and a language service because um of apples and all of that so that is why uh wait plus books on your shelf uh self makes it look like you know how to read yes this is true i actually don't have a lot of books in the house like we only have like a handful of books and it's because and i used to have so many books and it's because i don't read i listened to audiobooks you want me to listen to an audiobook on double or triple time i got you i've i've read a lot of books this year in podcasts but this is a cool books and i this is my favorite one for the year 2022 version right here yay yay i appreciate you saying that yeah i appreciate you going through this because it's it's no seriously learning a language or learning uh type script is something that i think has bad rap because i think it's hard for people to conceptualize and if we can make it so that way people can understand it and conceptualize it and can you use it it's well worth it because it is a tool that a lot of us could really use absolutely thank you everyone and we will see you in a few weeks will announce when and next week you will have the information on the youtube's of how to use it all uh jay just said don't worry uh type script push types will make type script more approachable i don't know if i understand you need it sorry i like making types get more approachable that's good um i will say so jay is uh jian homie are the ones oh i will show you guys this josh you're getting stuck on a stream for a little longer that's okay i want to see you uh it's what we were talking about earlier the project that i'll be asking you questions about um java script is talking about adding more types of work oh nice they're adding in the ability so they're talking about it even if it does happen which is not certain it'll take several several years but they're adding in the ability for you to put in little annotations in your javascript they're equivalent to comments but with a nicer syntax dedicated to describing types looking very similar to how typescript does things uh that would be it would just be super convenient but it doesn't it's not adding in a type system it's letting you run your own typescript system type systems such as typescript it's just making it easier to annotate your code for typesystems interesting and jay i don't know if you were here earlier when i was comparing it to typescript is like how python makes you say that it's like a string is how i can was conceptualizing it earlier but all right oh no come back run add to string there we go so y'all get hub community standards come hang out with us over here uh j and tomi created this i technically am hanging out here and doing stuff to you i say that because it's still going over my head so uh what we're doing is when you start a new repo there are certain things that you need to make it accessible for the community and get hub shows us what those community standards are one of which is a code of conduct and j made the fancy code of conduct and donated his code to our project to be able to show it but that's cool and we're a step in the right direction but it still makes a lot of it confusing for everything else so if we go into the get hub community standards this scroll down love that image thank you thank you this is why they keep me around is that i like graphics is these are what a community standards require is your description you read me your code of conduct contributing license security policy issue templates pull request templates repository admins accept content reports and yet there's it doesn't show you the health of all of it just by looking at it it like shows you just this bar and it doesn't really always give you access to where you can find all these or examples and that's what we're building and we are using typescript to do it and also j and homie please add in anything else that i am missing because j was doing some really really cool things and i wasn't 100% understanding them the other day but we were doing some full stuff on Tuesday's stream so come hang out with us and do that when we have j and homie on the stream again i love how everybody is like overlap like yeah or my stream start to overlap with each other they'll flows together blends in like a nice it's played of indian food all the flavors seeping in together are you gotten me really hungry for this whole stream because all the apple stuff you're welcome yay and yes yes um and i would say okay so homie said this about j all else to say about homie because homie's my homie huh okay yes yes i um homie has a real name but i still call him homie guys it's fun uh and j just said um they have no idea what they're doing in typescript they just pretend to do things while furiously searching for things yes and this is what we did the other day yet there is a huge difference of knowing the concepts of programming in general versus like just learning a new language and there's a lot of leveling there so that's why we have teach gentec so that way we're gonna do all this stuff together and because you cannot rush oh i just thought of this the other day of what i was trying to say consistency you cannot rush consistency consistency takes time that's why i was yay i finally got to say it out loud i'm excited well beautiful humans you know where to set us up oh yes sorry i've got i've got one more thing to add i'm going to do this after ever chapter there's one part from the chapter that's very important that you missed why did the string and the number break up they weren't each other's types yep they weren't each other's types i had to think about it because i'm like i read this i read this i read this one i read it yes yes now for next times you all have to figure it out today i got it but next time you have to yay bye everyone