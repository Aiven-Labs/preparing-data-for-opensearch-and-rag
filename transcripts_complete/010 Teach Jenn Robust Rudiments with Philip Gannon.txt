Hey, Philip. Thank you for joining Teach Shantak. Please introduce yourself and what you're going to be teaching us today. Sure. Yeah. So thanks for having me. Obviously, my name is Philip. I'm a lead engineer and I come to come to come to one of my tons of maps. Super cool place to work And generally, the kind of stuff I want to talk to about today is basically the foundations for rudiments of software development
And generally, the kind of stuff I want to talk to about today is basically the foundations for rudiments of software development There's a lot of really interesting basics that people overlook because they're the basics, but they set you up so well for the rest of your career that it's like only a fool would ignore them. So I want to talk a little bit about that today and hopefully wet people's appetite up at the topics
There's a lot of really interesting basics that people overlook because they're the basics, but they set you up so well for the rest of your career that it's like only a fool would ignore them. So I want to talk a little bit about that today and hopefully wet people's appetite up at the topics I dig that because something that we kind of talked about too is creating theory Thursdays where it's not anything we're doing on screen. We're not pure programming. It is just talking about what goes behind the scenes of the code
I dig that because something that we kind of talked about too is creating theory Thursdays where it's not anything we're doing on screen. We're not pure programming. It is just talking about what goes behind the scenes of the code Like what do we need to know what logic do we need to start thinking about
Like what do we need to know what logic do we need to start thinking about And for everyone watching, yes, I'm like moving around with my pen because I want to make notes of when we talk about each of them because it's definitely something that I know one of the ones you mentioned were solid, right? The solid principles
And for everyone watching, yes, I'm like moving around with my pen because I want to make notes of when we talk about each of them because it's definitely something that I know one of the ones you mentioned were solid, right? The solid principles Yeah. I was just like, I don't even know what that is. But since we're talking about different things throughout it, I need to take time because to remember where they're at. So thank you again. I appreciate it
Yeah. I was just like, I don't even know what that is. But since we're talking about different things throughout it, I need to take time because to remember where they're at. So thank you again. I appreciate it Where do you want it? Well, before we get into it, actually, how did you get to the point where you're at right now because you also have the podcast and you talk about like interviewing and soft skills and so much more than just engineering and and this software, how did you get to that point
Where do you want it? Well, before we get into it, actually, how did you get to the point where you're at right now because you also have the podcast and you talk about like interviewing and soft skills and so much more than just engineering and and this software, how did you get to that point A bit of a long road, a couple of years, but I mean like the big part of it, the tech community is giving back
A bit of a long road, a couple of years, but I mean like the big part of it, the tech community is giving back So you see people that do like amazing open source contributions. And I mean like the majority of software we use is developers is open source, right? As you can contribute to yourself, we're building upon the wisdom of other people
So you see people that do like amazing open source contributions. And I mean like the majority of software we use is developers is open source, right? As you can contribute to yourself, we're building upon the wisdom of other people And then of course, there's a lot of great people who do technical tutorials and like how to get started, how to build certain things and all the rest. And I kind of found out that there was a niche missing where people don't really talk about the other side of software, which is a soft stuff
And then of course, there's a lot of great people who do technical tutorials and like how to get started, how to build certain things and all the rest. And I kind of found out that there was a niche missing where people don't really talk about the other side of software, which is a soft stuff So that's like, you know, management, leadership, interviews, how to have a good work life balance because work life balance is a huge thing and the development of world right? Control your stress, control your workload, set boundaries, things like that. People weren't really talking about that
So that's like, you know, management, leadership, interviews, how to have a good work life balance because work life balance is a huge thing and the development of world right? Control your stress, control your workload, set boundaries, things like that. People weren't really talking about that And I felt that like maybe it's the more technical aspects, well covered later people, but that I could certainly speak about public speaking leadership and all the kind of stuff and help people with that
And I felt that like maybe it's the more technical aspects, well covered later people, but that I could certainly speak about public speaking leadership and all the kind of stuff and help people with that So my podcast is kind of a way for giving back with that to show people how to interview better and just how to have a successful career without focusing too much on the technical aspect. That makes sense. It does
So my podcast is kind of a way for giving back with that to show people how to interview better and just how to have a successful career without focusing too much on the technical aspect. That makes sense. It does It does. And I love that you're doing that because there, I would say that tech world is like its own species. Like you have to talk about it differently, you have to think about it differently
It does. And I love that you're doing that because there, I would say that tech world is like its own species. Like you have to talk about it differently, you have to think about it differently And whereas if you're talking to somebody in marketing for spacing, so we're going to say like a beverage, like they're not going to think about the same things as marketing in the tech world. And what up K, the Pringle one, how's it going? Thanks for joining me
And whereas if you're talking to somebody in marketing for spacing, so we're going to say like a beverage, like they're not going to think about the same things as marketing in the tech world. And what up K, the Pringle one, how's it going? Thanks for joining me And so I think it's really cool that you talk about those soft skills. And as somebody mentioned of like soft skills and core skills, I think that was Ramon. He was on the podcast a while ago. I like how you say that soft skills are core skills too
And so I think it's really cool that you talk about those soft skills. And as somebody mentioned of like soft skills and core skills, I think that was Ramon. He was on the podcast a while ago. I like how you say that soft skills are core skills too So we will get into all of that one day, but can't go down that rabbit hole. Where do you want to start? I'll just start rambling. And then you can stop me at any time. We can stop and start like that if that's okay. So I guess like for the topic, we said robust rudiments
So we will get into all of that one day, but can't go down that rabbit hole. Where do you want to start? I'll just start rambling. And then you can stop me at any time. We can stop and start like that if that's okay. So I guess like for the topic, we said robust rudiments rudiments is a really deliberate choice because if you think of something like maybe say drumming, for example, you have your rudiments. And they are patterns that you practice continuously. I think there's a set of like 40 in total of combinations of left and right, left and right, left and right
rudiments is a really deliberate choice because if you think of something like maybe say drumming, for example, you have your rudiments. And they are patterns that you practice continuously. I think there's a set of like 40 in total of combinations of left and right, left and right, left and right And what they're designed to do is they're designed to build your muscle memory to help you build your coordination and also develop a sense of rhythm over time. And then as you progress further in your career as a drummer say, you will try different combinations of these
And what they're designed to do is they're designed to build your muscle memory to help you build your coordination and also develop a sense of rhythm over time. And then as you progress further in your career as a drummer say, you will try different combinations of these You'll swap your left and right for your kick and your snare or different toms or different symbols. And that brings you to the to the musical aspect. Your plane becomes more automatic and more expressive. And you've built this amazing muscle memory to work with
You'll swap your left and right for your kick and your snare or different toms or different symbols. And that brings you to the to the musical aspect. Your plane becomes more automatic and more expressive. And you've built this amazing muscle memory to work with Can you be a great drummer without these things? Absolutely. But I find that maybe if you go through this system of building up these rudiments, you may be becoming more technical and better drummer overall
Can you be a great drummer without these things? Absolutely. But I find that maybe if you go through this system of building up these rudiments, you may be becoming more technical and better drummer overall And it's kind of the same with programming that like you pick up the basics and you reuse them constantly. And you're going to follow the same patterns all the time
And it's kind of the same with programming that like you pick up the basics and you reuse them constantly. And you're going to follow the same patterns all the time But like there's a deeper theory to a lot of them and we'll talk about things like say object-oriented programming and stuff like that, which for a lot of developers, they kind of know a little bit about
But like there's a deeper theory to a lot of them and we'll talk about things like say object-oriented programming and stuff like that, which for a lot of developers, they kind of know a little bit about But if you get deeper into the headspace about it, you kind of get a little better at solving solutions, I think. You put together more well-rounded solutions. And those neurons fire together and they wire together to more you do it
But if you get deeper into the headspace about it, you kind of get a little better at solving solutions, I think. You put together more well-rounded solutions. And those neurons fire together and they wire together to more you do it And you're building this mental muscle memory effectively where you can actually get solutions out from your brain to your fingers to keep more much faster and much clearer. So I guess that's the idea of going through the rudiments, right? Makes sense? It does
And you're building this mental muscle memory effectively where you can actually get solutions out from your brain to your fingers to keep more much faster and much clearer. So I guess that's the idea of going through the rudiments, right? Makes sense? It does And I like that because I think I've thought about rudiments abstractly. I've never actually fully taken a moment to be like, what is rudiments? And I like how you explain it as a bit more of specific repetitions. And how doing those repetitions, yes
And I like that because I think I've thought about rudiments abstractly. I've never actually fully taken a moment to be like, what is rudiments? And I like how you explain it as a bit more of specific repetitions. And how doing those repetitions, yes Like if with my other show, like, shit, you don't want to talk about, we talk about a lot about therapy. And a lot of therapy is rewiring our mindsets to have better connections. And that's like the same thing that you're talking about. And I love it. And what about the Kari? Hey
Like if with my other show, like, shit, you don't want to talk about, we talk about a lot about therapy. And a lot of therapy is rewiring our mindsets to have better connections. And that's like the same thing that you're talking about. And I love it. And what about the Kari? Hey Um, so I really dig that it really comes into our world in so many different aspects than just coding yet. I think the logical side of it is where many people get stuff because I don't know those or knew that they really existed with my natural Googles of trying to figure out job scripts. Okay
Um, so I really dig that it really comes into our world in so many different aspects than just coding yet. I think the logical side of it is where many people get stuff because I don't know those or knew that they really existed with my natural Googles of trying to figure out job scripts. Okay Okay. Okay. Let me like googling is the super rudiments, the core core core skill of every developer, right? Yes. You get that one down, your career is sorted. I don't know what to worry about the rest. But um, okay
Okay. Okay. Let me like googling is the super rudiments, the core core core skill of every developer, right? Yes. You get that one down, your career is sorted. I don't know what to worry about the rest. But um, okay But um, okay. So talking about some of them, um, I guess to tell a bit of a story, we see an awful lot of them drive towards data structures and algorithms. And it's, you know, a big thing in interviews where you have to do like these hacker ring tests or cohorts and stuff like that
But um, okay. So talking about some of them, um, I guess to tell a bit of a story, we see an awful lot of them drive towards data structures and algorithms. And it's, you know, a big thing in interviews where you have to do like these hacker ring tests or cohorts and stuff like that And they test your ability to maybe like balance a binary tree or do something with a LinkedIn list or whatever. And there's a lot of candidates who go for these interviews and graduates and stuff like that
And they test your ability to maybe like balance a binary tree or do something with a LinkedIn list or whatever. And there's a lot of candidates who go for these interviews and graduates and stuff like that And they will spend like six months full time learning data structures and algorithms or go through courses, they'll buy books, they'll do all the rest. They're super talented people. But they come out at the other end, maybe with a job or whatever happens position
And they will spend like six months full time learning data structures and algorithms or go through courses, they'll buy books, they'll do all the rest. They're super talented people. But they come out at the other end, maybe with a job or whatever happens position And while they're really good at writing algorithms, maybe they don't know how to join everything together properly in an application that makes sense, especially when you join a company or you're usually joining a pre-existing platform
And while they're really good at writing algorithms, maybe they don't know how to join everything together properly in an application that makes sense, especially when you join a company or you're usually joining a pre-existing platform And and usually there's a way to code a structured and they can't rock that sort of thing at the start, right? So maybe there's a leaning towards one side where it should be leaning towards the other
And and usually there's a way to code a structured and they can't rock that sort of thing at the start, right? So maybe there's a leaning towards one side where it should be leaning towards the other And that's towards these concepts like object-oriented programming to get better at that, the design patterns and then architecture patterns. And we can jump a little bit into them at the moment. So for object-oriented programming, I mean, you're using it at the moment
And that's towards these concepts like object-oriented programming to get better at that, the design patterns and then architecture patterns. And we can jump a little bit into them at the moment. So for object-oriented programming, I mean, you're using it at the moment You're using JavaScript JavaScript and you can do it and I'm sure anybody, C-sharp, PHP, all the rest, very common concept, which is a software paradigm where your solutions are based on objects instead of just pure functional logic
You're using JavaScript JavaScript and you can do it and I'm sure anybody, C-sharp, PHP, all the rest, very common concept, which is a software paradigm where your solutions are based on objects instead of just pure functional logic So if you think of like a script and the script is going to be like, I want to get from A to B, I want to take in my data, process my data and spit it out. That's very logical, concise, one-way sequence
So if you think of like a script and the script is going to be like, I want to get from A to B, I want to take in my data, process my data and spit it out. That's very logical, concise, one-way sequence When you think of object-oriented programming, you're actually describing things in terms of objects, the properties they have and the behavior they display and how they interact with each other. And maybe that sounds like super abstract and out there
When you think of object-oriented programming, you're actually describing things in terms of objects, the properties they have and the behavior they display and how they interact with each other. And maybe that sounds like super abstract and out there But the general point is you're just you're modeling your problem space. So if you have a system where it takes in some data and then it sends out an email, well, maybe you'll have an object which is an email service and that handles sending of emails
But the general point is you're just you're modeling your problem space. So if you have a system where it takes in some data and then it sends out an email, well, maybe you'll have an object which is an email service and that handles sending of emails So it's once you kind of get to it, it's handy enough. Really does make sense because you're building basically bigger solutions and you're building whole systems where parts can interact with each other, but you can build them one piece at a time
So it's once you kind of get to it, it's handy enough. Really does make sense because you're building basically bigger solutions and you're building whole systems where parts can interact with each other, but you can build them one piece at a time I wanted to core aspects of object-oriented programming as you build little units of code, you describe the behavior for each of these and obviously it's chains of them working together
I wanted to core aspects of object-oriented programming as you build little units of code, you describe the behavior for each of these and obviously it's chains of them working together How do you interact with each other is your full system of how everything works? That's something that we had Mishko who on the show that he created Angular JS and then he recently just launched quick. And that was something that he was talking about like with his kids
How do you interact with each other is your full system of how everything works? That's something that we had Mishko who on the show that he created Angular JS and then he recently just launched quick. And that was something that he was talking about like with his kids And I love this like it compares into kids because I'm like it's basically what we all have to do is be a newbie and think of these all as very basis that we're learning them for the first time
And I love this like it compares into kids because I'm like it's basically what we all have to do is be a newbie and think of these all as very basis that we're learning them for the first time And he talked about talked about how it's very, very small steps and very, very small projects and things that all you learn them and then they all stack together. So when you think about like I'm going to go with Twitter because that's where I meet like half of the guess log here
And he talked about talked about how it's very, very small steps and very, very small projects and things that all you learn them and then they all stack together. So when you think about like I'm going to go with Twitter because that's where I meet like half of the guess log here You know like it's been complexity built over time. It wasn't something that just automatically appeared like this
You know like it's been complexity built over time. It wasn't something that just automatically appeared like this And so with object-oriented and I wanted to ask this to your previous before we introduced object-oriented do most companies say they have a certain way of doing it or is it more like suggested instead of actually said? You pretty much know from the language that they use
And so with object-oriented and I wanted to ask this to your previous before we introduced object-oriented do most companies say they have a certain way of doing it or is it more like suggested instead of actually said? You pretty much know from the language that they use So I mean like for the most part if you're working a C-sharp.net shop it is an object-oriented world. Whereas if someone said we'll actually do things in F-sharp, I mean that's a functional language is not an object-oriented language
So I mean like for the most part if you're working a C-sharp.net shop it is an object-oriented world. Whereas if someone said we'll actually do things in F-sharp, I mean that's a functional language is not an object-oriented language You would know but I mean like you would generally tend towards one of the order. So like people who work in Java's grid sorry Java or C-sharp or even JavaScript through a certain extent it's pretty much this object-oriented code all the way. You wouldn't really think about it
You would know but I mean like you would generally tend towards one of the order. So like people who work in Java's grid sorry Java or C-sharp or even JavaScript through a certain extent it's pretty much this object-oriented code all the way. You wouldn't really think about it But then there are people who would maybe specialize in functional languages, functional solutions and that would just be their whole jam for the whole career. Okay. I'm taking notes. Okay cool thank you
But then there are people who would maybe specialize in functional languages, functional solutions and that would just be their whole jam for the whole career. Okay. I'm taking notes. Okay cool thank you Okay so moving on from that as you you're writing yourself or as you said a lot of these things are like you'll learn little bits over time. So like if anyone's listening under like man I don't know all of these things. Well like look I've been doing this for 12 years
Okay so moving on from that as you you're writing yourself or as you said a lot of these things are like you'll learn little bits over time. So like if anyone's listening under like man I don't know all of these things. Well like look I've been doing this for 12 years I don't know all of these things in in depth detail. But you'll pick up little bits and pieces over time and you'll join the dots and then you'll generally tend to take on what you need right
I don't know all of these things in in depth detail. But you'll pick up little bits and pieces over time and you'll join the dots and then you'll generally tend to take on what you need right So as your people tell you things or your hill of concepts you'll do a little bit of googling and then you get a better understanding as time goes on
So as your people tell you things or your hill of concepts you'll do a little bit of googling and then you get a better understanding as time goes on But based on the object-oriented path once you kind of get familiar with that and once you kind of understand the core concept which is your modeling your problem domain, your solution domain, you start to divvy out your code in particular ways and then you come across what's usually called the solid principles
But based on the object-oriented path once you kind of get familiar with that and once you kind of understand the core concept which is your modeling your problem domain, your solution domain, you start to divvy out your code in particular ways and then you come across what's usually called the solid principles And these are five principles for just writing really good object-oriented code. People dispute them and that's fine and people dispute the order and that's fine but I think just following them generally gives you just like a really clear framework of just good practices to follow
And these are five principles for just writing really good object-oriented code. People dispute them and that's fine and people dispute the order and that's fine but I think just following them generally gives you just like a really clear framework of just good practices to follow And solid actually stands for an acronym which is really easy so like five principles. I'll jump through them and stop you anytime. The first is the single responsibility principle. So if you have an object or a class it should really only do one thing
And solid actually stands for an acronym which is really easy so like five principles. I'll jump through them and stop you anytime. The first is the single responsibility principle. So if you have an object or a class it should really only do one thing Shouldn't try and do two things and when we say do a thing that's like an abstract concept you get to decide what that is. That thing could be we talked a bit of an email service right so if you have an email service the only thing it should do it's send emails
Shouldn't try and do two things and when we say do a thing that's like an abstract concept you get to decide what that is. That thing could be we talked a bit of an email service right so if you have an email service the only thing it should do it's send emails Shouldn't send text messages shouldn't talk to people on WhatsApp. Shouldn't have artificial intelligence both in it should just send emails
Shouldn't send text messages shouldn't talk to people on WhatsApp. Shouldn't have artificial intelligence both in it should just send emails That makes it super easy to verify that the functionality works it makes it easier to write it in the first place and then it makes it easier to write tests against us and then when order parts of your code want to do something they know want to send an email call the email service. Easy peasy
That makes it super easy to verify that the functionality works it makes it easier to write it in the first place and then it makes it easier to write tests against us and then when order parts of your code want to do something they know want to send an email call the email service. Easy peasy Easy peasy. And you might want order parts within that so obviously as your applications grow they might delegate some of their responsibility to order objects and classes
Easy peasy. And you might want order parts within that so obviously as your applications grow they might delegate some of their responsibility to order objects and classes So again in our email service you might have a particular class that says well we want to send it to an email address maybe we want to validate that email address before we send it. So you might have a validator class. Okay
So again in our email service you might have a particular class that says well we want to send it to an email address maybe we want to validate that email address before we send it. So you might have a validator class. Okay Okay. It's one responsibility it's just to validate that an email address is valid or not. So you break up your problem with lots of tiny little parts and each part that process is part of that problem just has one little responsibility which is that one particular part. Okay. So with me
Okay. It's one responsibility it's just to validate that an email address is valid or not. So you break up your problem with lots of tiny little parts and each part that process is part of that problem just has one little responsibility which is that one particular part. Okay. So with me Okay. So with me. Still with you. Still following. Okay. So let's say yes solid. We went to the next one which is the open and closed principles and this one a little bit squiggly will try our best. Basically that your objects are open for extension but not for modification. Okay
Okay. So with me. Still with you. Still following. Okay. So let's say yes solid. We went to the next one which is the open and closed principles and this one a little bit squiggly will try our best. Basically that your objects are open for extension but not for modification. Okay Okay. And we'll go back to our email service for a second. If your email service you know imagine somebody wants to extend the way your application communicates and they may say we're right we also want to be able to send what's that messages. Your email service shouldn't do that
Okay. And we'll go back to our email service for a second. If your email service you know imagine somebody wants to extend the way your application communicates and they may say we're right we also want to be able to send what's that messages. Your email service shouldn't do that That's not its responsibility so you wouldn't modify it in order to add this additional functionality but you could extend it for value add functionality. So you imagine with an email you say okay I wanted to send it to this person and here is the the HTML I want to send as part of that email
That's not its responsibility so you wouldn't modify it in order to add this additional functionality but you could extend it for value add functionality. So you imagine with an email you say okay I wanted to send it to this person and here is the the HTML I want to send as part of that email I could be one met it. You might extend it and not another met it and say well here's the name of the person I want to send it to and then send a sending a big block of HTML I'm actually going to send some plain text and maybe the name of a HTML template
I could be one met it. You might extend it and not another met it and say well here's the name of the person I want to send it to and then send a sending a big block of HTML I'm actually going to send some plain text and maybe the name of a HTML template The responsibility is still to send an email so that's okay but we've just extended it as a kind of a value add kind of thing. There's another way to use it but it's still those pretty much the same thing which is just send emails just you now have two methods of doing that
The responsibility is still to send an email so that's okay but we've just extended it as a kind of a value add kind of thing. There's another way to use it but it's still those pretty much the same thing which is just send emails just you now have two methods of doing that And what was that one called again? Open and close principle. Okay thank you. The next one then L nice and you well this is a bit tricky the list of substitution principle which sounds much scarier than it actually is. Anything that can use a base class should be able to use a derived class
And what was that one called again? Open and close principle. Okay thank you. The next one then L nice and you well this is a bit tricky the list of substitution principle which sounds much scarier than it actually is. Anything that can use a base class should be able to use a derived class So you imagine you might have a shape class and your shape class has a meta that's like we'll get the area of a shape
So you imagine you might have a shape class and your shape class has a meta that's like we'll get the area of a shape You think okay well for a derived class that could be like say a rectangle so rectangle's area is width by height or for a triangle it's whatever width by half the height or whatever and then for a circle you involve pi and all that kind of fun stuff but if something wants to do something with shapes it can say I'll expect the shape or I'll expect any descendant of shape which could be triangle circle or square
You think okay well for a derived class that could be like say a rectangle so rectangle's area is width by height or for a triangle it's whatever width by half the height or whatever and then for a circle you involve pi and all that kind of fun stuff but if something wants to do something with shapes it can say I'll expect the shape or I'll expect any descendant of shape which could be triangle circle or square I don't really know the difference and I don't care all I know is it has a get area meted and that's all they depend on. I don't really need to know what the details. Makes sense? It's a trick here
I don't really know the difference and I don't care all I know is it has a get area meted and that's all they depend on. I don't really need to know what the details. Makes sense? It's a trick here It doesn't 100% make sense but I think like one thing that I'm seeing within all of these frameworks is there's like things within the frameworks that I need to look into and ask more clarification. I don't think I'm there yet but it's giving me an idea of what to look up or what to ask later
It doesn't 100% make sense but I think like one thing that I'm seeing within all of these frameworks is there's like things within the frameworks that I need to look into and ask more clarification. I don't think I'm there yet but it's giving me an idea of what to look up or what to ask later That is one of the hardest lessons I've had to learn on this teach gen tech journey is it's not all going to make sense right away
That is one of the hardest lessons I've had to learn on this teach gen tech journey is it's not all going to make sense right away Like half the time it's going to be like somebody like I understand you're saying words but it doesn't I don't have like a visualization or understand how it actually works
Like half the time it's going to be like somebody like I understand you're saying words but it doesn't I don't have like a visualization or understand how it actually works But there's like things that I can look into you to like you mentioned two different phrases of how they if you can do one thing you should be able to do the other endless substitution and it's the type of thing that I'm like cool I can relisten to that part and go look up later and then if I don't fully understand what those are then I could have you or somebody else back on the show and be like hey can you explain this to all of us
But there's like things that I can look into you to like you mentioned two different phrases of how they if you can do one thing you should be able to do the other endless substitution and it's the type of thing that I'm like cool I can relisten to that part and go look up later and then if I don't fully understand what those are then I could have you or somebody else back on the show and be like hey can you explain this to all of us I mean yeah we can certainly come back and do another version with like code samples and older as this is not a problem but I mean like you could go your whole career without even hearing the words this cost of substitution and have a very successful career and not worry about us but it's just again you'll pick up little bits over time and you'll take the bits you need and you'll forget the bits you don't then that's fine
I mean yeah we can certainly come back and do another version with like code samples and older as this is not a problem but I mean like you could go your whole career without even hearing the words this cost of substitution and have a very successful career and not worry about us but it's just again you'll pick up little bits over time and you'll take the bits you need and you'll forget the bits you don't then that's fine That is again that is life that is how I feel like we get through all of life so okay cool and then what is I
That is again that is life that is how I feel like we get through all of life so okay cool and then what is I I stands for interface segregation which again sounds an awful lot scarier than what it is basically when you have objects that depend on under things there's usually an interface between them and an interface is just like a contract and the contract says like hey I can do these things I can provide this value to you you don't really have to worry about the internals of how that happens which is this is the value I provide to you
I stands for interface segregation which again sounds an awful lot scarier than what it is basically when you have objects that depend on under things there's usually an interface between them and an interface is just like a contract and the contract says like hey I can do these things I can provide this value to you you don't really have to worry about the internals of how that happens which is this is the value I provide to you So for an email service and that might have an interface that basically says sand sand the thing and you might have different services that use the same interface that just they sand you don't really care what happens behind but just that they say sand
So for an email service and that might have an interface that basically says sand sand the thing and you might have different services that use the same interface that just they sand you don't really care what happens behind but just that they say sand Interface segregation is kind of a thing where when you're giving a contractor giving an interface you only want the bare minimum of functionality there you shouldn't have like tons of extra methods just in case somebody might need them someday keep it as short and sweet as possible just so the things you want to implement and that gives you less to implement and also makes it much clearer again part of the responsibilities of what you have an interface for what it actually does behind the scenes so basically just when you provide an interface make that as small as possible the minimum amount of value can get that makes sense yeah for the most part we're going going for the most part okay like you're explaining things well it's the context beforehand again so and this is what I love about it is I've had it when I first started I cannot comprehend what like the first three speakers were saying to me and then like on my fourth fourth guest I was like oh that's starting to make sense yay so it's definitely something I like how you mentioned that we we learned some bits and then we forget some bits but you know it's really cool how they always can stay in the back of our mind and my clicker yeah yeah exactly so the last one the D probably one the more important ones for me dependency inversion and this is a really sweet one if you can kind of get this one down in your career it's a really nice one basically depending upon abstractions and not concrete implementations so we talked about interfaces before and then interfaces basically just a contract of these are the things I do if you think of something like say a file storage service okay that might have an interface that basically says here's a list of folders here's how to get a file here's how to save a file and here's how to delete a file so that's the value that it adds that's a value that it has available for other things to work with but then when you think about it it's like well what are the implementations of that you could save to a hard drive you could save to the CD-ROM for people who are old enough to know what CD-ROM is there you could save to your cloud storage unlike as your blobs or AWS or whatever or maybe you could store in memory whatever uses that interface or say you have a service that's like a REST API and that takes a file and it's to save the file somewhere that service doesn't need to know about the internals of what happens the actual concrete implementation all it needs to know is to say hey there is an interface it has a method which is save a file so I'll just give it a file it will tell me whether to save it's successful or not and that's all I need to know I don't need to know where that's saved I don't need to know how it's saved or how quickly it's saved or whether it's this planet or the moon all I need to know is that it is saved and then you would just give it the different implementation over time so say maybe a user is another option of save to the cloud or save to my drive again you your actual system would depend on the interface for that and then behind the scenes is whatever implementation feels whatever it's supposed to do I will say I'm just glad you didn't say floppy disk because I feel like that is where like knowing I mean I knew they were out there when I was a kid yet you know CDs are more of what I grew up with but you know you also didn't talk about like a track or something so I think we're good I think I think most people's reference for the floppy disk is just the save icon now right that is never never never help one they've never used one but it's just that's the save icon right yeah that is so funny it is I just I just realized that I didn't like put two and two together that's funny okay cool what is after solid or are there ways that we can implement solid well wait wait we've implemented solid as you're going to your code and I mean like you'll do an awful lot of exploration over time you'll work on a lot of different projects and a lot of parts of projects and over time you'll start to see these pop up and maybe you'll be working on your code and you'll be like you know what this class is doing two different things maybe maybe I can get it to do one thing maybe I can make two classes instead and that'll just be a little bit easier to deal with and over time you'll naturally lean towards less complicated solutions hopefully and that allows you to speed things up because instead of thinking of just one massive class with like three or 400 lines of code you might be able to break that open to three or four subclasses that each handle on the little pieces at a time and that actually like it's much easier to get around in your headspace is much easier to explain to people and then later on when you're working in a team and doing things it's much easier to maybe review that code or share that code or integrate it into other people's changes or your main branch or your platform so just practice practice practice and you'll start over time to see them or you'll learn about them and you'll say hey I want to implement that I'll give it a try and you'll go true but again some of them you might not bother so that's fine got it and just to make sure at Bakari or K do either one of you have any questions so far they might be half listening I feel like that's what most people do with live streams they like half listen and then go watch it later when they like something peaks their interest so it's kind of hard to pay attention to live streams I've noticed because like I really want to but I also learn really where really well by listening on double time instead of listening like just normal so I don't catch even a lot of speakers because I'm like oh it'll retain better if I'm doing it in a different way like well I'm doing dishes listening on double speed instead of watching someone talk except if I'm actually in the conversation I'm in the conversation that I'm good I think if you're watching somebody like your attention span starts to drift after 15-20 minutes yes and then it's like you just Peter off yes yes I will say that we've had a bit more success and I think a lot of technical channels do when you're screen sharing with it because then they're able to see and or guess what they're going to do next or they can work their way through it which I think that's been pretty cool all right so we talked about implementing solid what else do we have going on so building a pond out and maybe on a notar abstract level you're going to see a lot of things like design patterns okay again design patterns maybe there's something you're using already maybe you don't even think about it and that's fine but if you do start to do a bit of digging about it you'll start to see particular patterns up of all the time there's 20 tree standard design patterns or categorize and tree ways don't need to worry too much about that you don't even need to know them all by heart but some of them you'll start to see so frequently that you'll just recognize them on site the rest you'll google and that's fine just no under there and having a rough idea is like more than enough but generally what design patterns are they're common ways to structure your code typically to solve a standard i-set of problems and as you as you go through making particular things you'll come across the same ones all the time and a really good example is say you're making a desktop application like say Photoshop and you might say okay well I want to replicate Photoshop and a big part of Photoshop is undo and redo you say well well how do I implement undo and redo and of course being the software world so varied you're not the first person to do it you would think about well maybe when someone clicks a button that's going to make an action in a list and every time they click a button it's going to add more actions to that list and then if they say oh shit I made a mistake well they'd hit undo what does undo do maybe it takes the last one off the list and then we can we can roll from that and then when you see that kind of thing when you go okay well that's the command pattern so if you're doing GUI applications or desktop applications or applications where does undo redo you're going to see the command pattern a lot and it's something you'll implement and it's something you'll recognize on site and off you go and I say other examples really famous ones the singleton pattern you might have something that you only want to be implemented once in your code and you might think of something like a caching service so every part of your code before they hit the expensive database or they they go do a really long tedious operation they might go and ask your caching service hey do you have this thing but you don't want everything in your system to make new versions of the caching system you only want it to be one existing version that they can all tap into so the singleton pattern is like well we'll allow you to make this once and then anytime any other parts of your code tries to make it again we'll just give them the existing so they'll never be a new implementation they're all using the same implementation and this is really handy when you're doing things like data stores and caching and stuff like that but you'll find over time that the problems you tend to solve or the problems you come across usually can be solved with just one of the standard patterns so you'll pick up a handful of them over time you'll ignore the rest and the ones you do use I mean like you you get very familiar with them as time goes on okay I am okay something that I hate to admit that I'm totally gonna admit is like classes don't always make sense like abstractly they make sense to me like actually figuring out how to write them they don't really make sense to me because is our class and this has to do a singleton I will bring it back out because I don't think they're connected but I want to ensure because in classes is it where it will create a template that you can use multiple times for different items yes so a class is a blueprint for an object so a class basically says well when we have an object that object is gonna you think of a user record the user record is gonna have it's gonna have a user name maybe it has a password maybe it has their email address and maybe it has their age that's what your class is to as a blueprint defines so that every time there's a user in your system that's an implementation of that class that's that's an object and then you know that it has these properties so bringing back the object or into the programming you describe the attributes you want your objects to have and then the behavior they have so you think for your your user record you have a the class a user record class and maybe that has some functionality well maybe we store their data birth but we might have a method to calculate their age really simple but whatever so that's the the functionality that it describes the blueprint that it says hey these are the things that this can do okay and then so a singleton pattern wouldn't use a class but it could use an object it does use the class so it uses that blueprint okay it makes the object but then it makes one object and then anytime any other parts your systems as hey super class for your whatever I want to make another one of these to do things well it will say hey one of those already exists so I'm just gonna give you the existing object I'm not gonna make you a new one would that be like when for you going back to the reference of users like if I already have an existing account what a singleton pattern give me my existing information instead of creating a new user well a few user might not be a good example but we'll stick with it so if you say right I want to make a you you new user record and I want to apply the singleton record to the singleton pattern to that once somebody creates or some part of your system creates the first user record if they try and create another it's gonna say no here's the one we already have so if you make your first record and it's like hey the name is Jan the password's whatever my email is this and my age is that when they go and try and make another one it will say well here's the one that already exists with the properties that it already has and the values that already has okay no like it it makes sense I'm just trying to like I'm to use a record might not be a good example a really good example might be for singletons like we said like a caching class so when when somebody asked for something from the database they'll say hey caching class do you have this and the caching class will say no I don't but I'll ask the database for it and then when the database comes back with that I'll store it in my memory so the next time someone asked me for that I'm not gonna go hit the database I already have it in memory but then when you're caching class or whatever you only want one instance of that because otherwise if you have multiple different instances they have their own internal memory lists and they don't juggle they don't mesh together whereas you only want one instance that has one really big long memory list and everything asks the same cash hey do you have this thing okay that that does make sense so other than like I know we have 23 design patterns other than the singleton what are what's another pretty popular one I have to rack my memory now okay so a really good one and I'm not a one here on my notes did you do do do do so you imagine that you want to make something like a chat room okay okay and a chat room you would say well I have a list of messages and when I send a message to some to the chat room I want everybody to get that so when you think about you say well that's a really good example of say the observer pattern because what can happen you can publish a message to the chat room whatever the chat room is and then everybody that's subscribed to the chat room gets that message on their phone and that's just like a really generally when you look at publish and subscribe kind of things you think okay do you observer pattern is just the normal way that's done okay and that makes sense real quick the card I didn't mention a good example of a is a listed favorite websites that are cash just to go back to the singleton one I believe yeah that's a really good example um and I just googled it also to look at so you said that there's three different types and it's credential structural and behavioral right that's correct yeah okay I'm gonna copy and paste this into the notes as well because I think it's it's like yes you may not run into them very often like you know we're talking about singleton but at the same time just reading through it and knowing what they are I feel like would be really really helpful um and I'll share this on this video
Interface segregation is kind of a thing where when you're giving a contractor giving an interface you only want the bare minimum of functionality there you shouldn't have like tons of extra methods just in case somebody might need them someday keep it as short and sweet as possible just so the things you want to implement and that gives you less to implement and also makes it much clearer again part of the responsibilities of what you have an interface for what it actually does behind the scenes so basically just when you provide an interface make that as small as possible the minimum amount of value can get that makes sense yeah for the most part we're going going for the most part okay like you're explaining things well it's the context beforehand again so and this is what I love about it is I've had it when I first started I cannot comprehend what like the first three speakers were saying to me and then like on my fourth fourth guest I was like oh that's starting to make sense yay so it's definitely something I like how you mentioned that we we learned some bits and then we forget some bits but you know it's really cool how they always can stay in the back of our mind and my clicker yeah yeah exactly so the last one the D probably one the more important ones for me dependency inversion and this is a really sweet one if you can kind of get this one down in your career it's a really nice one basically depending upon abstractions and not concrete implementations so we talked about interfaces before and then interfaces basically just a contract of these are the things I do if you think of something like say a file storage service okay that might have an interface that basically says here's a list of folders here's how to get a file here's how to save a file and here's how to delete a file so that's the value that it adds that's a value that it has available for other things to work with but then when you think about it it's like well what are the implementations of that you could save to a hard drive you could save to the CD-ROM for people who are old enough to know what CD-ROM is there you could save to your cloud storage unlike as your blobs or AWS or whatever or maybe you could store in memory whatever uses that interface or say you have a service that's like a REST API and that takes a file and it's to save the file somewhere that service doesn't need to know about the internals of what happens the actual concrete implementation all it needs to know is to say hey there is an interface it has a method which is save a file so I'll just give it a file it will tell me whether to save it's successful or not and that's all I need to know I don't need to know where that's saved I don't need to know how it's saved or how quickly it's saved or whether it's this planet or the moon all I need to know is that it is saved and then you would just give it the different implementation over time so say maybe a user is another option of save to the cloud or save to my drive again you your actual system would depend on the interface for that and then behind the scenes is whatever implementation feels whatever it's supposed to do I will say I'm just glad you didn't say floppy disk because I feel like that is where like knowing I mean I knew they were out there when I was a kid yet you know CDs are more of what I grew up with but you know you also didn't talk about like a track or something so I think we're good I think I think most people's reference for the floppy disk is just the save icon now right that is never never never help one they've never used one but it's just that's the save icon right yeah that is so funny it is I just I just realized that I didn't like put two and two together that's funny okay cool what is after solid or are there ways that we can implement solid well wait wait we've implemented solid as you're going to your code and I mean like you'll do an awful lot of exploration over time you'll work on a lot of different projects and a lot of parts of projects and over time you'll start to see these pop up and maybe you'll be working on your code and you'll be like you know what this class is doing two different things maybe maybe I can get it to do one thing maybe I can make two classes instead and that'll just be a little bit easier to deal with and over time you'll naturally lean towards less complicated solutions hopefully and that allows you to speed things up because instead of thinking of just one massive class with like three or 400 lines of code you might be able to break that open to three or four subclasses that each handle on the little pieces at a time and that actually like it's much easier to get around in your headspace is much easier to explain to people and then later on when you're working in a team and doing things it's much easier to maybe review that code or share that code or integrate it into other people's changes or your main branch or your platform so just practice practice practice and you'll start over time to see them or you'll learn about them and you'll say hey I want to implement that I'll give it a try and you'll go true but again some of them you might not bother so that's fine got it and just to make sure at Bakari or K do either one of you have any questions so far they might be half listening I feel like that's what most people do with live streams they like half listen and then go watch it later when they like something peaks their interest so it's kind of hard to pay attention to live streams I've noticed because like I really want to but I also learn really where really well by listening on double time instead of listening like just normal so I don't catch even a lot of speakers because I'm like oh it'll retain better if I'm doing it in a different way like well I'm doing dishes listening on double speed instead of watching someone talk except if I'm actually in the conversation I'm in the conversation that I'm good I think if you're watching somebody like your attention span starts to drift after 15-20 minutes yes and then it's like you just Peter off yes yes I will say that we've had a bit more success and I think a lot of technical channels do when you're screen sharing with it because then they're able to see and or guess what they're going to do next or they can work their way through it which I think that's been pretty cool all right so we talked about implementing solid what else do we have going on so building a pond out and maybe on a notar abstract level you're going to see a lot of things like design patterns okay again design patterns maybe there's something you're using already maybe you don't even think about it and that's fine but if you do start to do a bit of digging about it you'll start to see particular patterns up of all the time there's 20 tree standard design patterns or categorize and tree ways don't need to worry too much about that you don't even need to know them all by heart but some of them you'll start to see so frequently that you'll just recognize them on site the rest you'll google and that's fine just no under there and having a rough idea is like more than enough but generally what design patterns are they're common ways to structure your code typically to solve a standard i-set of problems and as you as you go through making particular things you'll come across the same ones all the time and a really good example is say you're making a desktop application like say Photoshop and you might say okay well I want to replicate Photoshop and a big part of Photoshop is undo and redo you say well well how do I implement undo and redo and of course being the software world so varied you're not the first person to do it you would think about well maybe when someone clicks a button that's going to make an action in a list and every time they click a button it's going to add more actions to that list and then if they say oh shit I made a mistake well they'd hit undo what does undo do maybe it takes the last one off the list and then we can we can roll from that and then when you see that kind of thing when you go okay well that's the command pattern so if you're doing GUI applications or desktop applications or applications where does undo redo you're going to see the command pattern a lot and it's something you'll implement and it's something you'll recognize on site and off you go and I say other examples really famous ones the singleton pattern you might have something that you only want to be implemented once in your code and you might think of something like a caching service so every part of your code before they hit the expensive database or they they go do a really long tedious operation they might go and ask your caching service hey do you have this thing but you don't want everything in your system to make new versions of the caching system you only want it to be one existing version that they can all tap into so the singleton pattern is like well we'll allow you to make this once and then anytime any other parts of your code tries to make it again we'll just give them the existing so they'll never be a new implementation they're all using the same implementation and this is really handy when you're doing things like data stores and caching and stuff like that but you'll find over time that the problems you tend to solve or the problems you come across usually can be solved with just one of the standard patterns so you'll pick up a handful of them over time you'll ignore the rest and the ones you do use I mean like you you get very familiar with them as time goes on okay I am okay something that I hate to admit that I'm totally gonna admit is like classes don't always make sense like abstractly they make sense to me like actually figuring out how to write them they don't really make sense to me because is our class and this has to do a singleton I will bring it back out because I don't think they're connected but I want to ensure because in classes is it where it will create a template that you can use multiple times for different items yes so a class is a blueprint for an object so a class basically says well when we have an object that object is gonna you think of a user record the user record is gonna have it's gonna have a user name maybe it has a password maybe it has their email address and maybe it has their age that's what your class is to as a blueprint defines so that every time there's a user in your system that's an implementation of that class that's that's an object and then you know that it has these properties so bringing back the object or into the programming you describe the attributes you want your objects to have and then the behavior they have so you think for your your user record you have a the class a user record class and maybe that has some functionality well maybe we store their data birth but we might have a method to calculate their age really simple but whatever so that's the the functionality that it describes the blueprint that it says hey these are the things that this can do okay and then so a singleton pattern wouldn't use a class but it could use an object it does use the class so it uses that blueprint okay it makes the object but then it makes one object and then anytime any other parts your systems as hey super class for your whatever I want to make another one of these to do things well it will say hey one of those already exists so I'm just gonna give you the existing object I'm not gonna make you a new one would that be like when for you going back to the reference of users like if I already have an existing account what a singleton pattern give me my existing information instead of creating a new user well a few user might not be a good example but we'll stick with it so if you say right I want to make a you you new user record and I want to apply the singleton record to the singleton pattern to that once somebody creates or some part of your system creates the first user record if they try and create another it's gonna say no here's the one we already have so if you make your first record and it's like hey the name is Jan the password's whatever my email is this and my age is that when they go and try and make another one it will say well here's the one that already exists with the properties that it already has and the values that already has okay no like it it makes sense I'm just trying to like I'm to use a record might not be a good example a really good example might be for singletons like we said like a caching class so when when somebody asked for something from the database they'll say hey caching class do you have this and the caching class will say no I don't but I'll ask the database for it and then when the database comes back with that I'll store it in my memory so the next time someone asked me for that I'm not gonna go hit the database I already have it in memory but then when you're caching class or whatever you only want one instance of that because otherwise if you have multiple different instances they have their own internal memory lists and they don't juggle they don't mesh together whereas you only want one instance that has one really big long memory list and everything asks the same cash hey do you have this thing okay that that does make sense so other than like I know we have 23 design patterns other than the singleton what are what's another pretty popular one I have to rack my memory now okay so a really good one and I'm not a one here on my notes did you do do do do so you imagine that you want to make something like a chat room okay okay and a chat room you would say well I have a list of messages and when I send a message to some to the chat room I want everybody to get that so when you think about you say well that's a really good example of say the observer pattern because what can happen you can publish a message to the chat room whatever the chat room is and then everybody that's subscribed to the chat room gets that message on their phone and that's just like a really generally when you look at publish and subscribe kind of things you think okay do you observer pattern is just the normal way that's done okay and that makes sense real quick the card I didn't mention a good example of a is a listed favorite websites that are cash just to go back to the singleton one I believe yeah that's a really good example um and I just googled it also to look at so you said that there's three different types and it's credential structural and behavioral right that's correct yeah okay I'm gonna copy and paste this into the notes as well because I think it's it's like yes you may not run into them very often like you know we're talking about singleton but at the same time just reading through it and knowing what they are I feel like would be really really helpful um and I'll share this on this video But even if like you go to Wikipedia really a nice Wikipedia article about this and they actually talk about for each pattern the typical use cases so as you said you have like a vague idea they exist yeah like as you go through you're you're writing a problem you're like man I really know how to write a chat room or whatever right and you'll come across people online will describe like hey the observer patterns if it's way to do this you don't have to like magically notice from noting you'll just you'll you'll see it over time you'll develop your own heuristics as you're solving problems like hey this sounds like it would be a really good way to use the observer pattern or to use a singleton yeah and this is pretty cool that it has um design pattern I'm not this goes through types and things as you said with wiki and then going to the one I click down here through cs
But even if like you go to Wikipedia really a nice Wikipedia article about this and they actually talk about for each pattern the typical use cases so as you said you have like a vague idea they exist yeah like as you go through you're you're writing a problem you're like man I really know how to write a chat room or whatever right and you'll come across people online will describe like hey the observer patterns if it's way to do this you don't have to like magically notice from noting you'll just you'll you'll see it over time you'll develop your own heuristics as you're solving problems like hey this sounds like it would be a really good way to use the observer pattern or to use a singleton yeah and this is pretty cool that it has um design pattern I'm not this goes through types and things as you said with wiki and then going to the one I click down here through cslmu
lmuedu I like that it also shows like why study them common themes so there's definitely but this is really helpful to know that this exists to as you said to like know what to google that's what I run into is I'm like I know this is a thing I have no idea what it's called so therefore it makes a really hardy google and I've had it from people I've worked with my partner he makes fun of me all the time because I I have to ask someone how do you google this I'm not the best google and that is something I have yet to master but knowing key terms does really help that this goes back to our first rudiment googling is is domain skill you know
edu I like that it also shows like why study them common themes so there's definitely but this is really helpful to know that this exists to as you said to like know what to google that's what I run into is I'm like I know this is a thing I have no idea what it's called so therefore it makes a really hardy google and I've had it from people I've worked with my partner he makes fun of me all the time because I I have to ask someone how do you google this I'm not the best google and that is something I have yet to master but knowing key terms does really help that this goes back to our first rudiment googling is is domain skill you know I honestly it's more of like knowing the terms to google like um if I was looking at to think of something that keeps showing up again and again in code I may not think of the word pattern for example so that's where I really struggle with it but I feel like I'm slowly getting better you will just it's a longer journey yeah or it's been way too much time on google but that too awesome there was a thing about link that talked about like why you should learn design patterns I mean there's some really interesting reasons about that I'll blunder through someone of now probably the one and most important is that the code you're writing follows expected patterns and expected behaviors there's a lot of developers out there who just kind of like they get an inkling of what they want they they DIY a pattern and that's not to say that what you're doing isn't great and they're not talented people but maybe they haven't taught about all the side effects maybe the waiter doing it isn't mature or battle tested there's a reason why these 27 patterns are so ubiquitous throughout the software design world because they're mature they're well used there's multiple examples of them people have pointed out the flaw discovered the flaws and pointed them out and fixed them and all the rest so I mean as you go through writing code you know you kind of say like okay well this is the normal way this is done if you enter a new code base say you change your job and you're seeing new code bases you will expect to see the same kinds of patterns pop up again and again and again you wouldn't see you wouldn't expect to see crazy ideas that people put together so it just helps to keep things consistent it helps to keep things in an expected way for you that you know what to expect and then for other people when they're looking at their code because obviously software development is a team exercise that they know what to expect and they kind of have you know okay we talked about publishing and subscribing earlier where like the observer pattern you wouldn't try and do somewhat or crazy bullshit you just use the observer pattern yeah I think that's really cool about also teaching to not reinvent the wheel because that saves a lot of time although sometimes there's stubborn people like me that I've in other parts of life I'm like what I can do it this way even though my stubbornness needs to learn it could be easier just using something that exists yes I know okay okay failure is a very important part of life that's how we learn and I think you have to get things wrong a lot of times in order to really understand the right solution so people should go off and have coding adventures and make all sorts of cool bullshit and maybe you'll discover new design pattern who knows but as you go and do these things and then maybe you have someone who's more advanced than you or experienced whatever they can review your work and they'll say hey actually you've written a lot of stuff here and it said you could do a different solution that's maybe 10 lines long you're going to remember that more because it's based on a failure and a correction to a solution rather than a few just say right I'm gonna read every single software development book out there and now I know everything so it's like as you're going through and you make mistakes and you learn and progress people are gonna correct you you'll correct yourself over time you'll go back to previous projects you had and you'll say damn I can't believe I wrote that I do this all the time the look at things of like fucking idiot wrote this and then it's like my name's honest okay but um you know you you learn over time you progress and true failures you have better successes later very cool thank you and I agree and we do have a pretty cool comment of that we're learning good principles learning the fundamentals and any profession are essential lots of good info here and uh I don't have your name so you're you're currently LinkedIn user but thank you for the comment I think it's so true because even to up until this part I mean I've only been in this world of really working on learning coding becoming a dev role I have no idea this stuff existed even when I started learning about like APIs when I was in stoplight like I didn't realize how much there was behind it to think about the big picture stuff when um there's like a Ian from postman uh he used to be an instructor and helped with codecamps and he talked about how I really want to think about theory things and then I really want to think about like um for scaling APIs and he's like not necessarily something unique to think about yet and so it's a lot of like learning what is good to learn this early on and what isn't and that is a fun piece of failure and also learning from so many different people so thank you again LinkedIn loser I just said LinkedIn loser oh my goodness I cannot talk LinkedIn user I looked on a LinkedIn and I believe it's Julie Jay so it's my mom ah okay thanks mom I mean you're not a LinkedIn loser if it's really do not it's probably it's probably my mom um but that's so weird because it normally does uh shows us who it is ah dang it but all right so what is something McCarty says I'm mom too and um McCarty you used to be an instructional and new codecamps too so what do you do you teach these type of things in codecamps uh for more of this theory or design base um you know behind the scenes to create the logic behind it if you revise yeah while you're working that I guess from my own experience I'd expect people who would maybe just fresh graduates or fresh from bootcamp maybe they don't notice stuff offhand and then like when they get to like two three four five years experience the kind of if they're going towards more pure self-reinventionary kind of stuff right and more hardcore they would start to get more into this kind of thing around the four or five mark they they would have like their favorite patterns they know the ones they'd use all the time and they they'd be aware of the other ones existing whether they know the implementation is another thing but that's always something you can Google right yeah I like that and McCarty just said yes and no he thinks codecamps need to focus more on the fundamentals before building full stack apps and I think that's a good call because something that I've really thought about on being able to do when there's a lot more of these videos out there are putting them in playlist of hey if you want to use uh learn JavaScript here's where it might be a really good um a place for you to start and these fundamentals honestly I didn't even realize they existed as I said so it's like this is so helpful to start digging into and the car a just as the heads up I told Ian the same thing I'm totally hitting you up on like you know going through this too and then Philip you I'm going to dig into these these fundamentals even more now so um what are we missing any of the fundamentals that you wanted to go to through last the last one I wanted to talk about a little bit was kind of building above that a level again which is an architectural patterns and these are kind of the patterns you would expect full applications or full services to follow and the reason what we do this is again it's because the you would have code in places where it's expected to be where anybody can come along and say well I know why that's there or I know where that is I can jump in and do that and I'll talk a little about I do enough a lot of like back in engineering enough but of rest APIs so something we use a lot is the interior architecture pattern you might hear it called the tree tier pattern the layer pattern what it's that's basically what it is and the idea is that you would divide your system open to separate layers that would have their own responsibilities and the classes would end kind of loosely followed a team of responsibility so if you think of a rest API you typically can you have tree layers your first is your your top level layer where people talk to the API your presentation layer and that is a particular set of responsibilities we'll jump into in a second you might then have a business logic layer under that so that's the the meat on the bones of exactly what your service does and then underneath that you might have like a data access layer and that's maybe for getting stuff from the database and saving stuff from the database and when you think about that loosely it makes enough lot of sense because if you then you know you join a new company and then you're given a book to fix and someone says well you need to fix something related to a particular data model record pretty you know obvious to say well that's in the data access layer and know where that is there's an expected pattern that's used here I know where to jump in and get a start and do something the same when you're like maybe expanding upon your code or your modifying existing platform knowing the different layers you have and the different responsibilities they have you'd easily know then where I'm going to put this new code that does this new thing or for a new feature that happens you break it into these smaller subtiles like we said before and you pop them into different places and each layer kind of dips down into the next layer so your top layer talks your business logic talks your data access which sends the results all the way back over so it's a nice kind of clear expected pattern and it's just be kind of become an industry standard right
I honestly it's more of like knowing the terms to google like um if I was looking at to think of something that keeps showing up again and again in code I may not think of the word pattern for example so that's where I really struggle with it but I feel like I'm slowly getting better you will just it's a longer journey yeah or it's been way too much time on google but that too awesome there was a thing about link that talked about like why you should learn design patterns I mean there's some really interesting reasons about that I'll blunder through someone of now probably the one and most important is that the code you're writing follows expected patterns and expected behaviors there's a lot of developers out there who just kind of like they get an inkling of what they want they they DIY a pattern and that's not to say that what you're doing isn't great and they're not talented people but maybe they haven't taught about all the side effects maybe the waiter doing it isn't mature or battle tested there's a reason why these 27 patterns are so ubiquitous throughout the software design world because they're mature they're well used there's multiple examples of them people have pointed out the flaw discovered the flaws and pointed them out and fixed them and all the rest so I mean as you go through writing code you know you kind of say like okay well this is the normal way this is done if you enter a new code base say you change your job and you're seeing new code bases you will expect to see the same kinds of patterns pop up again and again and again you wouldn't see you wouldn't expect to see crazy ideas that people put together so it just helps to keep things consistent it helps to keep things in an expected way for you that you know what to expect and then for other people when they're looking at their code because obviously software development is a team exercise that they know what to expect and they kind of have you know okay we talked about publishing and subscribing earlier where like the observer pattern you wouldn't try and do somewhat or crazy bullshit you just use the observer pattern yeah I think that's really cool about also teaching to not reinvent the wheel because that saves a lot of time although sometimes there's stubborn people like me that I've in other parts of life I'm like what I can do it this way even though my stubbornness needs to learn it could be easier just using something that exists yes I know okay okay failure is a very important part of life that's how we learn and I think you have to get things wrong a lot of times in order to really understand the right solution so people should go off and have coding adventures and make all sorts of cool bullshit and maybe you'll discover new design pattern who knows but as you go and do these things and then maybe you have someone who's more advanced than you or experienced whatever they can review your work and they'll say hey actually you've written a lot of stuff here and it said you could do a different solution that's maybe 10 lines long you're going to remember that more because it's based on a failure and a correction to a solution rather than a few just say right I'm gonna read every single software development book out there and now I know everything so it's like as you're going through and you make mistakes and you learn and progress people are gonna correct you you'll correct yourself over time you'll go back to previous projects you had and you'll say damn I can't believe I wrote that I do this all the time the look at things of like fucking idiot wrote this and then it's like my name's honest okay but um you know you you learn over time you progress and true failures you have better successes later very cool thank you and I agree and we do have a pretty cool comment of that we're learning good principles learning the fundamentals and any profession are essential lots of good info here and uh I don't have your name so you're you're currently LinkedIn user but thank you for the comment I think it's so true because even to up until this part I mean I've only been in this world of really working on learning coding becoming a dev role I have no idea this stuff existed even when I started learning about like APIs when I was in stoplight like I didn't realize how much there was behind it to think about the big picture stuff when um there's like a Ian from postman uh he used to be an instructor and helped with codecamps and he talked about how I really want to think about theory things and then I really want to think about like um for scaling APIs and he's like not necessarily something unique to think about yet and so it's a lot of like learning what is good to learn this early on and what isn't and that is a fun piece of failure and also learning from so many different people so thank you again LinkedIn loser I just said LinkedIn loser oh my goodness I cannot talk LinkedIn user I looked on a LinkedIn and I believe it's Julie Jay so it's my mom ah okay thanks mom I mean you're not a LinkedIn loser if it's really do not it's probably it's probably my mom um but that's so weird because it normally does uh shows us who it is ah dang it but all right so what is something McCarty says I'm mom too and um McCarty you used to be an instructional and new codecamps too so what do you do you teach these type of things in codecamps uh for more of this theory or design base um you know behind the scenes to create the logic behind it if you revise yeah while you're working that I guess from my own experience I'd expect people who would maybe just fresh graduates or fresh from bootcamp maybe they don't notice stuff offhand and then like when they get to like two three four five years experience the kind of if they're going towards more pure self-reinventionary kind of stuff right and more hardcore they would start to get more into this kind of thing around the four or five mark they they would have like their favorite patterns they know the ones they'd use all the time and they they'd be aware of the other ones existing whether they know the implementation is another thing but that's always something you can Google right yeah I like that and McCarty just said yes and no he thinks codecamps need to focus more on the fundamentals before building full stack apps and I think that's a good call because something that I've really thought about on being able to do when there's a lot more of these videos out there are putting them in playlist of hey if you want to use uh learn JavaScript here's where it might be a really good um a place for you to start and these fundamentals honestly I didn't even realize they existed as I said so it's like this is so helpful to start digging into and the car a just as the heads up I told Ian the same thing I'm totally hitting you up on like you know going through this too and then Philip you I'm going to dig into these these fundamentals even more now so um what are we missing any of the fundamentals that you wanted to go to through last the last one I wanted to talk about a little bit was kind of building above that a level again which is an architectural patterns and these are kind of the patterns you would expect full applications or full services to follow and the reason what we do this is again it's because the you would have code in places where it's expected to be where anybody can come along and say well I know why that's there or I know where that is I can jump in and do that and I'll talk a little about I do enough a lot of like back in engineering enough but of rest APIs so something we use a lot is the interior architecture pattern you might hear it called the tree tier pattern the layer pattern what it's that's basically what it is and the idea is that you would divide your system open to separate layers that would have their own responsibilities and the classes would end kind of loosely followed a team of responsibility so if you think of a rest API you typically can you have tree layers your first is your your top level layer where people talk to the API your presentation layer and that is a particular set of responsibilities we'll jump into in a second you might then have a business logic layer under that so that's the the meat on the bones of exactly what your service does and then underneath that you might have like a data access layer and that's maybe for getting stuff from the database and saving stuff from the database and when you think about that loosely it makes enough lot of sense because if you then you know you join a new company and then you're given a book to fix and someone says well you need to fix something related to a particular data model record pretty you know obvious to say well that's in the data access layer and know where that is there's an expected pattern that's used here I know where to jump in and get a start and do something the same when you're like maybe expanding upon your code or your modifying existing platform knowing the different layers you have and the different responsibilities they have you'd easily know then where I'm going to put this new code that does this new thing or for a new feature that happens you break it into these smaller subtiles like we said before and you pop them into different places and each layer kind of dips down into the next layer so your top layer talks your business logic talks your data access which sends the results all the way back over so it's a nice kind of clear expected pattern and it's just be kind of become an industry standard right Where my thought process is going right now is this like first off I need to understand APIs better that is just you know some I feel like I'm stuck on that currently because I I started in at Stoplight and they're an API design for spec company and I'm like I really just want to understand APIs because that's where I started but I'm curious is it possible to because I've built an API with Ramon and I know that we used ExpressJS and I think where I'm starting to really get a bit lost is how to create like the difference between like rest and soap APIs and then how these work like based in building an API if that makes sense like this kind of makes sense where I'm like okay like code as a singular like doing it on my computer with VS code and vocal host cool like that's making sense but doing stuff as like open source or creating a rest API which you need to make documentation for so other people can use your API and I'm like if that is not I know they go together I know they do I just don't know how you go from A to B so as you're like explaining a lot of this stuff I was like how do you go from A to B and I think that's something that I'm gonna ask you back on the show for to see what you want to explain and if we could go through some of these and Bacari as was on the show yesterday and we'll be on again tomorrow which I'm pretty excited about because it's there's so much that goes into all of this and I know that I keep saying that I need to code by myself but with so many of these episodes a week it's really cool because it is repetition
Where my thought process is going right now is this like first off I need to understand APIs better that is just you know some I feel like I'm stuck on that currently because I I started in at Stoplight and they're an API design for spec company and I'm like I really just want to understand APIs because that's where I started but I'm curious is it possible to because I've built an API with Ramon and I know that we used ExpressJS and I think where I'm starting to really get a bit lost is how to create like the difference between like rest and soap APIs and then how these work like based in building an API if that makes sense like this kind of makes sense where I'm like okay like code as a singular like doing it on my computer with VS code and vocal host cool like that's making sense but doing stuff as like open source or creating a rest API which you need to make documentation for so other people can use your API and I'm like if that is not I know they go together I know they do I just don't know how you go from A to B so as you're like explaining a lot of this stuff I was like how do you go from A to B and I think that's something that I'm gonna ask you back on the show for to see what you want to explain and if we could go through some of these and Bacari as was on the show yesterday and we'll be on again tomorrow which I'm pretty excited about because it's there's so much that goes into all of this and I know that I keep saying that I need to code by myself but with so many of these episodes a week it's really cool because it is repetition Repetitions one the best way to learn if you want to do another session of rest API isn't happy to do that that would be cool we can go through it a bit more in detail because there's two parts that right there's the whole concept of rest and then it's the actual implementation where if you said you've used express and so before I usually usually see sharpened
Repetitions one the best way to learn if you want to do another session of rest API isn't happy to do that that would be cool we can go through it a bit more in detail because there's two parts that right there's the whole concept of rest and then it's the actual implementation where if you said you've used express and so before I usually usually see sharpenednet but I mean like if you understand the concept of rest you're really just fulfilling that concept to your implementation. We can think about that another time
net but I mean like if you understand the concept of rest you're really just fulfilling that concept to your implementation. We can think about that another time Yes this is the cool thing is that since these are so complex that we are creating so many like part one part two are going down like certain rabbit holes with a specific guest because something that so many people have asked me and been in newbie is like well where do you want to go in this like what do you want to do and I'm like I don't know I don't know what's out there
Yes this is the cool thing is that since these are so complex that we are creating so many like part one part two are going down like certain rabbit holes with a specific guest because something that so many people have asked me and been in newbie is like well where do you want to go in this like what do you want to do and I'm like I don't know I don't know what's out there I don't know if I want to do specifically APIs like I apply for a company that does API management and I'm like cool if I work there like I'm going to learn more about that because I work there and I'm going to support it because if it's helping people I'm happy and that's why I'm like I don't know
I don't know if I want to do specifically APIs like I apply for a company that does API management and I'm like cool if I work there like I'm going to learn more about that because I work there and I'm going to support it because if it's helping people I'm happy and that's why I'm like I don't know I'm currently learning JavaScript I have someone come coming on the show next month in August about Python and starting to look into that
I'm currently learning JavaScript I have someone come coming on the show next month in August about Python and starting to look into that There's I got really curious about Kafka and what that is and one day I will ask more about Kubernetes and Docker and that kind of stuff so so many different rabbit holes to go down and how they all intermingle
There's I got really curious about Kafka and what that is and one day I will ask more about Kubernetes and Docker and that kind of stuff so so many different rabbit holes to go down and how they all intermingle A lot of the things you've mentioned like you could spend your whole career focusing on a single one of them and having a very lucrative career doing quite well and what I would say is like what a lot of juniors don't do and maybe they should just get your feet wet with everything try as much as you can write projects in Python follow tutorials write projects in JavaScript follow tutorials and then as you go through you'll get a feeling for the things you like to do
A lot of the things you've mentioned like you could spend your whole career focusing on a single one of them and having a very lucrative career doing quite well and what I would say is like what a lot of juniors don't do and maybe they should just get your feet wet with everything try as much as you can write projects in Python follow tutorials write projects in JavaScript follow tutorials and then as you go through you'll get a feeling for the things you like to do It takes a long while to get a sense of that and a really good example is that as like for me like I've been doing this for like 12 years now there was a full stack developer for 11 of those years and I transitioned to being just back end within the last year and it took me a long while to find that that's actually what I love doing that's what I prefer to do that's what I want to do and what it takes you time to develop that you have to try a lot of things and then say right I don't like this I don't like that I'm that's scary to shit out of me I don't want to leave and look at that and then over time you develop this thing of like okay these are things I enjoy doing this is the rabbit hole and I don't watch myself into yeah yeah I really like that and we will definitely get you scheduled back on the show and I did bring up LinkedIn because you just said it was Julie J and I looked it up it's my mom it is totally my mom she is like my number one supporter it's it's so fun um but yes so much goodness here and I'll be putting time codes and resources in the youtube link and is there anything that we missed that you're like we need to talk about today before we end today's show um not so much missed but something I like to reiterate that like you can go through all that stuff and have a very long happy career without knowing any of it we're not knowing these exact concepts the deal of its software is software that you deliver and works and makes money and users can use is the best software people might judge you for the quality of your software and maybe just the reason for that they might judge you for the way that it's put together but I mean ultimately it's delivered code that makes money is the best code right so I mean like if you don't know these things no matter where you are in your career you can pick them up over time you can ignore them but I think if you if you are interested in it and you do start googling and start learning and you'll find different books and videos and you to me courses and all sorts for it whatever floats your boat you do take a bit of an interest in it over time you'll start to see yourself improve an awful lot and between like reading code and writing code and finding mentors and getting that feedback loop going you'll see yourself progress so it's just take on the things you want to take on ignore the things that you're not really interested in as long as you're kind of keep moving and keep going like that's all good right yes yes and thank you for reiterating that I think it is definitely something that I love how it might have even been before we started streaming of we talked about that we all learned so differently some people is you know go into the books documentation this is something that I don't think Anthony's here today you know join join us today but he always is like Jen you have to read the documentation do the read me so I have a couple people coming on so Anthony's one of them and then another person coming on to talk about documentation not only why it's important but then also I had a great good documentation and it's it's definitely something that we documentation is not always where my mind goes but it's really cool how with meeting people in this industry how even though documentation is the way a lot of people read and what products need that even though I'm dyslexic I can there's much more screen readers that can tell me what's going on and I can understand it and check my code and I mean a lot more coders that are dyslexic or are ADHD and it's just really cool being able to see yes how many of these overlap and how many really once we learn what we're interested in or the way we learn or how to get around something if we do aren't we are neurodiverse that we there are topics and things out there that's why I started on Wednesdays we do a Twitter space about neurodivergency because I feel like so many people don't know how to function especially in the tech world when it's not always as clear I think is the best way to say it yeah not it's fair I think a lot of people who write software are drawn to the aspect of logic and order purity and all these great concepts within software but those are like diametrically opposed to like say people skills you talk about writing documentation stuff like that people who are really good at writing code are often really poor at writing documentation because they're too totally different skills unlike what a lot of things you just have to practice and practice and practice and practice and practice and develop that skill over time to get it open but yeah people learn in different ways try things in different ways just to avoid a discovery to find where works for you right yes yes and writing anything is not awesome for me but if you want me to live stream something create video be a hype person go to events and talk to everyone and network on your girl and that's what I've been trying to explain as I've been going for deaf role roles they're like you don't know how to write a plugin I'm like I can learn but here's all my other skills that will benefit you so it's definitely a lesson learned and thank you again Philip for joining us today and we look forward to having you on the show again yay
It takes a long while to get a sense of that and a really good example is that as like for me like I've been doing this for like 12 years now there was a full stack developer for 11 of those years and I transitioned to being just back end within the last year and it took me a long while to find that that's actually what I love doing that's what I prefer to do that's what I want to do and what it takes you time to develop that you have to try a lot of things and then say right I don't like this I don't like that I'm that's scary to shit out of me I don't want to leave and look at that and then over time you develop this thing of like okay these are things I enjoy doing this is the rabbit hole and I don't watch myself into yeah yeah I really like that and we will definitely get you scheduled back on the show and I did bring up LinkedIn because you just said it was Julie J and I looked it up it's my mom it is totally my mom she is like my number one supporter it's it's so fun um but yes so much goodness here and I'll be putting time codes and resources in the youtube link and is there anything that we missed that you're like we need to talk about today before we end today's show um not so much missed but something I like to reiterate that like you can go through all that stuff and have a very long happy career without knowing any of it we're not knowing these exact concepts the deal of its software is software that you deliver and works and makes money and users can use is the best software people might judge you for the quality of your software and maybe just the reason for that they might judge you for the way that it's put together but I mean ultimately it's delivered code that makes money is the best code right so I mean like if you don't know these things no matter where you are in your career you can pick them up over time you can ignore them but I think if you if you are interested in it and you do start googling and start learning and you'll find different books and videos and you to me courses and all sorts for it whatever floats your boat you do take a bit of an interest in it over time you'll start to see yourself improve an awful lot and between like reading code and writing code and finding mentors and getting that feedback loop going you'll see yourself progress so it's just take on the things you want to take on ignore the things that you're not really interested in as long as you're kind of keep moving and keep going like that's all good right yes yes and thank you for reiterating that I think it is definitely something that I love how it might have even been before we started streaming of we talked about that we all learned so differently some people is you know go into the books documentation this is something that I don't think Anthony's here today you know join join us today but he always is like Jen you have to read the documentation do the read me so I have a couple people coming on so Anthony's one of them and then another person coming on to talk about documentation not only why it's important but then also I had a great good documentation and it's it's definitely something that we documentation is not always where my mind goes but it's really cool how with meeting people in this industry how even though documentation is the way a lot of people read and what products need that even though I'm dyslexic I can there's much more screen readers that can tell me what's going on and I can understand it and check my code and I mean a lot more coders that are dyslexic or are ADHD and it's just really cool being able to see yes how many of these overlap and how many really once we learn what we're interested in or the way we learn or how to get around something if we do aren't we are neurodiverse that we there are topics and things out there that's why I started on Wednesdays we do a Twitter space about neurodivergency because I feel like so many people don't know how to function especially in the tech world when it's not always as clear I think is the best way to say it yeah not it's fair I think a lot of people who write software are drawn to the aspect of logic and order purity and all these great concepts within software but those are like diametrically opposed to like say people skills you talk about writing documentation stuff like that people who are really good at writing code are often really poor at writing documentation because they're too totally different skills unlike what a lot of things you just have to practice and practice and practice and practice and practice and develop that skill over time to get it open but yeah people learn in different ways try things in different ways just to avoid a discovery to find where works for you right yes yes and writing anything is not awesome for me but if you want me to live stream something create video be a hype person go to events and talk to everyone and network on your girl and that's what I've been trying to explain as I've been going for deaf role roles they're like you don't know how to write a plugin I'm like I can learn but here's all my other skills that will benefit you so it's definitely a lesson learned and thank you again Philip for joining us today and we look forward to having you on the show again yay Looking forward to it! Bye!
Looking forward to it! Bye!