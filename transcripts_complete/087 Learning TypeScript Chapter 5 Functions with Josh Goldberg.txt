Welcome to another episode of Teach Gen Tech. And we are streaming Chapter 5 of Learning TypeScript with Josh Goldberg. Yay! Yay! Chapter 5. And it's crazy. That means that we've done at least five episodes, but they're every other week. Dude, how many have we done? I really should look at this I think we repeated one. So is this like episode six or something? I feel like we might have repeated two because it took us like a minute to get it into the flow of everything. Yeah. I don't know
I think we repeated one. So is this like episode six or something? I feel like we might have repeated two because it took us like a minute to get it into the flow of everything. Yeah. I don't know Yeah. I don't know. And did we have like a prep episode before that? So is this like seven or eight or something? I think so. I'm actually looking because, uh, actually, I think this is nine. Jeez. I'm almost tempted to like delete the old ones. It's not me anymore
Yeah. I don't know. And did we have like a prep episode before that? So is this like seven or eight or something? I think so. I'm actually looking because, uh, actually, I think this is nine. Jeez. I'm almost tempted to like delete the old ones. It's not me anymore I'd be like, uh, we finally got into the flow. What's the ones with the flow? And what up, lags? Yes, three rolls. It's, yeah. What is going on there? Is that a bug? Is that intentional? I have ads turned off and people still get them. And I'm like, I don't know. I don't know. It's frustrating
I'd be like, uh, we finally got into the flow. What's the ones with the flow? And what up, lags? Yes, three rolls. It's, yeah. What is going on there? Is that a bug? Is that intentional? I have ads turned off and people still get them. And I'm like, I don't know. I don't know. It's frustrating It's frustrating. It's really frustrating. So let's say I appreciate you still showing up, especially when, you know, Twitch doesn't want to always be our friend. But that it's weird. I, I've regret going to the thing that lets you get paid. I get paid like a dollar or stream on average
It's frustrating. It's really frustrating. So let's say I appreciate you still showing up, especially when, you know, Twitch doesn't want to always be our friend. But that it's weird. I, I've regret going to the thing that lets you get paid. I get paid like a dollar or stream on average And now people have ads even though they're something. I, I don't want it. I don't want it. I don't want it. Yeah, type script. Yeah, yeah, type script. And I guess I should start announcing it to everyone of, so I needed to narrow down like my focus on things. And I focus as everybody
And now people have ads even though they're something. I, I don't want it. I don't want it. I don't want it. Yeah, type script. Yeah, yeah, type script. And I guess I should start announcing it to everyone of, so I needed to narrow down like my focus on things. And I focus as everybody I will still have a lot of random stuff on the show. That is not going to go away because that is my pure curiosity. Yet there will be more focus. And to know and surprise, it's going to be postgres because that's what I'm learning. And I need to do something for work
I will still have a lot of random stuff on the show. That is not going to go away because that is my pure curiosity. Yet there will be more focus. And to know and surprise, it's going to be postgres because that's what I'm learning. And I need to do something for work And I'm actually really curious about it. They have elephants and it's the database. And then we have redis, which is another relational database, but it's like, goes on, we'll go into that later. And then, type scripts. Excited. Type scripts has helped me understand JavaScript. Eat better
And I'm actually really curious about it. They have elephants and it's the database. And then we have redis, which is another relational database, but it's like, goes on, we'll go into that later. And then, type scripts. Excited. Type scripts has helped me understand JavaScript. Eat better Eat better. Heck yes, heck yes it is. TypeScript makes everything better with JavaScript. Yeah. And so for all of those who do not know, Josh is the author of, I have to see what I did with it. Yay, learning type scripts
Eat better. Heck yes, heck yes it is. TypeScript makes everything better with JavaScript. Yeah. And so for all of those who do not know, Josh is the author of, I have to see what I did with it. Yay, learning type scripts And it has been coming on for apparently this is our ninth episode since probably, we started streaming like October. Maybe. Maybe October, maybe November. Yeah. Something like that. And we've gone through many of the chapters and worked through things
And it has been coming on for apparently this is our ninth episode since probably, we started streaming like October. Maybe. Maybe October, maybe November. Yeah. Something like that. And we've gone through many of the chapters and worked through things And we finally came up with our flow and remind all of us because you are a maintainer on ESLint. TypeScript ESLint. A project that is neither TypeScript nor ESLint. Okay. So TypeScript ESLint. And can you drop a link to it? Because I feel like people have been curious
And we finally came up with our flow and remind all of us because you are a maintainer on ESLint. TypeScript ESLint. A project that is neither TypeScript nor ESLint. Okay. So TypeScript ESLint. And can you drop a link to it? Because I feel like people have been curious And I always forget to ask about it. And I'm like, it's important. We need to learn about this stuff. Oh, good. The tooling that enables ESLint and prettier to support TypeScript. That the whole naming thing is hard. And this is the best we've got
And I always forget to ask about it. And I'm like, it's important. We need to learn about this stuff. Oh, good. The tooling that enables ESLint and prettier to support TypeScript. That the whole naming thing is hard. And this is the best we've got But it's like a really critical piece of the TypeScript ecosystem. Like the vast majority, like more than 95% of products that use TypeScript use us. Because if you use ESLint or you use prettier, that is how those tools that natively only work in JavaScript can support TypeScript code
But it's like a really critical piece of the TypeScript ecosystem. Like the vast majority, like more than 95% of products that use TypeScript use us. Because if you use ESLint or you use prettier, that is how those tools that natively only work in JavaScript can support TypeScript code That's cool. I had no idea. Well, I think you've said it. And this is something that I've learned a lot about as been learning life is people can say things. But without the other knowledge, it never made sense. Yeah, it's just words, right? Oh, yes, one thing. Yeah. Yeah
That's cool. I had no idea. Well, I think you've said it. And this is something that I've learned a lot about as been learning life is people can say things. But without the other knowledge, it never made sense. Yeah, it's just words, right? Oh, yes, one thing. Yeah. Yeah Yeah. Yeah. That's probably what I told people too. And Lex, I am your love in a little TypeScript moment. Is there anything you're looking forward to learning or want to ask Josh before we get started? Just like a random you can ask him, hey, Josh, you just got a volunteer for an AMA. Thanks
Yeah. Yeah. That's probably what I told people too. And Lex, I am your love in a little TypeScript moment. Is there anything you're looking forward to learning or want to ask Josh before we get started? Just like a random you can ask him, hey, Josh, you just got a volunteer for an AMA. Thanks Thanks. Oh, no. I will. What we can start with this in the meantime. Features. So you've understood the core concepts of TypeScript. Like you've gotten through that part of it. All that's left now is like various ways that TypeScript represents different things using those core features
Thanks. Oh, no. I will. What we can start with this in the meantime. Features. So you've understood the core concepts of TypeScript. Like you've gotten through that part of it. All that's left now is like various ways that TypeScript represents different things using those core features I'm excited. And Lex, you've been working for it for three months and now at a basic level. That is good. But it's good. I feel like I'm at a I don't know what level. I'm not a I'm going to figure it out level. That is where I'm at. I will say for myself
I'm excited. And Lex, you've been working for it for three months and now at a basic level. That is good. But it's good. I feel like I'm at a I don't know what level. I'm not a I'm going to figure it out level. That is where I'm at. I will say for myself And you know, I know that I've mentioned this before. This will continue. There will be highlights, writing and things like that that hasn't changed. One thing that is really, really helpful is that we talk about like type annotations or unions and that type of thing
And you know, I know that I've mentioned this before. This will continue. There will be highlights, writing and things like that that hasn't changed. One thing that is really, really helpful is that we talk about like type annotations or unions and that type of thing And I'm like, I know what it is, but I don't remember what it is. So to do so, I end up going and getting it and then putting it where I'm relearning it. So I don't have to go back many, many pages again. Because for some reason, to learn the words is not clicking
And I'm like, I know what it is, but I don't remember what it is. So to do so, I end up going and getting it and then putting it where I'm relearning it. So I don't have to go back many, many pages again. Because for some reason, to learn the words is not clicking Oh, Lex, I feel like we need a hear more about your full stack apps. Like that is pretty exciting. And plus one. All right. So today we're learning about functions. And I move this summary up here, which I'm very excited about
Oh, Lex, I feel like we need a hear more about your full stack apps. Like that is pretty exciting. And plus one. All right. So today we're learning about functions. And I move this summary up here, which I'm very excited about So oh, you guys want to see something cool else that I learned? And we can have a follow dot thing. So you can see where I'm moving the cursor. This is just kind of weird
So oh, you guys want to see something cool else that I learned? And we can have a follow dot thing. So you can see where I'm moving the cursor. This is just kind of weird But so we are going to be learning about declaring function parameter types with annotations, type annotations, declaring optional parameters, default values, rest parameters, and change type system behavior function return types with type annotation functions that don't return a usable value with void type and then or any value with never type and then using function overloads to described varying function call signatures
But so we are going to be learning about declaring function parameter types with annotations, type annotations, declaring optional parameters, default values, rest parameters, and change type system behavior function return types with type annotation functions that don't return a usable value with void type and then or any value with never type and then using function overloads to described varying function call signatures And half of this chapter really made sense. And then I went, what? And I feel like that is also so for those who don't know, I also am coming into this not fully understanding just regular JavaScript. So I've never taken a course. I have never like taken a bootcamp or anything like that 99
And half of this chapter really made sense. And then I went, what? And I feel like that is also so for those who don't know, I also am coming into this not fully understanding just regular JavaScript. So I've never taken a course. I have never like taken a bootcamp or anything like that 999% of my learning has been live or me working on my own website of projects. But most of it has been here. Ilyan, hello. Ilyan, hello. Yeah. Can I pick a guest? Yes. Yes. I heard dance. I thought I had it right and then I heard Dan juteans say a different way than me. So I apologize
9% of my learning has been live or me working on my own website of projects. But most of it has been here. Ilyan, hello. Ilyan, hello. Yeah. Can I pick a guest? Yes. Yes. I heard dance. I thought I had it right and then I heard Dan juteans say a different way than me. So I apologize So I apologize. I should have asked and probably might keep forgetting to. Anyway, I want to make a guess of where your feelings are for each of those bullets. It was list items. Can I? Yeah, like we were giving me like two seconds
So I apologize. I should have asked and probably might keep forgetting to. Anyway, I want to make a guess of where your feelings are for each of those bullets. It was list items. Can I? Yeah, like we were giving me like two seconds Let's highlight the ones that you think I'm having a hard time with. So I think the first three you're fine with. That's my guess. If I'm wrong, the next two, so the boy type and never type, you're like, okay, this kind of makes sense in isolation
Let's highlight the ones that you think I'm having a hard time with. So I think the first three you're fine with. That's my guess. If I'm wrong, the next two, so the boy type and never type, you're like, okay, this kind of makes sense in isolation I don't see why I'd use it or like maybe it doesn't like quite click, but like it's kind of okay. And then the last one, you're just like, what? No, I don't understand. Is that? That's like a lot of people go through. So that's just like a general common case
I don't see why I'd use it or like maybe it doesn't like quite click, but like it's kind of okay. And then the last one, you're just like, what? No, I don't understand. Is that? That's like a lot of people go through. So that's just like a general common case Is that yours? I would say I think it's more a part of this one. I don't remember which parts because we'll scroll through and find out. And oh, I just looked up. Thank you for the follow, follow, follow, stuff. I'm like, what words am I trying to say? And also their name at the same time
Is that yours? I would say I think it's more a part of this one. I don't remember which parts because we'll scroll through and find out. And oh, I just looked up. Thank you for the follow, follow, follow, stuff. I'm like, what words am I trying to say? And also their name at the same time It doesn't work. Medeo, I'm horrible at names. So y'all can make fun of me for that. And also tell me how to say it. And I will try to be better at it. But thank you for the follow. And so I'm pretty sure it is, I think, I'm also really bad at the name
It doesn't work. Medeo, I'm horrible at names. So y'all can make fun of me for that. And also tell me how to say it. And I will try to be better at it. But thank you for the follow. And so I'm pretty sure it is, I think, I'm also really bad at the name I think it is these two because the for void type and never type, I was like, I doubt I'm ever really going to use these. So like, and they make enough sense. Is that I'm like me? Okay. I know we're to go back to get them, but I didn't like go, I really need to understand this
I think it is these two because the for void type and never type, I was like, I doubt I'm ever really going to use these. So like, and they make enough sense. Is that I'm like me? Okay. I know we're to go back to get them, but I didn't like go, I really need to understand this Oh, I know where it was, but we'll get there. We will get there. We're going to see if I'm right based on my memory. Okay. We'll see. We'll see. All right
Oh, I know where it was, but we'll get there. We will get there. We're going to see if I'm right based on my memory. Okay. We'll see. We'll see. All right All right. So please tell us a little bit about why is this the like, why did you split out the, you know, the sections? Why is this the first chapter of the section? What was your mindset behind that? Sure. So to recap, this is the first chapter in the features section of the book
All right. So please tell us a little bit about why is this the like, why did you split out the, you know, the sections? Why is this the first chapter of the section? What was your mindset behind that? Sure. So to recap, this is the first chapter in the features section of the book It's core concepts, features, and then what, what did I call it? What at this point? I forget. I'm a terrible author. Concepts, features, and extra credit. I think we've resolved. This was like a whole discussion usage usage and that's right. I know what I wrote. I wasn't chat GPT who wrote it
It's core concepts, features, and then what, what did I call it? What at this point? I forget. I'm a terrible author. Concepts, features, and extra credit. I think we've resolved. This was like a whole discussion usage usage and that's right. I know what I wrote. I wasn't chat GPT who wrote it This came just before that whole thing. So yeah, the reason why I split that up is in order to really use TypeScript effectively, you really want to understand the core concepts. You don't have to like truly know them completely. Like it's fine to be a little shaky, but like they're really useful
This came just before that whole thing. So yeah, the reason why I split that up is in order to really use TypeScript effectively, you really want to understand the core concepts. You don't have to like truly know them completely. Like it's fine to be a little shaky, but like they're really useful So just going over the core concepts of what's a type system? Why did he even want it in the first place? And then how a type system works with objects and unions and now arraying. That's the core of TypeScript. That's the juice. That's what sets it aside from other equivalent type systems
So just going over the core concepts of what's a type system? Why did he even want it in the first place? And then how a type system works with objects and unions and now arraying. That's the core of TypeScript. That's the juice. That's what sets it aside from other equivalent type systems And I feel like it was a very interesting time because last week was it last week? I think it was two weeks ago. I'm looking uh, narrowly, narrowly, narrowly, narrowly. Where do I need blind right now? Oh yeah, it's three. It's um, right. I wouldn't do yellow. Second subsection in three
And I feel like it was a very interesting time because last week was it last week? I think it was two weeks ago. I'm looking uh, narrowly, narrowly, narrowly, narrowly. Where do I need blind right now? Oh yeah, it's three. It's um, right. I wouldn't do yellow. Second subsection in three Right here. If y'all can see it okay. I feel like yellow is really hard to see in this screen. We'll go blue. How about blue? Blue. Um, blue. I, we talked about narrowing and I figured out what we were talking about. And now I went from any and I'm starting to narrow my life
Right here. If y'all can see it okay. I feel like yellow is really hard to see in this screen. We'll go blue. How about blue? Blue. Um, blue. I, we talked about narrowing and I figured out what we were talking about. And now I went from any and I'm starting to narrow my life It's a really weird feeling. It's really good. Your widening, your knowledge and narrowing your types. It's good, good. Yes. That is definitely what is happening. So why functions as the first tracker? Sure. So we've covered objects. That's like a core part of the thing
It's a really weird feeling. It's really good. Your widening, your knowledge and narrowing your types. It's good, good. Yes. That is definitely what is happening. So why functions as the first tracker? Sure. So we've covered objects. That's like a core part of the thing And um, the, the next thing I generally want to talk about is if I don't have any specific need, going to be the next most useful thing. And functions are all over the place in JavaScript. The only core concept that happens more often than functions as objects, which is the previous chapter
And um, the, the next thing I generally want to talk about is if I don't have any specific need, going to be the next most useful thing. And functions are all over the place in JavaScript. The only core concept that happens more often than functions as objects, which is the previous chapter Additionally, functions show up in a lot of other places. For example, when we cover interfaces, which is like a, another way of describing object types, um, there's a difference between how you represent different types of properties or methods that are functions
Additionally, functions show up in a lot of other places. For example, when we cover interfaces, which is like a, another way of describing object types, um, there's a difference between how you represent different types of properties or methods that are functions The difference between a method and a property that happens to be a function. So notice, explain that well. We really want functions first. Okay. Okay
The difference between a method and a property that happens to be a function. So notice, explain that well. We really want functions first. Okay. Okay Okay. Okay. And it was definitely interesting because like we saw how like the type annotations went into this and we ended up going down a bit of a rabbit hole. I've like talking about variables and stuff, which was very helpful. Thank you
Okay. Okay. And it was definitely interesting because like we saw how like the type annotations went into this and we ended up going down a bit of a rabbit hole. I've like talking about variables and stuff, which was very helpful. Thank you Thank you. And I just went and added it over here of like type annotations. And this really helped when we were, I think the, the second part of this that I did not sign, uh, bring over, but with, is, I like this example of like let rocker be string and rocker equals Joan Jets
Thank you. And I just went and added it over here of like type annotations. And this really helped when we were, I think the, the second part of this that I did not sign, uh, bring over, but with, is, I like this example of like let rocker be string and rocker equals Joan Jets So they, they both equal rocker equals Joan Jets and string equals Joan, it rockers. Anyway, I liked it. It made more sense that way. And then function parameters, uh, highlighted that when you're taking it and I just wanted to verify on this one
So they, they both equal rocker equals Joan Jets and string equals Joan, it rockers. Anyway, I liked it. It made more sense that way. And then function parameters, uh, highlighted that when you're taking it and I just wanted to verify on this one Um, tell us a bit about function parameters before I just totally butcher this place. Yeah. Um, we covered the difference between a parameter and an argument, the terms. I don't think so. And it was funny because I was just thinking about that while I was going through this chapter
Um, tell us a bit about function parameters before I just totally butcher this place. Yeah. Um, we covered the difference between a parameter and an argument, the terms. I don't think so. And it was funny because I was just thinking about that while I was going through this chapter And I was like, I don't, I don't think we did or I don't know if the book does. Honestly, I don't know. Oh boy. The book, I don't remember whether, whether I explicitly say this is the definite between them, uh, I'm looking it up now. But it's certainly in the glossary at the very least
And I was like, I don't, I don't think we did or I don't know if the book does. Honestly, I don't know. Oh boy. The book, I don't remember whether, whether I explicitly say this is the definite between them, uh, I'm looking it up now. But it's certainly in the glossary at the very least Uh, let's see. Anyway, an argument is something you give. Like both, that's how I remember it. An argument is something you like I'm giving by partner and argument or something. So like, when you call a function, the argument is the value you're providing or the arguments are
Uh, let's see. Anyway, an argument is something you give. Like both, that's how I remember it. An argument is something you like I'm giving by partner and argument or something. So like, when you call a function, the argument is the value you're providing or the arguments are So like if I say console.log string, hello world, string, hello world is the argument full stop for now. Does that make sense and sound reasonable? Does it have to be because when you say give, it makes me think input
So like if I say console.log string, hello world, string, hello world is the argument full stop for now. Does that make sense and sound reasonable? Does it have to be because when you say give, it makes me think input Is it something that's input or is it something that if you just wrote string in the console log, it's fine or is it a, you have to like run the program and manually type it. Here, uh, Lex and the chat is a great idea. Let's give a real example. Um, there we go. Cool. Yes
Is it something that's input or is it something that if you just wrote string in the console log, it's fine or is it a, you have to like run the program and manually type it. Here, uh, Lex and the chat is a great idea. Let's give a real example. Um, there we go. Cool. Yes Cool. Yes. Function primaries zoomed out. I'm also putting something in the chat. In this example, like two console.log, this template literal string singing song, that string isn't argument. You're providing to console.log. You're giving to console log. So this part is an argument
Cool. Yes. Function primaries zoomed out. I'm also putting something in the chat. In this example, like two console.log, this template literal string singing song, that string isn't argument. You're providing to console.log. You're giving to console log. So this part is an argument No, no, no, no, no, the next line is the argument. Okay, that's what I thought. Okay, cool. Cool. Cool. It's specifically not the whole line
No, no, no, no, no, the next line is the argument. Okay, that's what I thought. Okay, cool. Cool. Cool. It's specifically not the whole line The, the string, the template literal string, singing, colon, and the interpolation, shenanigan, that string, including the exclamation mark and last tick is the arguments. Let's go to the highlighter because it likes, it likes it better. Yes, yes, in the chat. Yes, to Lex, PG likes
The, the string, the template literal string, singing, colon, and the interpolation, shenanigan, that string, including the exclamation mark and last tick is the arguments. Let's go to the highlighter because it likes, it likes it better. Yes, yes, in the chat. Yes, to Lex, PG likes So yeah, the thing you've highlighted is the argument, the argument is something you give. Okay. Does that make sense now? I know. I think I will say argument's and functions are something that are like thinking about annotations and unions. I'm like, their words, they mean something
So yeah, the thing you've highlighted is the argument, the argument is something you give. Okay. Does that make sense now? I know. I think I will say argument's and functions are something that are like thinking about annotations and unions. I'm like, their words, they mean something Like, I understand it when somebody explains it to me, but it takes a little bit to cool. That's okay. A couple notes. One, same
Like, I understand it when somebody explains it to me, but it takes a little bit to cool. That's okay. A couple notes. One, same One, same. Two, no one ever remembers the difference between arguments and parameters, unless they work in tooling that works with code ASTs, like the structure of the code away, people like me do
One, same. Two, no one ever remembers the difference between arguments and parameters, unless they work in tooling that works with code ASTs, like the structure of the code away, people like me do So like, all over the place, you're going to be, you're going to see people use the terms interchangeably, which sucks because they're getting it wrong, they're inaccurate, but it's also good to know that like it's totally fine to get it wrong. Like no one cares, really. But anyway, I care
So like, all over the place, you're going to be, you're going to see people use the terms interchangeably, which sucks because they're getting it wrong, they're inaccurate, but it's also good to know that like it's totally fine to get it wrong. Like no one cares, really. But anyway, I care But anyway, I care. And the argument is something you give. The parameter is something that the function declares. So song would be a parameter in this written example. I did a personal. I want the whole thing. Maybe. Good enough. So a parameter is what it calls
But anyway, I care. And the argument is something you give. The parameter is something that the function declares. So song would be a parameter in this written example. I did a personal. I want the whole thing. Maybe. Good enough. So a parameter is what it calls A parameter is what the function calls the thing. In this case, song. Okay. I'm going to something else to see if I can get a different. Sure. Example. Yeah, sing two first and second are the parameters. Okay. By the way, we can just ignore this altogether
A parameter is what the function calls the thing. In this case, song. Okay. I'm going to something else to see if I can get a different. Sure. Example. Yeah, sing two first and second are the parameters. Okay. By the way, we can just ignore this altogether Like, as if you don't want to spend time just like exhaustively detailing the difference between parameters and arguments, like you can totally understand the sole chapter without remembering the difference. It's intentionally done like that, but I do like that who going into this
Like, as if you don't want to spend time just like exhaustively detailing the difference between parameters and arguments, like you can totally understand the sole chapter without remembering the difference. It's intentionally done like that, but I do like that who going into this I would say that it's something that I appreciate when people come on to the show is a lot of people can notice the nuances that may not be written in company who has I throw my pen at myself. And there is context that may be needed that people don't have to begin with
I would say that it's something that I appreciate when people come on to the show is a lot of people can notice the nuances that may not be written in company who has I throw my pen at myself. And there is context that may be needed that people don't have to begin with And especially since we talked from the very beginning many months ago, that I'm not going to be a JavaScript pro. This is something that I may not have asked, but it's going to be very helpful
And especially since we talked from the very beginning many months ago, that I'm not going to be a JavaScript pro. This is something that I may not have asked, but it's going to be very helpful And a parameter is the value that a function requires to be passed because it's going to use that value somewhere in the function body. Okay. So it's a good definition. Is it only song that is the parameter? Yes. In this particular function, it hasten exactly one parameter named song. I like this
And a parameter is the value that a function requires to be passed because it's going to use that value somewhere in the function body. Okay. So it's a good definition. Is it only song that is the parameter? Yes. In this particular function, it hasten exactly one parameter named song. I like this I like this. Where have you been? Like you just like suddenly showed up in my world and I'm very happy about it. Like seriously, she was on like the Java JavaScript jam. Anthony's, I bought like Twitter space. And then like she's in Jacob's Twitter spaces. It makes me really happy
I like this. Where have you been? Like you just like suddenly showed up in my world and I'm very happy about it. Like seriously, she was on like the Java JavaScript jam. Anthony's, I bought like Twitter space. And then like she's in Jacob's Twitter spaces. It makes me really happy And then she keeps showing up here. I'm like, yes. I like making new friends. Okay, cool. So this is making sense. Oh, see you in Miami then. That's awesome. Shout out to Miami. Little conversation. Which I am not going to. Oh, yeah. No. Well, I didn't find out about it till like what last week
And then she keeps showing up here. I'm like, yes. I like making new friends. Okay, cool. So this is making sense. Oh, see you in Miami then. That's awesome. Shout out to Miami. Little conversation. Which I am not going to. Oh, yeah. No. Well, I didn't find out about it till like what last week So that's one part and B. It is a the two days. Like it's what Thursday, Friday, and Saturday, I have to leave for Portugal. So it would be a little too much because after Portugal, I'm going to Munich. It would just be as I have to say in my world, I'm not Dan. Dan, like, it's like magic
So that's one part and B. It is a the two days. Like it's what Thursday, Friday, and Saturday, I have to leave for Portugal. So it would be a little too much because after Portugal, I'm going to Munich. It would just be as I have to say in my world, I'm not Dan. Dan, like, it's like magic He's going to like all these places and you're going to be gone for a month. And I'm like, do me going for a week. And I'm like, okay, let me. I'm going to copy and paste this really quick. So I don't forget her. Okay, whatever. That works. Cool. I dig this
He's going to like all these places and you're going to be gone for a month. And I'm like, do me going for a week. And I'm like, okay, let me. I'm going to copy and paste this really quick. So I don't forget her. Okay, whatever. That works. Cool. I dig this Cool. I dig this. And then I highlighted it down here to see if I understood what it was. And without knowing it, I understood it, even though I can put words into what I was learning. That is one of the hardest parts about learning is being able to repeat it back to someone. Yep
Cool. I dig this. And then I highlighted it down here to see if I understood what it was. And without knowing it, I understood it, even though I can put words into what I was learning. That is one of the hardest parts about learning is being able to repeat it back to someone. Yep Yep. For me, it's too consuming, but to say you rethink it, not so much. And then required parameters. Anything you want to say about this before I talk about a few things. Yeah, I want to go back actually because we kind of glossed it when I just want to make sure it's solid
Yep. For me, it's too consuming, but to say you rethink it, not so much. And then required parameters. Anything you want to say about this before I talk about a few things. Yeah, I want to go back actually because we kind of glossed it when I just want to make sure it's solid So a parameter can receive a type annotation, similar to variables saying, whenever you give me something for this, whenever you give me an argument, it must be that type. It does not type annotation. Then TypeScript doesn't know what it's going to be in most cases
So a parameter can receive a type annotation, similar to variables saying, whenever you give me something for this, whenever you give me an argument, it must be that type. It does not type annotation. Then TypeScript doesn't know what it's going to be in most cases So any yellow, same, same with a variable that starts off without a type annotation or initial value. But in function, sing version two later down, we say song is type string. So the parameter song is type string
So any yellow, same, same with a variable that starts off without a type annotation or initial value. But in function, sing version two later down, we say song is type string. So the parameter song is type string And anytime you provide or give an argument, that argument must be assignable to string. Because if you give it like a number or something, Heavens only knows if the sing function will work with that argument. Does that sound good to you? That makes sense
And anytime you provide or give an argument, that argument must be assignable to string. Because if you give it like a number or something, Heavens only knows if the sing function will work with that argument. Does that sound good to you? That makes sense And I think this is where I get confused later on. Is because it infers different things. So we'll get where we're at right now, it totally makes sense. And yes, Lex, where does Theo live? Is he in Atlanta too? Because Danston and Lina are right. I don't actually know where. Oh, okay
And I think this is where I get confused later on. Is because it infers different things. So we'll get where we're at right now, it totally makes sense. And yes, Lex, where does Theo live? Is he in Atlanta too? Because Danston and Lina are right. I don't actually know where. Oh, okay Oh, okay. Yeah, I'm always like, where do people live? I don't know where anybody lives. Okay, so required parameters. This made sense. In the fact that it was saying first, is a string, second is a string. And so therefore it was to required parameters
Oh, okay. Yeah, I'm always like, where do people live? I don't know where anybody lives. Okay, so required parameters. This made sense. In the fact that it was saying first, is a string, second is a string. And so therefore it was to required parameters And so I don't know how I keep doing that on my pencil when that pops up. So please. I thought Dan wasn't going to render. So maybe. I don't know. Because I thought he was going to. I don't. I can't keep track of everybody. I can barely keep track of myself. I don't know what I'm never doing
And so I don't know how I keep doing that on my pencil when that pops up. So please. I thought Dan wasn't going to render. So maybe. I don't know. Because I thought he was going to. I don't. I can't keep track of everybody. I can barely keep track of myself. I don't know what I'm never doing And then, so all of this made sense of like, we only have one thing to find. So it's expected to arguments that got one. And then we got two, which was okay. We got three of them. And it was like no bro, that's too many
And then, so all of this made sense of like, we only have one thing to find. So it's expected to arguments that got one. And then we got two, which was okay. We got three of them. And it was like no bro, that's too many And so in this, before we get to the text, I said, if I add a question mark right here, will this make the error? And creepy. Yes, it would. As an optional parameter in the next one. And optional cannot be first. It can only be the second
And so in this, before we get to the text, I said, if I add a question mark right here, will this make the error? And creepy. Yes, it would. As an optional parameter in the next one. And optional cannot be first. It can only be the second You more generally, you can't have any required parameters follow an optional parameter, because that wouldn't make sense. Oh, yeah. Okay. Well, I'm just going to leave this back. It's like, it works. Yeah
You more generally, you can't have any required parameters follow an optional parameter, because that wouldn't make sense. Oh, yeah. Okay. Well, I'm just going to leave this back. It's like, it works. Yeah Yeah. I mean, but what your intuition makes sense, like what you're going for here is totally reasonable. I'm really, as I say, before, it's really excited that like you're getting these intuitive hunches, the question mark means optional. That's a typescript thing
Yeah. I mean, but what your intuition makes sense, like what you're going for here is totally reasonable. I'm really, as I say, before, it's really excited that like you're getting these intuitive hunches, the question mark means optional. That's a typescript thing And it means that for object type, and it means for function parameters. And so this is what the optional parameters were saying is that, you know, we have the string as the first one. And then we have the singer with the question mark. And therefore, that is why that is optional
And it means that for object type, and it means for function parameters. And so this is what the optional parameters were saying is that, you know, we have the string as the first one. And then we have the singer with the question mark. And therefore, that is why that is optional What doesn't make sense, which I don't know where I ask, surely, yes, let's scroll. Okay. Yes. I will ask in the next one, and then it'll make sense. But optional parameters totally made sense. It was, we talked about it a lot more in one of the previous streams about what that question mark means
What doesn't make sense, which I don't know where I ask, surely, yes, let's scroll. Okay. Yes. I will ask in the next one, and then it'll make sense. But optional parameters totally made sense. It was, we talked about it a lot more in one of the previous streams about what that question mark means And that was really helpful. So thank you. And then we go into default parameters, which tell us about this one
And that was really helpful. So thank you. And then we go into default parameters, which tell us about this one What were your thoughts here? You know, I went back and forth, whether I wanted to teach default parameters before or after optional parameters, instead of joke somewhere about optionality ordering
What were your thoughts here? You know, I went back and forth, whether I wanted to teach default parameters before or after optional parameters, instead of joke somewhere about optionality ordering I see a default parameter is like the next step up from an optional parameter, like an optional parameter defaults to undefined if you don't provide an argument. I'll say that again, because that's like really good usage of the words that I'm proud of myself
I see a default parameter is like the next step up from an optional parameter, like an optional parameter defaults to undefined if you don't provide an argument. I'll say that again, because that's like really good usage of the words that I'm proud of myself An optional parameter defaults to undefined if you don't provide an argument. A default parameter lets you customize what that default type is, or what that default value is. So like in this rate song function, instead of rating defaulting to undefined, it defaults to zero
An optional parameter defaults to undefined if you don't provide an argument. A default parameter lets you customize what that default type is, or what that default value is. So like in this rate song function, instead of rating defaulting to undefined, it defaults to zero Because we said the rating equals zero. Yeah. Okay. Cool. And that was put right here. Where I got lost and starting to get lost in this, is rating is inferred to be a type of number? Is that because it's equal to zero? Therefore, it knows it's going to number. Yeah. Okay
Because we said the rating equals zero. Yeah. Okay. Cool. And that was put right here. Where I got lost and starting to get lost in this, is rating is inferred to be a type of number? Is that because it's equal to zero? Therefore, it knows it's going to number. Yeah. Okay Yeah. Okay. I don't think you're lost. I think you're doubtful. Maybe. You know, you know the truth. You're just not sure of it. Yes. Okay. And then is five stars says the highest number, it can be five. Yeah
Yeah. Okay. I don't think you're lost. I think you're doubtful. Maybe. You know, you know the truth. You're just not sure of it. Yes. Okay. And then is five stars says the highest number, it can be five. Yeah Yeah. Is that due to the exclamation point? Because in this, in a lower one, it's like this one says 100. But it's like, oh wait, hang on a second. That exclamation point has nothing to do with TypeScript. That's inside the string. That's just me being clever and cute with how I console log
Yeah. Is that due to the exclamation point? Because in this, in a lower one, it's like this one says 100. But it's like, oh wait, hang on a second. That exclamation point has nothing to do with TypeScript. That's inside the string. That's just me being clever and cute with how I console log That is so much more because not syntax code. Okay. That is good too. I need to write that down. And only because that is the problem with not knowing the stuff beforehand is you don't always know what is actual and not so. Yeah
That is so much more because not syntax code. Okay. That is good too. I need to write that down. And only because that is the problem with not knowing the stuff beforehand is you don't always know what is actual and not so. Yeah Yeah. We should, we should cover this before going actually, because I use template strings a lot. This back tick string is different from normal, like single apostrophe or double apostrophe, quote, whatever strings
Yeah. We should, we should cover this before going actually, because I use template strings a lot. This back tick string is different from normal, like single apostrophe or double apostrophe, quote, whatever strings And the only difference is that you can, it's more easy to like shove values into it, like concatenating strings. And that dollar sign squiggly something squiggly syntax is like string concatenation. We're going to show you a link in the chat for TypeScript playgrounds. We'll quick. So, cons
And the only difference is that you can, it's more easy to like shove values into it, like concatenating strings. And that dollar sign squiggly something squiggly syntax is like string concatenation. We're going to show you a link in the chat for TypeScript playgrounds. We'll quick. So, cons So, cons. You want to share your screen because I know we've done that in the past. I totally forgot we do that. Yeah, yeah. That's easier. I share in the TypeScript playground tab. So can you see the console log hello world? Yes. Awesome
So, cons. You want to share your screen because I know we've done that in the past. I totally forgot we do that. Yeah, yeah. That's easier. I share in the TypeScript playground tab. So can you see the console log hello world? Yes. Awesome Awesome. So let's say you have a cons first name equals Josh and you do like a contvalued or cons message equals. And I bring the back tick. My name is Josh. And it is first name. And it is nice to meet you. And hello, let's just say short message. So on the left is TypeScript
Awesome. So let's say you have a cons first name equals Josh and you do like a contvalued or cons message equals. And I bring the back tick. My name is Josh. And it is first name. And it is nice to meet you. And hello, let's just say short message. So on the left is TypeScript On the right is the equivalent JavaScript. And if we downpile down to like old, oh my god, they switched it on me. Thank you. Well, in theory, this actually means my name is plus first name plus and hello. That's what that's what the string means. These two lines do the exact same thing
On the right is the equivalent JavaScript. And if we downpile down to like old, oh my god, they switched it on me. Thank you. Well, in theory, this actually means my name is plus first name plus and hello. That's what that's what the string means. These two lines do the exact same thing And I just use this form the second one because it's a little less syntax. Like it's just shorter to type out. Does that make sense? It does. Can you copy a piece? That's me so I can like I guess I could screenshot it really quick. Or I could copy and paste the URL in the quiche. That works too
And I just use this form the second one because it's a little less syntax. Like it's just shorter to type out. Does that make sense? It does. Can you copy a piece? That's me so I can like I guess I could screenshot it really quick. Or I could copy and paste the URL in the quiche. That works too That works too. Yeah. So yeah. And then look in the log. It's my name is Josh and hello. It's this is called interpolation, which is like a fancy variant of concatenation, which is a fancy way of saying combining strings like adding strings to each other. Not mean that. And this is you the URL
That works too. Yeah. So yeah. And then look in the log. It's my name is Josh and hello. It's this is called interpolation, which is like a fancy variant of concatenation, which is a fancy way of saying combining strings like adding strings to each other. Not mean that. And this is you the URL And it's what did you call it? Could chat to what? This is string interpolation, which is a variant of string concatenation, which is like a way to do string concatenation. String concatenation is combining strings concatenation. Well, add that in later
And it's what did you call it? Could chat to what? This is string interpolation, which is a variant of string concatenation, which is like a way to do string concatenation. String concatenation is combining strings concatenation. Well, add that in later This is not relevant to functions other than that. It's just a thing that I use a lot of this chapter. And I think that goes to my last part of this, which is of that helps if you guys can see what I'm actually doing, huh? Because I yeah, I know. This is one problem that I keep doing
This is not relevant to functions other than that. It's just a thing that I use a lot of this chapter. And I think that goes to my last part of this, which is of that helps if you guys can see what I'm actually doing, huh? Because I yeah, I know. This is one problem that I keep doing It's like people will have to remind me I'm not sharing my screen. I like jamming my bed. Like this hard. So right here, I guess I'm going to use a little pointer. You use the backslash. Is it the same or different than the than that's a forward slash? And that's another thing that's irrelevant
It's like people will have to remind me I'm not sharing my screen. I like jamming my bed. Like this hard. So right here, I guess I'm going to use a little pointer. You use the backslash. Is it the same or different than the than that's a forward slash? And that's another thing that's irrelevant It's just part of the string. Okay, this and oh, sorry, you're talking that's the like the vertical pipe. Yeah, the vertical one. Or yeah, that's the type union thing. Okay. And then in the string, you have the forward slash slash five. That's again, that's like the escalation mark
It's just part of the string. Okay, this and oh, sorry, you're talking that's the like the vertical pipe. Yeah, the vertical one. Or yeah, that's the type union thing. Okay. And then in the string, you have the forward slash slash five. That's again, that's like the escalation mark That's just part of the string. That's just like three out of five or three slash five. Cool. Yeah. Yeah. Well, now I'm going to follow the question. If we did a console log on this, why didn't it show three out of five right here? It would log five out of five
That's just part of the string. That's just like three out of five or three slash five. Cool. Yeah. Yeah. Well, now I'm going to follow the question. If we did a console log on this, why didn't it show three out of five right here? It would log five out of five So it just won't say it won't say it would say well, first of all, you could copy and paste this into the high-tech playground. Like that's something I'd encourage you to do if you're ever curious what they do. But second of all, I can fast forward to the answer
So it just won't say it won't say it would say well, first of all, you could copy and paste this into the high-tech playground. Like that's something I'd encourage you to do if you're ever curious what they do. But second of all, I can fast forward to the answer That second rate song would say, set fire of the rain gets five out of five stars. Acceleration mark. Okay. I think that's where I was getting confused as I was expecting this to show that. And okay, that totally makes more sense. Yay. Yay. Thank you. Okay. Cool. Yay. Now on to you
That second rate song would say, set fire of the rain gets five out of five stars. Acceleration mark. Okay. I think that's where I was getting confused as I was expecting this to show that. And okay, that totally makes more sense. Yay. Yay. Thank you. Okay. Cool. Yay. Now on to you Yay. Now on to you. Rest parameters. Which if I remember, it was basically doing the square brackets to show that it's going to do an array. Yes. The dot dot dot is a JavaScript feature that TypeScript now has to support
Yay. Now on to you. Rest parameters. Which if I remember, it was basically doing the square brackets to show that it's going to do an array. Yes. The dot dot dot is a JavaScript feature that TypeScript now has to support If you say that the last parameter in a function has dot dot dot dot before it, that means it's going to be an array of whatever number of arguments people provide. So like you can see single the songs, we can provide none or we can provide like three
If you say that the last parameter in a function has dot dot dot dot before it, that means it's going to be an array of whatever number of arguments people provide. So like you can see single the songs, we can provide none or we can provide like three And that's that's okay either way songs in array. Is there a limit to an array? Only whatever your runtime environment will allow, which is basically huge, whatever thousands or millions. Let's still put that. Good question
And that's that's okay either way songs in array. Is there a limit to an array? Only whatever your runtime environment will allow, which is basically huge, whatever thousands or millions. Let's still put that. Good question Good question. Looking at something, jobs you have max array size of four million, wait, four billion? Four billion, two and a 94 million, nine and sixty seven thousand, two and a 95. I will quiz you on that number in seven months time. So be sure to remember that
Good question. Looking at something, jobs you have max array size of four million, wait, four billion? Four billion, two and a 94 million, nine and sixty seven thousand, two and a 95. I will quiz you on that number in seven months time. So be sure to remember that I'm just going to be say this, runtime, whatever runtime allows to technically yes, but probably it's never going to find it. Billions. Cool. And that makes sense. And oh, this was my fact checking myself
I'm just going to be say this, runtime, whatever runtime allows to technically yes, but probably it's never going to find it. Billions. Cool. And that makes sense. And oh, this was my fact checking myself That if I added quotes to this, it would be correct because it would be a string instead of a number. That was exciting notes from the learnings. Okay, return types. Ooh, this was the first part that I got really stuck on. And I also figured out how to put an emoji in
That if I added quotes to this, it would be correct because it would be a string instead of a number. That was exciting notes from the learnings. Okay, return types. Ooh, this was the first part that I got really stuck on. And I also figured out how to put an emoji in I just figured that out today. I also just figured out today how to highlight and how to make boxes. So we're definitely lots of learning. Hell yeah. I am curious going back to the beginning. Reset parameters return type. Neither one of us said return types. Neither one of us
I just figured that out today. I also just figured out today how to highlight and how to make boxes. So we're definitely lots of learning. Hell yeah. I am curious going back to the beginning. Reset parameters return type. Neither one of us said return types. Neither one of us Neither one of us. Oh, I said the first three. Like I thought I assumed you'd be okay with return types. Or hoped projected. Yeah. Because everyone's different. Some large number of like 30 to 50% of people are fine with the first half and then the second half is where they start to. But I know
Neither one of us. Oh, I said the first three. Like I thought I assumed you'd be okay with return types. Or hoped projected. Yeah. Because everyone's different. Some large number of like 30 to 50% of people are fine with the first half and then the second half is where they start to. But I know But I know. I think return types are just like where because it does, this is one thing I really enjoy about reading your book is there. It does definitely build on top of itself. And that makes it really easy to start learning it
But I know. I think return types are just like where because it does, this is one thing I really enjoy about reading your book is there. It does definitely build on top of itself. And that makes it really easy to start learning it Although when I start to see that I don't get something I'm like I can get overall concepts, but it's not going to entirely make sense until I understand this first thing. Yeah. Which is the beauty and the the terribleness of building on yourself
Although when I start to see that I don't get something I'm like I can get overall concepts, but it's not going to entirely make sense until I understand this first thing. Yeah. Which is the beauty and the the terribleness of building on yourself Like yes, it means that you learn as little as possible at one time. But if you miss something, you're missing the rest, right? Yes. Yeah. So, could you tell us a bit about which one types please? Sure
Like yes, it means that you learn as little as possible at one time. But if you miss something, you're missing the rest, right? Yes. Yeah. So, could you tell us a bit about which one types please? Sure So I will say that for the rest of the book, the like building on itself and needing to know prior things, it's there. It's always there in every tome of knowledge. But like it's less so now that we're doing random features instead of concepts. They do build on each other
So I will say that for the rest of the book, the like building on itself and needing to know prior things, it's there. It's always there in every tome of knowledge. But like it's less so now that we're doing random features instead of concepts. They do build on each other Like there is order, but less so. So this singsongs function. It returns something. Oh, it'll all unless it crashes like unless like I don't know some whatever weird thing happens. Songs is undefined somehow. It'll return something
Like there is order, but less so. So this singsongs function. It returns something. Oh, it'll all unless it crashes like unless like I don't know some whatever weird thing happens. Songs is undefined somehow. It'll return something What would you say the type of that return value to be? And I'll give you a hint is one of the types that you copy and paste it on the right. So I think this is where I was starting to get confused. Because like I see how it's up here. It's talking about that it's ignore that. That's cheating
What would you say the type of that return value to be? And I'll give you a hint is one of the types that you copy and paste it on the right. So I think this is where I was starting to get confused. Because like I see how it's up here. It's talking about that it's ignore that. That's cheating That's cheating. I'm asking you a question that's answered in that line. Don't look at the line just intuitively. Like if I were to tell you, oh, I'm calling sing songs with something and we're storing that results in a variable. What type of that variable be? I would say a string
That's cheating. I'm asking you a question that's answered in that line. Don't look at the line just intuitively. Like if I were to tell you, oh, I'm calling sing songs with something and we're storing that results in a variable. What type of that variable be? I would say a string The returned results from sing songs. What type is songs.length if songs is an array? Oh, if it's length and it would be a number. Exactly. This function returns a number because it has one return statement that returns statement returns something that's typed number. Oh, and Fokai. Yes. Yes. Okay
The returned results from sing songs. What type is songs.length if songs is an array? Oh, if it's length and it would be a number. Exactly. This function returns a number because it has one return statement that returns statement returns something that's typed number. Oh, and Fokai. Yes. Yes. Okay Yes. Yes. Okay. So that makes sense. So I'll put it in my bag. And that's a very easily seen color. Let's try a bright pink see if it helps. I'm probably not, but so song.length is how I would find a number. I just want a number. That makes way more sense. Yeah. Oh, what? Yes. Okay
Yes. Yes. Okay. So that makes sense. So I'll put it in my bag. And that's a very easily seen color. Let's try a bright pink see if it helps. I'm probably not, but so song.length is how I would find a number. I just want a number. That makes way more sense. Yeah. Oh, what? Yes. Okay Okay. Before I keep going, I also copy and paste the types because we talked about this earlier. It's what I like to do. Copy and paste from past
Okay. Before I keep going, I also copy and paste the types because we talked about this earlier. It's what I like to do. Copy and paste from past But as we are learning other things that are not associated with typescripts, do you know our types the same in every language or thing like for Postgres? Would Postgres be learning the same type of types? I'm honestly glad you you prepped me with this question like whatever 45 minutes ago
But as we are learning other things that are not associated with typescripts, do you know our types the same in every language or thing like for Postgres? Would Postgres be learning the same type of types? I'm honestly glad you you prepped me with this question like whatever 45 minutes ago I'm glad you did. Now, everything represents types in a different way. For example, JavaScript and TypeScript are told lump in together. They have things like strings and numbers. A lot of other languages like Java, C sharp, Python, they have more specific versions of number
I'm glad you did. Now, everything represents types in a different way. For example, JavaScript and TypeScript are told lump in together. They have things like strings and numbers. A lot of other languages like Java, C sharp, Python, they have more specific versions of number They have like ints and floats and doubles and like different different ways of representing the concept of a number. This is just how things are. Every language is built for a different set of purposes and those sets of purposes dictate what design the certain they make
They have like ints and floats and doubles and like different different ways of representing the concept of a number. This is just how things are. Every language is built for a different set of purposes and those sets of purposes dictate what design the certain they make Like do you have one unified way of representing numbers or two or do you have like 14? And as a result, it's a little annoying because now everything considers something to be slightly different like a number in TypeScript
Like do you have one unified way of representing numbers or two or do you have like 14? And as a result, it's a little annoying because now everything considers something to be slightly different like a number in TypeScript Well, if you just have a number of TypeScripts and then Postgres represents things in like ints or floats or whatever, like it's not the same. So yeah, everyone does that slightly differently, but the core concepts are all pretty similar
Well, if you just have a number of TypeScripts and then Postgres represents things in like ints or floats or whatever, like it's not the same. So yeah, everyone does that slightly differently, but the core concepts are all pretty similar I am thinking about it's different terms and definitions because like number for the numbers example is in TypeScript is numbers, but you know, as you said, it goes to int in Python and that does technically, they're around the same thing, but they're technically different terms
I am thinking about it's different terms and definitions because like number for the numbers example is in TypeScript is numbers, but you know, as you said, it goes to int in Python and that does technically, they're around the same thing, but they're technically different terms So therefore the terms may have similar, but different definitions too. So I think this is yes and no. Yes and no. That makes enough sense for them. All right. So Oh. Wait, yeah, let's actually stay on this page for just a little bit. I want to look at this, this thing
So therefore the terms may have similar, but different definitions too. So I think this is yes and no. Yes and no. That makes enough sense for them. All right. So Oh. Wait, yeah, let's actually stay on this page for just a little bit. I want to look at this, this thing Get song at because every function has one return type, but that return type might be a union. Here we're saying get song at can return either a string or undefined. Does it make sense why that's the case? I'm going to stare at it for a second. Sure
Get song at because every function has one return type, but that return type might be a union. Here we're saying get song at can return either a string or undefined. Does it make sense why that's the case? I'm going to stare at it for a second. Sure Sure. Is it because this string is an array? Like song. Yeah. So there are two possible things this function could return. It could either return songs of index, which is type string as you just alluded to, or it could return undefined, which is undefined
Sure. Is it because this string is an array? Like song. Yeah. So there are two possible things this function could return. It could either return songs of index, which is type string as you just alluded to, or it could return undefined, which is undefined And the reason why is because this is a ternary statement. It, are you from, have you got overturned or familiar with these things? I don't think we have. Cool. Let's have it. I share. Okay. Here you go. So a ternary statement is like a, like a short hand for using. Sure. Sure. You're up
And the reason why is because this is a ternary statement. It, are you from, have you got overturned or familiar with these things? I don't think we have. Cool. Let's have it. I share. Okay. Here you go. So a ternary statement is like a, like a short hand for using. Sure. Sure. You're up Sure. You're up. That please. Yes. Cool. So a ternary is saying const result equals if true or some condition. If true, if false, that's how ternary is structured. So like if some condition is in. Unxt. If true, false, array, if false equals. Okay
Sure. You're up. That please. Yes. Cool. So a ternary is saying const result equals if true or some condition. If true, if false, that's how ternary is structured. So like if some condition is in. Unxt. If true, false, array, if false equals. Okay Okay. So in this code, we're saying result is your array or oh no. It will be hooray if some condition is true. And it will be oh no if some condition is false. Okay. It's another way of saying this would be like, let results. If some condition result equals it true. Else result equals if false
Okay. So in this code, we're saying result is your array or oh no. It will be hooray if some condition is true. And it will be oh no if some condition is false. Okay. It's another way of saying this would be like, let results. If some condition result equals it true. Else result equals if false They, these aren't quite the same because this is a letter not a const, but like generally these, this, this ternary is like a quick way of writing that if else. Does that seem reasonable? Yes. And so because of the songs. Yes and no. Okay
They, these aren't quite the same because this is a letter not a const, but like generally these, this, this ternary is like a quick way of writing that if else. Does that seem reasonable? Yes. And so because of the songs. Yes and no. Okay Yes and no. Okay. So ignoring the function that songs stuff, the reason why that function is string and or undefined is because of a ternary because here, I'm going to, I'm going to actually start a new here. So first I'll send this particular snippet in the chat
Yes and no. Okay. So ignoring the function that songs stuff, the reason why that function is string and or undefined is because of a ternary because here, I'm going to, I'm going to actually start a new here. So first I'll send this particular snippet in the chat Ternary makes conditions look pretty extra angry that's why I use them. So let's say they have functions saying songs or get song gap. Which takes a song string and index number. And we'll take if index lets them song length return song divide or index. Otherwise return from defined
Ternary makes conditions look pretty extra angry that's why I use them. So let's say they have functions saying songs or get song gap. Which takes a song string and index number. And we'll take if index lets them song length return song divide or index. Otherwise return from defined This is the same as what you saw in the book. It's just using it if instead of a ternary. This makes sense. Oh. Yes. Ultimately we could say it's like else returned undefined, but there's no need to use it else because we returned on this line. So we can just say, okay
This is the same as what you saw in the book. It's just using it if instead of a ternary. This makes sense. Oh. Yes. Ultimately we could say it's like else returned undefined, but there's no need to use it else because we returned on this line. So we can just say, okay So it's big slacks that does make sense. And I feel like it is kind of like the other part that you were talking about earlier. When something is shortened. It's like another one of those areas that I'm like, oh, it's seeing the same thing
So it's big slacks that does make sense. And I feel like it is kind of like the other part that you were talking about earlier. When something is shortened. It's like another one of those areas that I'm like, oh, it's seeing the same thing It's just the way that I'm seeing it didn't make sense to me. But it's the same thing. We factoring some texture. Yeah. Yeah. Okay. Cool. Okay. Cool. So that's why get song gap is a function that returns string or undefined. Because in one return statement, it could return string
It's just the way that I'm seeing it didn't make sense to me. But it's the same thing. We factoring some texture. Yeah. Yeah. Okay. Cool. Okay. Cool. So that's why get song gap is a function that returns string or undefined. Because in one return statement, it could return string And in another possible return statement returns undefined. So we don't know what this function returns between those two. It's either string or undefined. Okay. Okay. Sound good? Yeah. That one is making sense. So yeah, I'll just add my back and synchronization there. All right
And in another possible return statement returns undefined. So we don't know what this function returns between those two. It's either string or undefined. Okay. Okay. Sound good? Yeah. That one is making sense. So yeah, I'll just add my back and synchronization there. All right All right. So explicit return types. I did like this because you were like probably not going to run into this often. Sweet. So I still read it. I was like, you know, let me understand. And recursive. I was like, uh, don't worry about it
All right. So explicit return types. I did like this because you were like probably not going to run into this often. Sweet. So I still read it. I was like, you know, let me understand. And recursive. I was like, uh, don't worry about it I'll Google it at some point, but that's why I haven't highlighted. And then, oh, this is the other question came up in this area. Is a language used inside of a database? The answer is yes. You probably should use it as little as possible. I'm curious
I'll Google it at some point, but that's why I haven't highlighted. And then, oh, this is the other question came up in this area. Is a language used inside of a database? The answer is yes. You probably should use it as little as possible. I'm curious I'm curious. What is your context for asking this question? Give it your interest. Um, it was the count plus one. So if you had an episode number, it would do a count plus one and automatically add an episode number. Okay. Yeah. So that's, I believe that's called a procedure
I'm curious. What is your context for asking this question? Give it your interest. Um, it was the count plus one. So if you had an episode number, it would do a count plus one and automatically add an episode number. Okay. Yeah. So that's, I believe that's called a procedure Is that the term you're familiar with? I haven't gotten there yet, but sure. Okay. Yeah. So there's like, there's, there's the concept of an auto incrementing index, where like it automatically knows to use the next number or like a unique another thing
Is that the term you're familiar with? I haven't gotten there yet, but sure. Okay. Yeah. So there's like, there's, there's the concept of an auto incrementing index, where like it automatically knows to use the next number or like a unique another thing Every time you add something new, you don't have to explicitly say this one's for this one's fun. Okay. But then there's also the concept of a procedure in databases, where you can have some code embedded in the database that's run on some actions. So yeah
Every time you add something new, you don't have to explicitly say this one's for this one's fun. Okay. But then there's also the concept of a procedure in databases, where you can have some code embedded in the database that's run on some actions. So yeah So yeah. There is stuff like there are languages you can use in the database. There were very limited cases where that's really useful. However, it can be very difficult to work with. So people try to limit the amount of procedures they use
So yeah. There is stuff like there are languages you can use in the database. There were very limited cases where that's really useful. However, it can be very difficult to work with. So people try to limit the amount of procedures they use Like there are very specific cases where procedures are awesome and will be great for performance and simplicity. But I don't know enough about them to be able to describe to you when those cases are. That's really fine and super helpful
Like there are very specific cases where procedures are awesome and will be great for performance and simplicity. But I don't know enough about them to be able to describe to you when those cases are. That's really fine and super helpful And Ilya, we were talking about that earlier because let's not pre-rolls. And I don't know why. I turned it off and everything. I'll verify after this, but I will tag y'all and switch and see if we can get an answer if I might have something clicked wrong. I do not want to just say it's twitch
And Ilya, we were talking about that earlier because let's not pre-rolls. And I don't know why. I turned it off and everything. I'll verify after this, but I will tag y'all and switch and see if we can get an answer if I might have something clicked wrong. I do not want to just say it's twitch I think it is, but you know, and then what did you call it because I started for seizures? Procedures, yeah. Actually, I think I misphrased. I'm not saying there are always not great idea
I think it is, but you know, and then what did you call it because I started for seizures? Procedures, yeah. Actually, I think I misphrased. I'm not saying there are always not great idea I'm saying there are very specific cases where there are great idea and many other cases where there are terrible idea. Yeah. Okay. Thank you. I mean, in all seriousness, though, y'all is, I've really had a job for two months
I'm saying there are very specific cases where there are great idea and many other cases where there are terrible idea. Yeah. Okay. Thank you. I mean, in all seriousness, though, y'all is, I've really had a job for two months And after being jobless for a year, people are like, you can do all this stuff like, damn, we're talking about this. And I'm like, dude, dude, no, I wish. I do wish. But yes, okay. Before we move on, I want to shout out Alexander Sakura, regular conference speaker
And after being jobless for a year, people are like, you can do all this stuff like, damn, we're talking about this. And I'm like, dude, dude, no, I wish. I do wish. But yes, okay. Before we move on, I want to shout out Alexander Sakura, regular conference speaker Alexander gave a really good talk at prismaday 2022 that I linked in the chat that goes through all sorts of wild and wacky fun stuff you can do with database procedures. I think the talks in SQL, but like the concepts are applicable in a lot of languages. Yay. Thank you
Alexander gave a really good talk at prismaday 2022 that I linked in the chat that goes through all sorts of wild and wacky fun stuff you can do with database procedures. I think the talks in SQL, but like the concepts are applicable in a lot of languages. Yay. Thank you Yay. Thank you. Well, I'm going to put that in my next plot video. Cool. Okay. So this was also another thing that it actually does kind of build on top of arrow function and lamb those and it was, yeah, like looking at all of this, I need to, I really need to work on like breaking these down
Yay. Thank you. Well, I'm going to put that in my next plot video. Cool. Okay. So this was also another thing that it actually does kind of build on top of arrow function and lamb those and it was, yeah, like looking at all of this, I need to, I really need to work on like breaking these down But there are, um, I said, they're a bit surprised you have to do a, oh, no, you have to know that the array might not be big enough
But there are, um, I said, they're a bit surprised you have to do a, oh, no, you have to know that the array might not be big enough And the, sorry, then would you mind going back to this sing songs at or get song gap function when we were looking at before this stuff
And the, sorry, then would you mind going back to this sing songs at or get song gap function when we were looking at before this stuff So yeah, um, a couple of reasons why I used the condition, even though I didn't have to, for starters, TypeScripts put the idea of knowing that accessing an element for an array could return undefined behind a flag because most of the time that's real annoying
So yeah, um, a couple of reasons why I used the condition, even though I didn't have to, for starters, TypeScripts put the idea of knowing that accessing an element for an array could return undefined behind a flag because most of the time that's real annoying Like if every time you accessed an array of some elements, you had to manually check whether that index was inside the array. I mean, there's some code bases that that's literally really useful. And they want that on. But most code bases that would just be like a total pain
Like if every time you accessed an array of some elements, you had to manually check whether that index was inside the array. I mean, there's some code bases that that's literally really useful. And they want that on. But most code bases that would just be like a total pain And this is an area where TypeScripts type system is actually not completely safe. Because I could do, I could say like const names equals an array with like one thing in it. And to do names of 9,000, 1 and TypeScript would be like, oh, yeah, that exists. That's fine
And this is an area where TypeScripts type system is actually not completely safe. Because I could do, I could say like const names equals an array with like one thing in it. And to do names of 9,000, 1 and TypeScript would be like, oh, yeah, that exists. That's fine That's fine. So this is covered in the erase chapter, which I, which is next next. I think it's not. Yeah. Let's see. If I can see it enough because I booked Mark Amal. It doesn't get bigger. Why? Let's see. Yes, but erase is next. I'm like having to like really zoom in on this
That's fine. So this is covered in the erase chapter, which I, which is next next. I think it's not. Yeah. Let's see. If I can see it enough because I booked Mark Amal. It doesn't get bigger. Why? Let's see. Yes, but erase is next. I'm like having to like really zoom in on this But yes, erase is next. Cool. I will also say in just ignoring TypeScript like in JavaScript in general, accessing elements outside of the size of an array is like a performance paper cut. Like most of the time, it's fine
But yes, erase is next. Cool. I will also say in just ignoring TypeScript like in JavaScript in general, accessing elements outside of the size of an array is like a performance paper cut. Like most of the time, it's fine But like if you have a hot code path, meaning a code path that's like run repeatedly over and over again, that's hot. Then that like does de-optimize the code path. So it's in a general situation. It's oftentimes better to be safe to check whether it's less than the baseline
But like if you have a hot code path, meaning a code path that's like run repeatedly over and over again, that's hot. Then that like does de-optimize the code path. So it's in a general situation. It's oftentimes better to be safe to check whether it's less than the baseline But like that's not sound performance advice all the time. Fair enough. Fair enough. I wrote a game engine and that was a performance hell. This is a terrible game. But a great question. Thank you for asking. Oh, something fun to tell all of you to as I've been learning data
But like that's not sound performance advice all the time. Fair enough. Fair enough. I wrote a game engine and that was a performance hell. This is a terrible game. But a great question. Thank you for asking. Oh, something fun to tell all of you to as I've been learning data And we have been gamble on the show talking about data basics and apparently Josh check your discord. Is that I will be building a Raspberry Pi to understand data more? I'm very excited. This will be sometime next month. But okay, I feel like these two need to have their conversation first
And we have been gamble on the show talking about data basics and apparently Josh check your discord. Is that I will be building a Raspberry Pi to understand data more? I'm very excited. This will be sometime next month. But okay, I feel like these two need to have their conversation first Go on, please. I'm with you. When are we going to stream, million? When I've been like holding off website stuff, I should show that. If you're still here when we're done with chapter, I have stuff to show you. We'll show both of you, but like show everyone. Because I'm really excited about it
Go on, please. I'm with you. When are we going to stream, million? When I've been like holding off website stuff, I should show that. If you're still here when we're done with chapter, I have stuff to show you. We'll show both of you, but like show everyone. Because I'm really excited about it Okay, so land does an arrow functions. Those are the same. But this doesn't really make a ton of sense to me. This isn't, by the way, this is a JavaScript thing that there are two really more, but like two main ways of declaring a function. You can do a, what's called a function declaration
Okay, so land does an arrow functions. Those are the same. But this doesn't really make a ton of sense to me. This isn't, by the way, this is a JavaScript thing that there are two really more, but like two main ways of declaring a function. You can do a, what's called a function declaration If you say like function, some name, the things we've been seeing. And then you can also do an arrow function, which is this is like that's what it is. Fun fact, people used to call them fat arrow syntax
If you say like function, some name, the things we've been seeing. And then you can also do an arrow function, which is this is like that's what it is. Fun fact, people used to call them fat arrow syntax And I will let everyone spend about two milliseconds guessing why the term fat arrow syntax is no longer the common term for this core language feature. And I'm glad that we realized, oh, it's funny. So yeah, arrow functions sometimes also called lambdas. It's just another way writing a function
And I will let everyone spend about two milliseconds guessing why the term fat arrow syntax is no longer the common term for this core language feature. And I'm glad that we realized, oh, it's funny. So yeah, arrow functions sometimes also called lambdas. It's just another way writing a function They're like some small differences, but they're not relevant in this book. Okay, so, okay, so basically these two for the one right above it for assumption declaration, it's basically two ways of saying the same thing. And there are some smaller differences
They're like some small differences, but they're not relevant in this book. Okay, so, okay, so basically these two for the one right above it for assumption declaration, it's basically two ways of saying the same thing. And there are some smaller differences Yeah, there are, there is a reason why we have two to three raised declare functions in JavaScript, but right now, not relevant. They're just two different ways of doing the same thing. You could also do const variable equals function something. And that's called a function expression
Yeah, there are, there is a reason why we have two to three raised declare functions in JavaScript, but right now, not relevant. They're just two different ways of doing the same thing. You could also do const variable equals function something. And that's called a function expression And that's so difficult. No one's that I didn't even bother including it here. Thank you. Thank you for that. Okay, so, is returning a date? This really sounds, this wasn't too tricky. Okay, so this one made an offense. And then you have function types. And this got a little hazy
And that's so difficult. No one's that I didn't even bother including it here. Thank you. Thank you for that. Okay, so, is returning a date? This really sounds, this wasn't too tricky. Okay, so this one made an offense. And then you have function types. And this got a little hazy Well, so you have to be able to describe all sorts of things in the type system. If you have a variable, that's a string, you can say it's a string. If you have a variable, that's an array of things that are number or string or whatever, you have to be able to describe that. Always
Well, so you have to be able to describe all sorts of things in the type system. If you have a variable, that's a string, you can say it's a string. If you have a variable, that's an array of things that are number or string or whatever, you have to be able to describe that. Always Always. They're objects. They're arrays, all sorts of things. Well, what if you have a variable that stores a function, which is like a really not all the time, but like a pretty common JavaScript practice? You have to be able now to describe the type of the function
Always. They're objects. They're arrays, all sorts of things. Well, what if you have a variable that stores a function, which is like a really not all the time, but like a pretty common JavaScript practice? You have to be able now to describe the type of the function Like if you have a function that takes in another function, like arrays.map, you have to be able to describe the type of the parameter that is a function. And here I give you the way to do that. Is that like sense? I'm reading it. And I think it does make more sense
Like if you have a function that takes in another function, like arrays.map, you have to be able to describe the type of the parameter that is a function. And here I give you the way to do that. Is that like sense? I'm reading it. And I think it does make more sense I think sometimes, and this is something that I love about your book. And there are a lot of teachers out there that do this too. Like your book is a little more common language, I guess is a way of saying it
I think sometimes, and this is something that I love about your book. And there are a lot of teachers out there that do this too. Like your book is a little more common language, I guess is a way of saying it Yet there are going to be some nuances that just even while reading it or looking at it, it just doesn't necessarily click. So I appreciate you going over that one. That one does make a lot more sense. Cool. I like that note. Oh, sorry, I interrupt
Yet there are going to be some nuances that just even while reading it or looking at it, it just doesn't necessarily click. So I appreciate you going over that one. That one does make a lot more sense. Cool. I like that note. Oh, sorry, I interrupt I actually got dinged in a couple of Amazon or like elsewhere reviews for not having like everyday language. So like this is something that I'm actively or was actively working on. But this book is incredible. I highly recommend it
I actually got dinged in a couple of Amazon or like elsewhere reviews for not having like everyday language. So like this is something that I'm actively or was actively working on. But this book is incredible. I highly recommend it If you're writing blogs, if you're streaming, if you're new conference talks, if you're writing a book on writing well by William. This is it. It's like one of the standards things for writers that I did not know about until like most of the quite through writing my book. Go get into chat. Cool
If you're writing blogs, if you're streaming, if you're new conference talks, if you're writing a book on writing well by William. This is it. It's like one of the standards things for writers that I did not know about until like most of the quite through writing my book. Go get into chat. Cool Cool. Great book. Honestly, fantastic book. Even if you just talk to people, it's really good about like clear, understandable, comprehensible language. Don't use like three random words that mean the same thing in a row. Keep your sentences short because each sentence is its own idea
Cool. Great book. Honestly, fantastic book. Even if you just talk to people, it's really good about like clear, understandable, comprehensible language. Don't use like three random words that mean the same thing in a row. Keep your sentences short because each sentence is its own idea So thank you. I tried to do it in the book, but I came in late. There are parts that don't do it as well. Oh, and it is. Is it? Yay. It is on Audible as well. Yes. Yes. So definitely go check it out. I'm excited that it is on Audible as well because well that's how I learned. So yay. Okay
So thank you. I tried to do it in the book, but I came in late. There are parts that don't do it as well. Oh, and it is. Is it? Yay. It is on Audible as well. Yes. Yes. So definitely go check it out. I'm excited that it is on Audible as well because well that's how I learned. So yay. Okay So yay. Okay. I appreciated that you included the errors. This is why I highlighted them. So I see them and come back to them because it made a lot of sense what these errors would have been. And then so we have. Wait, sorry
So yay. Okay. I appreciated that you included the errors. This is why I highlighted them. So I see them and come back to them because it made a lot of sense what these errors would have been. And then so we have. Wait, sorry Wait, sorry. I just don't want to skip over these things because the assignability errors are like the algorithm I keep coming up in TypeScript no matter what you do. So does this concept of like increasing indentation for each level of specificity in the error jive well with you? Yeah
Wait, sorry. I just don't want to skip over these things because the assignability errors are like the algorithm I keep coming up in TypeScript no matter what you do. So does this concept of like increasing indentation for each level of specificity in the error jive well with you? Yeah Well, at least in my visualization of it because y'all I did not go on the and actually go test it out yet it made sense because if I'm looking up here, at least at these ones, it's talking about the level of indicion indentation right here to see where if it's something that's readable to know that it's associated with the top ones or whatever's above it
Well, at least in my visualization of it because y'all I did not go on the and actually go test it out yet it made sense because if I'm looking up here, at least at these ones, it's talking about the level of indicion indentation right here to see where if it's something that's readable to know that it's associated with the top ones or whatever's above it Yes. That is that is a big part of why they do it that way. Yep. Exactly. I love that. Oh, yeah. Yay. Go look. You got this. Oh. Good luck. Okay. Cool. But yeah, that's I think why I skipped over it because I was like this totally made sense was the indentation part
Yes. That is that is a big part of why they do it that way. Yep. Exactly. I love that. Oh, yeah. Yay. Go look. You got this. Oh. Good luck. Okay. Cool. But yeah, that's I think why I skipped over it because I was like this totally made sense was the indentation part But a big part of this is because Python really does that a time. And if you don't have the right indentation Python breaks. So that's that actually yay for learning Python at the same time. For a while, I do think I am going to put that on hold
But a big part of this is because Python really does that a time. And if you don't have the right indentation Python breaks. So that's that actually yay for learning Python at the same time. For a while, I do think I am going to put that on hold So that way I can focus on narrowing down my what I do. I don't know. Okay. Anything before we go to function type parentheses. Yep. Thank you for if you're wondering me. Well, very welcome. I appreciate the fact checks. You make sure I know what I'm seeing
So that way I can focus on narrowing down my what I do. I don't know. Okay. Anything before we go to function type parentheses. Yep. Thank you for if you're wondering me. Well, very welcome. I appreciate the fact checks. You make sure I know what I'm seeing And I was very excited because Anthony had me explain like the difference between Docker and Kubernetes and I did a decent job. I was very excited. So as people quiz me on things, check my understanding, I get better or I just totally flounder. Okay
And I was very excited because Anthony had me explain like the difference between Docker and Kubernetes and I did a decent job. I was very excited. So as people quiz me on things, check my understanding, I get better or I just totally flounder. Okay Okay. So function types may be placed anywhere that another type would be used that includes union types
Okay. So function types may be placed anywhere that another type would be used that includes union types So I grabbed union types from the previous chapter and from what I understand is just saying that if you use mathematician over here, if I'm using mathematician and it equals math dot random, I can use mathematician later on instead of reusing this. And that's what a union is, right? Yeah
So I grabbed union types from the previous chapter and from what I understand is just saying that if you use mathematician over here, if I'm using mathematician and it equals math dot random, I can use mathematician later on instead of reusing this. And that's what a union is, right? Yeah A union is something that could be either one or another. So okay. This is literally just no formatting. It doesn't introduce any new concepts. It's just letting you know there's a difference between this thing and that thing. Okay
A union is something that could be either one or another. So okay. This is literally just no formatting. It doesn't introduce any new concepts. It's just letting you know there's a difference between this thing and that thing. Okay Okay. The only other than the like what is letting it's I see an X is it an extra bracket? Oh no, it goes over there. I wasn't seeing more at closed. Yeah, parentheses. I wasn't seeing more at closed. And it took me a second. Got it. Okay. Hooray. This is where it gets funky. Okay
Okay. The only other than the like what is letting it's I see an X is it an extra bracket? Oh no, it goes over there. I wasn't seeing more at closed. Yeah, parentheses. I wasn't seeing more at closed. And it took me a second. Got it. Okay. Hooray. This is where it gets funky. Okay Okay. And that by the way, this is the third the third way to declare a function. This is called a function expression. It's like a halfway between a function declaration and an arrow function. And honestly, you can ignore that totally and just pretend that all the syntax looks the same to you
Okay. And that by the way, this is the third the third way to declare a function. This is called a function expression. It's like a halfway between a function declaration and an arrow function. And honestly, you can ignore that totally and just pretend that all the syntax looks the same to you Would you be fine? Okay. Oh, okay. I wonder if what is my question is index inferred as a number due to it being after songs and not a string? Ah, that is a built-in method to JavaScript
Would you be fine? Okay. Oh, okay. I wonder if what is my question is index inferred as a number due to it being after songs and not a string? Ah, that is a built-in method to JavaScript In JavaScript, the language, the runtime, whatever, every array has among other things a for each method, a property you can call. And that for each, takes in a function. And it will call the function with three things. It'll call it with each member of the array, or each element of the array
In JavaScript, the language, the runtime, whatever, every array has among other things a for each method, a property you can call. And that for each, takes in a function. And it will call the function with three things. It'll call it with each member of the array, or each element of the array It'll, that arrays index and then the array itself. Fun fact. That's just the JavaScript thing. Right. What would I look that up as? Array types? Array, array for each. I'm just going to go in the, I'll put my, what I would look up in the chat. Other people's mileage may vary as they say
It'll, that arrays index and then the array itself. Fun fact. That's just the JavaScript thing. Right. What would I look that up as? Array types? Array, array for each. I'm just going to go in the, I'll put my, what I would look up in the chat. Other people's mileage may vary as they say Oh, my views different things. But I would look up like array for each on Google. And then the first thing would be MDN for me because I like MDN and they know that. So they make it good. So it executes a provided function once for each array elements. And that parameters to the function
Oh, my views different things. But I would look up like array for each on Google. And then the first thing would be MDN for me because I like MDN and they know that. So they make it good. So it executes a provided function once for each array elements. And that parameters to the function The first one is a callback that receives elements index array for each of the elements. Okay. And thank you, aliens. I think it looks like food, but that's because I look at my handwriting all the time
The first one is a callback that receives elements index array for each of the elements. Okay. And thank you, aliens. I think it looks like food, but that's because I look at my handwriting all the time But something that I think is really cool is they, there are now, what is it called? A screen protector that feels like paper. So it doesn't like make me cringe when I'm trying to write. So it's a lot easier to just use, yeah, it's paper like
But something that I think is really cool is they, there are now, what is it called? A screen protector that feels like paper. So it doesn't like make me cringe when I'm trying to write. So it's a lot easier to just use, yeah, it's paper like So it's really easy to write on the tablet because I'm not getting grossed out from trying to do paper like. Yeah. Yeah. Wasn't there, wasn't there some other fancy new tablet like remarkable? I've been looking, or seeing people talk about it and you need to look into it
So it's really easy to write on the tablet because I'm not getting grossed out from trying to do paper like. Yeah. Yeah. Wasn't there, wasn't there some other fancy new tablet like remarkable? I've been looking, or seeing people talk about it and you need to look into it Uh, that is, I personally didn't like remarkable. I tried it a long time ago. Thank you for the follow. I tried it a long time ago, but it, a big reason that I didn't like it back then was I don't know if you could tell, but I need colors in my life
Uh, that is, I personally didn't like remarkable. I tried it a long time ago. Thank you for the follow. I tried it a long time ago, but it, a big reason that I didn't like it back then was I don't know if you could tell, but I need colors in my life And if I don't have colors, I get really lost on things. Everything is very color coded, me trying to figure life out. It's how I associate things. So without the color, and I don't believe remarkable dead color. From what I remember. Darn. Oh, well, there go my hopes and dreams. Um, okay
And if I don't have colors, I get really lost on things. Everything is very color coded, me trying to figure life out. It's how I associate things. So without the color, and I don't believe remarkable dead color. From what I remember. Darn. Oh, well, there go my hopes and dreams. Um, okay Um, okay. So function type aliases. Yes. Fun fact, this introduces no new concepts. It's just rehashes old ones. Your favorite part of these later chapters combines them in new ways. I was going to say, I think it made sense because I didn't put any notes on it. I had an idea. Yeah
Um, okay. So function type aliases. Yes. Fun fact, this introduces no new concepts. It's just rehashes old ones. Your favorite part of these later chapters combines them in new ways. I was going to say, I think it made sense because I didn't put any notes on it. I had an idea. Yeah Yeah. What if in the book, each section explicitly says what it does with regards to new concepts? Like does it introduce new concepts and or does it rehash or like we combine old concepts? I feel like that would actually be like kind of cool and useful
Yeah. What if in the book, each section explicitly says what it does with regards to new concepts? Like does it introduce new concepts and or does it rehash or like we combine old concepts? I feel like that would actually be like kind of cool and useful That would be helpful because like if if this was like, um, like, let's say that it said build. Um, so it's building on something else, new or recap. My mind just immediately auto-completed to build deploy for sale, but that's not correct. But yeah, something like that. Actually, oh, goodness
That would be helpful because like if if this was like, um, like, let's say that it said build. Um, so it's building on something else, new or recap. My mind just immediately auto-completed to build deploy for sale, but that's not correct. But yeah, something like that. Actually, oh, goodness I'm saving. Is that how they save their name? Save in that for sale. I think savings up for sale
I'm saving. Is that how they save their name? Save in that for sale. I think savings up for sale Anyway, I need to have someone from for sale or not let me on again to understand the differences between old school hosting and um, like go daddy or host getter or something and how for sale does things. So yes, this one made sense. And more return types, void returns
Anyway, I need to have someone from for sale or not let me on again to understand the differences between old school hosting and um, like go daddy or host getter or something and how for sale does things. So yes, this one made sense. And more return types, void returns When in real life would somebody actually use this? Boy returns show up all over the place. The most common example is a console log. Um, it's not just that you're you're explicitly doing something different. It's that by default, all functions return void unless you add an explicit return to them
When in real life would somebody actually use this? Boy returns show up all over the place. The most common example is a console log. Um, it's not just that you're you're explicitly doing something different. It's that by default, all functions return void unless you add an explicit return to them Mm-hmm. Okay. That helps. Is there a reason you would want it to return void? Like, I guess if it does it cool, but is there a time you would actually like be like, I need to make sure this does this. Yeah, it's similar to other cases where you want an explicit function return type
Mm-hmm. Okay. That helps. Is there a reason you would want it to return void? Like, I guess if it does it cool, but is there a time you would actually like be like, I need to make sure this does this. Yeah, it's similar to other cases where you want an explicit function return type You don't have to, unless it's recursive, think or that. But if you have like a larger function, and you just want to make sure that like there's no random like return zero or something in there, yeah, it can be useful just to make sure
You don't have to, unless it's recursive, think or that. But if you have like a larger function, and you just want to make sure that like there's no random like return zero or something in there, yeah, it can be useful just to make sure And it's like, it's this is at the level of stylistic preference for the most part. Sure, we're going to go. I'm using it as an example. We'll see if I remember what it means. Um, oh, and then next, know that although JavaScript functions, I'll return undefined by default
And it's like, it's this is at the level of stylistic preference for the most part. Sure, we're going to go. I'm using it as an example. We'll see if I remember what it means. Um, oh, and then next, know that although JavaScript functions, I'll return undefined by default If no value is returned, void is not the same as undefined. Void means the return type of a function will be ignored while undefined is literal. A literal value to be returned
If no value is returned, void is not the same as undefined. Void means the return type of a function will be ignored while undefined is literal. A literal value to be returned At first, when I like first got into TypeScript deep, like not just learned it, but like started getting milling to us, I started to convince myself like, why do we have void? It's just, just say the thing returns undefined. But then when I got even deeper, I realized, no, I was wrong
At first, when I like first got into TypeScript deep, like not just learned it, but like started getting milling to us, I started to convince myself like, why do we have void? It's just, just say the thing returns undefined. But then when I got even deeper, I realized, no, I was wrong TypeScript is right. Feeling that a lot of people go through frequently when getting into TypeScript deep. Yeah, there is an actual reason why void is not undefined. Because a function, a function can return something and then be used in a location that says, ignore this thing's return
TypeScript is right. Feeling that a lot of people go through frequently when getting into TypeScript deep. Yeah, there is an actual reason why void is not undefined. Because a function, a function can return something and then be used in a location that says, ignore this thing's return So like, avoid saying, I don't care what you returned. You could return whatever you want. I'm not going to touch it. Does that make sense? Yeah, we're going with yes for now in the future. It may not. Sure. And this year's, this record thing is a good example
So like, avoid saying, I don't care what you returned. You could return whatever you want. I'm not going to touch it. Does that make sense? Yeah, we're going with yes for now in the future. It may not. Sure. And this year's, this record thing is a good example Like fun fact about JavaScript arrow functions, aka lambdas, they, they're used because they returned whatever that first line is like it, like if you scroll up just a little bit to the four each, if you don't find. Yeah, so save records. Oh, sorry, too far. Too far
Like fun fact about JavaScript arrow functions, aka lambdas, they, they're used because they returned whatever that first line is like it, like if you scroll up just a little bit to the four each, if you don't find. Yeah, so save records. Oh, sorry, too far. Too far Too far. Okay, I was like, where did I go? There is a save records function. I don't know. Should we check a page 71? Yeah, bottom of page 71. Ah, there we go. Cool. So fun fact, a couple of fun facts actually for one thing, a question
Too far. Okay, I was like, where did I go? There is a save records function. I don't know. Should we check a page 71? Yeah, bottom of page 71. Ah, there we go. Cool. So fun fact, a couple of fun facts actually for one thing, a question Are you familiar with the concept that JavaScript arrays have a push method that you can call to push something at the end of the array? No, but yay. That's, that's how you add to an array in JavaScript
Are you familiar with the concept that JavaScript arrays have a push method that you can call to push something at the end of the array? No, but yay. That's, that's how you add to an array in JavaScript You can do like records equals and B array, records stop push something and that adds to the array. That's a thing. That push method returns a number. Okay. Okay. That's cool. Yeah. So returns a number
You can do like records equals and B array, records stop push something and that adds to the array. That's a thing. That push method returns a number. Okay. Okay. That's cool. Yeah. So returns a number It returns a new size of the array, which means that that this little arrow functions a little lambda record thing is records out push record that function returns a number
It returns a new size of the array, which means that that this little arrow functions a little lambda record thing is records out push record that function returns a number And is that, so would that be considered part of a lambda then
And is that, so would that be considered part of a lambda then I would encourage you to use the word arrow expression because lambda like means a totally different thing in like server or serverless tech, but yes, it means that this lambda, this like record records not push that that means because records not push returns a number, that whole function returns a number
I would encourage you to use the word arrow expression because lambda like means a totally different thing in like server or serverless tech, but yes, it means that this lambda, this like record records not push that that means because records not push returns a number, that whole function returns a number Could I share my screen? Just, yes. Yeah. Let me go back to the TypeScript playground. So like const, version arrow goals records string, records stop push something. And then you have the same thing, version function, states in records and returns records up or something
Could I share my screen? Just, yes. Yeah. Let me go back to the TypeScript playground. So like const, version arrow goals records string, records stop push something. And then you have the same thing, version function, states in records and returns records up or something These two do the same thing. Just one is the arrow syntax. The other is a function declaration. Both are records string return number. So note that these functions don't return undefined. They return a number. And if I were to run calling version function on existing, it would return to and log to
These two do the same thing. Just one is the arrow syntax. The other is a function declaration. Both are records string return number. So note that these functions don't return undefined. They return a number. And if I were to run calling version function on existing, it would return to and log to Okay, that makes sense. If you run it again, would it go to three or would it keep two? Every time I call it is a new array. So like let's say const, my stuff equals, this is like we're going to buy stuff. First call
Okay, that makes sense. If you run it again, would it go to three or would it keep two? Every time I call it is a new array. So like let's say const, my stuff equals, this is like we're going to buy stuff. First call First call. You want to guess what this will run? I'm hoping to three, but you know, I would think that it's the first call, second call, it would go to three, but okay. Yeah. But it will always do first call, second call. So it'll always be two and three. Every time I run it, it's new, everything
First call. You want to guess what this will run? I'm hoping to three, but you know, I would think that it's the first call, second call, it would go to three, but okay. Yeah. But it will always do first call, second call. So it'll always be two and three. Every time I run it, it's new, everything It's all this refresh the page. Make little more clear. And then at the end, it's cataloging fine stuff. So at the very end, now my stuff is existing something, something. Okay. Cool. Does that make sense? Enough. Cool. So yeah, so these functions return number
It's all this refresh the page. Make little more clear. And then at the end, it's cataloging fine stuff. So at the very end, now my stuff is existing something, something. Okay. Cool. Does that make sense? Enough. Cool. So yeah, so these functions return number So if I were to provide either these to a location that says I were taken a function that returns on defined, like let's say did like let this variable is a function that returns on defined. I'm defined, let's say, or like input is a string
So if I were to provide either these to a location that says I were taken a function that returns on defined, like let's say did like let this variable is a function that returns on defined. I'm defined, let's say, or like input is a string And then I said like this, I have a lot of equals version, either that let's say arrow, typeship would be mad because I said that this function returns on defined, but the thing I'm providing to it returns number and number is not the same as on defined
And then I said like this, I have a lot of equals version, either that let's say arrow, typeship would be mad because I said that this function returns on defined, but the thing I'm providing to it returns number and number is not the same as on defined Does it make sense? Why types of apps man in this case? Yes. Cool. Boyd says I don't give a crap. Just do whatever you want. So void is okay with this because whenever I call this return spoilt thing, I'm completely ignoring the returns value. It could be on defined string, number, whatever
Does it make sense? Why types of apps man in this case? Yes. Cool. Boyd says I don't give a crap. Just do whatever you want. So void is okay with this because whenever I call this return spoilt thing, I'm completely ignoring the returns value. It could be on defined string, number, whatever I don't give a crap
I don't give a crap So for your example earlier of like if I'm scrolling the link to the thing, maybe, um, was that like you might use void to help find if there were zero somewhere or like if it gave an error, how would a void do that compared to a undefined void will still run him and undefined won't
So for your example earlier of like if I'm scrolling the link to the thing, maybe, um, was that like you might use void to help find if there were zero somewhere or like if it gave an error, how would a void do that compared to a undefined void will still run him and undefined won't Void just says you can give me more permissive things
Void just says you can give me more permissive things Undefined says it must be undefined. So like an example of something that takes an void is the like array for each array for each says the parameter returns void. I don't care what you give me. You can give me something that returns a number or void or defined or whatever. I don't care. Okay. Okay
Undefined says it must be undefined. So like an example of something that takes an void is the like array for each array for each says the parameter returns void. I don't care what you give me. You can give me something that returns a number or void or defined or whatever. I don't care. Okay. Okay Okay. Okay. You don't have to this is not going to come up very often. In my experience, people have a lot a lot of trouble understanding the concept of void, but when it comes to using it in code, it's it just intuitively makes sense
Okay. Okay. You don't have to this is not going to come up very often. In my experience, people have a lot a lot of trouble understanding the concept of void, but when it comes to using it in code, it's it just intuitively makes sense Like because it's a more permissive thing, if you just like cobsle.log or like array for each, it'll just work and then you don't have to really memorize like what void does. Cool. And then because we talked, do we end up talking about the never returns? I don't think we have it
Like because it's a more permissive thing, if you just like cobsle.log or like array for each, it'll just work and then you don't have to really memorize like what void does. Cool. And then because we talked, do we end up talking about the never returns? I don't think we have it We haven't yet, but this one is fun. This one I actually found easier to understand personally than void. It never returns. It literally never does. You'd never continue after this function. The end of the line. So it's the opposite of a loop. It's an infinite loop
We haven't yet, but this one is fun. This one I actually found easier to understand personally than void. It never returns. It literally never does. You'd never continue after this function. The end of the line. So it's the opposite of a loop. It's an infinite loop It's a what have you ever seen while true? Yeah. It's a while true. Whatever comes after that, you're never getting there unless you like break out or something, but like that's that's not happening. Okay. That totally makes sense. Function overloads
It's a what have you ever seen while true? Yeah. It's a while true. Whatever comes after that, you're never getting there unless you like break out or something, but like that's that's not happening. Okay. That totally makes sense. Function overloads Function overloads. And I really want to say function overlords, but it overlords. I tried to get these out of the book actually. I went back and forth. I wawled a lot and wether I wanted them in the book and then towards the end, I was like, you know, there's no one uses this
Function overloads. And I really want to say function overlords, but it overlords. I tried to get these out of the book actually. I went back and forth. I wawled a lot and wether I wanted them in the book and then towards the end, I was like, you know, there's no one uses this Like this is not necessary. It's like the like random edge cases that most people don't hit, but by then it was too late to take it out. So now we're stuck with it. Okay. That. Then I'm just going to skip it and skip it. Call signature. Sorry. I didn't understand. Sorry. You triggered
Like this is not necessary. It's like the like random edge cases that most people don't hit, but by then it was too late to take it out. So now we're stuck with it. Okay. That. Then I'm just going to skip it and skip it. Call signature. Sorry. I didn't understand. Sorry. You triggered You triggered. Well, that's okay. I don't either. So Google's learned in TypeScript right with us. Yay. All right. This is a part of function overloads. Oh, is it? Okay. Yeah. You're done with. Oh, yeah. Yeah
You triggered. Well, that's okay. I don't either. So Google's learned in TypeScript right with us. Yay. All right. This is a part of function overloads. Oh, is it? Okay. Yeah. You're done with. Oh, yeah. Yeah Oh, yeah. Yeah. This is one thing that on this PDF version, it's kind of hard to always tell because you can tell like if I can get them in the same area that that's like a like a H1 in this one from H2 or something like that. But when they're not next to each other makes it a little hard
Oh, yeah. Yeah. This is one thing that on this PDF version, it's kind of hard to always tell because you can tell like if I can get them in the same area that that's like a like a H1 in this one from H2 or something like that. But when they're not next to each other makes it a little hard So where do we land? I had a hard time with return types and void and never. And then we kind of skipped the last one. I didn't think you had that hard of a time with never. Or maybe we just didn't dive deep enough to explore. No, like never
So where do we land? I had a hard time with return types and void and never. And then we kind of skipped the last one. I didn't think you had that hard of a time with never. Or maybe we just didn't dive deep enough to explore. No, like never No, like never. I was just seeing like thinking of what we have from the beginning what we thought I would have issues with. Cool. Yay. So that being said, I do have a question for you because next is a raise
No, like never. I was just seeing like thinking of what we have from the beginning what we thought I would have issues with. Cool. Yay. So that being said, I do have a question for you because next is a raise When you get a second, because I think this would be a sudden challenge is if we went with does it build upon something? Is it new or is it a workshop? So when you get a second, could you classify them? Each of the chapters or the whole chapter is a whole. I would say the headers. Yeah
When you get a second, because I think this would be a sudden challenge is if we went with does it build upon something? Is it new or is it a workshop? So when you get a second, could you classify them? Each of the chapters or the whole chapter is a whole. I would say the headers. Yeah Yeah. Do you want me to say do that now later when we do the stream? Okay. Yeah. Before the stream is possible, but later, like you have a little probably bigger. Oh, you have bigger than two weeks. That is verbiage. That is, you know, totally made sense
Yeah. Do you want me to say do that now later when we do the stream? Okay. Yeah. Before the stream is possible, but later, like you have a little probably bigger. Oh, you have bigger than two weeks. That is verbiage. That is, you know, totally made sense You have more than two weeks because I will be on my way to Munich this time in two weeks. I think I don't. What time is it? Or already be a Munich. I'll probably be going to bed. Oh, I don't know. What are you going to do? Minute four again? I think you tell me this I forget
You have more than two weeks because I will be on my way to Munich this time in two weeks. I think I don't. What time is it? Or already be a Munich. I'll probably be going to bed. Oh, I don't know. What are you going to do? Minute four again? I think you tell me this I forget So I'm going to Portugal for crabby, which is like our meetup, our offsite for the company. And then I am going to Munich afterwards because my friend Anas is from there and I haven't seen her in forever. Hey, that's exciting. So and if we have time and let's see. Let's see
So I'm going to Portugal for crabby, which is like our meetup, our offsite for the company. And then I am going to Munich afterwards because my friend Anas is from there and I haven't seen her in forever. Hey, that's exciting. So and if we have time and let's see. Let's see Let's see. A Leon, if you're still here, I will. I'll show everybody, but you know, since it has to do with Roodle thing, might want to know. Oh, yeah, you are still here. Okay. Yeah. I'm going to be rude and plug. Elliott had a blog post that got retweeted. We published something on dev 2
Let's see. A Leon, if you're still here, I will. I'll show everybody, but you know, since it has to do with Roodle thing, might want to know. Oh, yeah, you are still here. Okay. Yeah. I'm going to be rude and plug. Elliott had a blog post that got retweeted. We published something on dev 2 So night. Hey, the practical dev. Yeah, shoot now. I'm trying to find the link. Yeah. Okay. As soon as this loads, I'll be able to show you. Do you do? Do you do? Yo, it's not loaded now. Oh, Miro, are you like seriously not going to be my friend right now? That would be rude. Rood. Very rude
So night. Hey, the practical dev. Yeah, shoot now. I'm trying to find the link. Yeah. Okay. As soon as this loads, I'll be able to show you. Do you do? Do you do? Yo, it's not loaded now. Oh, Miro, are you like seriously not going to be my friend right now? That would be rude. Rood. Very rude Rood. Very rude. I just got that that logo was like an M. Oh, my God. Oh, huh. It kind of looks like the monster logo. Yeah, yeah, it does. But I mean, there's going so many. Oh, oh, oh, the gen Z rebrand of monster for Silicon Valley. Okay. Yay. Okay. So we have progress
Rood. Very rude. I just got that that logo was like an M. Oh, my God. Oh, huh. It kind of looks like the monster logo. Yeah, yeah, it does. But I mean, there's going so many. Oh, oh, oh, the gen Z rebrand of monster for Silicon Valley. Okay. Yay. Okay. So we have progress I am slowly, since I am learning Postgres, learning, like what I want to do with the website and things. And look, I have, I think I included all the things that are in your theme. I did built with Roodle theme on aster and it's using aster, job script, you know, in type scripts
I am slowly, since I am learning Postgres, learning, like what I want to do with the website and things. And look, I have, I think I included all the things that are in your theme. I did built with Roodle theme on aster and it's using aster, job script, you know, in type scripts And for the backend, I know that I want it to go to Postgres database, which I believe I need to connect to with Prisma because going over here, these are my handy dandy links that will link to all my projects. They are for Ivan. They are making me like a virtual business card, like page
And for the backend, I know that I want it to go to Postgres database, which I believe I need to connect to with Prisma because going over here, these are my handy dandy links that will link to all my projects. They are for Ivan. They are making me like a virtual business card, like page So that'll link there. But the entire reason I'm asking about this is I need to figure out how to see if I could use like Postgres and have two different like requirements in for like each page
So that'll link there. But the entire reason I'm asking about this is I need to figure out how to see if I could use like Postgres and have two different like requirements in for like each page So like if it's on a teach gen tech thing, each page needs to be set up that it knows it needs to have the embed, the episode description, guess contacts, any links, and then the transcript where for my podcast, it needs a little more
So like if it's on a teach gen tech thing, each page needs to be set up that it knows it needs to have the embed, the episode description, guess contacts, any links, and then the transcript where for my podcast, it needs a little more And that's my goal to continue learning Postgres and finish setting up my web page. That sounds great. And I think it can do that. I think I can't, I'm like, I think again. But yeah, so yay
And that's my goal to continue learning Postgres and finish setting up my web page. That sounds great. And I think it can do that. I think I can't, I'm like, I think again. But yeah, so yay But yeah, so yay. That's what I want to show you is I'm building this out all on the brutal thing because I love the brutal thing. And I will say that when we do stream, I'll you check. I'm messing this up again. Sorry. Um, Allian, Allian, I think, Allian, okay
But yeah, so yay. That's what I want to show you is I'm building this out all on the brutal thing because I love the brutal thing. And I will say that when we do stream, I'll you check. I'm messing this up again. Sorry. Um, Allian, Allian, I think, Allian, okay Allian, um, is that seeing how to customize a few of the other pages would be cool. Because I'm always like, I don't know how to do that part properly, but I'm going to figure this out. It's going to be great
Allian, um, is that seeing how to customize a few of the other pages would be cool. Because I'm always like, I don't know how to do that part properly, but I'm going to figure this out. It's going to be great And if you guys want to see something really fun because I shared this on my stream last night, this is the life cycle of how to put out a podcast episode on here. It's everything I do for the podcast, which is from guest information to how many calls we have to actually why we have it
And if you guys want to see something really fun because I shared this on my stream last night, this is the life cycle of how to put out a podcast episode on here. It's everything I do for the podcast, which is from guest information to how many calls we have to actually why we have it And then before we can even put it all out, the video and asset creation, it is fun. This took a really long time, but I am glad it exists because now I can make it better
And then before we can even put it all out, the video and asset creation, it is fun. This took a really long time, but I am glad it exists because now I can make it better But I'm also trying to do that with my website stuff because I think it's important for people to be able to see this side as I didn't really understand it. And I as to why I need to make friends with someone at their cell. So I can understand the hosting side of it. Which will happen eventually
But I'm also trying to do that with my website stuff because I think it's important for people to be able to see this side as I didn't really understand it. And I as to why I need to make friends with someone at their cell. So I can understand the hosting side of it. Which will happen eventually Cool. So yeah, that is what I will be up to later next week and this week. And what cool things do you have going on? Like who streams or what streams are you going to do? Maybe or the chat or oh, I was technically asking you, but I'm going to ask everybody now
Cool. So yeah, that is what I will be up to later next week and this week. And what cool things do you have going on? Like who streams or what streams are you going to do? Maybe or the chat or oh, I was technically asking you, but I'm going to ask everybody now I know there's at least one person in the chat who streams. Yeah, I've got a busy week actually. Today was fun. I did a game show with people around my app, React Miami. That was that was a whole thing. I won. I want to free React Miami ticket, which I'm really excited and super appreciative
I know there's at least one person in the chat who streams. Yeah, I've got a busy week actually. Today was fun. I did a game show with people around my app, React Miami. That was that was a whole thing. I won. I want to free React Miami ticket, which I'm really excited and super appreciative And I don't know if that came across in the street. Kind of feel bad, but I don't know who to give to
And I don't know if that came across in the street. Kind of feel bad, but I don't know who to give to So yeah, the next week I'm in, I'm in New York City actually for the first two and a half days because there's a code academy event that a bunch of people who used to work there are coming over to hang out because we have a very like positive uplifting fun friendly culture
So yeah, the next week I'm in, I'm in New York City actually for the first two and a half days because there's a code academy event that a bunch of people who used to work there are coming over to hang out because we have a very like positive uplifting fun friendly culture Us alum and the people who still there. And then I'm in React Miami. Can I actually show a website designed by the way? That's also the brutal theme vibe. So yeah, I've been wanting to do this for a while. I just like got it approved for the PhillyJS Club
Us alum and the people who still there. And then I'm in React Miami. Can I actually show a website designed by the way? That's also the brutal theme vibe. So yeah, I've been wanting to do this for a while. I just like got it approved for the PhillyJS Club It's like our JavaScript need up not to be confused with the PhillyJS user group, which is different. But yeah, this is the theme that we're going to go with for the PhillyJS website. It makes me so happy. It's so silly
It's like our JavaScript need up not to be confused with the PhillyJS user group, which is different. But yeah, this is the theme that we're going to go with for the PhillyJS website. It makes me so happy. It's so silly It's so silly. And for fun, I'm going to be implementing it in remix, which I've never used beyond like toy demos before. Nice. Please tell us how it goes. Yeah, we'll do. I'm excited because it's like the simplest by far the simplest design that we looked at
It's so silly. And for fun, I'm going to be implementing it in remix, which I've never used beyond like toy demos before. Nice. Please tell us how it goes. Yeah, we'll do. I'm excited because it's like the simplest by far the simplest design that we looked at Like we had like I came up with a bunch of different ones. Like this one we're holding in case everyone hates the brutal one. But like I made a parody of her cell as a design, son raised, the whole thing. And I know this one's simple and it just brings me joy. I do
Like we had like I came up with a bunch of different ones. Like this one we're holding in case everyone hates the brutal one. But like I made a parody of her cell as a design, son raised, the whole thing. And I know this one's simple and it just brings me joy. I do I do. Yeah, we'll fly you over on December 34th. Sounds good. Yeah. That's funny. Do tell. I almost forgot to ask you for this week. What Twitter drama or timescript drama is there going on because this really is a big part of it that I always forget to ask
I do. Yeah, we'll fly you over on December 34th. Sounds good. Yeah. That's funny. Do tell. I almost forgot to ask you for this week. What Twitter drama or timescript drama is there going on because this really is a big part of it that I always forget to ask But what I would say, how did you come up with your colors first? I am curious about that because you had a few different colors going on. Let me show you something. The JavaScript. Oh, I don't know if I ever knew that. Yeah, it's not black. It's like very dark, dark charcoal
But what I would say, how did you come up with your colors first? I am curious about that because you had a few different colors going on. Let me show you something. The JavaScript. Oh, I don't know if I ever knew that. Yeah, it's not black. It's like very dark, dark charcoal The JavaScript logo is in a font called Nutrophase, which is free only for personal use. So this website isn't a font that looks very similar to Nutrophase. So it's not quite the same, but it's like slightly more bold and like flayan. That's what we call ourselves. Yeah. Cool. Interesting. Yeah
The JavaScript logo is in a font called Nutrophase, which is free only for personal use. So this website isn't a font that looks very similar to Nutrophase. So it's not quite the same, but it's like slightly more bold and like flayan. That's what we call ourselves. Yeah. Cool. Interesting. Yeah Interesting. Yeah. But the real exciting thing is it's again not drama. You keep asking for drama. I'm sad to say I haven't delivered, but the TypeScript types for React and similar have been slightly inaccurate for quite some time
Interesting. Yeah. But the real exciting thing is it's again not drama. You keep asking for drama. I'm sad to say I haven't delivered, but the TypeScript types for React and similar have been slightly inaccurate for quite some time And the reason why is there needed to be like a new feature in TypeScript around how you describe JSX like this in-fax user like React, Selon, and so on. And this lovely individual Sebastian Silverman got a PR approved, emerged that has been open since October
And the reason why is there needed to be like a new feature in TypeScript around how you describe JSX like this in-fax user like React, Selon, and so on. And this lovely individual Sebastian Silverman got a PR approved, emerged that has been open since October And the next version of TypeScript is going to be much better for describing edge pieces of JSX types. So yay. Yay. People will be very happy about this
And the next version of TypeScript is going to be much better for describing edge pieces of JSX types. So yay. Yay. People will be very happy about this And anybody else working on anything cool, but before we forget, is your website using the exact same font? That's mean that it's to you, right? That is to me, yeah. Yeah. It was. And then I realized before personal use doesn't mean you can use it on your personal site
And anybody else working on anything cool, but before we forget, is your website using the exact same font? That's mean that it's to you, right? That is to me, yeah. Yeah. It was. And then I realized before personal use doesn't mean you can use it on your personal site It's for like stuff that you keep to yourself. So I switched to a from a neutral phase to League Spartan, which is like another very similar font. And now I'm working on that personal site. Eventually, I'll have it working. Okay. It's an intro
It's for like stuff that you keep to yourself. So I switched to a from a neutral phase to League Spartan, which is like another very similar font. And now I'm working on that personal site. Eventually, I'll have it working. Okay. It's an intro It's an intro. I feel like are you all going to be like streaming with Dan this coming week because he had these mainstreams that we have like the Elm. He is like a power off. Like he is always going. Isn't Astro like remix? But like slower. That's what I thought it was, right? Just kidding
It's an intro. I feel like are you all going to be like streaming with Dan this coming week because he had these mainstreams that we have like the Elm. He is like a power off. Like he is always going. Isn't Astro like remix? But like slower. That's what I thought it was, right? Just kidding Just kidding. Every time he asks, I say something stupider. But I love that. By the way, this is such good marker research, calling calling only now positively. Ask what your thing is to see what people say it is. Like that's such a good way of learning how people view your thing
Just kidding. Every time he asks, I say something stupider. But I love that. By the way, this is such good marker research, calling calling only now positively. Ask what your thing is to see what people say it is. Like that's such a good way of learning how people view your thing Like I asked people what types of abuse lent is and they have no fucking, probably no ethnic idea. And it's very upsetting. Oh, no, you can cast on here. I was like, I have a podcast called shit. You don't want to talk about that. That's right
Like I asked people what types of abuse lent is and they have no fucking, probably no ethnic idea. And it's very upsetting. Oh, no, you can cast on here. I was like, I have a podcast called shit. You don't want to talk about that. That's right That's right. Like I will say that since I don't understand Diddance because this was a few months ago, understand enough of like why choose Astro and how to talk about it compared to something else. I have to do like a presentation on it
That's right. Like I will say that since I don't understand Diddance because this was a few months ago, understand enough of like why choose Astro and how to talk about it compared to something else. I have to do like a presentation on it It was really difficult because it's still a little bit, but at the time, it's like, I don't know what's the difference between that and like starting up something as a react website. I don't know. I don't know. I know there's differences. So yes, there is still learning there to be done
It was really difficult because it's still a little bit, but at the time, it's like, I don't know what's the difference between that and like starting up something as a react website. I don't know. I don't know. I know there's differences. So yes, there is still learning there to be done Still learning. And that's that's the fun part of it. There's always something else to learn. And you can always feel like you're missing out because you're always missing out. And that's totally good because there's infinite content out there. Yes, yes. Yes, send those over. So down for that
Still learning. And that's that's the fun part of it. There's always something else to learn. And you can always feel like you're missing out because you're always missing out. And that's totally good because there's infinite content out there. Yes, yes. Yes, send those over. So down for that So down for that. And yeah, well, that is all I had today. Josh, anything else that you had for us? No, no, no, no, bye. Yeah, that's thanks. Buy my book, sponsor me on GitHub, sponsors or sponsor type GPS, like and subscribe to follow me on Twitch. I stream
So down for that. And yeah, well, that is all I had today. Josh, anything else that you had for us? No, no, no, no, bye. Yeah, that's thanks. Buy my book, sponsor me on GitHub, sponsors or sponsor type GPS, like and subscribe to follow me on Twitch. I stream I stream. But no, I'm just excited to see your progression. Like you're clearly like instinctively getting things such as the question of art and stuff. That's awesome. Really pleased. I really like it. I think the book is really I will say it's the theory stuff that I always really struggle with
I stream. But no, I'm just excited to see your progression. Like you're clearly like instinctively getting things such as the question of art and stuff. That's awesome. Really pleased. I really like it. I think the book is really I will say it's the theory stuff that I always really struggle with And also putting words to things that I already figured out how to do, but I didn't know that it actually had a word should go with it or phrase or whatever. And yay, I will check out this video
And also putting words to things that I already figured out how to do, but I didn't know that it actually had a word should go with it or phrase or whatever. And yay, I will check out this video And any preferences who we should rate to y'all, any, any requests before I click the raid because we got Chris Griffin. We got Ryan. Yeah, I was just about to say we got Ryan, solid. All right, we will go to Ryan. Please stand by. Y'all will raid when I don't know what it takes so long
And any preferences who we should rate to y'all, any, any requests before I click the raid because we got Chris Griffin. We got Ryan. Yeah, I was just about to say we got Ryan, solid. All right, we will go to Ryan. Please stand by. Y'all will raid when I don't know what it takes so long It's like ready to raid in like what do you want me to say during this time? It's going to be awkward. I so strongly relate to what you're saying. My first few raids, I was just like, bye. 14s or like nine seconds later, like what do you do? Yes, well now I actually get to hit raid. So, bye
It's like ready to raid in like what do you want me to say during this time? It's going to be awkward. I so strongly relate to what you're saying. My first few raids, I was just like, bye. 14s or like nine seconds later, like what do you do? Yes, well now I actually get to hit raid. So, bye So, bye. And end and bird.
So, bye. And end and bird.