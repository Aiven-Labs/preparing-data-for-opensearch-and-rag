Hello, hello beautiful humans. Welcome back to another episode of Teach Gentek. And we apparently have like the green crew here right now because you're wearing green. I'm wearing green. And also your mic was green at the moment. I love those color changing ones And yes, we are here for another episode with our guest Josh and he's going to be teaching us foundations of typescript. So I'm going to give this another shot. So many people reached out about the other episode and was like, Jen, don't give up on typescript. I don't know. I kind of want to
And yes, we are here for another episode with our guest Josh and he's going to be teaching us foundations of typescript. So I'm going to give this another shot. So many people reached out about the other episode and was like, Jen, don't give up on typescript. I don't know. I kind of want to I kind of want to. So Josh, please introduce yourself and a bit more about what we're going to be talking about today. Absolutely. Hey, everyone. Excited to be here. Thanks Jen for having me on. My name is Josh Goldberg. I'm a full-time open source maintainer in the type of ecosystem
I kind of want to. So Josh, please introduce yourself and a bit more about what we're going to be talking about today. Absolutely. Hey, everyone. Excited to be here. Thanks Jen for having me on. My name is Josh Goldberg. I'm a full-time open source maintainer in the type of ecosystem That means instead of working for a company and making real money like a good tech person. I work on shared open source tools and beg for money on the internet. So if you might have seen me floating around sometimes I contribute to typescript itself. Sometimes I contribute to random other projects
That means instead of working for a company and making real money like a good tech person. I work on shared open source tools and beg for money on the internet. So if you might have seen me floating around sometimes I contribute to typescript itself. Sometimes I contribute to random other projects Most notably I work on typescript ES lens, which is the tooling that lets you run ES lens. So I really care about people learning typescript, which is incidentally the name of the book that I wrote to teach typescript. And I'm excited for for Jen to give a second attempt here for typescript
Most notably I work on typescript ES lens, which is the tooling that lets you run ES lens. So I really care about people learning typescript, which is incidentally the name of the book that I wrote to teach typescript. And I'm excited for for Jen to give a second attempt here for typescript And I actually really respect that you're ready willing and able to do that so quickly. I think most people with most tech, it can take them a time or two or three to learn it
And I actually really respect that you're ready willing and able to do that so quickly. I think most people with most tech, it can take them a time or two or three to learn it And sometimes you just got to keep powering through until you find a, you know, an end strategy iteration that works for you. It's not always my favorite. And I appreciate that you do say that. But a lot of it is me being very, very stubborn as well
And sometimes you just got to keep powering through until you find a, you know, an end strategy iteration that works for you. It's not always my favorite. And I appreciate that you do say that. But a lot of it is me being very, very stubborn as well And yes, shout out to Ben connecting us and hi, Ben. Hey, Ben. It's, I would say something that I really, really appreciate about the, like the tech Twitter tech world is that that's how I met like so many amazing humans and built a community. So I'm very grateful for that
And yes, shout out to Ben connecting us and hi, Ben. Hey, Ben. It's, I would say something that I really, really appreciate about the, like the tech Twitter tech world is that that's how I met like so many amazing humans and built a community. So I'm very grateful for that And I am slowly going to be adding all your info into Twitch. Very slowly, because it says you cannot post over the $500, $500, $500 character limit. It can be $500. Come on. If we get enough subscriptions for that, $500. That would work. Awesome. Well, yay
And I am slowly going to be adding all your info into Twitch. Very slowly, because it says you cannot post over the $500, $500, $500 character limit. It can be $500. Come on. If we get enough subscriptions for that, $500. That would work. Awesome. Well, yay Awesome. Well, yay. And yes, I, Ben is actually the one that was like, yo, here's somebody that can re-teach you or teach you more about typescripts. And that is the world of networking. I know I talk about that a lot, but networking is your friend, even though learning all the tech and things
Awesome. Well, yay. And yes, I, Ben is actually the one that was like, yo, here's somebody that can re-teach you or teach you more about typescripts. And that is the world of networking. I know I talk about that a lot, but networking is your friend, even though learning all the tech and things Okay, what is your background? So, yeah, so I'm moving to Philadelphia from Brooklyn on Thursday, which is why it's this like the laugh and dated half dead well. But this is, this is a poster. I'm terrible with this is a poster that was drawn by Greg, the owner of the able community
Okay, what is your background? So, yeah, so I'm moving to Philadelphia from Brooklyn on Thursday, which is why it's this like the laugh and dated half dead well. But this is, this is a poster. I'm terrible with this is a poster that was drawn by Greg, the owner of the able community I wanted to share the option of years back. And it is a Mr Chief poster, which is like a parody of Master Chief from Halo that he's done a bunch of superimposed on a marathon poster, which is a marathon is the one of the game series, bungee maybe a re before Halo
I wanted to share the option of years back. And it is a Mr Chief poster, which is like a parody of Master Chief from Halo that he's done a bunch of superimposed on a marathon poster, which is a marathon is the one of the game series, bungee maybe a re before Halo So it's a deep cut mixed with a slightly deeper cut. Yeah, I did get I did get and that is I love the idea of how it's like the options of art in the world
So it's a deep cut mixed with a slightly deeper cut. Yeah, I did get I did get and that is I love the idea of how it's like the options of art in the world But like there's so much that we could unpack there and video games and that's a conversation for another day, because I have to remind myself to not completely derail all the time. So, how do you become an open source full time open source or that's a great question
But like there's so much that we could unpack there and video games and that's a conversation for another day, because I have to remind myself to not completely derail all the time. So, how do you become an open source full time open source or that's a great question Is that a term like what do you call yourself again? I call myself open source maintainer, but I don't know that that's the easiest set of words to where you're supposed to take quickly. I like open source. I've seen open source or where out there. Ooh, I like that one. That could be me
Is that a term like what do you call yourself again? I call myself open source maintainer, but I don't know that that's the easiest set of words to where you're supposed to take quickly. I like open source. I've seen open source or where out there. Ooh, I like that one. That could be me That could be me. I'd say it's not something that is easy to dive into at the very beginning of your career. I just happen to do a lot of open source stuff more and more over time, where at first I like would publish a project or two
That could be me. I'd say it's not something that is easy to dive into at the very beginning of your career. I just happen to do a lot of open source stuff more and more over time, where at first I like would publish a project or two I had one that went viral and like for a brief period of time had intention and then stopped. Then I just kept doing work in random open source libraries until earlier this year, really late last year
I had one that went viral and like for a brief period of time had intention and then stopped. Then I just kept doing work in random open source libraries until earlier this year, really late last year I realized what I was really passionate about the tooling that I want to work on is all open source. I wanted to work on TypeScript ESLint and my library is that do other static analysis for TypeScript and TypeScript itself
I realized what I was really passionate about the tooling that I want to work on is all open source. I wanted to work on TypeScript ESLint and my library is that do other static analysis for TypeScript and TypeScript itself So I've accumulated enough money and I have a spouse with health insurance. So I can make that risky jump and just do open source full time. That is very cool. And I just, okay, to unpack this just a little bit, but also to quiz myself
So I've accumulated enough money and I have a spouse with health insurance. So I can make that risky jump and just do open source full time. That is very cool. And I just, okay, to unpack this just a little bit, but also to quiz myself So open source is technically open source software, but everybody says open source. But if you type it, it's normally OSS. And open source means that anybody can contribute to it and anyone can use the code elsewhere as well
So open source is technically open source software, but everybody says open source. But if you type it, it's normally OSS. And open source means that anybody can contribute to it and anyone can use the code elsewhere as well Technically, there's also open source hardware like you might have hardware, schematics, like to be the printing stuff that's open source. So that's why people kind of use the terms interchangeably
Technically, there's also open source hardware like you might have hardware, schematics, like to be the printing stuff that's open source. So that's why people kind of use the terms interchangeably But yeah, I personally just deal with open source software, which is yep, so that anyone can look at anyone can send suggestions over to anyone who can use. So, and then also if we talk about Lintin, Lintin is how it
But yeah, I personally just deal with open source software, which is yep, so that anyone can look at anyone can send suggestions over to anyone who can use. So, and then also if we talk about Lintin, Lintin is how it How something will go through and find errors or like set an idea of like, hey, this is how something's going to be done. So kind of like a spell checker. Yeah, yeah, the analogy I like to use is that
How something will go through and find errors or like set an idea of like, hey, this is how something's going to be done. So kind of like a spell checker. Yeah, yeah, the analogy I like to use is that And traditional JavaScript Land, there's nothing that tells you whether your stuff is working until you run it. So yeah, a spell checker, the little like blue or green or whatever red squigglys in word. That's a good analogy for something that looks at your code doesn't actually run it
And traditional JavaScript Land, there's nothing that tells you whether your stuff is working until you run it. So yeah, a spell checker, the little like blue or green or whatever red squigglys in word. That's a good analogy for something that looks at your code doesn't actually run it It doesn't say it out loud, but it just knows, hey, this is probably a mistake here. And then before I start sharing my screen and going through all of that, I do want to put some stuff on screen with this is where to down there is where to follow Josh
It doesn't say it out loud, but it just knows, hey, this is probably a mistake here. And then before I start sharing my screen and going through all of that, I do want to put some stuff on screen with this is where to down there is where to follow Josh So let's go check out the book and that's where to follow on Twitter as well. And then we are right. And then we are using a plugin that I didn't know existed. So I wanted to share the knowledge here of that it can share its life share. And I'm still in a VS code
So let's go check out the book and that's where to follow on Twitter as well. And then we are right. And then we are using a plugin that I didn't know existed. So I wanted to share the knowledge here of that it can share its life share. And I'm still in a VS code So that gets everyone caught up and share my screen. And please definitely share any questions that you have while we're doing this to I don't know if the chat will make it too small for everything. But well, that's a little too big
So that gets everyone caught up and share my screen. And please definitely share any questions that you have while we're doing this to I don't know if the chat will make it too small for everything. But well, that's a little too big Okay, is that easy enough to see everybody sweet? I don't know about anybody else. Good to me. Nope. All right. So please talk us through what you have magically set up for us. All right. So let's start from scratch actually
Okay, is that easy enough to see everybody sweet? I don't know about anybody else. Good to me. Nope. All right. So please talk us through what you have magically set up for us. All right. So let's start from scratch actually I suppose you have a variable on the left is the source file that we're going to be working with. And what I want to show here first is writing code and TypeScript and that it gets compiled to JavaScript
I suppose you have a variable on the left is the source file that we're going to be working with. And what I want to show here first is writing code and TypeScript and that it gets compiled to JavaScript The first thing you got to understand about TypeScript is that it is a language a lot like JavaScript. So instead of having JS files, you have Ts files, but they're basically equivalent to the JS files you would written in JavaScript. I have in my terminal, you can ignore the errors
The first thing you got to understand about TypeScript is that it is a language a lot like JavaScript. So instead of having JS files, you have Ts files, but they're basically equivalent to the JS files you would written in JavaScript. I have in my terminal, you can ignore the errors I have in my terminal TSC.w running, which is a TypeScript compiler. And that takes files that end in Ts and turn them into the equivalent.js file. And as you may have noticed, the, the let my name equals Jen variable on the left looks the same as the let my name equals Jen variable the rights
I have in my terminal TSC.w running, which is a TypeScript compiler. And that takes files that end in Ts and turn them into the equivalent.js file. And as you may have noticed, the, the let my name equals Jen variable on the left looks the same as the let my name equals Jen variable the rights And as we go through types of things, we're going to add features and see places where TypeScript can like fix and find issues for us. But the really core concept is that you're writing code that looks a lot like JavaScript and behaves basically the same as it would in JavaScript
And as we go through types of things, we're going to add features and see places where TypeScript can like fix and find issues for us. But the really core concept is that you're writing code that looks a lot like JavaScript and behaves basically the same as it would in JavaScript Does that make sense and seem reasonable so far? And just to like double check. So first off, it will not auto translate to JavaScript. It's because you used something in your terminal to auto. Yeah, to auto share. And then we just got a question as well. So I'm going to interrupt myself
Does that make sense and seem reasonable so far? And just to like double check. So first off, it will not auto translate to JavaScript. It's because you used something in your terminal to auto. Yeah, to auto share. And then we just got a question as well. So I'm going to interrupt myself Just look to you up question in your course. Do you teach bracket generics? Yes, that's a feature. I don't think we'll have time in the stream today to go into it. But yeah, in the book, I do have a whole chapter on generics. It's my least favorite one. But it was a good chapter
Just look to you up question in your course. Do you teach bracket generics? Yes, that's a feature. I don't think we'll have time in the stream today to go into it. But yeah, in the book, I do have a whole chapter on generics. It's my least favorite one. But it was a good chapter Well, does will need Josh to come back on. So we'll just bug him for that and get him back on the show again. It's my hope. So everybody asks lots of questions, play nice. You know, I'm more saying that to myself. So don't scare anybody away
Well, does will need Josh to come back on. So we'll just bug him for that and get him back on the show again. It's my hope. So everybody asks lots of questions, play nice. You know, I'm more saying that to myself. So don't scare anybody away Okay, so that's how we're translating it over to TypeScript to JavaScript. And then I'm trying to think of like a really good comparison
Okay, so that's how we're translating it over to TypeScript to JavaScript. And then I'm trying to think of like a really good comparison And my grandmother is coming to my of TypeScript versus JavaScript of if in, you know, back in the day, anyone that was a secretary had to create shorthand, which looked kind of crazy. And the same thing
And my grandmother is coming to my of TypeScript versus JavaScript of if in, you know, back in the day, anyone that was a secretary had to create shorthand, which looked kind of crazy. And the same thing And the same thing. It was because they had to take notes so quickly because transcription didn't really exist back then. But it technically was the same same information. It was just in a very, very short version of it to make it easier to take notes and still make everything is pretty
And the same thing. It was because they had to take notes so quickly because transcription didn't really exist back then. But it technically was the same same information. It was just in a very, very short version of it to make it easier to take notes and still make everything is pretty Is that kind of like a good way of comparing these. But it is a good analogy except for one thing. TypeScript code looks. TypeScript code is a superset of JavaScript code, meaning it is that I think I think that was on the last room to that term
Is that kind of like a good way of comparing these. But it is a good analogy except for one thing. TypeScript code looks. TypeScript code is a superset of JavaScript code, meaning it is that I think I think that was on the last room to that term TypeScript, the language includes all the stuff in JavaScript, the exact same as JavaScript along with things. So shorthands, short. It's a good analogy in that. Yeah, like they mean the same thing. They just look differently. My one, my one gripe there is that it's kind of the other way
TypeScript, the language includes all the stuff in JavaScript, the exact same as JavaScript along with things. So shorthands, short. It's a good analogy in that. Yeah, like they mean the same thing. They just look differently. My one, my one gripe there is that it's kind of the other way It's that like the TypeScript code will have more stuff than the JavaScript and the only difference between the T S and the JS is that anything like TypeScript developer time specific gets removed when it gets turned into JavaScript
It's that like the TypeScript code will have more stuff than the JavaScript and the only difference between the T S and the JS is that anything like TypeScript developer time specific gets removed when it gets turned into JavaScript So maybe another analogy would be like TypeScript would be like if you're writing an essay and you have a lot of notes from like proofreader in there, like a little arrow here, like, hey, this word looks bad or hey, that's a really good sentence there
So maybe another analogy would be like TypeScript would be like if you're writing an essay and you have a lot of notes from like proofreader in there, like a little arrow here, like, hey, this word looks bad or hey, that's a really good sentence there But then when you turn that into the output PDF, all those little like side arrow things get removed and it just looks like the words itself. Does that feel like an equivalent analogy to you. It does
But then when you turn that into the output PDF, all those little like side arrow things get removed and it just looks like the words itself. Does that feel like an equivalent analogy to you. It does It does. I think I really and I don't know if I asked this in the last stream as well as straight up asked you why would somebody use TypeScript compared to JavaScript. Oh, great question. Let's look at variables. Okay. So here I'm just going to close my end. Okay. So let's say that you have this
It does. I think I really and I don't know if I asked this in the last stream as well as straight up asked you why would somebody use TypeScript compared to JavaScript. Oh, great question. Let's look at variables. Okay. So here I'm just going to close my end. Okay. So let's say that you have this My name variable TypeScript keeps track of the types of all your values of all your things. If you were to hover your mouse and actually could you please help your mouse over the variable. My name on your type of file. Yeah, TypeScript sees that it's type string because it's initial value is Jen
My name variable TypeScript keeps track of the types of all your values of all your things. If you were to hover your mouse and actually could you please help your mouse over the variable. My name on your type of file. Yeah, TypeScript sees that it's type string because it's initial value is Jen So later on, if you do my name equals Josh, that's allowed because Josh, the string is a string. But if you're to do like my name equals undefined
So later on, if you do my name equals Josh, that's allowed because Josh, the string is a string. But if you're to do like my name equals undefined I could yell at you and if you hover your mouse over the my name that has the red squiggly, it would complain that, hey, you said, or you were initially set up the variable as string. But now you're trying to give it undefined. That's not allowed
I could yell at you and if you hover your mouse over the my name that has the red squiggly, it would complain that, hey, you said, or you were initially set up the variable as string. But now you're trying to give it undefined. That's not allowed That's not allowed. So TypeScript keeps track of the types of all your things and yells at you if you put something in a place that doesn't match the type, which can be really useful if you have code that expects say a variable to be a string. And not undefined
That's not allowed. So TypeScript keeps track of the types of all your things and yells at you if you put something in a place that doesn't match the type, which can be really useful if you have code that expects say a variable to be a string. And not undefined And not undefined. What how does that feel? Very simple and complicated at the same time, which is like all of text. So I'm going to say cool and let's keep moving because it'll probably click later on
And not undefined. What how does that feel? Very simple and complicated at the same time, which is like all of text. So I'm going to say cool and let's keep moving because it'll probably click later on TypeScript is one of those things where it really is most beneficial when you have a few files or more in a project. If you have just one file and it's like this little note script you're writing for fun or something, maybe don't use TypeScript
TypeScript is one of those things where it really is most beneficial when you have a few files or more in a project. If you have just one file and it's like this little note script you're writing for fun or something, maybe don't use TypeScript But if you have say a whole bunch of functions and objects and classes and stuff all working together, it's really nice having TypeScript tell you what everything is expected to be because then as you change stuff, it'll let you know what you need to update to account for the new shapes
But if you have say a whole bunch of functions and objects and classes and stuff all working together, it's really nice having TypeScript tell you what everything is expected to be because then as you change stuff, it'll let you know what you need to update to account for the new shapes Yeah, we can keep going. But does that kind of context? Yes, and since you reasonable so far. Yes, thank you. Cool. So the first concept that we'll see that's types of specific is the concept of a type annotation. Let's I'm just going to comment these things out and keep going. So my name delayed
Yeah, we can keep going. But does that kind of context? Yes, and since you reasonable so far. Yes, thank you. Cool. So the first concept that we'll see that's types of specific is the concept of a type annotation. Let's I'm just going to comment these things out and keep going. So my name delayed So my name delayed. This is a variable and we don't know what's supposed to go in it. We could give it a name. We could give it a. A fully in false. This is all allowed. So patchwork, let's you say on your variables
So my name delayed. This is a variable and we don't know what's supposed to go in it. We could give it a name. We could give it a. A fully in false. This is all allowed. So patchwork, let's you say on your variables If they don't have an initial value, I will later assign a particular value type to them later on
If they don't have an initial value, I will later assign a particular value type to them later on I'm only ever going to put a string in this container, which means that line three named the latest Josh is allowed, but assigning false is not allowed because well, you said it would be a string and a string is not a Boolean. Makes sense so far. Yes, thank you. Awesome
I'm only ever going to put a string in this container, which means that line three named the latest Josh is allowed, but assigning false is not allowed because well, you said it would be a string and a string is not a Boolean. Makes sense so far. Yes, thank you. Awesome Awesome. So there are two things actually three things that I want to call out here. One is that this is why I asked you to have a JS file open on the right at the same time that colon space string does not get out
Awesome. So there are two things actually three things that I want to call out here. One is that this is why I asked you to have a JS file open on the right at the same time that colon space string does not get out So if you were to try to copy and paste the types of code in the browser, it wouldn't work because JavaScript has no idea what a type annotation is. Got it. Okay. That's what we mean when we say it's a superset that it's JavaScript plus things like type annotations
So if you were to try to copy and paste the types of code in the browser, it wouldn't work because JavaScript has no idea what a type annotation is. Got it. Okay. That's what we mean when we say it's a superset that it's JavaScript plus things like type annotations But if you turn it into JavaScript, those type annotations get removed. The reason that we would want to do it with type annotation is because it will help define it as a string and not do, but we could still do multiple strings like my name delayed could be Jen. Okay. It's starting to make sense
But if you turn it into JavaScript, those type annotations get removed. The reason that we would want to do it with type annotation is because it will help define it as a string and not do, but we could still do multiple strings like my name delayed could be Jen. Okay. It's starting to make sense But if we left it undefined, undefined, there we go. That's the word. Then it could have been anything
But if we left it undefined, undefined, there we go. That's the word. Then it could have been anything The type terminology would be something like untiped or, but the technical term for this specific scenario is actually the perhaps slightly convoluted name evolving any meaning the variables starts off as the type any, which means any type in the universe. I have no idea what it is
The type terminology would be something like untiped or, but the technical term for this specific scenario is actually the perhaps slightly convoluted name evolving any meaning the variables starts off as the type any, which means any type in the universe. I have no idea what it is That's the type scripts term. And then later on, as you assign values to it, type script will know what type it is. Like if you were to hover over it online eight type script would know that it's type string. If you were to hover over it online, well, they would know that it's type Boolean
That's the type scripts term. And then later on, as you assign values to it, type script will know what type it is. Like if you were to hover over it online eight type script would know that it's type string. If you were to hover over it online, well, they would know that it's type Boolean So it's an evolving initially any variable. Okay. Okay. That's what I'm going with. Anybody in the, you know, the beautiful humans watching and listening have questions and also, hi, homie. Hi, homie
So it's an evolving initially any variable. Okay. Okay. That's what I'm going with. Anybody in the, you know, the beautiful humans watching and listening have questions and also, hi, homie. Hi, homie Hi, homie. And simple sphere definitely let us know if you have questions, because I may not know the questions to ask. So if anything comes up, please let us know. Oh, look, it's Anthony. What up, Anthony? We were talking about you before we went live. Just as a heads up
Hi, homie. And simple sphere definitely let us know if you have questions, because I may not know the questions to ask. So if anything comes up, please let us know. Oh, look, it's Anthony. What up, Anthony? We were talking about you before we went live. Just as a heads up Just as a heads up. Now we're talking about a lot of you actually. Then we were talking about you. Homie, we weren't talking about you, but I talk about you a lot. So I get excited when it's like retarded people, because I'm like, yay, we're making a crew. We got the beautiful human crew
Just as a heads up. Now we're talking about a lot of you actually. Then we were talking about you. Homie, we weren't talking about you, but I talk about you a lot. So I get excited when it's like retarded people, because I'm like, yay, we're making a crew. We got the beautiful human crew That's like everyone in the world, but we're slowly building out this crew. The cream of the crop, you know, the best. Exactly, exactly. Okay. So, oh, we got one for Anthony. How many types could he type script type if a type script could type scripts? Wow. Thank you
That's like everyone in the world, but we're slowly building out this crew. The cream of the crop, you know, the best. Exactly, exactly. Okay. So, oh, we got one for Anthony. How many types could he type script type if a type script could type scripts? Wow. Thank you Thank you. Even if a type script could type scripts, a type script could type all the scripts that a type script could type, but a type script can't type scripts. I think that's like a logical answer to that question. I think that's a good answer to a. Yeah. Ben said 12. Maybe 42. Who knows? Okay
Thank you. Even if a type script could type scripts, a type script could type all the scripts that a type script could type, but a type script can't type scripts. I think that's like a logical answer to that question. I think that's a good answer to a. Yeah. Ben said 12. Maybe 42. Who knows? Okay Who knows? Okay. Dope. So, this is definitely making a bit more sense now that we've used that. But where do we end up moving from here? I want to actually make that a little bit up to you and confirm with you
Who knows? Okay. Dope. So, this is definitely making a bit more sense now that we've used that. But where do we end up moving from here? I want to actually make that a little bit up to you and confirm with you My guess, and please tell me if I'm wrong, is that you're starting to see like how the types of some works like typescript knows what types things are. You can say what type something is and if you add a different type of yells at you. But this isn't looking super useful yet
My guess, and please tell me if I'm wrong, is that you're starting to see like how the types of some works like typescript knows what types things are. You can say what type something is and if you add a different type of yells at you. But this isn't looking super useful yet Like we haven't shown any bugs that would be caught. It's just, okay, I guess we can do that. Why would you bother? Is that right? Yes. Yes. I think just like knowing, like, seeing something that. Even if it may not make sense yet, like, like where you would use it. But like actually seeing how
Like we haven't shown any bugs that would be caught. It's just, okay, I guess we can do that. Why would you bother? Is that right? Yes. Yes. I think just like knowing, like, seeing something that. Even if it may not make sense yet, like, like where you would use it. But like actually seeing how Something maybe made with it other than just like. Hello world. The canonical like first thing that a lot of people do with typescript is a greater function, which takes in, let's say a name. And then we're like, log, hello name
Something maybe made with it other than just like. Hello world. The canonical like first thing that a lot of people do with typescript is a greater function, which takes in, let's say a name. And then we're like, log, hello name Like a lot of the older type of examples they used to do is like greater function and greater classes. So let's say we want to, who do you want to greet? Give me a name. Beautiful human. Awesome
Like a lot of the older type of examples they used to do is like greater function and greater classes. So let's say we want to, who do you want to greet? Give me a name. Beautiful human. Awesome Awesome. So right now I have a type script setting enabled call no, what's it any, which says you have to give me a type on anything that I wouldn't immediately be able to tell the type of. So just looking at the code, we're going to have to give a type to name the parameter
Awesome. So right now I have a type script setting enabled call no, what's it any, which says you have to give me a type on anything that I wouldn't immediately be able to tell the type of. So just looking at the code, we're going to have to give a type to name the parameter So just off the top of your head, what would you guess the type or name to be? Like what would I put after the colon space? String. Yeah. So let's say that we've been factor this function
So just off the top of your head, what would you guess the type or name to be? Like what would I put after the colon space? String. Yeah. So let's say that we've been factor this function Let's say that instead of calling it greater state and a name string, we instead take in first name string and then also it's cross lines, then last name string. Now, type script is yelling at us because we've refactored our code, we've changed it, but not all the colors of that code are updated
Let's say that instead of calling it greater state and a name string, we instead take in first name string and then also it's cross lines, then last name string. Now, type script is yelling at us because we've refactored our code, we've changed it, but not all the colors of that code are updated So strictly two places are complaining. One is that your console logs still refers to name, which interestingly actually is a global variable that exists. But is deprecated. So on my screen, it has a strike through on it, and I don't know why it yours it doesn't. It has the dots. Let's see
So strictly two places are complaining. One is that your console logs still refers to name, which interestingly actually is a global variable that exists. But is deprecated. So on my screen, it has a strike through on it, and I don't know why it yours it doesn't. It has the dots. Let's see Let's see. Oh, it is. Okay. All right. And then this one. No, go back
Let's see. Oh, it is. Okay. All right. And then this one. No, go back So that's a type script complaint type, you're busy yelling at you expected to arguments, but got what
So that's a type script complaint type, you're busy yelling at you expected to arguments, but got what So you can imagine if you have a function that's used a lot of places and you change the function signature, meaning what it's called with and or whatever turns, it would be real nice to know all the places that complain
So you can imagine if you have a function that's used a lot of places and you change the function signature, meaning what it's called with and or whatever turns, it would be real nice to know all the places that complain So in this case, you can change it by let's say first name beautiful last name human. And then first name last name. That makes sense. Seem reasonable to far. Yes. Yes. Cool
So in this case, you can change it by let's say first name beautiful last name human. And then first name last name. That makes sense. Seem reasonable to far. Yes. Yes. Cool Yes. Yes. Cool. And also just want to emphasize on the right, it's the same code except no colon space string is anywhere in the JavaScript because that is a type of thing. Right. Right. I can see the wheels churning in your head
Yes. Yes. Cool. And also just want to emphasize on the right, it's the same code except no colon space string is anywhere in the JavaScript because that is a type of thing. Right. Right. I can see the wheels churning in your head How does this feel
How does this feel I think it's making enough sense something that I've realized from the very beginning and I'm pretty sure Anthony has probably yelled at me to do, but I'm finally going to do it is like creating shorter videos of like understanding it and redoing it myself because I like at the moment it makes sense yet in like the big picture of things
I think it's making enough sense something that I've realized from the very beginning and I'm pretty sure Anthony has probably yelled at me to do, but I'm finally going to do it is like creating shorter videos of like understanding it and redoing it myself because I like at the moment it makes sense yet in like the big picture of things I think it's 100% by it makes enough sense to follow along. Okay. Cool. I want to bring up then a few topics that build on this and then we'll also introduce something called a union type, which is which sounds weird and different, but it's actually like really applicable and cool and programming
I think it's 100% by it makes enough sense to follow along. Okay. Cool. I want to bring up then a few topics that build on this and then we'll also introduce something called a union type, which is which sounds weird and different, but it's actually like really applicable and cool and programming So I'm going to make a variable like greeted and then let's say that like instead of greeter. Council logging the message it like const message equals it creates the message and then just also let's say return some message in addition to cancel logging it. That's good
So I'm going to make a variable like greeted and then let's say that like instead of greeter. Council logging the message it like const message equals it creates the message and then just also let's say return some message in addition to cancel logging it. That's good That's good. Then knows that this greeted variable is type string. But we never actually explicitly told types of anywhere that the function returns string and then this variable is type string
That's good. Then knows that this greeted variable is type string. But we never actually explicitly told types of anywhere that the function returns string and then this variable is type string Type just knows this function happens to return string and knows that by reading the contents of the function and seeing the return message. And then greeted is a is a variable whose value starts off as the result of that function
Type just knows this function happens to return string and knows that by reading the contents of the function and seeing the return message. And then greeted is a is a variable whose value starts off as the result of that function So if you were to hover online 10 over the name greeted you again would see greeted. String. Does it make sense that types could be able to figure that out and that that would be like a reasonable understanding. Is greeter a normal function. So that's why it's able to read it
So if you were to hover online 10 over the name greeted you again would see greeted. String. Does it make sense that types could be able to figure that out and that that would be like a reasonable understanding. Is greeter a normal function. So that's why it's able to read it Or if I said, like is there another function we could use to replace greeter for another example for greeter and greeted. Sure. Let's say you wanted to do like
Or if I said, like is there another function we could use to replace greeter for another example for greeter and greeted. Sure. Let's say you wanted to do like Let's very greeted or like name upper equals gen dot to upper case typescript knows that to upper case on the string is a string method that returns a string. So the variable name upper would then be type string
Let's very greeted or like name upper equals gen dot to upper case typescript knows that to upper case on the string is a string method that returns a string. So the variable name upper would then be type string Even though you never explicitly said I must put a string here typescript just reads your code and understands. Got it. And then Ben said in really big projects you often find yourself exporting files from one file and importing them and using them in other files
Even though you never explicitly said I must put a string here typescript just reads your code and understands. Got it. And then Ben said in really big projects you often find yourself exporting files from one file and importing them and using them in other files Because of that you'll often have less visibility whenever the function signature changes. So this kind of red squiggle vacation is really good for seeing how changes propagate throughout the code base
Because of that you'll often have less visibility whenever the function signature changes. So this kind of red squiggle vacation is really good for seeing how changes propagate throughout the code base So you don't miss miss any places you need to fix it and then should be exporting functions from one file. So is typescript more helpful also in like classes and that type of thing then. Oh, I like red squiggle vacation as a term. That's a really good. I do too. Yeah
So you don't miss miss any places you need to fix it and then should be exporting functions from one file. So is typescript more helpful also in like classes and that type of thing then. Oh, I like red squiggle vacation as a term. That's a really good. I do too. Yeah I do too. Yeah. I feel like we just need to keep that forever. What red squiggle vacation. It's a good one. I won't say that type script is more helpful when you have classes. I would say type script is similarly or also helpful when you have a lot of classes
I do too. Yeah. I feel like we just need to keep that forever. What red squiggle vacation. It's a good one. I won't say that type script is more helpful when you have classes. I would say type script is similarly or also helpful when you have a lot of classes TypeScript doesn't care if you're using like traditional object oriented programming or a lot of classes or if you're functional and use a lot of functions
TypeScript doesn't care if you're using like traditional object oriented programming or a lot of classes or if you're functional and use a lot of functions It does the same logic no matter what classes it lets you define the what the members are supposed to be and what the methods are supposed to take in at return. Same thing with functions
It does the same logic no matter what classes it lets you define the what the members are supposed to be and what the methods are supposed to take in at return. Same thing with functions You can say what their parameters are supposed to take in and be and then you can also say what types variables are in both worlds. So either way typescript red squiggleifies whenever you mess up. Got it. Okay. And hello, hello, Barney
You can say what their parameters are supposed to take in and be and then you can also say what types variables are in both worlds. So either way typescript red squiggleifies whenever you mess up. Got it. Okay. And hello, hello, Barney How's it going? Thank you for joining and let us know when you have questions. I'm. It's sinking it. It's sinking it. It's getting there. It's getting there. Cool. Let me show you a function then that. Copy all or comment all this
How's it going? Thank you for joining and let us know when you have questions. I'm. It's sinking it. It's sinking it. It's getting there. It's getting there. Cool. Let me show you a function then that. Copy all or comment all this Let me show you a function that has an optional parameter function greets name maybe which takes in a full name. That's supposed to be a string. Hello. Full name that to upper case
Let me show you a function that has an optional parameter function greets name maybe which takes in a full name. That's supposed to be a string. Hello. Full name that to upper case Now what if you're supposed to what if you're supposed to change this later on like say worked well for a while but then later on. We're refacking a word supposed to be able to call it what undefined
Now what if you're supposed to what if you're supposed to change this later on like say worked well for a while but then later on. We're refacking a word supposed to be able to call it what undefined And so we're just going to say that we're supposed to have a full name that is supposed to be supposed to be intentional like maybe this is supposed to
And so we're just going to say that we're supposed to have a full name that is supposed to be supposed to be intentional like maybe this is supposed to I know to do different behavior if full name isn't provided well per per the red squiggle vacation type of is now mad at us because we expected one arguments, one argument and got zero. So there's a way in typescript plans. Oh yes, thank you. I'm going to put a question mark before the colon
I know to do different behavior if full name isn't provided well per per the red squiggle vacation type of is now mad at us because we expected one arguments, one argument and got zero. So there's a way in typescript plans. Oh yes, thank you. I'm going to put a question mark before the colon For the parameter. That says I might not provide it but if I do I should provide it as a strength. But now we have a complaint here from typescript because we we have said that full name that to upper case is going to happen but full name might not exist
For the parameter. That says I might not provide it but if I do I should provide it as a strength. But now we have a complaint here from typescript because we we have said that full name that to upper case is going to happen but full name might not exist So I'm going to give me a favor and hover over the full name that's got the red squiggly on there. Yeah, type of is going at us rightfully so because it sees that we are calling a method on a value that might not be defined. So this is the concept of a union type
So I'm going to give me a favor and hover over the full name that's got the red squiggly on there. Yeah, type of is going at us rightfully so because it sees that we are calling a method on a value that might not be defined. So this is the concept of a union type The full name parameter inside the function is either a string or under find. And if you were to hover your mouse over it you would get the colon space string or under find which you saw when you're hovering. There, a union type is an either or it's either of those possible things
The full name parameter inside the function is either a string or under find. And if you were to hover your mouse over it you would get the colon space string or under find which you saw when you're hovering. There, a union type is an either or it's either of those possible things And typescript does that if you call a method on a union type that includes say undefined that might cause a crash because it might be undefined. Yay. Okay. Is that same reasonable so far you look happy. Yes, yes, it's clicking more. It is clicking more. Yay. Awesome
And typescript does that if you call a method on a union type that includes say undefined that might cause a crash because it might be undefined. Yay. Okay. Is that same reasonable so far you look happy. Yes, yes, it's clicking more. It is clicking more. Yay. Awesome Yay. Awesome. And what about the carry? Hello. Hello world. One of the one of the ways you can work around type union types giving you complaints is by fixing the code. This code is legitimately broken if you were to run this file you you would get a crash
Yay. Awesome. And what about the carry? Hello. Hello world. One of the one of the ways you can work around type union types giving you complaints is by fixing the code. This code is legitimately broken if you were to run this file you you would get a crash You would something like two uppercase of undefined or some length. So what you do is you can introduce logic in your code. Let's say a full name otherwise. You can use a new phone, this or something. Now notice that here typescript is no longer complaining
You would something like two uppercase of undefined or some length. So what you do is you can introduce logic in your code. Let's say a full name otherwise. You can use a new phone, this or something. Now notice that here typescript is no longer complaining Before the if statements the block what everyone call full name is type string or undefined. But inside it's just type string
Before the if statements the block what everyone call full name is type string or undefined. But inside it's just type string And this is because typescript is our a reader code and it knows this if statements if block whatever that starts on line four is only going to get run the contents are only happening if full name is defined if it's truthy
And this is because typescript is our a reader code and it knows this if statements if block whatever that starts on line four is only going to get run the contents are only happening if full name is defined if it's truthy Which means there's no way that line seven could crash because full name is definitely string and not undefined. We have narrowed the type that's the keyboard type narrowing to be just string
Which means there's no way that line seven could crash because full name is definitely string and not undefined. We have narrowed the type that's the keyboard type narrowing to be just string How does that feel? It's thinking in it is thinking in like it's thinking and and full names in this function. I would actually I would plus one that like hover your mouse over where full name is and see that inside the if it is string and then outside it's string or undefined
How does that feel? It's thinking in it is thinking in like it's thinking and and full names in this function. I would actually I would plus one that like hover your mouse over where full name is and see that inside the if it is string and then outside it's string or undefined Typecript has evolved a better understanding of the type it's narrowed it down. Okay. Actually if you if you hover inside the else statement it would say string or undefined because that else still happens even if it's undefined or if it's the blank string
Typecript has evolved a better understanding of the type it's narrowed it down. Okay. Actually if you if you hover inside the else statement it would say string or undefined because that else still happens even if it's undefined or if it's the blank string Fun fact I actually have a pending pull request an issue opening against type script so that it would say blank string or undefined in the else because that's technically more accurate that those are the only two values it could be
Fun fact I actually have a pending pull request an issue opening against type script so that it would say blank string or undefined in the else because that's technically more accurate that those are the only two values it could be But it's blocked on well we don't know why this would actually be useful to anyone so if you have any bugs in your head that you can think of let me know otherwise sweet still work thank you thank you
But it's blocked on well we don't know why this would actually be useful to anyone so if you have any bugs in your head that you can think of let me know otherwise sweet still work thank you thank you Okay that's that's a unit type and type narrowing and optional function parameter all rolled into one example and I will tell you that I have seen and caught legitimate production bugs in code
Okay that's that's a unit type and type narrowing and optional function parameter all rolled into one example and I will tell you that I have seen and caught legitimate production bugs in code So I'm just converting to the type script on this exact type of thing where people assume that something is always going to be defined but actually they sometimes provide like dollar undefined and this is so common in industry that it's actually got a term this is what's called the billion dollar mistake it's trying
So I'm just converting to the type script on this exact type of thing where people assume that something is always going to be defined but actually they sometimes provide like dollar undefined and this is so common in industry that it's actually got a term this is what's called the billion dollar mistake it's trying Have you ever heard of this thing no oh my god I love it it's it was coined by Tony I don't know how to say his last name exactly HO A or hour
Have you ever heard of this thing no oh my god I love it it's it was coined by Tony I don't know how to say his last name exactly HO A or hour And from like the early days of I forget if it's C or C++ or what but the idea that you can provide a null value to something that's supposed to be taking in like a real thing has caused so much pain and bugs in the industry that he thinks it's been over a billion dollars of damage so types of actually solves the billion dollar mistake it doesn't let you provide undefined where you expect something like this string
And from like the early days of I forget if it's C or C++ or what but the idea that you can provide a null value to something that's supposed to be taking in like a real thing has caused so much pain and bugs in the industry that he thinks it's been over a billion dollars of damage so types of actually solves the billion dollar mistake it doesn't let you provide undefined where you expect something like this string Okay. Okay. Yes, yes, maybe yes. We do have a question why to put full name in line to and it's to call the full name in the above string right it's not it asked for that
Okay. Okay. Yes, yes, maybe yes. We do have a question why to put full name in line to and it's to call the full name in the above string right it's not it asked for that But it there so that it's somewhere you can hover your mouse over they don't actually do anything we could comment the middle one change anything. Good question Barry. Good question. Glad you asked. Yay. Okay. Oh
But it there so that it's somewhere you can hover your mouse over they don't actually do anything we could comment the middle one change anything. Good question Barry. Good question. Glad you asked. Yay. Okay. Oh Yay. Okay. Oh. Now I'm going to do it to the rest of it just so it'll still work if we get rid of all of these. Yes. I apologize for not explicitly calling that out they don't do anything. Okay. Makes sense. Yeah
Yay. Okay. Oh. Now I'm going to do it to the rest of it just so it'll still work if we get rid of all of these. Yes. I apologize for not explicitly calling that out they don't do anything. Okay. Makes sense. Yeah Makes sense. Yeah. So there are kind of three topics that I think are like the crucial important thing for understanding TypeScript. One is that it's a superset a JavaScript that what you're working with here is JavaScript with like a little extra stuff added on
Makes sense. Yeah. So there are kind of three topics that I think are like the crucial important thing for understanding TypeScript. One is that it's a superset a JavaScript that what you're working with here is JavaScript with like a little extra stuff added on But when you compile it down to something that gets run on your actual app, it's just the JavaScript contents
But when you compile it down to something that gets run on your actual app, it's just the JavaScript contents The second thing is the concept of type checking that TypeScript knows what types things are and it can form things kind of union types when something could be more than one value which then lets it know to tell you to narrow it down before calling it is just one of the values
The second thing is the concept of type checking that TypeScript knows what types things are and it can form things kind of union types when something could be more than one value which then lets it know to tell you to narrow it down before calling it is just one of the values Do those kind of make sense seem reasonable. Yes. Yes. So that is a treasure trove of good phrases. Yes. That's good with seasoning. All right. Is this one things get spicy? This is when things get spicy
Do those kind of make sense seem reasonable. Yes. Yes. So that is a treasure trove of good phrases. Yes. That's good with seasoning. All right. Is this one things get spicy? This is when things get spicy More season developer is using the third concept is the concept of an interface or type an object type. Let's say that you have a let my value or my poet. I shamelessly copy and paste it from my book and my book each chapter is like a different need of things people do. Perfect
More season developer is using the third concept is the concept of an interface or type an object type. Let's say that you have a let my value or my poet. I shamelessly copy and paste it from my book and my book each chapter is like a different need of things people do. Perfect Perfect. So let's say you have a poet and the poet's shape is actually I'm just going to copy a full variable is this. TypeScript can then not just tell you when things are wrong but also give you utilities and development time because it knows things about your code
Perfect. So let's say you have a poet and the poet's shape is actually I'm just going to copy a full variable is this. TypeScript can then not just tell you when things are wrong but also give you utilities and development time because it knows things about your code For example, it knows that poet dot. It only be completed with born a name and actually can I ask you to type out poet dots on a line. So that we can see on your screen the suggestions that comes up with. There you go
For example, it knows that poet dot. It only be completed with born a name and actually can I ask you to type out poet dots on a line. So that we can see on your screen the suggestions that comes up with. There you go There you go. So this is another answer to why is TypeScript useful because TypeScript can help you develop TypeScript knows that it just has born a name. Well, Okay. Was that your next curiosity of does born have other things on it that TypeScript would know. Or how
There you go. So this is another answer to why is TypeScript useful because TypeScript can help you develop TypeScript knows that it just has born a name. Well, Okay. Was that your next curiosity of does born have other things on it that TypeScript would know. Or how Or how. And how would you know in JavaScript enough to. How would you put both there if you. You would just put poet never mind. I answered my own question. That's exciting at least. Okay, that does make sense. Cool. And actually I like what you're doing before
Or how. And how would you know in JavaScript enough to. How would you put both there if you. You would just put poet never mind. I answered my own question. That's exciting at least. Okay, that does make sense. Cool. And actually I like what you're doing before Could you click or type period again. Yeah. So TypeScript knows what exists on say numbers. So it knows that numbers just have these methods, most of which I have never used in my actual code. But like too fixed is a thing you can do on numbers. Fun fact
Could you click or type period again. Yeah. So TypeScript knows what exists on say numbers. So it knows that numbers just have these methods, most of which I have never used in my actual code. But like too fixed is a thing you can do on numbers. Fun fact Fun fact. And if you do poet dot name, it'll know that name has like two uppercase to lowercase trim and so on. There's a lot of options here. Yeah. Fun fact JavaScript strings actually have a lot of features, including things that turn them into HTML or like return an HTML version of them. Huh
Fun fact. And if you do poet dot name, it'll know that name has like two uppercase to lowercase trim and so on. There's a lot of options here. Yeah. Fun fact JavaScript strings actually have a lot of features, including things that turn them into HTML or like return an HTML version of them. Huh Huh. Yeah. Interesting. Okay. Yay. Awesome. Do me another favor though. Can you right click on name online seven. And. Oh, yeah. And in the middle of that menu where it says rename symbol. Click that. And call it whatever you want something other than name. And when you're done hit enter
Huh. Yeah. Interesting. Okay. Yay. Awesome. Do me another favor though. Can you right click on name online seven. And. Oh, yeah. And in the middle of that menu where it says rename symbol. Click that. And call it whatever you want something other than name. And when you're done hit enter Oh, that was cool. Yeah. And notice it did in two places. It did it on the poet variable online three and online seven. Now I want to go try it here. Yeah, yeah, go ahead. Okay, so we don't need. Okay, that works too. Look at you being fancy. So if I could I. Yeah. Full Jen. Why is going to do it
Oh, that was cool. Yeah. And notice it did in two places. It did it on the poet variable online three and online seven. Now I want to go try it here. Yeah, yeah, go ahead. Okay, so we don't need. Okay, that works too. Look at you being fancy. So if I could I. Yeah. Full Jen. Why is going to do it I really was. But. Figure it out. Yeah. Okay. That's actually really cool. And you can't do that in JavaScript. And you can't do that in JavaScript. And you can't do that in JavaScript. The thing that lets you do that is TypeScript
I really was. But. Figure it out. Yeah. Okay. That's actually really cool. And you can't do that in JavaScript. And you can't do that in JavaScript. And you can't do that in JavaScript. The thing that lets you do that is TypeScript TypeScript reads in your TypeScript files and like understands things that understands where they're used, where they're declared. And actually you can do it in JavaScript in like editors like VS code, but it's TypeScript powering that
TypeScript reads in your TypeScript files and like understands things that understands where they're used, where they're declared. And actually you can do it in JavaScript in like editors like VS code, but it's TypeScript powering that So it's more powerful and more reliable when you do it on TypeScript files. But to a limited extent, you can do it in JavaScript. And it's exciting about TypeScript. Yeah. Yeah, I think one feature
So it's more powerful and more reliable when you do it on TypeScript files. But to a limited extent, you can do it in JavaScript. And it's exciting about TypeScript. Yeah. Yeah, I think one feature I think people oftentimes get really hooked into the like the really cool powerful things you can do in TypeScript. But the actual benefits of TypeScript that are like important and critical for day-to-day developments are that it will find your bugs for you
I think people oftentimes get really hooked into the like the really cool powerful things you can do in TypeScript. But the actual benefits of TypeScript that are like important and critical for day-to-day developments are that it will find your bugs for you It'll give you utilities and helpful suggestions when you're writing code. And it enables a lot of really powerful. So it's like a lot of programming things or refactoring code. Like I'm going to do a refactor here. You can't see it on your screen, but in mine, I just extracted two function names
It'll give you utilities and helpful suggestions when you're writing code. And it enables a lot of really powerful. So it's like a lot of programming things or refactoring code. Like I'm going to do a refactor here. You can't see it on your screen, but in mine, I just extracted two function names I think I just that TypeScript just did that for me. Like I selected the line and I selected the refactor new function and it took it in. And I think it's a really good thing to do in TypeScript. The language server, which is the tool that VS code runs, gives us all these awesome things
I think I just that TypeScript just did that for me. Like I selected the line and I selected the refactor new function and it took it in. And I think it's a really good thing to do in TypeScript. The language server, which is the tool that VS code runs, gives us all these awesome things Okay, very cool. This is exciting. I like it. Yeah, I'm glad. So. Okay. And I feel like this is. And okay. So this is to you and anyone else that builds coding books. And you can tell them how to read. And they're usually have to like read it and then do it on the computer
Okay, very cool. This is exciting. I like it. Yeah, I'm glad. So. Okay. And I feel like this is. And okay. So this is to you and anyone else that builds coding books. And you can tell them how to read. And they're usually have to like read it and then do it on the computer So not always would make sense as an audible book. But. I would really appreciate it as an audible bug because that's how I learn is to be able to like hear it. And then it helps me like say along with it. And. And I know that there are tools that you can actually like
So not always would make sense as an audible book. But. I would really appreciate it as an audible bug because that's how I learn is to be able to like hear it. And then it helps me like say along with it. And. And I know that there are tools that you can actually like on very lazy because then I have to wait for every page to go through and click it every minute
on very lazy because then I have to wait for every page to go through and click it every minute Anyway, I'm saying that in the fact that I have not read your book, even though I really want to, is there an exercise like when we get through done today that you have in the book or that you would suggest as a good practice to follow up on these. For next time. Yeah, actually, two notes on that
Anyway, I'm saying that in the fact that I have not read your book, even though I really want to, is there an exercise like when we get through done today that you have in the book or that you would suggest as a good practice to follow up on these. For next time. Yeah, actually, two notes on that One, I agree. Although I personally learn best for like log form, blog posts and docs and books. I know a lot of people are video based
One, I agree. Although I personally learn best for like log form, blog posts and docs and books. I know a lot of people are video based So if you want to like a good recommendation for someone who has like a video course, I'd say Matt Pockock, I will post that in the chat once I get my Chrome in order. There you go. This person has like really good content is like one of my favorite types of good people
So if you want to like a good recommendation for someone who has like a video course, I'd say Matt Pockock, I will post that in the chat once I get my Chrome in order. There you go. This person has like really good content is like one of my favorite types of good people Highly recommend they're awesome. So that's one thing. But yeah, I'm also a big believer in hands on learning. Like I like the log form blog post, but then I also have to do it on my own. Otherwise, it's all theory and it doesn't stick
Highly recommend they're awesome. So that's one thing. But yeah, I'm also a big believer in hands on learning. Like I like the log form blog post, but then I also have to do it on my own. Otherwise, it's all theory and it doesn't stick So every chapter in learning typescript the book ends with a note to go to learning typescript.com website and do one of the one to three practice projects on the website
So every chapter in learning typescript the book ends with a note to go to learning typescript.com website and do one of the one to three practice projects on the website I've got practice projects for every chapter on the book that exercises just what's in that chapter and maybe a little bit of what you've already learned prior to that chapter in the book
I've got practice projects for every chapter on the book that exercises just what's in that chapter and maybe a little bit of what you've already learned prior to that chapter in the book And it's all intended for people who may not have any type of experience prior to the book, but do know some foundational JavaScript. Ta-da! Yeah, that's that's the thing. That's the thing. It's actually funny enough when I was going through this like prepping for our call and stuff
And it's all intended for people who may not have any type of experience prior to the book, but do know some foundational JavaScript. Ta-da! Yeah, that's that's the thing. That's the thing. It's actually funny enough when I was going through this like prepping for our call and stuff I was like, maybe it's on Amazon or maybe Google Play will like read it to me. I was like, oh, no go yet. I am very excited about this. Yay! There are the things. All thematically terrible. I apologize in advance for the themes each chapter. No, no, I really like the themes. Yeah. No, I like these
I was like, maybe it's on Amazon or maybe Google Play will like read it to me. I was like, oh, no go yet. I am very excited about this. Yay! There are the things. All thematically terrible. I apologize in advance for the themes each chapter. No, no, I really like the themes. Yeah. No, I like these No, I like these. I really like these because I feel they're they're amusing. They are very amusing. And oh, there's a hub. Look at this
No, I like these. I really like these because I feel they're they're amusing. They are very amusing. And oh, there's a hub. Look at this Look at this. I'm also showing this as one thing that I really like about when people set up pages like this is I can still read it, you know, like it's not something that I have to get the physical book for. It's like, okay, cool
Look at this. I'm also showing this as one thing that I really like about when people set up pages like this is I can still read it, you know, like it's not something that I have to get the physical book for. It's like, okay, cool I can bend and I have looked into screen readers, which as an update, Ben, I have used my screen reader when my text to speech decides to glitch out. So thank you for showing me that. But I'm excited to go through these
I can bend and I have looked into screen readers, which as an update, Ben, I have used my screen reader when my text to speech decides to glitch out. So thank you for showing me that. But I'm excited to go through these Now, do you think we've gone through enough enough enough to cover what's in the type of a. We do. We have. I do. The type of a. There's even one type of supernatural Riponator doesn't actually introduce any typescript stuff
Now, do you think we've gone through enough enough enough to cover what's in the type of a. We do. We have. I do. The type of a. There's even one type of supernatural Riponator doesn't actually introduce any typescript stuff It just does some has your refactor things from old JavaScript to modern JavaScript in preparation for. Getting excited about what type give you. I'd say we. The first type of your project is system of a clown. One of my favorite themes, that what I believe we've pretty much. You're kind of, okay
It just does some has your refactor things from old JavaScript to modern JavaScript in preparation for. Getting excited about what type give you. I'd say we. The first type of your project is system of a clown. One of my favorite themes, that what I believe we've pretty much. You're kind of, okay like we have two options and I want to let the audience pick for us because we do have the time. Yet, should I do a video of doing this and talking us through it just like solo or should we do it now and hang out with Josh as I stumble through it? Both for stumbling through it now or video later
like we have two options and I want to let the audience pick for us because we do have the time. Yet, should I do a video of doing this and talking us through it just like solo or should we do it now and hang out with Josh as I stumble through it? Both for stumbling through it now or video later Those are your two options everybody. And Josh you can have a vote too because it is your content as well. Thank you. You read my line. All right. All right. There are enough projects that you can always stumble through one now and also stumble through one on your own later if you want. Perfect
Those are your two options everybody. And Josh you can have a vote too because it is your content as well. Thank you. You read my line. All right. All right. There are enough projects that you can always stumble through one now and also stumble through one on your own later if you want. Perfect Perfect. Okay. Cool. I like it. I think I get embarrassed and like shy about it because I'm like I just want to listen to it really quick and nobody else so I'll just go like awkwardly listen. But that's okay. It's fine. It's not very long. Do do do do do
Perfect. Okay. Cool. I like it. I think I get embarrassed and like shy about it because I'm like I just want to listen to it really quick and nobody else so I'll just go like awkwardly listen. But that's okay. It's fine. It's not very long. Do do do do do Do do do do do. So some of a clown you like? Yes I'm reading to myself because I don't want to read out loud to all of you but the link they have linked it. Thank you Josh for linking it. Oh okay. Oh look you made it so easy. I got you. Okay
Do do do do do. So some of a clown you like? Yes I'm reading to myself because I don't want to read out loud to all of you but the link they have linked it. Thank you Josh for linking it. Oh okay. Oh look you made it so easy. I got you. Okay I got you. Okay. I will say though that copy button is a UI but it should be like floating after the right and styled and I can't figure out why it's so unstyled but it still works. I'm like I thought it looked nice but you know that could be okay
I got you. Okay. I will say though that copy button is a UI but it should be like floating after the right and styled and I can't figure out why it's so unstyled but it still works. I'm like I thought it looked nice but you know that could be okay Anthony are you still here? Because I just realized I think I have everything most for the most part reinstalled on my computer but I don't know if I do. Which. Do I have no it in everything stumbled reinstalled? Did I ever do that? Like when we did
Anthony are you still here? Because I just realized I think I have everything most for the most part reinstalled on my computer but I don't know if I do. Which. Do I have no it in everything stumbled reinstalled? Did I ever do that? Like when we did So for everyone that wasn't there for this very random day I had a hard reset my laptop and Anthony and I were reinstalling stuff. Okay I'll look really great. Oh I don't have to go. The most annoying thing to have to go through and reinstall everything. My condolences
So for everyone that wasn't there for this very random day I had a hard reset my laptop and Anthony and I were reinstalling stuff. Okay I'll look really great. Oh I don't have to go. The most annoying thing to have to go through and reinstall everything. My condolences My condolences. Is this still going to work without note? Yeah yeah it should work. Yeah you'll just have to do everything through BS code but you'll get the squiggles. The red squiggly is if you mess up or you'll have the red squiggly's in places that need to be fixed. So yeah it should all work
My condolences. Is this still going to work without note? Yeah yeah it should work. Yeah you'll just have to do everything through BS code but you'll get the squiggles. The red squiggly is if you mess up or you'll have the red squiggly's in places that need to be fixed. So yeah it should all work Okay and but I can still like download it and everything right through get it get get I think so. Did it not? What? Oh I don't know if it copied and I put red no it did red squiggleification. That's unfortunate
Okay and but I can still like download it and everything right through get it get get I think so. Did it not? What? Oh I don't know if it copied and I put red no it did red squiggleification. That's unfortunate That's unfortunate. Well the first you only need to run the first two lines I guess did you just copy manually I guess that's upsetting to me. Well it it was also pasting red squiggly vacation. Yeah yeah I'm going to file a bug at my site
That's unfortunate. Well the first you only need to run the first two lines I guess did you just copy manually I guess that's upsetting to me. Well it it was also pasting red squiggly vacation. Yeah yeah I'm going to file a bug at my site See this is useful for me because now I'm just doing user research at this point. My next question is on a scale of 1 to 10 how likely you to recommend this to a friend. To everyone. Okay change your terminal directory. Totally did it wrong
See this is useful for me because now I'm just doing user research at this point. My next question is on a scale of 1 to 10 how likely you to recommend this to a friend. To everyone. Okay change your terminal directory. Totally did it wrong In the fact that I skipped a step that I thought I didn't do NPN I. You don't have to do NPN I that's okay you can just open this in BS code it should be fine
In the fact that I skipped a step that I thought I didn't do NPN I. You don't have to do NPN I that's okay you can just open this in BS code it should be fine I wouldn't worry about it too much like they would be nice to have those things running but you don't need it I can just walk you through it now. Okay so let's see if code works. All right. You're not up code? Where did my BS code go? Can I close it close it? I don't think I closed it. No
I wouldn't worry about it too much like they would be nice to have those things running but you don't need it I can just walk you through it now. Okay so let's see if code works. All right. You're not up code? Where did my BS code go? Can I close it close it? I don't think I closed it. No No. We might be back to where I was a while ago this is fun. Yeah. Okay. Yes, trust. Okay. We have the project. And do do do do do do do do do do do do do do do do do do. All right steps. No, don't import code from one step into another. Okay. So we got this here
No. We might be back to where I was a while ago this is fun. Yeah. Okay. Yes, trust. Okay. We have the project. And do do do do do do do do do do do do do do do do do do. All right steps. No, don't import code from one step into another. Okay. So we got this here And let me make these bigger and then I will everybody should have the link to follow along as well. It was scrolling to steps. That's where we're at. First area of code. It fixes the activity engine
And let me make these bigger and then I will everybody should have the link to follow along as well. It was scrolling to steps. That's where we're at. First area of code. It fixes the activity engine Repeatedly creates groups of 5 to 10 guess each group is directed in to go to an activity which can hold a certain number of them at the time it looks like the clown student changed too much on this one. They mostly just removed a few type annotations and changed one value
Repeatedly creates groups of 5 to 10 guess each group is directed in to go to an activity which can hold a certain number of them at the time it looks like the clown student changed too much on this one. They mostly just removed a few type annotations and changed one value Could you please add back missing type annotations, avoid implicit any and fix wrong value. Okay. So fix the code here and then solution code. So I need to go find the code to fix. I'm guessing is this one. Yep. Wait, wait, wait, come back. Come back. Okay. So. Okay. I don't. I don't
Could you please add back missing type annotations, avoid implicit any and fix wrong value. Okay. So fix the code here and then solution code. So I need to go find the code to fix. I'm guessing is this one. Yep. Wait, wait, wait, come back. Come back. Okay. So. Okay. I don't. I don't I don't. I don't. So yesterday was with Laura about Python and she's a previous teacher as well. And she loves to watch me struggle through these two
I don't. I don't. So yesterday was with Laura about Python and she's a previous teacher as well. And she loves to watch me struggle through these two It's my love hate relationship with teachers because of course this is what I'm going to learn, but I am definitely going to second guess myself on all of it. So what what interaction mode are you looking for here? My default is to just be quiet until you yell at me that this is not making sense
It's my love hate relationship with teachers because of course this is what I'm going to learn, but I am definitely going to second guess myself on all of it. So what what interaction mode are you looking for here? My default is to just be quiet until you yell at me that this is not making sense Would you like me to be a little more proactive and like give it? No, no, I'm also thinking that it can't be applied to types number and string which makes me think it can only be one or the other. So I'm just just going to struggle along and see what happens
Would you like me to be a little more proactive and like give it? No, no, I'm also thinking that it can't be applied to types number and string which makes me think it can only be one or the other. So I'm just just going to struggle along and see what happens Can I can I suggest going to where capacity is declared and seeing what it is? Which fun fact you can do by right clicking on it and then selecting go to definition or command clicking on your Mac. Oh, that's cool. Oh, and I can I do something string equals string
Can I can I suggest going to where capacity is declared and seeing what it is? Which fun fact you can do by right clicking on it and then selecting go to definition or command clicking on your Mac. Oh, that's cool. Oh, and I can I do something string equals string This is if you if you've gone through like mpm install, I think you would be getting you might be getting squigglys indicating yeah, these lines six through eight are where I would suggest starting. Like what what types do you think each of these variables are supposed to be? Numbers
This is if you if you've gone through like mpm install, I think you would be getting you might be getting squigglys indicating yeah, these lines six through eight are where I would suggest starting. Like what what types do you think each of these variables are supposed to be? Numbers Because we have a new new comment coming in. Uh, hi by using ts, please don't use any. Yeah, in general in types, if you don't want to use any, you want to have more specific types
Because we have a new new comment coming in. Uh, hi by using ts, please don't use any. Yeah, in general in types, if you don't want to use any, you want to have more specific types Sometimes they're like weird edge cases with wacky logic or it's hard to avoid any but for the most part, yeah, it's better to have actual types. Not the yolo. I don't know what I'm doing any type. But yeah, I like I like what you said before
Sometimes they're like weird edge cases with wacky logic or it's hard to avoid any but for the most part, yeah, it's better to have actual types. Not the yolo. I don't know what I'm doing any type. But yeah, I like I like what you said before I think capacity being a number is totally reasonable and the syntax you're looking for is colon space number saying eventually this will have a value and eventually that value will be number. Ellen? No. Yes. Yep
I think capacity being a number is totally reasonable and the syntax you're looking for is colon space number saying eventually this will have a value and eventually that value will be number. Ellen? No. Yes. Yep Yes. Yep. But you're you added a semicolon instead of a colon colon? Oh, that would help, right? Yay. Which means these need to be fixed into numbers. Mm-hmm. Do you? Yeah. Was that it? That's it. That's that's that's that's that's what you did it. Okay. Uh, exciting
Yes. Yep. But you're you added a semicolon instead of a colon colon? Oh, that would help, right? Yay. Which means these need to be fixed into numbers. Mm-hmm. Do you? Yeah. Was that it? That's it. That's that's that's that's that's what you did it. Okay. Uh, exciting Okay. Uh, exciting. Excited because this one I think would be it's dream. Yep. I don't know what the Boolean is it called Boolean? Yeah, it's Boolean. In the book, it mentions there's number string, Boolean, null undefined, uh, big int symbol. Maybe that's all of them
Okay. Uh, exciting. Excited because this one I think would be it's dream. Yep. I don't know what the Boolean is it called Boolean? Yeah, it's Boolean. In the book, it mentions there's number string, Boolean, null undefined, uh, big int symbol. Maybe that's all of them Those are the primitive types in JavaScript and that's also TypeScript. And yeah, I think that's the solution. I think it fixed the thing. Okay, let's compare. Let's oh, I can just go double click. Is that best said? Oh, yay. Oh wait, this is mine. Um, other than my semicolon, I don't know
Those are the primitive types in JavaScript and that's also TypeScript. And yeah, I think that's the solution. I think it fixed the thing. Okay, let's compare. Let's oh, I can just go double click. Is that best said? Oh, yay. Oh wait, this is mine. Um, other than my semicolon, I don't know I don't know. I struggle with my, um, that and callmas. I always struggle with it. Oh, yeah. Oh, yeah. This is exciting. Actually, can I can I suggest a really cool VS Code command? Um, I saw you know how to use a command palette
I don't know. I struggle with my, um, that and callmas. I always struggle with it. Oh, yeah. Oh, yeah. This is exciting. Actually, can I can I suggest a really cool VS Code command? Um, I saw you know how to use a command palette You did like the install code and, uh, a different command you can do from the palette is compare active file. Uh, and the third one with dot dot dot. So you're right now in index compared to solution to us. It'll show you a diff view between the two. And yep, you have no differences
You did like the install code and, uh, a different command you can do from the palette is compare active file. Uh, and the third one with dot dot dot. So you're right now in index compared to solution to us. It'll show you a diff view between the two. And yep, you have no differences This is a neat VS Code feature I learned about recently. Oh, yeah. Oh, this is fancy. This is fun. The, uh, Anthony said that there are seven, uh, primitive types, um, string number, big int, boolean undefined symbol and null
This is a neat VS Code feature I learned about recently. Oh, yeah. Oh, this is fancy. This is fun. The, uh, Anthony said that there are seven, uh, primitive types, um, string number, big int, boolean undefined symbol and null What's big int? It's like a number, but it can't be, they can't have anything like zero point whatever. It's just integers. So it's used for like math, primarily. Okay. Because Python has like, it's not loose. It's like something integer like that, but it's for numbers. Okay. Cool
What's big int? It's like a number, but it can't be, they can't have anything like zero point whatever. It's just integers. So it's used for like math, primarily. Okay. Because Python has like, it's not loose. It's like something integer like that, but it's for numbers. Okay. Cool Okay. Cool. And actually, y'all, I just want to say that I learned about, boolean yesterday while learning Python. So yes, knowing what that was, I heard of it, but never did it. All right. I'm excited about this. I feel like I can make headway on this now. And want to go
Okay. Cool. And actually, y'all, I just want to say that I learned about, boolean yesterday while learning Python. So yes, knowing what that was, I heard of it, but never did it. All right. I'm excited about this. I feel like I can make headway on this now. And want to go And want to go. Do you have the, you have the virtual version of the book, right? Like there's a, uh, um, an ebook version. Yes. Um, O'Reilly's platform has like a native ebook thing. And I want to say you can also get it as an ebook on like Amazon and good reason stuff
And want to go. Do you have the, you have the virtual version of the book, right? Like there's a, uh, um, an ebook version. Yes. Um, O'Reilly's platform has like a native ebook thing. And I want to say you can also get it as an ebook on like Amazon and good reason stuff Side note, I personally have been trying to do more independent bookstores. And it really pains me that for like mainstream programming books, like your local indie bookstores and going to have it. So if anyone knows a way to get it, that isn't through like Amazon or equivalent, please let me know
Side note, I personally have been trying to do more independent bookstores. And it really pains me that for like mainstream programming books, like your local indie bookstores and going to have it. So if anyone knows a way to get it, that isn't through like Amazon or equivalent, please let me know But uh, in the meantime, yes, Amazon or Ily, et cetera, do have ebook versions. Okay. Because then I feel like I could do the next one, possibly, we'll get, I'll struggle through it because, uh, show up and hide it in the corner stores. There he goes. I don't see
But uh, in the meantime, yes, Amazon or Ily, et cetera, do have ebook versions. Okay. Because then I feel like I could do the next one, possibly, we'll get, I'll struggle through it because, uh, show up and hide it in the corner stores. There he goes. I don't see I don't see. Yeah, I don't see a lot of bookstores that have as you're, as you're saying, like a lot of like technical books, they normally have everything else. Yeah. I can't blame them. Like the cycle of books is pretty rapid
I don't see. Yeah, I don't see a lot of bookstores that have as you're, as you're saying, like a lot of like technical books, they normally have everything else. Yeah. I can't blame them. Like the cycle of books is pretty rapid Like in two years, this book will either be out of date or need to have like a second edition. There was already a new types of feature coming out. The satisfies keyword. That's like something I would absolutely put in the book if this book had come out before or after that feature. So okay
Like in two years, this book will either be out of date or need to have like a second edition. There was already a new types of feature coming out. The satisfies keyword. That's like something I would absolutely put in the book if this book had come out before or after that feature. So okay So okay. Yeah, software. Yeah, and I have my homework and I can't say that I exactly understand typescript in the fact of like what are all the differences, but I at least see some cool features and have some exercises to work through and learn from. So thank you. I appreciate that
So okay. Yeah, software. Yeah, and I have my homework and I can't say that I exactly understand typescript in the fact of like what are all the differences, but I at least see some cool features and have some exercises to work through and learn from. So thank you. I appreciate that I appreciate that. That is a big step in the right direction. Oh, we got typescript issues. That's the new satisfies keyword. That's going to be in the next version of typescript. They just released a data slash release candidate for it. So noise. And thank you, Anthony, for posting it
I appreciate that. That is a big step in the right direction. Oh, we got typescript issues. That's the new satisfies keyword. That's going to be in the next version of typescript. They just released a data slash release candidate for it. So noise. And thank you, Anthony, for posting it So that way everyone has a notes what's going on. And I think I'm good for today. Was there anything else you wanted to cover before we start wrapping up? No, I feel good about this. We've been on almost exactly one hour
So that way everyone has a notes what's going on. And I think I'm good for today. Was there anything else you wanted to cover before we start wrapping up? No, I feel good about this. We've been on almost exactly one hour I think to what I normally do is I'll end with my summary and then also suggest that you you rephrase it in the way that your personal brain works. So my summary of typescript is that there are three main things we looked at
I think to what I normally do is I'll end with my summary and then also suggest that you you rephrase it in the way that your personal brain works. So my summary of typescript is that there are three main things we looked at We saw that typescript files get turned into JavaScript files, which are almost the same. Any like typescript specific syntax gets removed, but otherwise they're the same. The second is that typescript looks at your code and understands what types the values are supposed to be
We saw that typescript files get turned into JavaScript files, which are almost the same. Any like typescript specific syntax gets removed, but otherwise they're the same. The second is that typescript looks at your code and understands what types the values are supposed to be So if you say make a variable and then later on assign a different type of value, number and set a string, typescript will yell at you
So if you say make a variable and then later on assign a different type of value, number and set a string, typescript will yell at you And that's really useful because if you have a function that took in one parameter and then you refactor it to take in two parameters, typescript will yell at you to fix all the places I call it
And that's really useful because if you have a function that took in one parameter and then you refactor it to take in two parameters, typescript will yell at you to fix all the places I call it And then the third thing is that typescript has nice dev tooling, things like rename and refactor that it can do for you because it knows the types of all your values and code. So that all kind of makes sense and seem reasonable so far
And then the third thing is that typescript has nice dev tooling, things like rename and refactor that it can do for you because it knows the types of all your values and code. So that all kind of makes sense and seem reasonable so far Yes, I will say for the first one, I logically get what you're saying about that typecript goes to JavaScript and translates, it makes sense yet isn't completely computing as like examples in my head. I'm not there. And then for the second one, that was the values are being able to rename things
Yes, I will say for the first one, I logically get what you're saying about that typecript goes to JavaScript and translates, it makes sense yet isn't completely computing as like examples in my head. I'm not there. And then for the second one, that was the values are being able to rename things What was it? Third one was naming second one was oh yeah, it'll yell at you if you mismatch. Yes, I like that. That one I thought was a great example of showing how it will yell at you if you mismatch
What was it? Third one was naming second one was oh yeah, it'll yell at you if you mismatch. Yes, I like that. That one I thought was a great example of showing how it will yell at you if you mismatch And then so that actually worked out with the exercise of being able to see where it's going to yell at you and also going to the original one. And then third is the renaming part. And I thought that was really cool
And then so that actually worked out with the exercise of being able to see where it's going to yell at you and also going to the original one. And then third is the renaming part. And I thought that was really cool That's just a fun feature that I'm like, cool, if I decide I want to rename all of them at once. I did it. I did it. And how we know how people can follow you. We've got those linked and go get the book linked up above
That's just a fun feature that I'm like, cool, if I decide I want to rename all of them at once. I did it. I did it. And how we know how people can follow you. We've got those linked and go get the book linked up above But how do you like all of us help you in your open-sourceness? Appreciate you asking that. Thank you. I'm just typing into the chat the three things because I'm already forgetting what they were in order
But how do you like all of us help you in your open-sourceness? Appreciate you asking that. Thank you. I'm just typing into the chat the three things because I'm already forgetting what they were in order So we have one super set, two red squagulification shout out again, Ben who's left for that term. And three is definitely true as we factory such as renames and extracting functions. Cool. Yay. Folks can sponsor me on GitHub. I'm GitHub.com slash sponsors slash Joshua K Goldberg
So we have one super set, two red squagulification shout out again, Ben who's left for that term. And three is definitely true as we factory such as renames and extracting functions. Cool. Yay. Folks can sponsor me on GitHub. I'm GitHub.com slash sponsors slash Joshua K Goldberg You can also sponsor TypeScript ESLINTS, which some of that goes to me, some of it goes to my fellow open-source maintainers. TypeScript ESLINTS is the tooling that lets you run ESLINTS, the standard JavaScript winter on TypeScript code
You can also sponsor TypeScript ESLINTS, which some of that goes to me, some of it goes to my fellow open-source maintainers. TypeScript ESLINTS is the tooling that lets you run ESLINTS, the standard JavaScript winter on TypeScript code So TypeScript comes with a lot of really good checks, but it doesn't say let you define a custom rule that yells at you if you use a deprecated API for anything like that. That would be what a winter does
So TypeScript comes with a lot of really good checks, but it doesn't say let you define a custom rule that yells at you if you use a deprecated API for anything like that. That would be what a winter does Lastly, I'm also on Twitch and I'm actually streaming in an hour and a half, a little bit less, a little bit today. So I'm Joshua K Goldberg on Twitch, GitHub Twitter, you can follow, like, subscribe, whatever in all of those places. Do it. Do it. Subscribe to all the channels
Lastly, I'm also on Twitch and I'm actually streaming in an hour and a half, a little bit less, a little bit today. So I'm Joshua K Goldberg on Twitch, GitHub Twitter, you can follow, like, subscribe, whatever in all of those places. Do it. Do it. Subscribe to all the channels Spread your heads channels. Subscribe to my channels. Grab to them all. If only we could. Right. I would totally dig it. Awesome. And I've already talked to Josh. Try to convince him. Come back again. Teach us all the things. Teach us all the things
Spread your heads channels. Subscribe to my channels. Grab to them all. If only we could. Right. I would totally dig it. Awesome. And I've already talked to Josh. Try to convince him. Come back again. Teach us all the things. Teach us all the things I'm also excited to start working through the book too. So, and yeah, I think that is it. Make sure to thank you for Anthony for putting up his Twitch. I always just figure people would just click on your bubble. I don't know if that's like a thing
I'm also excited to start working through the book too. So, and yeah, I think that is it. Make sure to thank you for Anthony for putting up his Twitch. I always just figure people would just click on your bubble. I don't know if that's like a thing If people click on people's bubble to like go see what they're up to. I do. But yeah, thanks Anthony. Appreciate it. I forgot to. Yes. Agreed. Agreed. And yes. So I will see all of you that want to are going to the Twitter space tomorrow for mental health and neurodiversity and tech
If people click on people's bubble to like go see what they're up to. I do. But yeah, thanks Anthony. Appreciate it. I forgot to. Yes. Agreed. Agreed. And yes. So I will see all of you that want to are going to the Twitter space tomorrow for mental health and neurodiversity and tech Same time just tomorrow on Twitter. And last but not least, see you on Thursday. We are going through cool stuff that I don't remember. But I will be back on Thursday. So thank you everyone. Bye.
Same time just tomorrow on Twitter. And last but not least, see you on Thursday. We are going through cool stuff that I don't remember. But I will be back on Thursday. So thank you everyone. Bye.